package kotlin.text;

import ..;
import com.jingdong.common.apkcenter.ApkDownloadTable;
import com.jingdong.common.entity.personal.PersonalConstants;
import com.jingdong.common.unification.navigationbar.db.NavigationDbConstants;
import com.jingdong.jdsdk.a.a;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import kotlin.ExperimentalStdlibApi;
import kotlin.Metadata;
import kotlin.Pair;
import kotlin.SinceKotlin;
import kotlin.TuplesKt;
import kotlin.TypeCastException;
import kotlin.Unit;
import kotlin.collections.CharIterator;
import kotlin.collections.CollectionsKt__CollectionsJVMKt;
import kotlin.collections.CollectionsKt__CollectionsKt;
import kotlin.collections.CollectionsKt__IterablesKt;
import kotlin.collections.CollectionsKt__MutableCollectionsKt;
import kotlin.collections.CollectionsKt___CollectionsKt;
import kotlin.collections.Grouping;
import kotlin.collections.IndexedValue;
import kotlin.collections.IndexingIterable;
import kotlin.collections.MapsKt__MapsJVMKt;
import kotlin.collections.SetsKt__SetsJVMKt;
import kotlin.collections.SetsKt__SetsKt;
import kotlin.collections.SlidingWindowKt;
import kotlin.internal.InlineOnly;
import kotlin.jvm.functions.Function0;
import kotlin.jvm.functions.Function1;
import kotlin.jvm.functions.Function2;
import kotlin.jvm.functions.Function3;
import kotlin.jvm.internal.Intrinsics;
import kotlin.random.Random;
import kotlin.ranges.IntProgression;
import kotlin.ranges.RangesKt___RangesKt;
import kotlin.sequences.Sequence;
import kotlin.sequences.SequencesKt__SequencesKt;
import kotlin.sequences.SequencesKt___SequencesKt;
import org.apache.commons.codec.language.bm.Languages;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

/* JADX INFO: Access modifiers changed from: package-private */
@Metadata(bv = {1, 0, 3}, d1 = {"\u0000\u00e2\u0001\n\u0002\u0010\r\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\u0010\f\n\u0002\b\u0005\n\u0002\u0010\u000b\n\u0002\b\u0011\n\u0002\u0018\u0002\n\u0002\b\b\n\u0002\u0010\u000e\n\u0002\b\u0007\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\b\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\u001c\n\u0002\b\u000b\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\b\u0006\n\u0002\u0010%\n\u0002\b\b\n\u0002\u0010\u001f\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010 \n\u0002\b\u0002\n\u0002\u0010!\n\u0000\n\u0002\u0010\"\n\u0002\b\t\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u0000\n\u0002\b\u0007\n\u0002\u0018\u0002\n\u0002\b\r\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\u0002\n\u0002\b\u0006\n\u0002\u0010\u000f\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u001a\n\u0002\u0010\u0006\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0002\b\u0019\u001a0\u0010\u0006\u001a\u00020\u0004*\u00020\u00002\u0006\u0010\u0002\u001a\u00020\u00012\u0012\u0010\u0005\u001a\u000e\u0012\u0004\u0012\u00020\u0001\u0012\u0004\u0012\u00020\u00040\u0003H\u0087\b\u00a2\u0006\u0004\b\u0006\u0010\u0007\u001a\u001e\u0010\b\u001a\u0004\u0018\u00010\u0004*\u00020\u00002\u0006\u0010\u0002\u001a\u00020\u0001H\u0087\b\u00a2\u0006\u0004\b\b\u0010\t\u001a*\u0010\f\u001a\u0004\u0018\u00010\u0004*\u00020\u00002\u0012\u0010\u000b\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\n0\u0003H\u0087\b\u00a2\u0006\u0004\b\f\u0010\r\u001a*\u0010\u000e\u001a\u0004\u0018\u00010\u0004*\u00020\u00002\u0012\u0010\u000b\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\n0\u0003H\u0087\b\u00a2\u0006\u0004\b\u000e\u0010\r\u001a\u0011\u0010\u000f\u001a\u00020\u0004*\u00020\u0000\u00a2\u0006\u0004\b\u000f\u0010\u0010\u001a(\u0010\u000f\u001a\u00020\u0004*\u00020\u00002\u0012\u0010\u000b\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\n0\u0003H\u0086\b\u00a2\u0006\u0004\b\u000f\u0010\u0011\u001a\u0013\u0010\u0012\u001a\u0004\u0018\u00010\u0004*\u00020\u0000\u00a2\u0006\u0004\b\u0012\u0010\u0013\u001a*\u0010\u0012\u001a\u0004\u0018\u00010\u0004*\u00020\u00002\u0012\u0010\u000b\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\n0\u0003H\u0086\b\u00a2\u0006\u0004\b\u0012\u0010\r\u001a0\u0010\u0014\u001a\u00020\u0004*\u00020\u00002\u0006\u0010\u0002\u001a\u00020\u00012\u0012\u0010\u0005\u001a\u000e\u0012\u0004\u0012\u00020\u0001\u0012\u0004\u0012\u00020\u00040\u0003H\u0087\b\u00a2\u0006\u0004\b\u0014\u0010\u0007\u001a\u001b\u0010\u0015\u001a\u0004\u0018\u00010\u0004*\u00020\u00002\u0006\u0010\u0002\u001a\u00020\u0001\u00a2\u0006\u0004\b\u0015\u0010\t\u001a(\u0010\u0016\u001a\u00020\u0001*\u00020\u00002\u0012\u0010\u000b\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\n0\u0003H\u0086\b\u00a2\u0006\u0004\b\u0016\u0010\u0017\u001a(\u0010\u0018\u001a\u00020\u0001*\u00020\u00002\u0012\u0010\u000b\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\n0\u0003H\u0086\b\u00a2\u0006\u0004\b\u0018\u0010\u0017\u001a\u0011\u0010\u0019\u001a\u00020\u0004*\u00020\u0000\u00a2\u0006\u0004\b\u0019\u0010\u0010\u001a(\u0010\u0019\u001a\u00020\u0004*\u00020\u00002\u0012\u0010\u000b\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\n0\u0003H\u0086\b\u00a2\u0006\u0004\b\u0019\u0010\u0011\u001a\u0013\u0010\u001a\u001a\u0004\u0018\u00010\u0004*\u00020\u0000\u00a2\u0006\u0004\b\u001a\u0010\u0013\u001a*\u0010\u001a\u001a\u0004\u0018\u00010\u0004*\u00020\u00002\u0012\u0010\u000b\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\n0\u0003H\u0086\b\u00a2\u0006\u0004\b\u001a\u0010\r\u001a\u0014\u0010\u001b\u001a\u00020\u0004*\u00020\u0000H\u0087\b\u00a2\u0006\u0004\b\u001b\u0010\u0010\u001a\u001b\u0010\u001b\u001a\u00020\u0004*\u00020\u00002\u0006\u0010\u001b\u001a\u00020\u001cH\u0007\u00a2\u0006\u0004\b\u001b\u0010\u001d\u001a\u0016\u0010\u001e\u001a\u0004\u0018\u00010\u0004*\u00020\u0000H\u0087\b\u00a2\u0006\u0004\b\u001e\u0010\u0013\u001a\u001d\u0010\u001e\u001a\u0004\u0018\u00010\u0004*\u00020\u00002\u0006\u0010\u001b\u001a\u00020\u001cH\u0007\u00a2\u0006\u0004\b\u001e\u0010\u001f\u001a\u0011\u0010 \u001a\u00020\u0004*\u00020\u0000\u00a2\u0006\u0004\b \u0010\u0010\u001a(\u0010 \u001a\u00020\u0004*\u00020\u00002\u0012\u0010\u000b\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\n0\u0003H\u0086\b\u00a2\u0006\u0004\b \u0010\u0011\u001a\u0013\u0010!\u001a\u0004\u0018\u00010\u0004*\u00020\u0000\u00a2\u0006\u0004\b!\u0010\u0013\u001a*\u0010!\u001a\u0004\u0018\u00010\u0004*\u00020\u00002\u0012\u0010\u000b\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\n0\u0003H\u0086\b\u00a2\u0006\u0004\b!\u0010\r\u001a\u0019\u0010#\u001a\u00020\u0000*\u00020\u00002\u0006\u0010\"\u001a\u00020\u0001\u00a2\u0006\u0004\b#\u0010$\u001a\u0019\u0010#\u001a\u00020%*\u00020%2\u0006\u0010\"\u001a\u00020\u0001\u00a2\u0006\u0004\b#\u0010&\u001a\u0019\u0010'\u001a\u00020\u0000*\u00020\u00002\u0006\u0010\"\u001a\u00020\u0001\u00a2\u0006\u0004\b'\u0010$\u001a\u0019\u0010'\u001a\u00020%*\u00020%2\u0006\u0010\"\u001a\u00020\u0001\u00a2\u0006\u0004\b'\u0010&\u001a(\u0010(\u001a\u00020\u0000*\u00020\u00002\u0012\u0010\u000b\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\n0\u0003H\u0086\b\u00a2\u0006\u0004\b(\u0010)\u001a(\u0010(\u001a\u00020%*\u00020%2\u0012\u0010\u000b\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\n0\u0003H\u0086\b\u00a2\u0006\u0004\b(\u0010*\u001a(\u0010+\u001a\u00020\u0000*\u00020\u00002\u0012\u0010\u000b\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\n0\u0003H\u0086\b\u00a2\u0006\u0004\b+\u0010)\u001a(\u0010+\u001a\u00020%*\u00020%2\u0012\u0010\u000b\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\n0\u0003H\u0086\b\u00a2\u0006\u0004\b+\u0010*\u001a(\u0010,\u001a\u00020\u0000*\u00020\u00002\u0012\u0010\u000b\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\n0\u0003H\u0086\b\u00a2\u0006\u0004\b,\u0010)\u001a(\u0010,\u001a\u00020%*\u00020%2\u0012\u0010\u000b\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\n0\u0003H\u0086\b\u00a2\u0006\u0004\b,\u0010*\u001a=\u00100\u001a\u00020\u0000*\u00020\u00002'\u0010\u000b\u001a#\u0012\u0013\u0012\u00110\u0001\u00a2\u0006\f\b.\u0012\b\b/\u0012\u0004\b\b(\u0002\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\n0-H\u0086\b\u00a2\u0006\u0004\b0\u00101\u001a=\u00100\u001a\u00020%*\u00020%2'\u0010\u000b\u001a#\u0012\u0013\u0012\u00110\u0001\u00a2\u0006\f\b.\u0012\b\b/\u0012\u0004\b\b(\u0002\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\n0-H\u0086\b\u00a2\u0006\u0004\b0\u00102\u001aS\u00107\u001a\u00028\u0000\"\f\b\u0000\u00105*\u000603j\u0002`4*\u00020\u00002\u0006\u00106\u001a\u00028\u00002'\u0010\u000b\u001a#\u0012\u0013\u0012\u00110\u0001\u00a2\u0006\f\b.\u0012\b\b/\u0012\u0004\b\b(\u0002\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\n0-H\u0086\b\u00a2\u0006\u0004\b7\u00108\u001a(\u00109\u001a\u00020\u0000*\u00020\u00002\u0012\u0010\u000b\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\n0\u0003H\u0086\b\u00a2\u0006\u0004\b9\u0010)\u001a(\u00109\u001a\u00020%*\u00020%2\u0012\u0010\u000b\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\n0\u0003H\u0086\b\u00a2\u0006\u0004\b9\u0010*\u001a>\u0010:\u001a\u00028\u0000\"\f\b\u0000\u00105*\u000603j\u0002`4*\u00020\u00002\u0006\u00106\u001a\u00028\u00002\u0012\u0010\u000b\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\n0\u0003H\u0086\b\u00a2\u0006\u0004\b:\u0010;\u001a>\u0010<\u001a\u00028\u0000\"\f\b\u0000\u00105*\u000603j\u0002`4*\u00020\u00002\u0006\u00106\u001a\u00028\u00002\u0012\u0010\u000b\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\n0\u0003H\u0086\b\u00a2\u0006\u0004\b<\u0010;\u001a\u0019\u0010?\u001a\u00020\u0000*\u00020\u00002\u0006\u0010>\u001a\u00020=\u00a2\u0006\u0004\b?\u0010@\u001a\u0019\u0010?\u001a\u00020%*\u00020%2\u0006\u0010>\u001a\u00020=\u00a2\u0006\u0004\b?\u0010A\u001a\u001f\u0010?\u001a\u00020\u0000*\u00020\u00002\f\u0010>\u001a\b\u0012\u0004\u0012\u00020\u00010B\u00a2\u0006\u0004\b?\u0010C\u001a\"\u0010?\u001a\u00020%*\u00020%2\f\u0010>\u001a\b\u0012\u0004\u0012\u00020\u00010BH\u0087\b\u00a2\u0006\u0004\b?\u0010D\u001a\u0019\u0010E\u001a\u00020\u0000*\u00020\u00002\u0006\u0010\"\u001a\u00020\u0001\u00a2\u0006\u0004\bE\u0010$\u001a\u0019\u0010E\u001a\u00020%*\u00020%2\u0006\u0010\"\u001a\u00020\u0001\u00a2\u0006\u0004\bE\u0010&\u001a\u0019\u0010F\u001a\u00020\u0000*\u00020\u00002\u0006\u0010\"\u001a\u00020\u0001\u00a2\u0006\u0004\bF\u0010$\u001a\u0019\u0010F\u001a\u00020%*\u00020%2\u0006\u0010\"\u001a\u00020\u0001\u00a2\u0006\u0004\bF\u0010&\u001a(\u0010G\u001a\u00020\u0000*\u00020\u00002\u0012\u0010\u000b\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\n0\u0003H\u0086\b\u00a2\u0006\u0004\bG\u0010)\u001a(\u0010G\u001a\u00020%*\u00020%2\u0012\u0010\u000b\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\n0\u0003H\u0086\b\u00a2\u0006\u0004\bG\u0010*\u001a(\u0010H\u001a\u00020\u0000*\u00020\u00002\u0012\u0010\u000b\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\n0\u0003H\u0086\b\u00a2\u0006\u0004\bH\u0010)\u001a(\u0010H\u001a\u00020%*\u00020%2\u0012\u0010\u000b\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\n0\u0003H\u0086\b\u00a2\u0006\u0004\bH\u0010*\u001a\u0011\u0010I\u001a\u00020\u0000*\u00020\u0000\u00a2\u0006\u0004\bI\u0010J\u001a\u0014\u0010I\u001a\u00020%*\u00020%H\u0087\b\u00a2\u0006\u0004\bI\u0010K\u001aL\u0010Q\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010P\"\u0004\b\u0000\u0010L\"\u0004\b\u0001\u0010M*\u00020\u00002\u001e\u0010O\u001a\u001a\u0012\u0004\u0012\u00020\u0004\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010N0\u0003H\u0086\b\u00a2\u0006\u0004\bQ\u0010R\u001a:\u0010T\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040P\"\u0004\b\u0000\u0010L*\u00020\u00002\u0012\u0010S\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00028\u00000\u0003H\u0086\b\u00a2\u0006\u0004\bT\u0010R\u001aT\u0010T\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010P\"\u0004\b\u0000\u0010L\"\u0004\b\u0001\u0010M*\u00020\u00002\u0012\u0010S\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00028\u00000\u00032\u0012\u0010U\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00028\u00010\u0003H\u0086\b\u00a2\u0006\u0004\bT\u0010V\u001aP\u0010Y\u001a\u00028\u0001\"\u0004\b\u0000\u0010L\"\u0018\b\u0001\u0010X*\u0012\u0012\u0006\b\u0000\u0012\u00028\u0000\u0012\u0006\b\u0000\u0012\u00020\u00040W*\u00020\u00002\u0006\u00106\u001a\u00028\u00012\u0012\u0010S\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00028\u00000\u0003H\u0086\b\u00a2\u0006\u0004\bY\u0010Z\u001aj\u0010Y\u001a\u00028\u0002\"\u0004\b\u0000\u0010L\"\u0004\b\u0001\u0010M\"\u0018\b\u0002\u0010X*\u0012\u0012\u0006\b\u0000\u0012\u00028\u0000\u0012\u0006\b\u0000\u0012\u00028\u00010W*\u00020\u00002\u0006\u00106\u001a\u00028\u00022\u0012\u0010S\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00028\u00000\u00032\u0012\u0010U\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00028\u00010\u0003H\u0086\b\u00a2\u0006\u0004\bY\u0010[\u001ab\u0010\\\u001a\u00028\u0002\"\u0004\b\u0000\u0010L\"\u0004\b\u0001\u0010M\"\u0018\b\u0002\u0010X*\u0012\u0012\u0006\b\u0000\u0012\u00028\u0000\u0012\u0006\b\u0000\u0012\u00028\u00010W*\u00020\u00002\u0006\u00106\u001a\u00028\u00022\u001e\u0010O\u001a\u001a\u0012\u0004\u0012\u00020\u0004\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010N0\u0003H\u0086\b\u00a2\u0006\u0004\b\\\u0010Z\u001a:\u0010^\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00028\u00000P\"\u0004\b\u0000\u0010M*\u00020\u00002\u0012\u0010]\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00028\u00000\u0003H\u0087\b\u00a2\u0006\u0004\b^\u0010R\u001aP\u0010_\u001a\u00028\u0001\"\u0004\b\u0000\u0010M\"\u0018\b\u0001\u0010X*\u0012\u0012\u0006\b\u0000\u0012\u00020\u0004\u0012\u0006\b\u0000\u0012\u00028\u00000W*\u00020\u00002\u0006\u00106\u001a\u00028\u00012\u0012\u0010]\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00028\u00000\u0003H\u0087\b\u00a2\u0006\u0004\b_\u0010Z\u001a+\u0010a\u001a\u00028\u0000\"\u0010\b\u0000\u00105*\n\u0012\u0006\b\u0000\u0012\u00020\u00040`*\u00020\u00002\u0006\u00106\u001a\u00028\u0000\u00a2\u0006\u0004\ba\u0010b\u001a!\u0010e\u001a\u0012\u0012\u0004\u0012\u00020\u00040cj\b\u0012\u0004\u0012\u00020\u0004`d*\u00020\u0000\u00a2\u0006\u0004\be\u0010f\u001a\u0017\u0010h\u001a\b\u0012\u0004\u0012\u00020\u00040g*\u00020\u0000\u00a2\u0006\u0004\bh\u0010i\u001a\u0017\u0010k\u001a\b\u0012\u0004\u0012\u00020\u00040j*\u00020\u0000\u00a2\u0006\u0004\bk\u0010i\u001a\u0017\u0010m\u001a\b\u0012\u0004\u0012\u00020\u00040l*\u00020\u0000\u00a2\u0006\u0004\bm\u0010n\u001a:\u0010p\u001a\b\u0012\u0004\u0012\u00028\u00000g\"\u0004\b\u0000\u0010o*\u00020\u00002\u0018\u0010O\u001a\u0014\u0012\u0004\u0012\u00020\u0004\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00000B0\u0003H\u0086\b\u00a2\u0006\u0004\bp\u0010q\u001aN\u0010r\u001a\u00028\u0001\"\u0004\b\u0000\u0010o\"\u0010\b\u0001\u00105*\n\u0012\u0006\b\u0000\u0012\u00028\u00000`*\u00020\u00002\u0006\u00106\u001a\u00028\u00012\u0018\u0010O\u001a\u0014\u0012\u0004\u0012\u00020\u0004\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00000B0\u0003H\u0086\b\u00a2\u0006\u0004\br\u0010s\u001a@\u0010t\u001a\u0014\u0012\u0004\u0012\u00028\u0000\u0012\n\u0012\b\u0012\u0004\u0012\u00020\u00040g0P\"\u0004\b\u0000\u0010L*\u00020\u00002\u0012\u0010S\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00028\u00000\u0003H\u0086\b\u00a2\u0006\u0004\bt\u0010R\u001aZ\u0010t\u001a\u0014\u0012\u0004\u0012\u00028\u0000\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00010g0P\"\u0004\b\u0000\u0010L\"\u0004\b\u0001\u0010M*\u00020\u00002\u0012\u0010S\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00028\u00000\u00032\u0012\u0010U\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00028\u00010\u0003H\u0086\b\u00a2\u0006\u0004\bt\u0010V\u001aT\u0010u\u001a\u00028\u0001\"\u0004\b\u0000\u0010L\"\u001c\b\u0001\u0010X*\u0016\u0012\u0006\b\u0000\u0012\u00028\u0000\u0012\n\u0012\b\u0012\u0004\u0012\u00020\u00040j0W*\u00020\u00002\u0006\u00106\u001a\u00028\u00012\u0012\u0010S\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00028\u00000\u0003H\u0086\b\u00a2\u0006\u0004\bu\u0010Z\u001an\u0010u\u001a\u00028\u0002\"\u0004\b\u0000\u0010L\"\u0004\b\u0001\u0010M\"\u001c\b\u0002\u0010X*\u0016\u0012\u0006\b\u0000\u0012\u00028\u0000\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00010j0W*\u00020\u00002\u0006\u00106\u001a\u00028\u00022\u0012\u0010S\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00028\u00000\u00032\u0012\u0010U\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00028\u00010\u0003H\u0086\b\u00a2\u0006\u0004\bu\u0010[\u001a<\u0010w\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00028\u00000v\"\u0004\b\u0000\u0010L*\u00020\u00002\u0014\b\u0004\u0010S\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00028\u00000\u0003H\u0087\b\u00a2\u0006\u0004\bw\u0010x\u001a4\u0010y\u001a\b\u0012\u0004\u0012\u00028\u00000g\"\u0004\b\u0000\u0010o*\u00020\u00002\u0012\u0010O\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00028\u00000\u0003H\u0086\b\u00a2\u0006\u0004\by\u0010q\u001aI\u0010z\u001a\b\u0012\u0004\u0012\u00028\u00000g\"\u0004\b\u0000\u0010o*\u00020\u00002'\u0010O\u001a#\u0012\u0013\u0012\u00110\u0001\u00a2\u0006\f\b.\u0012\b\b/\u0012\u0004\b\b(\u0002\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0004\bz\u0010{\u001aO\u0010}\u001a\b\u0012\u0004\u0012\u00028\u00000g\"\b\b\u0000\u0010o*\u00020|*\u00020\u00002)\u0010O\u001a%\u0012\u0013\u0012\u00110\u0001\u00a2\u0006\f\b.\u0012\b\b/\u0012\u0004\b\b(\u0002\u0012\u0004\u0012\u00020\u0004\u0012\u0006\u0012\u0004\u0018\u00018\u00000-H\u0086\b\u00a2\u0006\u0004\b}\u0010{\u001ac\u0010~\u001a\u00028\u0001\"\b\b\u0000\u0010o*\u00020|\"\u0010\b\u0001\u00105*\n\u0012\u0006\b\u0000\u0012\u00028\u00000`*\u00020\u00002\u0006\u00106\u001a\u00028\u00012)\u0010O\u001a%\u0012\u0013\u0012\u00110\u0001\u00a2\u0006\f\b.\u0012\b\b/\u0012\u0004\b\b(\u0002\u0012\u0004\u0012\u00020\u0004\u0012\u0006\u0012\u0004\u0018\u00018\u00000-H\u0086\b\u00a2\u0006\u0004\b~\u0010\u007f\u001a_\u0010\u0080\u0001\u001a\u00028\u0001\"\u0004\b\u0000\u0010o\"\u0010\b\u0001\u00105*\n\u0012\u0006\b\u0000\u0012\u00028\u00000`*\u00020\u00002\u0006\u00106\u001a\u00028\u00012'\u0010O\u001a#\u0012\u0013\u0012\u00110\u0001\u00a2\u0006\f\b.\u0012\b\b/\u0012\u0004\b\b(\u0002\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0005\b\u0080\u0001\u0010\u007f\u001a<\u0010\u0081\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000g\"\b\b\u0000\u0010o*\u00020|*\u00020\u00002\u0014\u0010O\u001a\u0010\u0012\u0004\u0012\u00020\u0004\u0012\u0006\u0012\u0004\u0018\u00018\u00000\u0003H\u0086\b\u00a2\u0006\u0005\b\u0081\u0001\u0010q\u001aP\u0010\u0082\u0001\u001a\u00028\u0001\"\b\b\u0000\u0010o*\u00020|\"\u0010\b\u0001\u00105*\n\u0012\u0006\b\u0000\u0012\u00028\u00000`*\u00020\u00002\u0006\u00106\u001a\u00028\u00012\u0014\u0010O\u001a\u0010\u0012\u0004\u0012\u00020\u0004\u0012\u0006\u0012\u0004\u0018\u00018\u00000\u0003H\u0086\b\u00a2\u0006\u0005\b\u0082\u0001\u0010s\u001aJ\u0010\u0083\u0001\u001a\u00028\u0001\"\u0004\b\u0000\u0010o\"\u0010\b\u0001\u00105*\n\u0012\u0006\b\u0000\u0012\u00028\u00000`*\u00020\u00002\u0006\u00106\u001a\u00028\u00012\u0012\u0010O\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00028\u00000\u0003H\u0086\b\u00a2\u0006\u0005\b\u0083\u0001\u0010s\u001a!\u0010\u0085\u0001\u001a\u000f\u0012\u000b\u0012\t\u0012\u0004\u0012\u00020\u00040\u0084\u00010B*\u00020\u0000\u00a2\u0006\u0006\b\u0085\u0001\u0010\u0086\u0001\u001a+\u0010\u0087\u0001\u001a\u00020\n*\u00020\u00002\u0012\u0010\u000b\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\n0\u0003H\u0086\b\u00a2\u0006\u0006\b\u0087\u0001\u0010\u0088\u0001\u001a\u0014\u0010\u0089\u0001\u001a\u00020\n*\u00020\u0000\u00a2\u0006\u0006\b\u0089\u0001\u0010\u008a\u0001\u001a+\u0010\u0089\u0001\u001a\u00020\n*\u00020\u00002\u0012\u0010\u000b\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\n0\u0003H\u0086\b\u00a2\u0006\u0006\b\u0089\u0001\u0010\u0088\u0001\u001a\u0017\u0010\u008b\u0001\u001a\u00020\u0001*\u00020\u0000H\u0087\b\u00a2\u0006\u0006\b\u008b\u0001\u0010\u008c\u0001\u001a*\u0010\u008b\u0001\u001a\u00020\u0001*\u00020\u00002\u0012\u0010\u000b\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\n0\u0003H\u0086\b\u00a2\u0006\u0005\b\u008b\u0001\u0010\u0017\u001aQ\u0010\u0090\u0001\u001a\u00028\u0000\"\u0004\b\u0000\u0010o*\u00020\u00002\u0007\u0010\u008d\u0001\u001a\u00028\u00002)\u0010\u008f\u0001\u001a$\u0012\u0014\u0012\u00128\u0000\u00a2\u0006\r\b.\u0012\t\b/\u0012\u0005\b\b(\u008e\u0001\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u0090\u0001\u0010\u0091\u0001\u001ag\u0010\u0093\u0001\u001a\u00028\u0000\"\u0004\b\u0000\u0010o*\u00020\u00002\u0007\u0010\u008d\u0001\u001a\u00028\u00002?\u0010\u008f\u0001\u001a:\u0012\u0013\u0012\u00110\u0001\u00a2\u0006\f\b.\u0012\b\b/\u0012\u0004\b\b(\u0002\u0012\u0014\u0012\u00128\u0000\u00a2\u0006\r\b.\u0012\t\b/\u0012\u0005\b\b(\u008e\u0001\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00028\u00000\u0092\u0001H\u0086\b\u00a2\u0006\u0006\b\u0093\u0001\u0010\u0094\u0001\u001aQ\u0010\u0095\u0001\u001a\u00028\u0000\"\u0004\b\u0000\u0010o*\u00020\u00002\u0007\u0010\u008d\u0001\u001a\u00028\u00002)\u0010\u008f\u0001\u001a$\u0012\u0004\u0012\u00020\u0004\u0012\u0014\u0012\u00128\u0000\u00a2\u0006\r\b.\u0012\t\b/\u0012\u0005\b\b(\u008e\u0001\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u0095\u0001\u0010\u0091\u0001\u001ag\u0010\u0096\u0001\u001a\u00028\u0000\"\u0004\b\u0000\u0010o*\u00020\u00002\u0007\u0010\u008d\u0001\u001a\u00028\u00002?\u0010\u008f\u0001\u001a:\u0012\u0013\u0012\u00110\u0001\u00a2\u0006\f\b.\u0012\b\b/\u0012\u0004\b\b(\u0002\u0012\u0004\u0012\u00020\u0004\u0012\u0014\u0012\u00128\u0000\u00a2\u0006\r\b.\u0012\t\b/\u0012\u0005\b\b(\u008e\u0001\u0012\u0004\u0012\u00028\u00000\u0092\u0001H\u0086\b\u00a2\u0006\u0006\b\u0096\u0001\u0010\u0094\u0001\u001a.\u0010\u0099\u0001\u001a\u00030\u0097\u0001*\u00020\u00002\u0014\u0010\u0098\u0001\u001a\u000f\u0012\u0004\u0012\u00020\u0004\u0012\u0005\u0012\u00030\u0097\u00010\u0003H\u0086\b\u00a2\u0006\u0006\b\u0099\u0001\u0010\u009a\u0001\u001aC\u0010\u009b\u0001\u001a\u00030\u0097\u0001*\u00020\u00002)\u0010\u0098\u0001\u001a$\u0012\u0013\u0012\u00110\u0001\u00a2\u0006\f\b.\u0012\b\b/\u0012\u0004\b\b(\u0002\u0012\u0004\u0012\u00020\u0004\u0012\u0005\u0012\u00030\u0097\u00010-H\u0086\b\u00a2\u0006\u0006\b\u009b\u0001\u0010\u009c\u0001\u001a\u0015\u0010\u009d\u0001\u001a\u0004\u0018\u00010\u0004*\u00020\u0000\u00a2\u0006\u0005\b\u009d\u0001\u0010\u0013\u001a>\u0010\u00a0\u0001\u001a\u0004\u0018\u00010\u0004\"\u000f\b\u0000\u0010o*\t\u0012\u0004\u0012\u00028\u00000\u009e\u0001*\u00020\u00002\u0013\u0010\u009f\u0001\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00028\u00000\u0003H\u0086\b\u00a2\u0006\u0005\b\u00a0\u0001\u0010\r\u001a5\u0010\u00a4\u0001\u001a\u0004\u0018\u00010\u0004*\u00020\u00002\u001d\u0010\u00a3\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u00020\u00040\u00a1\u0001j\u000b\u0012\u0006\b\u0000\u0012\u00020\u0004`\u00a2\u0001\u00a2\u0006\u0006\b\u00a4\u0001\u0010\u00a5\u0001\u001a\u0015\u0010\u00a6\u0001\u001a\u0004\u0018\u00010\u0004*\u00020\u0000\u00a2\u0006\u0005\b\u00a6\u0001\u0010\u0013\u001a>\u0010\u00a7\u0001\u001a\u0004\u0018\u00010\u0004\"\u000f\b\u0000\u0010o*\t\u0012\u0004\u0012\u00028\u00000\u009e\u0001*\u00020\u00002\u0013\u0010\u009f\u0001\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00028\u00000\u0003H\u0086\b\u00a2\u0006\u0005\b\u00a7\u0001\u0010\r\u001a5\u0010\u00a8\u0001\u001a\u0004\u0018\u00010\u0004*\u00020\u00002\u001d\u0010\u00a3\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u00020\u00040\u00a1\u0001j\u000b\u0012\u0006\b\u0000\u0012\u00020\u0004`\u00a2\u0001\u00a2\u0006\u0006\b\u00a8\u0001\u0010\u00a5\u0001\u001a\u0014\u0010\u00a9\u0001\u001a\u00020\n*\u00020\u0000\u00a2\u0006\u0006\b\u00a9\u0001\u0010\u008a\u0001\u001a+\u0010\u00a9\u0001\u001a\u00020\n*\u00020\u00002\u0012\u0010\u000b\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\n0\u0003H\u0086\b\u00a2\u0006\u0006\b\u00a9\u0001\u0010\u0088\u0001\u001a7\u0010\u00ab\u0001\u001a\u00028\u0000\"\t\b\u0000\u0010\u00aa\u0001*\u00020\u0000*\u00028\u00002\u0014\u0010\u0098\u0001\u001a\u000f\u0012\u0004\u0012\u00020\u0004\u0012\u0005\u0012\u00030\u0097\u00010\u0003H\u0087\b\u00a2\u0006\u0005\b\u00ab\u0001\u0010)\u001aB\u0010\u00ac\u0001\u001a\u00020\u0004*\u00020\u00002)\u0010\u008f\u0001\u001a$\u0012\u0014\u0012\u00120\u0004\u00a2\u0006\r\b.\u0012\t\b/\u0012\u0005\b\b(\u008e\u0001\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00040-H\u0086\b\u00a2\u0006\u0006\b\u00ac\u0001\u0010\u00ad\u0001\u001aX\u0010\u00ae\u0001\u001a\u00020\u0004*\u00020\u00002?\u0010\u008f\u0001\u001a:\u0012\u0013\u0012\u00110\u0001\u00a2\u0006\f\b.\u0012\b\b/\u0012\u0004\b\b(\u0002\u0012\u0014\u0012\u00120\u0004\u00a2\u0006\r\b.\u0012\t\b/\u0012\u0005\b\b(\u008e\u0001\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00040\u0092\u0001H\u0086\b\u00a2\u0006\u0006\b\u00ae\u0001\u0010\u00af\u0001\u001aD\u0010\u00b0\u0001\u001a\u0004\u0018\u00010\u0004*\u00020\u00002)\u0010\u008f\u0001\u001a$\u0012\u0014\u0012\u00120\u0004\u00a2\u0006\r\b.\u0012\t\b/\u0012\u0005\b\b(\u008e\u0001\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00040-H\u0087\b\u00a2\u0006\u0006\b\u00b0\u0001\u0010\u00b1\u0001\u001aB\u0010\u00b2\u0001\u001a\u00020\u0004*\u00020\u00002)\u0010\u008f\u0001\u001a$\u0012\u0004\u0012\u00020\u0004\u0012\u0014\u0012\u00120\u0004\u00a2\u0006\r\b.\u0012\t\b/\u0012\u0005\b\b(\u008e\u0001\u0012\u0004\u0012\u00020\u00040-H\u0086\b\u00a2\u0006\u0006\b\u00b2\u0001\u0010\u00ad\u0001\u001aX\u0010\u00b3\u0001\u001a\u00020\u0004*\u00020\u00002?\u0010\u008f\u0001\u001a:\u0012\u0013\u0012\u00110\u0001\u00a2\u0006\f\b.\u0012\b\b/\u0012\u0004\b\b(\u0002\u0012\u0004\u0012\u00020\u0004\u0012\u0014\u0012\u00120\u0004\u00a2\u0006\r\b.\u0012\t\b/\u0012\u0005\b\b(\u008e\u0001\u0012\u0004\u0012\u00020\u00040\u0092\u0001H\u0086\b\u00a2\u0006\u0006\b\u00b3\u0001\u0010\u00af\u0001\u001aD\u0010\u00b4\u0001\u001a\u0004\u0018\u00010\u0004*\u00020\u00002)\u0010\u008f\u0001\u001a$\u0012\u0004\u0012\u00020\u0004\u0012\u0014\u0012\u00120\u0004\u00a2\u0006\r\b.\u0012\t\b/\u0012\u0005\b\b(\u008e\u0001\u0012\u0004\u0012\u00020\u00040-H\u0087\b\u00a2\u0006\u0006\b\u00b4\u0001\u0010\u00b1\u0001\u001aW\u0010\u00b5\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000g\"\u0004\b\u0000\u0010o*\u00020\u00002\u0007\u0010\u008d\u0001\u001a\u00028\u00002)\u0010\u008f\u0001\u001a$\u0012\u0014\u0012\u00128\u0000\u00a2\u0006\r\b.\u0012\t\b/\u0012\u0005\b\b(\u008e\u0001\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00028\u00000-H\u0087\b\u00a2\u0006\u0006\b\u00b5\u0001\u0010\u00b6\u0001\u001am\u0010\u00b7\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000g\"\u0004\b\u0000\u0010o*\u00020\u00002\u0007\u0010\u008d\u0001\u001a\u00028\u00002?\u0010\u008f\u0001\u001a:\u0012\u0013\u0012\u00110\u0001\u00a2\u0006\f\b.\u0012\b\b/\u0012\u0004\b\b(\u0002\u0012\u0014\u0012\u00128\u0000\u00a2\u0006\r\b.\u0012\t\b/\u0012\u0005\b\b(\u008e\u0001\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00028\u00000\u0092\u0001H\u0087\b\u00a2\u0006\u0006\b\u00b7\u0001\u0010\u00b8\u0001\u001aG\u0010\u00b9\u0001\u001a\b\u0012\u0004\u0012\u00020\u00040g*\u00020\u00002)\u0010\u008f\u0001\u001a$\u0012\u0014\u0012\u00120\u0004\u00a2\u0006\r\b.\u0012\t\b/\u0012\u0005\b\b(\u008e\u0001\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00040-H\u0087\b\u00a2\u0006\u0005\b\u00b9\u0001\u0010{\u001a^\u0010\u00ba\u0001\u001a\b\u0012\u0004\u0012\u00020\u00040g*\u00020\u00002?\u0010\u008f\u0001\u001a:\u0012\u0013\u0012\u00110\u0001\u00a2\u0006\f\b.\u0012\b\b/\u0012\u0004\b\b(\u0002\u0012\u0014\u0012\u00120\u0004\u00a2\u0006\r\b.\u0012\t\b/\u0012\u0005\b\b(\u008e\u0001\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00040\u0092\u0001H\u0087\b\u00a2\u0006\u0006\b\u00ba\u0001\u0010\u00bb\u0001\u001a+\u0010\u00bc\u0001\u001a\u00020\u0001*\u00020\u00002\u0013\u0010\u009f\u0001\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00010\u0003H\u0086\b\u00a2\u0006\u0005\b\u00bc\u0001\u0010\u0017\u001a.\u0010\u00be\u0001\u001a\u00030\u00bd\u0001*\u00020\u00002\u0014\u0010\u009f\u0001\u001a\u000f\u0012\u0004\u0012\u00020\u0004\u0012\u0005\u0012\u00030\u00bd\u00010\u0003H\u0086\b\u00a2\u0006\u0006\b\u00be\u0001\u0010\u00bf\u0001\u001a%\u0010\u00c1\u0001\u001a\b\u0012\u0004\u0012\u00020%0g*\u00020\u00002\u0007\u0010\u00c0\u0001\u001a\u00020\u0001H\u0007\u00a2\u0006\u0006\b\u00c1\u0001\u0010\u00c2\u0001\u001a?\u0010\u00c1\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000g\"\u0004\b\u0000\u0010o*\u00020\u00002\u0007\u0010\u00c0\u0001\u001a\u00020\u00012\u0012\u0010O\u001a\u000e\u0012\u0004\u0012\u00020\u0000\u0012\u0004\u0012\u00028\u00000\u0003H\u0007\u00a2\u0006\u0006\b\u00c1\u0001\u0010\u00c3\u0001\u001a&\u0010\u00c5\u0001\u001a\t\u0012\u0004\u0012\u00020%0\u00c4\u0001*\u00020\u00002\u0007\u0010\u00c0\u0001\u001a\u00020\u0001H\u0007\u00a2\u0006\u0006\b\u00c5\u0001\u0010\u00c6\u0001\u001a@\u0010\u00c5\u0001\u001a\t\u0012\u0004\u0012\u00028\u00000\u00c4\u0001\"\u0004\b\u0000\u0010o*\u00020\u00002\u0007\u0010\u00c0\u0001\u001a\u00020\u00012\u0012\u0010O\u001a\u000e\u0012\u0004\u0012\u00020\u0000\u0012\u0004\u0012\u00028\u00000\u0003H\u0007\u00a2\u0006\u0006\b\u00c5\u0001\u0010\u00c7\u0001\u001a7\u0010\u00c8\u0001\u001a\u000e\u0012\u0004\u0012\u00020\u0000\u0012\u0004\u0012\u00020\u00000N*\u00020\u00002\u0012\u0010\u000b\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\n0\u0003H\u0086\b\u00a2\u0006\u0006\b\u00c8\u0001\u0010\u00c9\u0001\u001a7\u0010\u00c8\u0001\u001a\u000e\u0012\u0004\u0012\u00020%\u0012\u0004\u0012\u00020%0N*\u00020%2\u0012\u0010\u000b\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\n0\u0003H\u0086\b\u00a2\u0006\u0006\b\u00c8\u0001\u0010\u00ca\u0001\u001a;\u0010\u00cd\u0001\u001a\b\u0012\u0004\u0012\u00020%0g*\u00020\u00002\u0007\u0010\u00c0\u0001\u001a\u00020\u00012\t\b\u0002\u0010\u00cb\u0001\u001a\u00020\u00012\t\b\u0002\u0010\u00cc\u0001\u001a\u00020\nH\u0007\u00a2\u0006\u0006\b\u00cd\u0001\u0010\u00ce\u0001\u001aU\u0010\u00cd\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000g\"\u0004\b\u0000\u0010o*\u00020\u00002\u0007\u0010\u00c0\u0001\u001a\u00020\u00012\t\b\u0002\u0010\u00cb\u0001\u001a\u00020\u00012\t\b\u0002\u0010\u00cc\u0001\u001a\u00020\n2\u0012\u0010O\u001a\u000e\u0012\u0004\u0012\u00020\u0000\u0012\u0004\u0012\u00028\u00000\u0003H\u0007\u00a2\u0006\u0006\b\u00cd\u0001\u0010\u00cf\u0001\u001a<\u0010\u00d0\u0001\u001a\t\u0012\u0004\u0012\u00020%0\u00c4\u0001*\u00020\u00002\u0007\u0010\u00c0\u0001\u001a\u00020\u00012\t\b\u0002\u0010\u00cb\u0001\u001a\u00020\u00012\t\b\u0002\u0010\u00cc\u0001\u001a\u00020\nH\u0007\u00a2\u0006\u0006\b\u00d0\u0001\u0010\u00d1\u0001\u001aV\u0010\u00d0\u0001\u001a\t\u0012\u0004\u0012\u00028\u00000\u00c4\u0001\"\u0004\b\u0000\u0010o*\u00020\u00002\u0007\u0010\u00c0\u0001\u001a\u00020\u00012\t\b\u0002\u0010\u00cb\u0001\u001a\u00020\u00012\t\b\u0002\u0010\u00cc\u0001\u001a\u00020\n2\u0012\u0010O\u001a\u000e\u0012\u0004\u0012\u00020\u0000\u0012\u0004\u0012\u00028\u00000\u0003H\u0007\u00a2\u0006\u0006\b\u00d0\u0001\u0010\u00d2\u0001\u001a2\u0010\u00d4\u0001\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00040N0g*\u00020\u00002\u0007\u0010\u00d3\u0001\u001a\u00020\u0000H\u0086\u0004\u00a2\u0006\u0006\b\u00d4\u0001\u0010\u00d5\u0001\u001af\u0010\u00d4\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000g\"\u0004\b\u0000\u0010M*\u00020\u00002\u0007\u0010\u00d3\u0001\u001a\u00020\u000028\u0010O\u001a4\u0012\u0014\u0012\u00120\u0004\u00a2\u0006\r\b.\u0012\t\b/\u0012\u0005\b\b(\u00d6\u0001\u0012\u0014\u0012\u00120\u0004\u00a2\u0006\r\b.\u0012\t\b/\u0012\u0005\b\b(\u00d7\u0001\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00d4\u0001\u0010\u00d8\u0001\u001a'\u0010\u00d9\u0001\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00040N0g*\u00020\u0000H\u0007\u00a2\u0006\u0005\b\u00d9\u0001\u0010i\u001a\\\u0010\u00d9\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000g\"\u0004\b\u0000\u0010o*\u00020\u000028\u0010O\u001a4\u0012\u0014\u0012\u00120\u0004\u00a2\u0006\r\b.\u0012\t\b/\u0012\u0005\b\b(\u00d6\u0001\u0012\u0014\u0012\u00120\u0004\u00a2\u0006\r\b.\u0012\t\b/\u0012\u0005\b\b(\u00d7\u0001\u0012\u0004\u0012\u00028\u00000-H\u0087\b\u00a2\u0006\u0005\b\u00d9\u0001\u0010{\u001a\u001a\u0010\u00da\u0001\u001a\b\u0012\u0004\u0012\u00020\u00040B*\u00020\u0000\u00a2\u0006\u0006\b\u00da\u0001\u0010\u0086\u0001\u001a\u001b\u0010\u00db\u0001\u001a\t\u0012\u0004\u0012\u00020\u00040\u00c4\u0001*\u00020\u0000\u00a2\u0006\u0006\b\u00db\u0001\u0010\u00dc\u0001\u00a8\u0006\u00dd\u0001"}, d2 = {"", "", "index", "Lkotlin/Function1;", "", "defaultValue", "elementAtOrElse", "(Ljava/lang/CharSequence;ILkotlin/jvm/functions/Function1;)C", "elementAtOrNull", "(Ljava/lang/CharSequence;I)Ljava/lang/Character;", "", "predicate", "find", "(Ljava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Character;", "findLast", "first", "(Ljava/lang/CharSequence;)C", "(Ljava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)C", "firstOrNull", "(Ljava/lang/CharSequence;)Ljava/lang/Character;", "getOrElse", "getOrNull", "indexOfFirst", "(Ljava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)I", "indexOfLast", "last", "lastOrNull", "random", "Lkotlin/random/Random;", "(Ljava/lang/CharSequence;Lkotlin/random/Random;)C", "randomOrNull", "(Ljava/lang/CharSequence;Lkotlin/random/Random;)Ljava/lang/Character;", "single", "singleOrNull", PersonalConstants.ICON_STYLE_N, "drop", "(Ljava/lang/CharSequence;I)Ljava/lang/CharSequence;", "", "(Ljava/lang/String;I)Ljava/lang/String;", "dropLast", "dropLastWhile", "(Ljava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/CharSequence;", "(Ljava/lang/String;Lkotlin/jvm/functions/Function1;)Ljava/lang/String;", "dropWhile", "filter", "Lkotlin/Function2;", "Lkotlin/ParameterName;", "name", "filterIndexed", "(Ljava/lang/CharSequence;Lkotlin/jvm/functions/Function2;)Ljava/lang/CharSequence;", "(Ljava/lang/String;Lkotlin/jvm/functions/Function2;)Ljava/lang/String;", "Ljava/lang/Appendable;", "Lkotlin/text/Appendable;", "C", "destination", "filterIndexedTo", "(Ljava/lang/CharSequence;Ljava/lang/Appendable;Lkotlin/jvm/functions/Function2;)Ljava/lang/Appendable;", "filterNot", "filterNotTo", "(Ljava/lang/CharSequence;Ljava/lang/Appendable;Lkotlin/jvm/functions/Function1;)Ljava/lang/Appendable;", "filterTo", "Lkotlin/ranges/IntRange;", "indices", "slice", "(Ljava/lang/CharSequence;Lkotlin/ranges/IntRange;)Ljava/lang/CharSequence;", "(Ljava/lang/String;Lkotlin/ranges/IntRange;)Ljava/lang/String;", "", "(Ljava/lang/CharSequence;Ljava/lang/Iterable;)Ljava/lang/CharSequence;", "(Ljava/lang/String;Ljava/lang/Iterable;)Ljava/lang/String;", "take", "takeLast", "takeLastWhile", "takeWhile", "reversed", "(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;", "(Ljava/lang/String;)Ljava/lang/String;", "K", "V", "Lkotlin/Pair;", "transform", "", "associate", "(Ljava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "keySelector", "associateBy", "valueTransform", "(Ljava/lang/CharSequence;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "", "M", "associateByTo", "(Ljava/lang/CharSequence;Ljava/util/Map;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "(Ljava/lang/CharSequence;Ljava/util/Map;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "associateTo", "valueSelector", "associateWith", "associateWithTo", "", "toCollection", "(Ljava/lang/CharSequence;Ljava/util/Collection;)Ljava/util/Collection;", "Ljava/util/HashSet;", "Lkotlin/collections/HashSet;", "toHashSet", "(Ljava/lang/CharSequence;)Ljava/util/HashSet;", "", "toList", "(Ljava/lang/CharSequence;)Ljava/util/List;", "", "toMutableList", "", "toSet", "(Ljava/lang/CharSequence;)Ljava/util/Set;", "R", "flatMap", "(Ljava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/util/List;", "flatMapTo", "(Ljava/lang/CharSequence;Ljava/util/Collection;Lkotlin/jvm/functions/Function1;)Ljava/util/Collection;", "groupBy", "groupByTo", "Lkotlin/collections/Grouping;", "groupingBy", "(Ljava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Lkotlin/collections/Grouping;", "map", "mapIndexed", "(Ljava/lang/CharSequence;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "", "mapIndexedNotNull", "mapIndexedNotNullTo", "(Ljava/lang/CharSequence;Ljava/util/Collection;Lkotlin/jvm/functions/Function2;)Ljava/util/Collection;", "mapIndexedTo", "mapNotNull", "mapNotNullTo", "mapTo", "Lkotlin/collections/IndexedValue;", "withIndex", "(Ljava/lang/CharSequence;)Ljava/lang/Iterable;", NavigationDbConstants.TB_COLUMN_FREQUENCY_RULE_POSITION_ALL, "(Ljava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Z", Languages.ANY, "(Ljava/lang/CharSequence;)Z", "count", "(Ljava/lang/CharSequence;)I", "initial", "acc", "operation", "fold", "(Ljava/lang/CharSequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "Lkotlin/Function3;", "foldIndexed", "(Ljava/lang/CharSequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "foldRight", "foldRightIndexed", "", "action", "forEach", "(Ljava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)V", "forEachIndexed", "(Ljava/lang/CharSequence;Lkotlin/jvm/functions/Function2;)V", "max", "", "selector", "maxBy", "Ljava/util/Comparator;", "Lkotlin/Comparator;", "comparator", "maxWith", "(Ljava/lang/CharSequence;Ljava/util/Comparator;)Ljava/lang/Character;", "min", "minBy", "minWith", "none", "S", "onEach", "reduce", "(Ljava/lang/CharSequence;Lkotlin/jvm/functions/Function2;)C", "reduceIndexed", "(Ljava/lang/CharSequence;Lkotlin/jvm/functions/Function3;)C", "reduceOrNull", "(Ljava/lang/CharSequence;Lkotlin/jvm/functions/Function2;)Ljava/lang/Character;", "reduceRight", "reduceRightIndexed", "reduceRightOrNull", "scan", "(Ljava/lang/CharSequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "scanIndexed", "(Ljava/lang/CharSequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/util/List;", "scanReduce", "scanReduceIndexed", "(Ljava/lang/CharSequence;Lkotlin/jvm/functions/Function3;)Ljava/util/List;", "sumBy", "", "sumByDouble", "(Ljava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)D", ApkDownloadTable.FIELD_SIZE, "chunked", "(Ljava/lang/CharSequence;I)Ljava/util/List;", "(Ljava/lang/CharSequence;ILkotlin/jvm/functions/Function1;)Ljava/util/List;", "Lkotlin/sequences/Sequence;", "chunkedSequence", "(Ljava/lang/CharSequence;I)Lkotlin/sequences/Sequence;", "(Ljava/lang/CharSequence;ILkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;", "partition", "(Ljava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Lkotlin/Pair;", "(Ljava/lang/String;Lkotlin/jvm/functions/Function1;)Lkotlin/Pair;", "step", "partialWindows", "windowed", "(Ljava/lang/CharSequence;IIZ)Ljava/util/List;", "(Ljava/lang/CharSequence;IIZLkotlin/jvm/functions/Function1;)Ljava/util/List;", "windowedSequence", "(Ljava/lang/CharSequence;IIZ)Lkotlin/sequences/Sequence;", "(Ljava/lang/CharSequence;IIZLkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;", "other", "zip", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/util/List;", a.a, "b", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "zipWithNext", "asIterable", "asSequence", "(Ljava/lang/CharSequence;)Lkotlin/sequences/Sequence;", "kotlin-stdlib"}, k = 5, mv = {1, 4, 0}, xs = "kotlin/text/StringsKt")
/* loaded from: classes.dex */
public class StringsKt___StringsKt extends StringsKt___StringsJvmKt {
    public static final boolean all(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, Boolean> function1) {
        for (int i2 = 0; i2 < charSequence.length(); i2++) {
            if (!function1.invoke(Character.valueOf(charSequence.charAt(i2))).booleanValue()) {
                return false;
            }
        }
        return true;
    }

    public static final boolean any(@NotNull CharSequence charSequence) {
        return !(charSequence.length() == 0);
    }

    @NotNull
    public static final Iterable<Character> asIterable(@NotNull CharSequence charSequence) {
        List emptyList;
        if (charSequence instanceof String) {
            if (charSequence.length() == 0) {
                emptyList = CollectionsKt__CollectionsKt.emptyList();
                return emptyList;
            }
        }
        return new StringsKt___StringsKt$asIterable$$inlined$Iterable$1(charSequence);
    }

    @NotNull
    public static final Sequence<Character> asSequence(@NotNull final CharSequence charSequence) {
        Sequence<Character> emptySequence;
        if (charSequence instanceof String) {
            if (charSequence.length() == 0) {
                emptySequence = SequencesKt__SequencesKt.emptySequence();
                return emptySequence;
            }
        }
        return new Sequence<Character>() { // from class: kotlin.text.StringsKt___StringsKt$asSequence$$inlined$Sequence$1
            @Override // kotlin.sequences.Sequence
            @NotNull
            public Iterator<Character> iterator() {
                return StringsKt__StringsKt.iterator(charSequence);
            }
        };
    }

    @NotNull
    public static final <K, V> Map<K, V> associate(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, ? extends Pair<? extends K, ? extends V>> function1) {
        int mapCapacity;
        int coerceAtLeast;
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(charSequence.length());
        coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(mapCapacity, 16);
        LinkedHashMap linkedHashMap = new LinkedHashMap(coerceAtLeast);
        for (int i2 = 0; i2 < charSequence.length(); i2++) {
            Pair<? extends K, ? extends V> invoke = function1.invoke(Character.valueOf(charSequence.charAt(i2)));
            linkedHashMap.put(invoke.getFirst(), invoke.getSecond());
        }
        return linkedHashMap;
    }

    @NotNull
    public static final <K> Map<K, Character> associateBy(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, ? extends K> function1) {
        int mapCapacity;
        int coerceAtLeast;
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(charSequence.length());
        coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(mapCapacity, 16);
        LinkedHashMap linkedHashMap = new LinkedHashMap(coerceAtLeast);
        for (int i2 = 0; i2 < charSequence.length(); i2++) {
            char charAt = charSequence.charAt(i2);
            linkedHashMap.put(function1.invoke(Character.valueOf(charAt)), Character.valueOf(charAt));
        }
        return linkedHashMap;
    }

    @NotNull
    public static final <K, M extends Map<? super K, ? super Character>> M associateByTo(@NotNull CharSequence charSequence, @NotNull M m2, @NotNull Function1<? super Character, ? extends K> function1) {
        for (int i2 = 0; i2 < charSequence.length(); i2++) {
            char charAt = charSequence.charAt(i2);
            m2.put(function1.invoke(Character.valueOf(charAt)), Character.valueOf(charAt));
        }
        return m2;
    }

    @NotNull
    public static final <K, V, M extends Map<? super K, ? super V>> M associateTo(@NotNull CharSequence charSequence, @NotNull M m2, @NotNull Function1<? super Character, ? extends Pair<? extends K, ? extends V>> function1) {
        for (int i2 = 0; i2 < charSequence.length(); i2++) {
            Pair<? extends K, ? extends V> invoke = function1.invoke(Character.valueOf(charSequence.charAt(i2)));
            m2.put(invoke.getFirst(), invoke.getSecond());
        }
        return m2;
    }

    @SinceKotlin(version = "1.3")
    @NotNull
    public static final <V> Map<Character, V> associateWith(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, ? extends V> function1) {
        int mapCapacity;
        int coerceAtLeast;
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(charSequence.length());
        coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(mapCapacity, 16);
        LinkedHashMap linkedHashMap = new LinkedHashMap(coerceAtLeast);
        for (int i2 = 0; i2 < charSequence.length(); i2++) {
            char charAt = charSequence.charAt(i2);
            linkedHashMap.put(Character.valueOf(charAt), function1.invoke(Character.valueOf(charAt)));
        }
        return linkedHashMap;
    }

    @SinceKotlin(version = "1.3")
    @NotNull
    public static final <V, M extends Map<? super Character, ? super V>> M associateWithTo(@NotNull CharSequence charSequence, @NotNull M m2, @NotNull Function1<? super Character, ? extends V> function1) {
        for (int i2 = 0; i2 < charSequence.length(); i2++) {
            char charAt = charSequence.charAt(i2);
            m2.put(Character.valueOf(charAt), function1.invoke(Character.valueOf(charAt)));
        }
        return m2;
    }

    @SinceKotlin(version = "1.2")
    @NotNull
    public static final List<String> chunked(@NotNull CharSequence charSequence, int i2) {
        return windowed(charSequence, i2, i2, true);
    }

    @SinceKotlin(version = "1.2")
    @NotNull
    public static final Sequence<String> chunkedSequence(@NotNull CharSequence charSequence, int i2) {
        return chunkedSequence(charSequence, i2, new Function1<CharSequence, String>() { // from class: kotlin.text.StringsKt___StringsKt$chunkedSequence$1
            @Override // kotlin.jvm.functions.Function1
            @NotNull
            public final String invoke(@NotNull CharSequence charSequence2) {
                return charSequence2.toString();
            }
        });
    }

    @InlineOnly
    private static final int count(@NotNull CharSequence charSequence) {
        return charSequence.length();
    }

    @NotNull
    public static final CharSequence drop(@NotNull CharSequence charSequence, int i2) {
        int coerceAtMost;
        if (i2 >= 0) {
            coerceAtMost = RangesKt___RangesKt.coerceAtMost(i2, charSequence.length());
            return charSequence.subSequence(coerceAtMost, charSequence.length());
        }
        throw new IllegalArgumentException(("Requested character count " + i2 + " is less than zero.").toString());
    }

    @NotNull
    public static final CharSequence dropLast(@NotNull CharSequence charSequence, int i2) {
        int coerceAtLeast;
        if (i2 >= 0) {
            coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(charSequence.length() - i2, 0);
            return take(charSequence, coerceAtLeast);
        }
        throw new IllegalArgumentException(("Requested character count " + i2 + " is less than zero.").toString());
    }

    @NotNull
    public static final CharSequence dropLastWhile(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, Boolean> function1) {
        int lastIndex;
        for (lastIndex = StringsKt__StringsKt.getLastIndex(charSequence); lastIndex >= 0; lastIndex--) {
            if (!function1.invoke(Character.valueOf(charSequence.charAt(lastIndex))).booleanValue()) {
                return charSequence.subSequence(0, lastIndex + 1);
            }
        }
        return "";
    }

    @NotNull
    public static final CharSequence dropWhile(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, Boolean> function1) {
        int length = charSequence.length();
        for (int i2 = 0; i2 < length; i2++) {
            if (!function1.invoke(Character.valueOf(charSequence.charAt(i2))).booleanValue()) {
                return charSequence.subSequence(i2, charSequence.length());
            }
        }
        return "";
    }

    @InlineOnly
    private static final char elementAtOrElse(@NotNull CharSequence charSequence, int i2, Function1<? super Integer, Character> function1) {
        int lastIndex;
        if (i2 >= 0) {
            lastIndex = StringsKt__StringsKt.getLastIndex(charSequence);
            if (i2 <= lastIndex) {
                return charSequence.charAt(i2);
            }
        }
        return function1.invoke(Integer.valueOf(i2)).charValue();
    }

    @InlineOnly
    private static final Character elementAtOrNull(@NotNull CharSequence charSequence, int i2) {
        return getOrNull(charSequence, i2);
    }

    @NotNull
    public static final CharSequence filter(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, Boolean> function1) {
        StringBuilder sb = new StringBuilder();
        int length = charSequence.length();
        for (int i2 = 0; i2 < length; i2++) {
            char charAt = charSequence.charAt(i2);
            if (function1.invoke(Character.valueOf(charAt)).booleanValue()) {
                sb.append(charAt);
            }
        }
        return sb;
    }

    @NotNull
    public static final CharSequence filterIndexed(@NotNull CharSequence charSequence, @NotNull Function2<? super Integer, ? super Character, Boolean> function2) {
        StringBuilder sb = new StringBuilder();
        int i2 = 0;
        int i3 = 0;
        while (i2 < charSequence.length()) {
            char charAt = charSequence.charAt(i2);
            int i4 = i3 + 1;
            if (function2.invoke(Integer.valueOf(i3), Character.valueOf(charAt)).booleanValue()) {
                sb.append(charAt);
            }
            i2++;
            i3 = i4;
        }
        return sb;
    }

    @NotNull
    public static final <C extends Appendable> C filterIndexedTo(@NotNull CharSequence charSequence, @NotNull C c2, @NotNull Function2<? super Integer, ? super Character, Boolean> function2) {
        int i2 = 0;
        int i3 = 0;
        while (i2 < charSequence.length()) {
            char charAt = charSequence.charAt(i2);
            int i4 = i3 + 1;
            if (function2.invoke(Integer.valueOf(i3), Character.valueOf(charAt)).booleanValue()) {
                c2.append(charAt);
            }
            i2++;
            i3 = i4;
        }
        return c2;
    }

    @NotNull
    public static final CharSequence filterNot(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, Boolean> function1) {
        StringBuilder sb = new StringBuilder();
        for (int i2 = 0; i2 < charSequence.length(); i2++) {
            char charAt = charSequence.charAt(i2);
            if (!function1.invoke(Character.valueOf(charAt)).booleanValue()) {
                sb.append(charAt);
            }
        }
        return sb;
    }

    @NotNull
    public static final <C extends Appendable> C filterNotTo(@NotNull CharSequence charSequence, @NotNull C c2, @NotNull Function1<? super Character, Boolean> function1) {
        for (int i2 = 0; i2 < charSequence.length(); i2++) {
            char charAt = charSequence.charAt(i2);
            if (!function1.invoke(Character.valueOf(charAt)).booleanValue()) {
                c2.append(charAt);
            }
        }
        return c2;
    }

    @NotNull
    public static final <C extends Appendable> C filterTo(@NotNull CharSequence charSequence, @NotNull C c2, @NotNull Function1<? super Character, Boolean> function1) {
        int length = charSequence.length();
        for (int i2 = 0; i2 < length; i2++) {
            char charAt = charSequence.charAt(i2);
            if (function1.invoke(Character.valueOf(charAt)).booleanValue()) {
                c2.append(charAt);
            }
        }
        return c2;
    }

    @InlineOnly
    private static final Character find(@NotNull CharSequence charSequence, Function1<? super Character, Boolean> function1) {
        for (int i2 = 0; i2 < charSequence.length(); i2++) {
            char charAt = charSequence.charAt(i2);
            if (function1.invoke(Character.valueOf(charAt)).booleanValue()) {
                return Character.valueOf(charAt);
            }
        }
        return null;
    }

    @InlineOnly
    private static final Character findLast(@NotNull CharSequence charSequence, Function1<? super Character, Boolean> function1) {
        char charAt;
        int length = charSequence.length();
        do {
            length--;
            if (length < 0) {
                return null;
            }
            charAt = charSequence.charAt(length);
        } while (!function1.invoke(Character.valueOf(charAt)).booleanValue());
        return Character.valueOf(charAt);
    }

    public static final char first(@NotNull CharSequence charSequence) {
        if (!(charSequence.length() == 0)) {
            return charSequence.charAt(0);
        }
        throw new NoSuchElementException("Char sequence is empty.");
    }

    @Nullable
    public static final Character firstOrNull(@NotNull CharSequence charSequence) {
        if (charSequence.length() == 0) {
            return null;
        }
        return Character.valueOf(charSequence.charAt(0));
    }

    @NotNull
    public static final <R> List<R> flatMap(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, ? extends Iterable<? extends R>> function1) {
        ArrayList arrayList = new ArrayList();
        for (int i2 = 0; i2 < charSequence.length(); i2++) {
            CollectionsKt__MutableCollectionsKt.addAll(arrayList, function1.invoke(Character.valueOf(charSequence.charAt(i2))));
        }
        return arrayList;
    }

    @NotNull
    public static final <R, C extends Collection<? super R>> C flatMapTo(@NotNull CharSequence charSequence, @NotNull C c2, @NotNull Function1<? super Character, ? extends Iterable<? extends R>> function1) {
        for (int i2 = 0; i2 < charSequence.length(); i2++) {
            CollectionsKt__MutableCollectionsKt.addAll(c2, function1.invoke(Character.valueOf(charSequence.charAt(i2))));
        }
        return c2;
    }

    public static final <R> R fold(@NotNull CharSequence charSequence, R r, @NotNull Function2<? super R, ? super Character, ? extends R> function2) {
        for (int i2 = 0; i2 < charSequence.length(); i2++) {
            r = function2.invoke(r, Character.valueOf(charSequence.charAt(i2)));
        }
        return r;
    }

    public static final <R> R foldIndexed(@NotNull CharSequence charSequence, R r, @NotNull Function3<? super Integer, ? super R, ? super Character, ? extends R> function3) {
        int i2 = 0;
        for (int i3 = 0; i3 < charSequence.length(); i3++) {
            char charAt = charSequence.charAt(i3);
            Integer valueOf = Integer.valueOf(i2);
            i2++;
            r = function3.invoke(valueOf, r, Character.valueOf(charAt));
        }
        return r;
    }

    public static final <R> R foldRight(@NotNull CharSequence charSequence, R r, @NotNull Function2<? super Character, ? super R, ? extends R> function2) {
        int lastIndex;
        for (lastIndex = StringsKt__StringsKt.getLastIndex(charSequence); lastIndex >= 0; lastIndex--) {
            r = function2.invoke(Character.valueOf(charSequence.charAt(lastIndex)), r);
        }
        return r;
    }

    public static final <R> R foldRightIndexed(@NotNull CharSequence charSequence, R r, @NotNull Function3<? super Integer, ? super Character, ? super R, ? extends R> function3) {
        int lastIndex;
        for (lastIndex = StringsKt__StringsKt.getLastIndex(charSequence); lastIndex >= 0; lastIndex--) {
            r = function3.invoke(Integer.valueOf(lastIndex), Character.valueOf(charSequence.charAt(lastIndex)), r);
        }
        return r;
    }

    public static final void forEach(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, Unit> function1) {
        for (int i2 = 0; i2 < charSequence.length(); i2++) {
            function1.invoke(Character.valueOf(charSequence.charAt(i2)));
        }
    }

    public static final void forEachIndexed(@NotNull CharSequence charSequence, @NotNull Function2<? super Integer, ? super Character, Unit> function2) {
        int i2 = 0;
        for (int i3 = 0; i3 < charSequence.length(); i3++) {
            char charAt = charSequence.charAt(i3);
            Integer valueOf = Integer.valueOf(i2);
            i2++;
            function2.invoke(valueOf, Character.valueOf(charAt));
        }
    }

    @InlineOnly
    private static final char getOrElse(@NotNull CharSequence charSequence, int i2, Function1<? super Integer, Character> function1) {
        int lastIndex;
        if (i2 >= 0) {
            lastIndex = StringsKt__StringsKt.getLastIndex(charSequence);
            if (i2 <= lastIndex) {
                return charSequence.charAt(i2);
            }
        }
        return function1.invoke(Integer.valueOf(i2)).charValue();
    }

    @Nullable
    public static final Character getOrNull(@NotNull CharSequence charSequence, int i2) {
        int lastIndex;
        if (i2 >= 0) {
            lastIndex = StringsKt__StringsKt.getLastIndex(charSequence);
            if (i2 <= lastIndex) {
                return Character.valueOf(charSequence.charAt(i2));
            }
        }
        return null;
    }

    @NotNull
    public static final <K> Map<K, List<Character>> groupBy(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, ? extends K> function1) {
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        for (int i2 = 0; i2 < charSequence.length(); i2++) {
            char charAt = charSequence.charAt(i2);
            K invoke = function1.invoke(Character.valueOf(charAt));
            Object obj = linkedHashMap.get(invoke);
            if (obj == null) {
                obj = new ArrayList();
                linkedHashMap.put(invoke, obj);
            }
            ((List) obj).add(Character.valueOf(charAt));
        }
        return linkedHashMap;
    }

    @NotNull
    public static final <K, M extends Map<? super K, List<Character>>> M groupByTo(@NotNull CharSequence charSequence, @NotNull M m2, @NotNull Function1<? super Character, ? extends K> function1) {
        for (int i2 = 0; i2 < charSequence.length(); i2++) {
            char charAt = charSequence.charAt(i2);
            K invoke = function1.invoke(Character.valueOf(charAt));
            Object obj = m2.get(invoke);
            if (obj == null) {
                obj = new ArrayList();
                m2.put(invoke, obj);
            }
            ((List) obj).add(Character.valueOf(charAt));
        }
        return m2;
    }

    @SinceKotlin(version = "1.1")
    @NotNull
    public static final <K> Grouping<Character, K> groupingBy(@NotNull final CharSequence charSequence, @NotNull final Function1<? super Character, ? extends K> function1) {
        return new Grouping<Character, K>() { // from class: kotlin.text.StringsKt___StringsKt$groupingBy$1
            @Override // kotlin.collections.Grouping
            public /* bridge */ /* synthetic */ Object keyOf(Character ch) {
                return keyOf(ch.charValue());
            }

            @Override // kotlin.collections.Grouping
            @NotNull
            public Iterator<Character> sourceIterator() {
                return StringsKt__StringsKt.iterator(charSequence);
            }

            public K keyOf(char element) {
                return (K) function1.invoke(Character.valueOf(element));
            }
        };
    }

    public static final int indexOfFirst(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, Boolean> function1) {
        int length = charSequence.length();
        for (int i2 = 0; i2 < length; i2++) {
            if (function1.invoke(Character.valueOf(charSequence.charAt(i2))).booleanValue()) {
                return i2;
            }
        }
        return -1;
    }

    public static final int indexOfLast(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, Boolean> function1) {
        for (int length = charSequence.length() - 1; length >= 0; length--) {
            if (function1.invoke(Character.valueOf(charSequence.charAt(length))).booleanValue()) {
                return length;
            }
        }
        return -1;
    }

    public static final char last(@NotNull CharSequence charSequence) {
        int lastIndex;
        if (!(charSequence.length() == 0)) {
            lastIndex = StringsKt__StringsKt.getLastIndex(charSequence);
            return charSequence.charAt(lastIndex);
        }
        throw new NoSuchElementException("Char sequence is empty.");
    }

    @Nullable
    public static final Character lastOrNull(@NotNull CharSequence charSequence) {
        if (charSequence.length() == 0) {
            return null;
        }
        return Character.valueOf(charSequence.charAt(charSequence.length() - 1));
    }

    @NotNull
    public static final <R> List<R> map(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, ? extends R> function1) {
        ArrayList arrayList = new ArrayList(charSequence.length());
        for (int i2 = 0; i2 < charSequence.length(); i2++) {
            arrayList.add(function1.invoke(Character.valueOf(charSequence.charAt(i2))));
        }
        return arrayList;
    }

    @NotNull
    public static final <R> List<R> mapIndexed(@NotNull CharSequence charSequence, @NotNull Function2<? super Integer, ? super Character, ? extends R> function2) {
        ArrayList arrayList = new ArrayList(charSequence.length());
        int i2 = 0;
        for (int i3 = 0; i3 < charSequence.length(); i3++) {
            char charAt = charSequence.charAt(i3);
            Integer valueOf = Integer.valueOf(i2);
            i2++;
            arrayList.add(function2.invoke(valueOf, Character.valueOf(charAt)));
        }
        return arrayList;
    }

    @NotNull
    public static final <R> List<R> mapIndexedNotNull(@NotNull CharSequence charSequence, @NotNull Function2<? super Integer, ? super Character, ? extends R> function2) {
        ArrayList arrayList = new ArrayList();
        int i2 = 0;
        int i3 = 0;
        while (i2 < charSequence.length()) {
            int i4 = i3 + 1;
            R invoke = function2.invoke(Integer.valueOf(i3), Character.valueOf(charSequence.charAt(i2)));
            if (invoke != null) {
                arrayList.add(invoke);
            }
            i2++;
            i3 = i4;
        }
        return arrayList;
    }

    @NotNull
    public static final <R, C extends Collection<? super R>> C mapIndexedNotNullTo(@NotNull CharSequence charSequence, @NotNull C c2, @NotNull Function2<? super Integer, ? super Character, ? extends R> function2) {
        int i2 = 0;
        int i3 = 0;
        while (i2 < charSequence.length()) {
            int i4 = i3 + 1;
            R invoke = function2.invoke(Integer.valueOf(i3), Character.valueOf(charSequence.charAt(i2)));
            if (invoke != null) {
                c2.add(invoke);
            }
            i2++;
            i3 = i4;
        }
        return c2;
    }

    @NotNull
    public static final <R, C extends Collection<? super R>> C mapIndexedTo(@NotNull CharSequence charSequence, @NotNull C c2, @NotNull Function2<? super Integer, ? super Character, ? extends R> function2) {
        int i2 = 0;
        for (int i3 = 0; i3 < charSequence.length(); i3++) {
            char charAt = charSequence.charAt(i3);
            Integer valueOf = Integer.valueOf(i2);
            i2++;
            c2.add(function2.invoke(valueOf, Character.valueOf(charAt)));
        }
        return c2;
    }

    @NotNull
    public static final <R> List<R> mapNotNull(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, ? extends R> function1) {
        ArrayList arrayList = new ArrayList();
        for (int i2 = 0; i2 < charSequence.length(); i2++) {
            R invoke = function1.invoke(Character.valueOf(charSequence.charAt(i2)));
            if (invoke != null) {
                arrayList.add(invoke);
            }
        }
        return arrayList;
    }

    @NotNull
    public static final <R, C extends Collection<? super R>> C mapNotNullTo(@NotNull CharSequence charSequence, @NotNull C c2, @NotNull Function1<? super Character, ? extends R> function1) {
        for (int i2 = 0; i2 < charSequence.length(); i2++) {
            R invoke = function1.invoke(Character.valueOf(charSequence.charAt(i2)));
            if (invoke != null) {
                c2.add(invoke);
            }
        }
        return c2;
    }

    @NotNull
    public static final <R, C extends Collection<? super R>> C mapTo(@NotNull CharSequence charSequence, @NotNull C c2, @NotNull Function1<? super Character, ? extends R> function1) {
        for (int i2 = 0; i2 < charSequence.length(); i2++) {
            c2.add(function1.invoke(Character.valueOf(charSequence.charAt(i2))));
        }
        return c2;
    }

    @Nullable
    public static final Character max(@NotNull CharSequence charSequence) {
        int lastIndex;
        int i2 = 1;
        if (charSequence.length() == 0) {
            return null;
        }
        char charAt = charSequence.charAt(0);
        lastIndex = StringsKt__StringsKt.getLastIndex(charSequence);
        if (1 <= lastIndex) {
            while (true) {
                char charAt2 = charSequence.charAt(i2);
                if (charAt < charAt2) {
                    charAt = charAt2;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Character.valueOf(charAt);
    }

    @Nullable
    public static final <R extends Comparable<? super R>> Character maxBy(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, ? extends R> function1) {
        int lastIndex;
        int i2 = 1;
        if (charSequence.length() == 0) {
            return null;
        }
        char charAt = charSequence.charAt(0);
        lastIndex = StringsKt__StringsKt.getLastIndex(charSequence);
        if (lastIndex == 0) {
            return Character.valueOf(charAt);
        }
        R invoke = function1.invoke(Character.valueOf(charAt));
        if (1 <= lastIndex) {
            while (true) {
                char charAt2 = charSequence.charAt(i2);
                R invoke2 = function1.invoke(Character.valueOf(charAt2));
                if (invoke.compareTo(invoke2) < 0) {
                    charAt = charAt2;
                    invoke = invoke2;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Character.valueOf(charAt);
    }

    @Nullable
    public static final Character maxWith(@NotNull CharSequence charSequence, @NotNull Comparator<? super Character> comparator) {
        int lastIndex;
        int i2 = 1;
        if (charSequence.length() == 0) {
            return null;
        }
        char charAt = charSequence.charAt(0);
        lastIndex = StringsKt__StringsKt.getLastIndex(charSequence);
        if (1 <= lastIndex) {
            while (true) {
                char charAt2 = charSequence.charAt(i2);
                if (comparator.compare(Character.valueOf(charAt), Character.valueOf(charAt2)) < 0) {
                    charAt = charAt2;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Character.valueOf(charAt);
    }

    @Nullable
    public static final Character min(@NotNull CharSequence charSequence) {
        int lastIndex;
        int i2 = 1;
        if (charSequence.length() == 0) {
            return null;
        }
        char charAt = charSequence.charAt(0);
        lastIndex = StringsKt__StringsKt.getLastIndex(charSequence);
        if (1 <= lastIndex) {
            while (true) {
                char charAt2 = charSequence.charAt(i2);
                if (charAt > charAt2) {
                    charAt = charAt2;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Character.valueOf(charAt);
    }

    @Nullable
    public static final <R extends Comparable<? super R>> Character minBy(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, ? extends R> function1) {
        int lastIndex;
        int i2 = 1;
        if (charSequence.length() == 0) {
            return null;
        }
        char charAt = charSequence.charAt(0);
        lastIndex = StringsKt__StringsKt.getLastIndex(charSequence);
        if (lastIndex == 0) {
            return Character.valueOf(charAt);
        }
        R invoke = function1.invoke(Character.valueOf(charAt));
        if (1 <= lastIndex) {
            while (true) {
                char charAt2 = charSequence.charAt(i2);
                R invoke2 = function1.invoke(Character.valueOf(charAt2));
                if (invoke.compareTo(invoke2) > 0) {
                    charAt = charAt2;
                    invoke = invoke2;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Character.valueOf(charAt);
    }

    @Nullable
    public static final Character minWith(@NotNull CharSequence charSequence, @NotNull Comparator<? super Character> comparator) {
        int lastIndex;
        int i2 = 1;
        if (charSequence.length() == 0) {
            return null;
        }
        char charAt = charSequence.charAt(0);
        lastIndex = StringsKt__StringsKt.getLastIndex(charSequence);
        if (1 <= lastIndex) {
            while (true) {
                char charAt2 = charSequence.charAt(i2);
                if (comparator.compare(Character.valueOf(charAt), Character.valueOf(charAt2)) > 0) {
                    charAt = charAt2;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Character.valueOf(charAt);
    }

    public static final boolean none(@NotNull CharSequence charSequence) {
        return charSequence.length() == 0;
    }

    @SinceKotlin(version = "1.1")
    @NotNull
    public static final <S extends CharSequence> S onEach(@NotNull S s, @NotNull Function1<? super Character, Unit> function1) {
        for (int i2 = 0; i2 < s.length(); i2++) {
            function1.invoke(Character.valueOf(s.charAt(i2)));
        }
        return s;
    }

    @NotNull
    public static final Pair<CharSequence, CharSequence> partition(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, Boolean> function1) {
        StringBuilder sb = new StringBuilder();
        StringBuilder sb2 = new StringBuilder();
        for (int i2 = 0; i2 < charSequence.length(); i2++) {
            char charAt = charSequence.charAt(i2);
            if (function1.invoke(Character.valueOf(charAt)).booleanValue()) {
                sb.append(charAt);
            } else {
                sb2.append(charAt);
            }
        }
        return new Pair<>(sb, sb2);
    }

    @SinceKotlin(version = "1.3")
    @InlineOnly
    private static final char random(@NotNull CharSequence charSequence) {
        return random(charSequence, Random.INSTANCE);
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @InlineOnly
    private static final Character randomOrNull(@NotNull CharSequence charSequence) {
        return randomOrNull(charSequence, Random.INSTANCE);
    }

    public static final char reduce(@NotNull CharSequence charSequence, @NotNull Function2<? super Character, ? super Character, Character> function2) {
        int lastIndex;
        int i2 = 1;
        if (!(charSequence.length() == 0)) {
            char charAt = charSequence.charAt(0);
            lastIndex = StringsKt__StringsKt.getLastIndex(charSequence);
            if (1 <= lastIndex) {
                while (true) {
                    charAt = function2.invoke(Character.valueOf(charAt), Character.valueOf(charSequence.charAt(i2))).charValue();
                    if (i2 == lastIndex) {
                        break;
                    }
                    i2++;
                }
            }
            return charAt;
        }
        throw new UnsupportedOperationException("Empty char sequence can't be reduced.");
    }

    public static final char reduceIndexed(@NotNull CharSequence charSequence, @NotNull Function3<? super Integer, ? super Character, ? super Character, Character> function3) {
        int lastIndex;
        int i2 = 1;
        if (!(charSequence.length() == 0)) {
            char charAt = charSequence.charAt(0);
            lastIndex = StringsKt__StringsKt.getLastIndex(charSequence);
            if (1 <= lastIndex) {
                while (true) {
                    charAt = function3.invoke(Integer.valueOf(i2), Character.valueOf(charAt), Character.valueOf(charSequence.charAt(i2))).charValue();
                    if (i2 == lastIndex) {
                        break;
                    }
                    i2++;
                }
            }
            return charAt;
        }
        throw new UnsupportedOperationException("Empty char sequence can't be reduced.");
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @Nullable
    public static final Character reduceOrNull(@NotNull CharSequence charSequence, @NotNull Function2<? super Character, ? super Character, Character> function2) {
        int lastIndex;
        int i2 = 1;
        if (charSequence.length() == 0) {
            return null;
        }
        char charAt = charSequence.charAt(0);
        lastIndex = StringsKt__StringsKt.getLastIndex(charSequence);
        if (1 <= lastIndex) {
            while (true) {
                charAt = function2.invoke(Character.valueOf(charAt), Character.valueOf(charSequence.charAt(i2))).charValue();
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Character.valueOf(charAt);
    }

    public static final char reduceRight(@NotNull CharSequence charSequence, @NotNull Function2<? super Character, ? super Character, Character> function2) {
        int lastIndex;
        lastIndex = StringsKt__StringsKt.getLastIndex(charSequence);
        if (lastIndex >= 0) {
            char charAt = charSequence.charAt(lastIndex);
            for (int i2 = lastIndex - 1; i2 >= 0; i2--) {
                charAt = function2.invoke(Character.valueOf(charSequence.charAt(i2)), Character.valueOf(charAt)).charValue();
            }
            return charAt;
        }
        throw new UnsupportedOperationException("Empty char sequence can't be reduced.");
    }

    public static final char reduceRightIndexed(@NotNull CharSequence charSequence, @NotNull Function3<? super Integer, ? super Character, ? super Character, Character> function3) {
        int lastIndex;
        lastIndex = StringsKt__StringsKt.getLastIndex(charSequence);
        if (lastIndex >= 0) {
            char charAt = charSequence.charAt(lastIndex);
            for (int i2 = lastIndex - 1; i2 >= 0; i2--) {
                charAt = function3.invoke(Integer.valueOf(i2), Character.valueOf(charSequence.charAt(i2)), Character.valueOf(charAt)).charValue();
            }
            return charAt;
        }
        throw new UnsupportedOperationException("Empty char sequence can't be reduced.");
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @Nullable
    public static final Character reduceRightOrNull(@NotNull CharSequence charSequence, @NotNull Function2<? super Character, ? super Character, Character> function2) {
        int lastIndex;
        lastIndex = StringsKt__StringsKt.getLastIndex(charSequence);
        if (lastIndex < 0) {
            return null;
        }
        char charAt = charSequence.charAt(lastIndex);
        for (int i2 = lastIndex - 1; i2 >= 0; i2--) {
            charAt = function2.invoke(Character.valueOf(charSequence.charAt(i2)), Character.valueOf(charAt)).charValue();
        }
        return Character.valueOf(charAt);
    }

    @NotNull
    public static final CharSequence reversed(@NotNull CharSequence charSequence) {
        StringBuilder reverse = new StringBuilder(charSequence).reverse();
        Intrinsics.checkExpressionValueIsNotNull(reverse, "StringBuilder(this).reverse()");
        return reverse;
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @NotNull
    public static final <R> List<R> scan(@NotNull CharSequence charSequence, R r, @NotNull Function2<? super R, ? super Character, ? extends R> function2) {
        List<R> listOf;
        if (charSequence.length() == 0) {
            listOf = CollectionsKt__CollectionsJVMKt.listOf(r);
            return listOf;
        }
        ArrayList arrayList = new ArrayList(charSequence.length() + 1);
        arrayList.add(r);
        for (int i2 = 0; i2 < charSequence.length(); i2++) {
            r = function2.invoke(r, Character.valueOf(charSequence.charAt(i2)));
            arrayList.add(r);
        }
        return arrayList;
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @NotNull
    public static final <R> List<R> scanIndexed(@NotNull CharSequence charSequence, R r, @NotNull Function3<? super Integer, ? super R, ? super Character, ? extends R> function3) {
        List<R> listOf;
        if (charSequence.length() == 0) {
            listOf = CollectionsKt__CollectionsJVMKt.listOf(r);
            return listOf;
        }
        ArrayList arrayList = new ArrayList(charSequence.length() + 1);
        arrayList.add(r);
        int length = charSequence.length();
        for (int i2 = 0; i2 < length; i2++) {
            r = function3.invoke(Integer.valueOf(i2), r, Character.valueOf(charSequence.charAt(i2)));
            arrayList.add(r);
        }
        return arrayList;
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @NotNull
    public static final List<Character> scanReduce(@NotNull CharSequence charSequence, @NotNull Function2<? super Character, ? super Character, Character> function2) {
        List<Character> emptyList;
        if (charSequence.length() == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        char charAt = charSequence.charAt(0);
        ArrayList arrayList = new ArrayList(charSequence.length());
        arrayList.add(Character.valueOf(charAt));
        int length = charSequence.length();
        for (int i2 = 1; i2 < length; i2++) {
            charAt = function2.invoke(Character.valueOf(charAt), Character.valueOf(charSequence.charAt(i2))).charValue();
            arrayList.add(Character.valueOf(charAt));
        }
        return arrayList;
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @NotNull
    public static final List<Character> scanReduceIndexed(@NotNull CharSequence charSequence, @NotNull Function3<? super Integer, ? super Character, ? super Character, Character> function3) {
        List<Character> emptyList;
        if (charSequence.length() == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        char charAt = charSequence.charAt(0);
        ArrayList arrayList = new ArrayList(charSequence.length());
        arrayList.add(Character.valueOf(charAt));
        int length = charSequence.length();
        for (int i2 = 1; i2 < length; i2++) {
            charAt = function3.invoke(Integer.valueOf(i2), Character.valueOf(charAt), Character.valueOf(charSequence.charAt(i2))).charValue();
            arrayList.add(Character.valueOf(charAt));
        }
        return arrayList;
    }

    public static final char single(@NotNull CharSequence charSequence) {
        int length = charSequence.length();
        if (length != 0) {
            if (length == 1) {
                return charSequence.charAt(0);
            }
            throw new IllegalArgumentException("Char sequence has more than one element.");
        }
        throw new NoSuchElementException("Char sequence is empty.");
    }

    @Nullable
    public static final Character singleOrNull(@NotNull CharSequence charSequence) {
        if (charSequence.length() == 1) {
            return Character.valueOf(charSequence.charAt(0));
        }
        return null;
    }

    @NotNull
    public static final CharSequence slice(@NotNull CharSequence charSequence, @NotNull  Var) {
        return Var.isEmpty() ? "" : StringsKt__StringsKt.subSequence(charSequence, Var);
    }

    public static final int sumBy(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, Integer> function1) {
        int i2 = 0;
        for (int i3 = 0; i3 < charSequence.length(); i3++) {
            i2 += function1.invoke(Character.valueOf(charSequence.charAt(i3))).intValue();
        }
        return i2;
    }

    public static final double sumByDouble(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, Double> function1) {
        double d = 0.0d;
        for (int i2 = 0; i2 < charSequence.length(); i2++) {
            d += function1.invoke(Character.valueOf(charSequence.charAt(i2))).doubleValue();
        }
        return d;
    }

    @NotNull
    public static final CharSequence take(@NotNull CharSequence charSequence, int i2) {
        int coerceAtMost;
        if (i2 >= 0) {
            coerceAtMost = RangesKt___RangesKt.coerceAtMost(i2, charSequence.length());
            return charSequence.subSequence(0, coerceAtMost);
        }
        throw new IllegalArgumentException(("Requested character count " + i2 + " is less than zero.").toString());
    }

    @NotNull
    public static final CharSequence takeLast(@NotNull CharSequence charSequence, int i2) {
        int coerceAtMost;
        if (i2 >= 0) {
            int length = charSequence.length();
            coerceAtMost = RangesKt___RangesKt.coerceAtMost(i2, length);
            return charSequence.subSequence(length - coerceAtMost, length);
        }
        throw new IllegalArgumentException(("Requested character count " + i2 + " is less than zero.").toString());
    }

    @NotNull
    public static final CharSequence takeLastWhile(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, Boolean> function1) {
        int lastIndex;
        for (lastIndex = StringsKt__StringsKt.getLastIndex(charSequence); lastIndex >= 0; lastIndex--) {
            if (!function1.invoke(Character.valueOf(charSequence.charAt(lastIndex))).booleanValue()) {
                return charSequence.subSequence(lastIndex + 1, charSequence.length());
            }
        }
        return charSequence.subSequence(0, charSequence.length());
    }

    @NotNull
    public static final CharSequence takeWhile(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, Boolean> function1) {
        int length = charSequence.length();
        for (int i2 = 0; i2 < length; i2++) {
            if (!function1.invoke(Character.valueOf(charSequence.charAt(i2))).booleanValue()) {
                return charSequence.subSequence(0, i2);
            }
        }
        return charSequence.subSequence(0, charSequence.length());
    }

    @NotNull
    public static final <C extends Collection<? super Character>> C toCollection(@NotNull CharSequence charSequence, @NotNull C c2) {
        for (int i2 = 0; i2 < charSequence.length(); i2++) {
            c2.add(Character.valueOf(charSequence.charAt(i2)));
        }
        return c2;
    }

    @NotNull
    public static final HashSet<Character> toHashSet(@NotNull CharSequence charSequence) {
        int mapCapacity;
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(charSequence.length());
        return (HashSet) toCollection(charSequence, new HashSet(mapCapacity));
    }

    @NotNull
    public static final List<Character> toList(@NotNull CharSequence charSequence) {
        List<Character> emptyList;
        List<Character> listOf;
        int length = charSequence.length();
        if (length == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        } else if (length != 1) {
            return toMutableList(charSequence);
        } else {
            listOf = CollectionsKt__CollectionsJVMKt.listOf(Character.valueOf(charSequence.charAt(0)));
            return listOf;
        }
    }

    @NotNull
    public static final List<Character> toMutableList(@NotNull CharSequence charSequence) {
        return (List) toCollection(charSequence, new ArrayList(charSequence.length()));
    }

    @NotNull
    public static final Set<Character> toSet(@NotNull CharSequence charSequence) {
        Set<Character> emptySet;
        Set<Character> of;
        int mapCapacity;
        int length = charSequence.length();
        if (length == 0) {
            emptySet = SetsKt__SetsKt.emptySet();
            return emptySet;
        } else if (length != 1) {
            mapCapacity = MapsKt__MapsJVMKt.mapCapacity(charSequence.length());
            return (Set) toCollection(charSequence, new LinkedHashSet(mapCapacity));
        } else {
            of = SetsKt__SetsJVMKt.setOf(Character.valueOf(charSequence.charAt(0)));
            return of;
        }
    }

    @SinceKotlin(version = "1.2")
    @NotNull
    public static final List<String> windowed(@NotNull CharSequence charSequence, int i2, int i3, boolean z) {
        return windowed(charSequence, i2, i3, z, new Function1<CharSequence, String>() { // from class: kotlin.text.StringsKt___StringsKt$windowed$1
            @Override // kotlin.jvm.functions.Function1
            @NotNull
            public final String invoke(@NotNull CharSequence charSequence2) {
                return charSequence2.toString();
            }
        });
    }

    public static /* synthetic */ List windowed$default(CharSequence charSequence, int i2, int i3, boolean z, int i4, Object obj) {
        if ((i4 & 2) != 0) {
            i3 = 1;
        }
        if ((i4 & 4) != 0) {
            z = false;
        }
        return windowed(charSequence, i2, i3, z);
    }

    @SinceKotlin(version = "1.2")
    @NotNull
    public static final Sequence<String> windowedSequence(@NotNull CharSequence charSequence, int i2, int i3, boolean z) {
        return windowedSequence(charSequence, i2, i3, z, new Function1<CharSequence, String>() { // from class: kotlin.text.StringsKt___StringsKt$windowedSequence$1
            @Override // kotlin.jvm.functions.Function1
            @NotNull
            public final String invoke(@NotNull CharSequence charSequence2) {
                return charSequence2.toString();
            }
        });
    }

    public static /* synthetic */ Sequence windowedSequence$default(CharSequence charSequence, int i2, int i3, boolean z, int i4, Object obj) {
        if ((i4 & 2) != 0) {
            i3 = 1;
        }
        if ((i4 & 4) != 0) {
            z = false;
        }
        return windowedSequence(charSequence, i2, i3, z);
    }

    @NotNull
    public static final Iterable<IndexedValue<Character>> withIndex(@NotNull final CharSequence charSequence) {
        return new IndexingIterable(new Function0<CharIterator>() { // from class: kotlin.text.StringsKt___StringsKt$withIndex$1
            /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
            {
                super(0);
            }

            @Override // kotlin.jvm.functions.Function0
            @NotNull
            public final CharIterator invoke() {
                return StringsKt__StringsKt.iterator(charSequence);
            }
        });
    }

    @NotNull
    public static final <V> List<V> zip(@NotNull CharSequence charSequence, @NotNull CharSequence charSequence2, @NotNull Function2<? super Character, ? super Character, ? extends V> function2) {
        int min = Math.min(charSequence.length(), charSequence2.length());
        ArrayList arrayList = new ArrayList(min);
        for (int i2 = 0; i2 < min; i2++) {
            arrayList.add(function2.invoke(Character.valueOf(charSequence.charAt(i2)), Character.valueOf(charSequence2.charAt(i2))));
        }
        return arrayList;
    }

    @SinceKotlin(version = "1.2")
    @NotNull
    public static final <R> List<R> zipWithNext(@NotNull CharSequence charSequence, @NotNull Function2<? super Character, ? super Character, ? extends R> function2) {
        List<R> emptyList;
        int length = charSequence.length() - 1;
        if (length < 1) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        ArrayList arrayList = new ArrayList(length);
        int i2 = 0;
        while (i2 < length) {
            i2++;
            arrayList.add(function2.invoke(Character.valueOf(charSequence.charAt(i2)), Character.valueOf(charSequence.charAt(i2))));
        }
        return arrayList;
    }

    public static final boolean any(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, Boolean> function1) {
        for (int i2 = 0; i2 < charSequence.length(); i2++) {
            if (function1.invoke(Character.valueOf(charSequence.charAt(i2))).booleanValue()) {
                return true;
            }
        }
        return false;
    }

    @SinceKotlin(version = "1.2")
    @NotNull
    public static final <R> List<R> chunked(@NotNull CharSequence charSequence, int i2, @NotNull Function1<? super CharSequence, ? extends R> function1) {
        return windowed(charSequence, i2, i2, true, function1);
    }

    @SinceKotlin(version = "1.2")
    @NotNull
    public static final <R> Sequence<R> chunkedSequence(@NotNull CharSequence charSequence, int i2, @NotNull Function1<? super CharSequence, ? extends R> function1) {
        return windowedSequence(charSequence, i2, i2, true, function1);
    }

    public static final int count(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, Boolean> function1) {
        int i2 = 0;
        for (int i3 = 0; i3 < charSequence.length(); i3++) {
            if (function1.invoke(Character.valueOf(charSequence.charAt(i3))).booleanValue()) {
                i2++;
            }
        }
        return i2;
    }

    @Nullable
    public static final Character firstOrNull(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, Boolean> function1) {
        for (int i2 = 0; i2 < charSequence.length(); i2++) {
            char charAt = charSequence.charAt(i2);
            if (function1.invoke(Character.valueOf(charAt)).booleanValue()) {
                return Character.valueOf(charAt);
            }
        }
        return null;
    }

    @Nullable
    public static final Character lastOrNull(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, Boolean> function1) {
        char charAt;
        int length = charSequence.length();
        do {
            length--;
            if (length < 0) {
                return null;
            }
            charAt = charSequence.charAt(length);
        } while (!function1.invoke(Character.valueOf(charAt)).booleanValue());
        return Character.valueOf(charAt);
    }

    public static final boolean none(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, Boolean> function1) {
        for (int i2 = 0; i2 < charSequence.length(); i2++) {
            if (function1.invoke(Character.valueOf(charSequence.charAt(i2))).booleanValue()) {
                return false;
            }
        }
        return true;
    }

    @SinceKotlin(version = "1.3")
    public static final char random(@NotNull CharSequence charSequence, @NotNull Random random) {
        if (!(charSequence.length() == 0)) {
            return charSequence.charAt(random.nextInt(charSequence.length()));
        }
        throw new NoSuchElementException("Char sequence is empty.");
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @Nullable
    public static final Character randomOrNull(@NotNull CharSequence charSequence, @NotNull Random random) {
        if (charSequence.length() == 0) {
            return null;
        }
        return Character.valueOf(charSequence.charAt(random.nextInt(charSequence.length())));
    }

    @InlineOnly
    private static final String reversed(@NotNull String str) {
        if (str != null) {
            return reversed((CharSequence) str).toString();
        }
        throw new TypeCastException("null cannot be cast to non-null type kotlin.CharSequence");
    }

    @Nullable
    public static final Character singleOrNull(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, Boolean> function1) {
        Character ch = null;
        boolean z = false;
        for (int i2 = 0; i2 < charSequence.length(); i2++) {
            char charAt = charSequence.charAt(i2);
            if (function1.invoke(Character.valueOf(charAt)).booleanValue()) {
                if (z) {
                    return null;
                }
                ch = Character.valueOf(charAt);
                z = true;
            }
        }
        if (z) {
            return ch;
        }
        return null;
    }

    @SinceKotlin(version = "1.2")
    @NotNull
    public static final <R> List<R> windowed(@NotNull CharSequence charSequence, int i2, int i3, boolean z, @NotNull Function1<? super CharSequence, ? extends R> function1) {
        SlidingWindowKt.checkWindowSizeStep(i2, i3);
        int length = charSequence.length();
        int i4 = 0;
        ArrayList arrayList = new ArrayList((length / i3) + (length % i3 == 0 ? 0 : 1));
        while (i4 >= 0 && length > i4) {
            int i5 = i4 + i2;
            if (i5 < 0 || i5 > length) {
                if (!z) {
                    break;
                }
                i5 = length;
            }
            arrayList.add(function1.invoke(charSequence.subSequence(i4, i5)));
            i4 += i3;
        }
        return arrayList;
    }

    public static /* synthetic */ List windowed$default(CharSequence charSequence, int i2, int i3, boolean z, Function1 function1, int i4, Object obj) {
        if ((i4 & 2) != 0) {
            i3 = 1;
        }
        if ((i4 & 4) != 0) {
            z = false;
        }
        return windowed(charSequence, i2, i3, z, function1);
    }

    @SinceKotlin(version = "1.2")
    @NotNull
    public static final <R> Sequence<R> windowedSequence(@NotNull final CharSequence charSequence, final int i2, int i3, boolean z, @NotNull final Function1<? super CharSequence, ? extends R> function1) {
        IntProgression step;
        Sequence asSequence;
        Sequence<R> map;
        SlidingWindowKt.checkWindowSizeStep(i2, i3);
        step = RangesKt___RangesKt.step(z ? StringsKt__StringsKt.getIndices(charSequence) : RangesKt___RangesKt.until(0, (charSequence.length() - i2) + 1), i3);
        asSequence = CollectionsKt___CollectionsKt.asSequence(step);
        map = SequencesKt___SequencesKt.map(asSequence, new Function1<Integer, R>() { // from class: kotlin.text.StringsKt___StringsKt$windowedSequence$2
            /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
            {
                super(1);
            }

            public final R invoke(int i4) {
                int i5 = i2 + i4;
                if (i5 < 0 || i5 > charSequence.length()) {
                    i5 = charSequence.length();
                }
                return (R) function1.invoke(charSequence.subSequence(i4, i5));
            }

            @Override // kotlin.jvm.functions.Function1
            public /* bridge */ /* synthetic */ Object invoke(Integer num) {
                return invoke(num.intValue());
            }
        });
        return map;
    }

    public static /* synthetic */ Sequence windowedSequence$default(CharSequence charSequence, int i2, int i3, boolean z, Function1 function1, int i4, Object obj) {
        if ((i4 & 2) != 0) {
            i3 = 1;
        }
        if ((i4 & 4) != 0) {
            z = false;
        }
        return windowedSequence(charSequence, i2, i3, z, function1);
    }

    @NotNull
    public static final <K, V, M extends Map<? super K, ? super V>> M associateByTo(@NotNull CharSequence charSequence, @NotNull M m2, @NotNull Function1<? super Character, ? extends K> function1, @NotNull Function1<? super Character, ? extends V> function12) {
        for (int i2 = 0; i2 < charSequence.length(); i2++) {
            char charAt = charSequence.charAt(i2);
            m2.put(function1.invoke(Character.valueOf(charAt)), function12.invoke(Character.valueOf(charAt)));
        }
        return m2;
    }

    @NotNull
    public static final String drop(@NotNull String str, int i2) {
        int coerceAtMost;
        if (i2 >= 0) {
            coerceAtMost = RangesKt___RangesKt.coerceAtMost(i2, str.length());
            String substring = str.substring(coerceAtMost);
            Intrinsics.checkExpressionValueIsNotNull(substring, "(this as java.lang.String).substring(startIndex)");
            return substring;
        }
        throw new IllegalArgumentException(("Requested character count " + i2 + " is less than zero.").toString());
    }

    @NotNull
    public static final String dropLast(@NotNull String str, int i2) {
        int coerceAtLeast;
        if (i2 >= 0) {
            coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(str.length() - i2, 0);
            return take(str, coerceAtLeast);
        }
        throw new IllegalArgumentException(("Requested character count " + i2 + " is less than zero.").toString());
    }

    @NotNull
    public static final String filterNot(@NotNull String str, @NotNull Function1<? super Character, Boolean> function1) {
        StringBuilder sb = new StringBuilder();
        for (int i2 = 0; i2 < str.length(); i2++) {
            char charAt = str.charAt(i2);
            if (!function1.invoke(Character.valueOf(charAt)).booleanValue()) {
                sb.append(charAt);
            }
        }
        String sb2 = sb.toString();
        Intrinsics.checkExpressionValueIsNotNull(sb2, "filterNotTo(StringBuilder(), predicate).toString()");
        return sb2;
    }

    @NotNull
    public static final String slice(@NotNull String str, @NotNull  Var) {
        return Var.isEmpty() ? "" : StringsKt__StringsKt.substring(str, Var);
    }

    @NotNull
    public static final String take(@NotNull String str, int i2) {
        int coerceAtMost;
        if (i2 >= 0) {
            coerceAtMost = RangesKt___RangesKt.coerceAtMost(i2, str.length());
            String substring = str.substring(0, coerceAtMost);
            Intrinsics.checkExpressionValueIsNotNull(substring, "(this as java.lang.Strin\u2026ing(startIndex, endIndex)");
            return substring;
        }
        throw new IllegalArgumentException(("Requested character count " + i2 + " is less than zero.").toString());
    }

    @NotNull
    public static final String dropLastWhile(@NotNull String str, @NotNull Function1<? super Character, Boolean> function1) {
        int lastIndex;
        for (lastIndex = StringsKt__StringsKt.getLastIndex(str); lastIndex >= 0; lastIndex--) {
            if (!function1.invoke(Character.valueOf(str.charAt(lastIndex))).booleanValue()) {
                String substring = str.substring(0, lastIndex + 1);
                Intrinsics.checkExpressionValueIsNotNull(substring, "(this as java.lang.Strin\u2026ing(startIndex, endIndex)");
                return substring;
            }
        }
        return "";
    }

    @NotNull
    public static final String dropWhile(@NotNull String str, @NotNull Function1<? super Character, Boolean> function1) {
        int length = str.length();
        for (int i2 = 0; i2 < length; i2++) {
            if (!function1.invoke(Character.valueOf(str.charAt(i2))).booleanValue()) {
                String substring = str.substring(i2);
                Intrinsics.checkExpressionValueIsNotNull(substring, "(this as java.lang.String).substring(startIndex)");
                return substring;
            }
        }
        return "";
    }

    @NotNull
    public static final String filterIndexed(@NotNull String str, @NotNull Function2<? super Integer, ? super Character, Boolean> function2) {
        StringBuilder sb = new StringBuilder();
        int i2 = 0;
        int i3 = 0;
        while (i2 < str.length()) {
            char charAt = str.charAt(i2);
            int i4 = i3 + 1;
            if (function2.invoke(Integer.valueOf(i3), Character.valueOf(charAt)).booleanValue()) {
                sb.append(charAt);
            }
            i2++;
            i3 = i4;
        }
        String sb2 = sb.toString();
        Intrinsics.checkExpressionValueIsNotNull(sb2, "filterIndexedTo(StringBu\u2026(), predicate).toString()");
        return sb2;
    }

    public static final char first(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, Boolean> function1) {
        for (int i2 = 0; i2 < charSequence.length(); i2++) {
            char charAt = charSequence.charAt(i2);
            if (function1.invoke(Character.valueOf(charAt)).booleanValue()) {
                return charAt;
            }
        }
        throw new NoSuchElementException("Char sequence contains no character matching the predicate.");
    }

    public static final char last(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, Boolean> function1) {
        char charAt;
        int length = charSequence.length();
        do {
            length--;
            if (length >= 0) {
                charAt = charSequence.charAt(length);
            } else {
                throw new NoSuchElementException("Char sequence contains no character matching the predicate.");
            }
        } while (!function1.invoke(Character.valueOf(charAt)).booleanValue());
        return charAt;
    }

    @NotNull
    public static final String takeLast(@NotNull String str, int i2) {
        int coerceAtMost;
        if (i2 >= 0) {
            int length = str.length();
            coerceAtMost = RangesKt___RangesKt.coerceAtMost(i2, length);
            String substring = str.substring(length - coerceAtMost);
            Intrinsics.checkExpressionValueIsNotNull(substring, "(this as java.lang.String).substring(startIndex)");
            return substring;
        }
        throw new IllegalArgumentException(("Requested character count " + i2 + " is less than zero.").toString());
    }

    @NotNull
    public static final List<Pair<Character, Character>> zip(@NotNull CharSequence charSequence, @NotNull CharSequence charSequence2) {
        int min = Math.min(charSequence.length(), charSequence2.length());
        ArrayList arrayList = new ArrayList(min);
        for (int i2 = 0; i2 < min; i2++) {
            arrayList.add(TuplesKt.to(Character.valueOf(charSequence.charAt(i2)), Character.valueOf(charSequence2.charAt(i2))));
        }
        return arrayList;
    }

    @NotNull
    public static final <K, V> Map<K, V> associateBy(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, ? extends K> function1, @NotNull Function1<? super Character, ? extends V> function12) {
        int mapCapacity;
        int coerceAtLeast;
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(charSequence.length());
        coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(mapCapacity, 16);
        LinkedHashMap linkedHashMap = new LinkedHashMap(coerceAtLeast);
        for (int i2 = 0; i2 < charSequence.length(); i2++) {
            char charAt = charSequence.charAt(i2);
            linkedHashMap.put(function1.invoke(Character.valueOf(charAt)), function12.invoke(Character.valueOf(charAt)));
        }
        return linkedHashMap;
    }

    @NotNull
    public static final String filter(@NotNull String str, @NotNull Function1<? super Character, Boolean> function1) {
        StringBuilder sb = new StringBuilder();
        int length = str.length();
        for (int i2 = 0; i2 < length; i2++) {
            char charAt = str.charAt(i2);
            if (function1.invoke(Character.valueOf(charAt)).booleanValue()) {
                sb.append(charAt);
            }
        }
        String sb2 = sb.toString();
        Intrinsics.checkExpressionValueIsNotNull(sb2, "filterTo(StringBuilder(), predicate).toString()");
        return sb2;
    }

    public static final char single(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, Boolean> function1) {
        Character ch = null;
        boolean z = false;
        for (int i2 = 0; i2 < charSequence.length(); i2++) {
            char charAt = charSequence.charAt(i2);
            if (function1.invoke(Character.valueOf(charAt)).booleanValue()) {
                if (!z) {
                    ch = Character.valueOf(charAt);
                    z = true;
                } else {
                    throw new IllegalArgumentException("Char sequence contains more than one matching element.");
                }
            }
        }
        if (z) {
            if (ch != null) {
                return ch.charValue();
            }
            throw new TypeCastException("null cannot be cast to non-null type kotlin.Char");
        }
        throw new NoSuchElementException("Char sequence contains no character matching the predicate.");
    }

    @NotNull
    public static final CharSequence slice(@NotNull CharSequence charSequence, @NotNull Iterable<Integer> iterable) {
        int collectionSizeOrDefault;
        collectionSizeOrDefault = CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10);
        if (collectionSizeOrDefault == 0) {
            return "";
        }
        StringBuilder sb = new StringBuilder(collectionSizeOrDefault);
        Iterator<Integer> it = iterable.iterator();
        while (it.hasNext()) {
            sb.append(charSequence.charAt(it.next().intValue()));
        }
        return sb;
    }

    @NotNull
    public static final String takeLastWhile(@NotNull String str, @NotNull Function1<? super Character, Boolean> function1) {
        int lastIndex;
        for (lastIndex = StringsKt__StringsKt.getLastIndex(str); lastIndex >= 0; lastIndex--) {
            if (!function1.invoke(Character.valueOf(str.charAt(lastIndex))).booleanValue()) {
                String substring = str.substring(lastIndex + 1);
                Intrinsics.checkExpressionValueIsNotNull(substring, "(this as java.lang.String).substring(startIndex)");
                return substring;
            }
        }
        return str;
    }

    @NotNull
    public static final String takeWhile(@NotNull String str, @NotNull Function1<? super Character, Boolean> function1) {
        int length = str.length();
        for (int i2 = 0; i2 < length; i2++) {
            if (!function1.invoke(Character.valueOf(str.charAt(i2))).booleanValue()) {
                String substring = str.substring(0, i2);
                Intrinsics.checkExpressionValueIsNotNull(substring, "(this as java.lang.Strin\u2026ing(startIndex, endIndex)");
                return substring;
            }
        }
        return str;
    }

    @SinceKotlin(version = "1.2")
    @NotNull
    public static final List<Pair<Character, Character>> zipWithNext(@NotNull CharSequence charSequence) {
        List<Pair<Character, Character>> emptyList;
        int length = charSequence.length() - 1;
        if (length < 1) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        ArrayList arrayList = new ArrayList(length);
        int i2 = 0;
        while (i2 < length) {
            char charAt = charSequence.charAt(i2);
            i2++;
            arrayList.add(TuplesKt.to(Character.valueOf(charAt), Character.valueOf(charSequence.charAt(i2))));
        }
        return arrayList;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @NotNull
    public static final <K, V, M extends Map<? super K, List<V>>> M groupByTo(@NotNull CharSequence charSequence, @NotNull M m2, @NotNull Function1<? super Character, ? extends K> function1, @NotNull Function1<? super Character, ? extends V> function12) {
        for (int i2 = 0; i2 < charSequence.length(); i2++) {
            char charAt = charSequence.charAt(i2);
            K invoke = function1.invoke(Character.valueOf(charAt));
            Object obj = m2.get(invoke);
            if (obj == null) {
                obj = new ArrayList();
                m2.put(invoke, obj);
            }
            ((List) obj).add(function12.invoke(Character.valueOf(charAt)));
        }
        return m2;
    }

    @NotNull
    public static final Pair<String, String> partition(@NotNull String str, @NotNull Function1<? super Character, Boolean> function1) {
        StringBuilder sb = new StringBuilder();
        StringBuilder sb2 = new StringBuilder();
        int length = str.length();
        for (int i2 = 0; i2 < length; i2++) {
            char charAt = str.charAt(i2);
            if (function1.invoke(Character.valueOf(charAt)).booleanValue()) {
                sb.append(charAt);
            } else {
                sb2.append(charAt);
            }
        }
        return new Pair<>(sb.toString(), sb2.toString());
    }

    @NotNull
    public static final <K, V> Map<K, List<V>> groupBy(@NotNull CharSequence charSequence, @NotNull Function1<? super Character, ? extends K> function1, @NotNull Function1<? super Character, ? extends V> function12) {
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        for (int i2 = 0; i2 < charSequence.length(); i2++) {
            char charAt = charSequence.charAt(i2);
            K invoke = function1.invoke(Character.valueOf(charAt));
            List<V> list = linkedHashMap.get(invoke);
            if (list == null) {
                list = new ArrayList<>();
                linkedHashMap.put(invoke, list);
            }
            list.add(function12.invoke(Character.valueOf(charAt)));
        }
        return linkedHashMap;
    }

    @InlineOnly
    private static final String slice(@NotNull String str, Iterable<Integer> iterable) {
        if (str != null) {
            return slice((CharSequence) str, iterable).toString();
        }
        throw new TypeCastException("null cannot be cast to non-null type kotlin.CharSequence");
    }
}
