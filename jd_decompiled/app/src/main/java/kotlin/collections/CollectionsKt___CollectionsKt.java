package kotlin.collections;

import ..;
import com.jingdong.app.mall.bundle.order_center_isv_core.util.OrderISVUtil;
import com.jingdong.common.apkcenter.ApkDownloadTable;
import com.jingdong.common.entity.personal.PersonalConstants;
import com.jingdong.common.jump.JumpUtil;
import com.jingdong.common.unification.navigationbar.db.NavigationDbConstants;
import com.jingdong.jdsdk.a.a;
import com.jingdong.jdsdk.constant.CartConstant;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.RandomAccess;
import java.util.Set;
import kotlin.ExperimentalStdlibApi;
import kotlin.Metadata;
import kotlin.Pair;
import kotlin.SinceKotlin;
import kotlin.TuplesKt;
import kotlin.TypeCastException;
import kotlin.Unit;
import kotlin.comparisons.ComparisonsKt__ComparisonsKt;
import kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareBy$2;
import kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareByDescending$1;
import kotlin.internal.HidesMembers;
import kotlin.internal.InlineOnly;
import kotlin.internal.PlatformImplementationsKt;
import kotlin.jvm.JvmName;
import kotlin.jvm.functions.Function0;
import kotlin.jvm.functions.Function1;
import kotlin.jvm.functions.Function2;
import kotlin.jvm.functions.Function3;
import kotlin.jvm.internal.DoubleCompanionObject;
import kotlin.jvm.internal.Intrinsics;
import kotlin.random.Random;
import kotlin.ranges.RangesKt___RangesKt;
import kotlin.sequences.Sequence;
import kotlin.sequences.SequencesKt___SequencesKt;
import kotlin.text.StringsKt__AppendableKt;
import org.apache.commons.codec.language.bm.Languages;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

@Metadata(bv = {1, 0, 3}, d1 = {"\u0000\u00d4\u0002\n\u0000\n\u0002\u0010 \n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0002\u0010\u001c\n\u0000\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\b\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0019\n\u0002\u0010\u001e\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u000e\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010\u001f\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u0000\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\b\t\n\u0002\u0010\u000f\n\u0002\u0010!\n\u0000\n\u0002\u0010\u0002\n\u0002\b\t\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010\u0018\n\u0002\b\u0002\n\u0002\u0010\u0005\n\u0002\u0010\u0012\n\u0002\b\u0002\n\u0002\u0010\f\n\u0002\u0010\u0019\n\u0002\b\u0002\n\u0002\u0010\u0006\n\u0002\u0010\u0013\n\u0002\b\u0002\n\u0002\u0010\u0007\n\u0002\u0010\u0014\n\u0002\b\u0002\n\u0002\u0010\u0015\n\u0002\b\u0002\n\u0002\u0010\t\n\u0002\u0010\u0016\n\u0002\b\u0002\n\u0002\u0010\n\n\u0002\u0010\u0017\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\b\u0006\n\u0002\u0010%\n\u0002\b\t\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\"\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0002\b\n\n\u0002\u0018\u0002\n\u0002\b\b\n\u0002\u0010#\n\u0002\b\u000e\n\u0002\u0018\u0002\n\u0002\b4\n\u0002\u0010\u0011\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0015\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\r\n\u0002\b\u0007\n\u0002\u0010\u000e\n\u0002\b\u0017\u001a \u0010\u0002\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u0001H\u0087\n\u00a2\u0006\u0004\b\u0002\u0010\u0003\u001a \u0010\u0004\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u0001H\u0087\n\u00a2\u0006\u0004\b\u0004\u0010\u0003\u001a \u0010\u0005\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u0001H\u0087\n\u00a2\u0006\u0004\b\u0005\u0010\u0003\u001a \u0010\u0006\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u0001H\u0087\n\u00a2\u0006\u0004\b\u0006\u0010\u0003\u001a \u0010\u0007\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u0001H\u0087\n\u00a2\u0006\u0004\b\u0007\u0010\u0003\u001a-\u0010\f\u001a\u00020\u000b\"\t\b\u0000\u0010\u0000\u00a2\u0006\u0002\b\b*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u0010\n\u001a\u00028\u0000H\u0086\u0002\u00a2\u0006\u0004\b\f\u0010\r\u001a%\u0010\u0010\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u0010\u000f\u001a\u00020\u000e\u00a2\u0006\u0004\b\u0010\u0010\u0011\u001a(\u0010\u0010\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u0010\u000f\u001a\u00020\u000eH\u0087\b\u00a2\u0006\u0004\b\u0010\u0010\u0012\u001a9\u0010\u0015\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u0010\u000f\u001a\u00020\u000e2\u0012\u0010\u0014\u001a\u000e\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00028\u00000\u0013\u00a2\u0006\u0004\b\u0015\u0010\u0016\u001a<\u0010\u0015\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u0010\u000f\u001a\u00020\u000e2\u0012\u0010\u0014\u001a\u000e\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00028\u00000\u0013H\u0087\b\u00a2\u0006\u0004\b\u0015\u0010\u0017\u001a'\u0010\u0018\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u0010\u000f\u001a\u00020\u000e\u00a2\u0006\u0004\b\u0018\u0010\u0011\u001a*\u0010\u0018\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u0010\u000f\u001a\u00020\u000eH\u0087\b\u00a2\u0006\u0004\b\u0018\u0010\u0012\u001a6\u0010\u001a\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0087\b\u00a2\u0006\u0004\b\u001a\u0010\u001b\u001a6\u0010\u001c\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0087\b\u00a2\u0006\u0004\b\u001c\u0010\u001b\u001a6\u0010\u001c\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0087\b\u00a2\u0006\u0004\b\u001c\u0010\u001d\u001a\u001d\u0010\u001e\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t\u00a2\u0006\u0004\b\u001e\u0010\u001f\u001a\u001d\u0010\u001e\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u0001\u00a2\u0006\u0004\b\u001e\u0010\u0003\u001a4\u0010\u001e\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0086\b\u00a2\u0006\u0004\b\u001e\u0010\u001b\u001a\u001f\u0010 \u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t\u00a2\u0006\u0004\b \u0010\u001f\u001a\u001f\u0010 \u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u0001\u00a2\u0006\u0004\b \u0010\u0003\u001a6\u0010 \u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0086\b\u00a2\u0006\u0004\b \u0010\u001b\u001a<\u0010!\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u0010\u000f\u001a\u00020\u000e2\u0012\u0010\u0014\u001a\u000e\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00028\u00000\u0013H\u0087\b\u00a2\u0006\u0004\b!\u0010\u0017\u001a'\u0010\"\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u0010\u000f\u001a\u00020\u000e\u00a2\u0006\u0004\b\"\u0010\u0012\u001a*\u0010#\u001a\u00020\u000e\"\t\b\u0000\u0010\u0000\u00a2\u0006\u0002\b\b*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u0010\n\u001a\u00028\u0000\u00a2\u0006\u0004\b#\u0010$\u001a*\u0010#\u001a\u00020\u000e\"\t\b\u0000\u0010\u0000\u00a2\u0006\u0002\b\b*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u0010\n\u001a\u00028\u0000\u00a2\u0006\u0004\b#\u0010%\u001a4\u0010&\u001a\u00020\u000e\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0086\b\u00a2\u0006\u0004\b&\u0010'\u001a4\u0010&\u001a\u00020\u000e\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0086\b\u00a2\u0006\u0004\b&\u0010(\u001a4\u0010)\u001a\u00020\u000e\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0086\b\u00a2\u0006\u0004\b)\u0010'\u001a4\u0010)\u001a\u00020\u000e\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0086\b\u00a2\u0006\u0004\b)\u0010(\u001a\u001d\u0010*\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t\u00a2\u0006\u0004\b*\u0010\u001f\u001a\u001d\u0010*\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u0001\u00a2\u0006\u0004\b*\u0010\u0003\u001a4\u0010*\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0086\b\u00a2\u0006\u0004\b*\u0010\u001b\u001a4\u0010*\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0086\b\u00a2\u0006\u0004\b*\u0010\u001d\u001a*\u0010+\u001a\u00020\u000e\"\t\b\u0000\u0010\u0000\u00a2\u0006\u0002\b\b*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u0010\n\u001a\u00028\u0000\u00a2\u0006\u0004\b+\u0010$\u001a*\u0010+\u001a\u00020\u000e\"\t\b\u0000\u0010\u0000\u00a2\u0006\u0002\b\b*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u0010\n\u001a\u00028\u0000\u00a2\u0006\u0004\b+\u0010%\u001a\u001f\u0010,\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t\u00a2\u0006\u0004\b,\u0010\u001f\u001a\u001f\u0010,\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u0001\u00a2\u0006\u0004\b,\u0010\u0003\u001a6\u0010,\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0086\b\u00a2\u0006\u0004\b,\u0010\u001b\u001a6\u0010,\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0086\b\u00a2\u0006\u0004\b,\u0010\u001d\u001a \u0010.\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000-H\u0087\b\u00a2\u0006\u0004\b.\u0010/\u001a'\u0010.\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000-2\u0006\u0010.\u001a\u000200H\u0007\u00a2\u0006\u0004\b.\u00101\u001a\"\u00102\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000-H\u0087\b\u00a2\u0006\u0004\b2\u0010/\u001a)\u00102\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000-2\u0006\u0010.\u001a\u000200H\u0007\u00a2\u0006\u0004\b2\u00101\u001a\u001d\u00103\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t\u00a2\u0006\u0004\b3\u0010\u001f\u001a\u001d\u00103\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u0001\u00a2\u0006\u0004\b3\u0010\u0003\u001a4\u00103\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0086\b\u00a2\u0006\u0004\b3\u0010\u001b\u001a\u001f\u00104\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t\u00a2\u0006\u0004\b4\u0010\u001f\u001a\u001f\u00104\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u0001\u00a2\u0006\u0004\b4\u0010\u0003\u001a6\u00104\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0086\b\u00a2\u0006\u0004\b4\u0010\u001b\u001a+\u00106\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u00105\u001a\u00020\u000e\u00a2\u0006\u0004\b6\u00107\u001a+\u00108\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u00105\u001a\u00020\u000e\u00a2\u0006\u0004\b8\u00109\u001a:\u0010:\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0086\b\u00a2\u0006\u0004\b:\u0010;\u001a:\u0010<\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0086\b\u00a2\u0006\u0004\b<\u0010=\u001a:\u0010>\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0086\b\u00a2\u0006\u0004\b>\u0010=\u001aO\u0010B\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2'\u0010\u0019\u001a#\u0012\u0013\u0012\u00110\u000e\u00a2\u0006\f\b@\u0012\b\bA\u0012\u0004\b\b(\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0?H\u0086\b\u00a2\u0006\u0004\bB\u0010C\u001ac\u0010G\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0000\"\u0010\b\u0001\u0010E*\n\u0012\u0006\b\u0000\u0012\u00028\u00000D*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u0010F\u001a\u00028\u00012'\u0010\u0019\u001a#\u0012\u0013\u0012\u00110\u000e\u00a2\u0006\f\b@\u0012\b\bA\u0012\u0004\b\b(\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0?H\u0086\b\u00a2\u0006\u0004\bG\u0010H\u001a+\u0010K\u001a\r\u0012\t\u0012\u00078\u0000\u00a2\u0006\u0002\bJ0\u0001\"\u0006\b\u0000\u0010I\u0018\u0001*\u0006\u0012\u0002\b\u00030\tH\u0086\b\u00a2\u0006\u0004\bK\u0010L\u001a:\u0010M\u001a\u00028\u0001\"\u0006\b\u0000\u0010I\u0018\u0001\"\u0010\b\u0001\u0010E*\n\u0012\u0006\b\u0000\u0012\u00028\u00000D*\u0006\u0012\u0002\b\u00030\t2\u0006\u0010F\u001a\u00028\u0001H\u0086\b\u00a2\u0006\u0004\bM\u0010N\u001a:\u0010O\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0086\b\u00a2\u0006\u0004\bO\u0010=\u001a)\u0010Q\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\b\b\u0000\u0010\u0000*\u00020P*\n\u0012\u0006\u0012\u0004\u0018\u00018\u00000\t\u00a2\u0006\u0004\bQ\u0010L\u001a=\u0010R\u001a\u00028\u0000\"\u0010\b\u0000\u0010E*\n\u0012\u0006\b\u0000\u0012\u00028\u00010D\"\b\b\u0001\u0010\u0000*\u00020P*\n\u0012\u0006\u0012\u0004\u0018\u00018\u00010\t2\u0006\u0010F\u001a\u00028\u0000\u00a2\u0006\u0004\bR\u0010N\u001aN\u0010S\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0000\"\u0010\b\u0001\u0010E*\n\u0012\u0006\b\u0000\u0012\u00028\u00000D*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u0010F\u001a\u00028\u00012\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0086\b\u00a2\u0006\u0004\bS\u0010T\u001aN\u0010U\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0000\"\u0010\b\u0001\u0010E*\n\u0012\u0006\b\u0000\u0012\u00028\u00000D*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u0010F\u001a\u00028\u00012\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0086\b\u00a2\u0006\u0004\bU\u0010T\u001a+\u0010X\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u0010W\u001a\u00020V\u00a2\u0006\u0004\bX\u0010Y\u001a1\u0010X\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\f\u0010W\u001a\b\u0012\u0004\u0012\u00020\u000e0\t\u00a2\u0006\u0004\bX\u0010Z\u001a+\u0010[\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u00105\u001a\u00020\u000e\u00a2\u0006\u0004\b[\u00107\u001a+\u0010\\\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0006\u00105\u001a\u00020\u000e\u00a2\u0006\u0004\b\\\u00109\u001a:\u0010]\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0086\b\u00a2\u0006\u0004\b]\u0010;\u001a:\u0010^\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0086\b\u00a2\u0006\u0004\b^\u0010=\u001a#\u0010_\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t\u00a2\u0006\u0004\b_\u0010L\u001aH\u0010d\u001a\u00020c\"\u0004\b\u0000\u0010\u0000\"\u000e\b\u0001\u0010I*\b\u0012\u0004\u0012\u00028\u00010`*\b\u0012\u0004\u0012\u00028\u00000a2\u0016\b\u0004\u0010b\u001a\u0010\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010\u0013H\u0086\b\u00a2\u0006\u0004\bd\u0010e\u001aH\u0010f\u001a\u00020c\"\u0004\b\u0000\u0010\u0000\"\u000e\b\u0001\u0010I*\b\u0012\u0004\u0012\u00028\u00010`*\b\u0012\u0004\u0012\u00028\u00000a2\u0016\b\u0004\u0010b\u001a\u0010\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010\u0013H\u0086\b\u00a2\u0006\u0004\bf\u0010e\u001a'\u0010g\u001a\u00020c\"\u000e\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000`*\b\u0012\u0004\u0012\u00028\u00000a\u00a2\u0006\u0004\bg\u0010h\u001a-\u0010i\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u000e\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000`*\b\u0012\u0004\u0012\u00028\u00000\t\u00a2\u0006\u0004\bi\u0010L\u001aN\u0010j\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000\"\u000e\b\u0001\u0010I*\b\u0012\u0004\u0012\u00028\u00010`*\b\u0012\u0004\u0012\u00028\u00000\t2\u0016\b\u0004\u0010b\u001a\u0010\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010\u0013H\u0086\b\u00a2\u0006\u0004\bj\u0010=\u001aN\u0010k\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000\"\u000e\b\u0001\u0010I*\b\u0012\u0004\u0012\u00028\u00010`*\b\u0012\u0004\u0012\u00028\u00000\t2\u0016\b\u0004\u0010b\u001a\u0010\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010\u0013H\u0086\b\u00a2\u0006\u0004\bk\u0010=\u001a-\u0010l\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u000e\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000`*\b\u0012\u0004\u0012\u00028\u00000\t\u00a2\u0006\u0004\bl\u0010L\u001a?\u0010p\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u001a\u0010o\u001a\u0016\u0012\u0006\b\u0000\u0012\u00028\u00000mj\n\u0012\u0006\b\u0000\u0012\u00028\u0000`n\u00a2\u0006\u0004\bp\u0010q\u001a\u0017\u0010s\u001a\u00020r*\b\u0012\u0004\u0012\u00020\u000b0-\u00a2\u0006\u0004\bs\u0010t\u001a\u0017\u0010w\u001a\u00020v*\b\u0012\u0004\u0012\u00020u0-\u00a2\u0006\u0004\bw\u0010x\u001a\u0017\u0010{\u001a\u00020z*\b\u0012\u0004\u0012\u00020y0-\u00a2\u0006\u0004\b{\u0010|\u001a\u0018\u0010\u007f\u001a\u00020~*\b\u0012\u0004\u0012\u00020}0-\u00a2\u0006\u0005\b\u007f\u0010\u0080\u0001\u001a\u001c\u0010\u0083\u0001\u001a\u00030\u0082\u0001*\t\u0012\u0005\u0012\u00030\u0081\u00010-\u00a2\u0006\u0006\b\u0083\u0001\u0010\u0084\u0001\u001a\u001b\u0010\u0086\u0001\u001a\u00030\u0085\u0001*\b\u0012\u0004\u0012\u00020\u000e0-\u00a2\u0006\u0006\b\u0086\u0001\u0010\u0087\u0001\u001a\u001c\u0010\u008a\u0001\u001a\u00030\u0089\u0001*\t\u0012\u0005\u0012\u00030\u0088\u00010-\u00a2\u0006\u0006\b\u008a\u0001\u0010\u008b\u0001\u001a\u001c\u0010\u008e\u0001\u001a\u00030\u008d\u0001*\t\u0012\u0005\u0012\u00030\u008c\u00010-\u00a2\u0006\u0006\b\u008e\u0001\u0010\u008f\u0001\u001a`\u0010\u0095\u0001\u001a\u000f\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00020\u0094\u0001\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u0090\u0001\"\u0005\b\u0002\u0010\u0091\u0001*\b\u0012\u0004\u0012\u00028\u00000\t2 \u0010\u0093\u0001\u001a\u001b\u0012\u0004\u0012\u00028\u0000\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00020\u0092\u00010\u0013H\u0086\b\u00a2\u0006\u0006\b\u0095\u0001\u0010\u0096\u0001\u001aL\u0010\u0098\u0001\u001a\u000f\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00000\u0094\u0001\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u0090\u0001*\b\u0012\u0004\u0012\u00028\u00000\t2\u0013\u0010\u0097\u0001\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u0013H\u0086\b\u00a2\u0006\u0006\b\u0098\u0001\u0010\u0096\u0001\u001ah\u0010\u0098\u0001\u001a\u000f\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00020\u0094\u0001\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u0090\u0001\"\u0005\b\u0002\u0010\u0091\u0001*\b\u0012\u0004\u0012\u00028\u00000\t2\u0013\u0010\u0097\u0001\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00132\u0013\u0010\u0099\u0001\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00020\u0013H\u0086\b\u00a2\u0006\u0006\b\u0098\u0001\u0010\u009a\u0001\u001ac\u0010\u009d\u0001\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u0090\u0001\"\u001a\b\u0002\u0010\u009c\u0001*\u0013\u0012\u0006\b\u0000\u0012\u00028\u0001\u0012\u0006\b\u0000\u0012\u00028\u00000\u009b\u0001*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u0010F\u001a\u00028\u00022\u0013\u0010\u0097\u0001\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u0013H\u0086\b\u00a2\u0006\u0006\b\u009d\u0001\u0010\u009e\u0001\u001a\u007f\u0010\u009d\u0001\u001a\u00028\u0003\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u0090\u0001\"\u0005\b\u0002\u0010\u0091\u0001\"\u001a\b\u0003\u0010\u009c\u0001*\u0013\u0012\u0006\b\u0000\u0012\u00028\u0001\u0012\u0006\b\u0000\u0012\u00028\u00020\u009b\u0001*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u0010F\u001a\u00028\u00032\u0013\u0010\u0097\u0001\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00132\u0013\u0010\u0099\u0001\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00020\u0013H\u0086\b\u00a2\u0006\u0006\b\u009d\u0001\u0010\u009f\u0001\u001aw\u0010\u00a0\u0001\u001a\u00028\u0003\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u0090\u0001\"\u0005\b\u0002\u0010\u0091\u0001\"\u001a\b\u0003\u0010\u009c\u0001*\u0013\u0012\u0006\b\u0000\u0012\u00028\u0001\u0012\u0006\b\u0000\u0012\u00028\u00020\u009b\u0001*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u0010F\u001a\u00028\u00032 \u0010\u0093\u0001\u001a\u001b\u0012\u0004\u0012\u00028\u0000\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00020\u0092\u00010\u0013H\u0086\b\u00a2\u0006\u0006\b\u00a0\u0001\u0010\u009e\u0001\u001aM\u0010\u00a2\u0001\u001a\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u0094\u0001\"\u0005\b\u0000\u0010\u0090\u0001\"\u0005\b\u0001\u0010\u0091\u0001*\b\u0012\u0004\u0012\u00028\u00000\t2\u0013\u0010\u00a1\u0001\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u0013H\u0087\b\u00a2\u0006\u0006\b\u00a2\u0001\u0010\u0096\u0001\u001ad\u0010\u00a3\u0001\u001a\u00028\u0002\"\u0005\b\u0000\u0010\u0090\u0001\"\u0005\b\u0001\u0010\u0091\u0001\"\u001a\b\u0002\u0010\u009c\u0001*\u0013\u0012\u0006\b\u0000\u0012\u00028\u0000\u0012\u0006\b\u0000\u0012\u00028\u00010\u009b\u0001*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u0010F\u001a\u00028\u00022\u0013\u0010\u00a1\u0001\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u0013H\u0087\b\u00a2\u0006\u0006\b\u00a3\u0001\u0010\u009e\u0001\u001a9\u0010\u00a4\u0001\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0000\"\u0010\b\u0001\u0010E*\n\u0012\u0006\b\u0000\u0012\u00028\u00000D*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u0010F\u001a\u00028\u0001\u00a2\u0006\u0005\b\u00a4\u0001\u0010N\u001a2\u0010\u00a7\u0001\u001a\u0014\u0012\u0004\u0012\u00028\u00000\u00a5\u0001j\t\u0012\u0004\u0012\u00028\u0000`\u00a6\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t\u00a2\u0006\u0006\b\u00a7\u0001\u0010\u00a8\u0001\u001a%\u0010\u00a9\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t\u00a2\u0006\u0005\b\u00a9\u0001\u0010L\u001a%\u0010\u00aa\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000a\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t\u00a2\u0006\u0005\b\u00aa\u0001\u0010L\u001a&\u0010\u00aa\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000a\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000-\u00a2\u0006\u0006\b\u00aa\u0001\u0010\u00ab\u0001\u001a'\u0010\u00ad\u0001\u001a\t\u0012\u0004\u0012\u00028\u00000\u00ac\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t\u00a2\u0006\u0006\b\u00ad\u0001\u0010\u00ae\u0001\u001aI\u0010\u00af\u0001\u001a\b\u0012\u0004\u0012\u00028\u00010\u0001\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u0010I*\b\u0012\u0004\u0012\u00028\u00000\t2\u0019\u0010\u0093\u0001\u001a\u0014\u0012\u0004\u0012\u00028\u0000\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00010\t0\u0013H\u0086\b\u00a2\u0006\u0005\b\u00af\u0001\u0010=\u001a]\u0010\u00b0\u0001\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u0010I\"\u0010\b\u0002\u0010E*\n\u0012\u0006\b\u0000\u0012\u00028\u00010D*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u0010F\u001a\u00028\u00022\u0019\u0010\u0093\u0001\u001a\u0014\u0012\u0004\u0012\u00028\u0000\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00010\t0\u0013H\u0086\b\u00a2\u0006\u0005\b\u00b0\u0001\u0010T\u001aR\u0010\u00b1\u0001\u001a\u0015\u0012\u0004\u0012\u00028\u0001\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00000\u00010\u0094\u0001\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u0090\u0001*\b\u0012\u0004\u0012\u00028\u00000\t2\u0013\u0010\u0097\u0001\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u0013H\u0086\b\u00a2\u0006\u0006\b\u00b1\u0001\u0010\u0096\u0001\u001an\u0010\u00b1\u0001\u001a\u0015\u0012\u0004\u0012\u00028\u0001\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00020\u00010\u0094\u0001\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u0090\u0001\"\u0005\b\u0002\u0010\u0091\u0001*\b\u0012\u0004\u0012\u00028\u00000\t2\u0013\u0010\u0097\u0001\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00132\u0013\u0010\u0099\u0001\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00020\u0013H\u0086\b\u00a2\u0006\u0006\b\u00b1\u0001\u0010\u009a\u0001\u001ag\u0010\u00b2\u0001\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u0090\u0001\"\u001e\b\u0002\u0010\u009c\u0001*\u0017\u0012\u0006\b\u0000\u0012\u00028\u0001\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00000a0\u009b\u0001*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u0010F\u001a\u00028\u00022\u0013\u0010\u0097\u0001\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u0013H\u0086\b\u00a2\u0006\u0006\b\u00b2\u0001\u0010\u009e\u0001\u001a\u0083\u0001\u0010\u00b2\u0001\u001a\u00028\u0003\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u0090\u0001\"\u0005\b\u0002\u0010\u0091\u0001\"\u001e\b\u0003\u0010\u009c\u0001*\u0017\u0012\u0006\b\u0000\u0012\u00028\u0001\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00020a0\u009b\u0001*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u0010F\u001a\u00028\u00032\u0013\u0010\u0097\u0001\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00132\u0013\u0010\u0099\u0001\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00020\u0013H\u0086\b\u00a2\u0006\u0006\b\u00b2\u0001\u0010\u009f\u0001\u001aN\u0010\u00b4\u0001\u001a\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00b3\u0001\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u0090\u0001*\b\u0012\u0004\u0012\u00028\u00000\t2\u0015\b\u0004\u0010\u0097\u0001\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u0013H\u0087\b\u00a2\u0006\u0006\b\u00b4\u0001\u0010\u00b5\u0001\u001aC\u0010\u00b6\u0001\u001a\b\u0012\u0004\u0012\u00028\u00010\u0001\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u0010I*\b\u0012\u0004\u0012\u00028\u00000\t2\u0013\u0010\u0093\u0001\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u0013H\u0086\b\u00a2\u0006\u0005\b\u00b6\u0001\u0010=\u001aX\u0010\u00b7\u0001\u001a\b\u0012\u0004\u0012\u00028\u00010\u0001\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u0010I*\b\u0012\u0004\u0012\u00028\u00000\t2(\u0010\u0093\u0001\u001a#\u0012\u0013\u0012\u00110\u000e\u00a2\u0006\f\b@\u0012\b\bA\u0012\u0004\b\b(\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010?H\u0086\b\u00a2\u0006\u0005\b\u00b7\u0001\u0010C\u001a^\u0010\u00b8\u0001\u001a\b\u0012\u0004\u0012\u00028\u00010\u0001\"\u0004\b\u0000\u0010\u0000\"\b\b\u0001\u0010I*\u00020P*\b\u0012\u0004\u0012\u00028\u00000\t2*\u0010\u0093\u0001\u001a%\u0012\u0013\u0012\u00110\u000e\u00a2\u0006\f\b@\u0012\b\bA\u0012\u0004\b\b(\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010?H\u0086\b\u00a2\u0006\u0005\b\u00b8\u0001\u0010C\u001ar\u0010\u00b9\u0001\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u0000\"\b\b\u0001\u0010I*\u00020P\"\u0010\b\u0002\u0010E*\n\u0012\u0006\b\u0000\u0012\u00028\u00010D*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u0010F\u001a\u00028\u00022*\u0010\u0093\u0001\u001a%\u0012\u0013\u0012\u00110\u000e\u00a2\u0006\f\b@\u0012\b\bA\u0012\u0004\b\b(\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010?H\u0086\b\u00a2\u0006\u0005\b\u00b9\u0001\u0010H\u001al\u0010\u00ba\u0001\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u0010I\"\u0010\b\u0002\u0010E*\n\u0012\u0006\b\u0000\u0012\u00028\u00010D*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u0010F\u001a\u00028\u00022(\u0010\u0093\u0001\u001a#\u0012\u0013\u0012\u00110\u000e\u00a2\u0006\f\b@\u0012\b\bA\u0012\u0004\b\b(\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010?H\u0086\b\u00a2\u0006\u0005\b\u00ba\u0001\u0010H\u001aI\u0010\u00bb\u0001\u001a\b\u0012\u0004\u0012\u00028\u00010\u0001\"\u0004\b\u0000\u0010\u0000\"\b\b\u0001\u0010I*\u00020P*\b\u0012\u0004\u0012\u00028\u00000\t2\u0015\u0010\u0093\u0001\u001a\u0010\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010\u0013H\u0086\b\u00a2\u0006\u0005\b\u00bb\u0001\u0010=\u001a]\u0010\u00bc\u0001\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u0000\"\b\b\u0001\u0010I*\u00020P\"\u0010\b\u0002\u0010E*\n\u0012\u0006\b\u0000\u0012\u00028\u00010D*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u0010F\u001a\u00028\u00022\u0015\u0010\u0093\u0001\u001a\u0010\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010\u0013H\u0086\b\u00a2\u0006\u0005\b\u00bc\u0001\u0010T\u001aW\u0010\u00bd\u0001\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u0010I\"\u0010\b\u0002\u0010E*\n\u0012\u0006\b\u0000\u0012\u00028\u00010D*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u0010F\u001a\u00028\u00022\u0013\u0010\u0093\u0001\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u0013H\u0086\b\u00a2\u0006\u0005\b\u00bd\u0001\u0010T\u001a-\u0010\u00bf\u0001\u001a\u000f\u0012\u000b\u0012\t\u0012\u0004\u0012\u00028\u00000\u00be\u00010\t\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t\u00a2\u0006\u0006\b\u00bf\u0001\u0010\u00c0\u0001\u001a%\u0010\u00c1\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t\u00a2\u0006\u0005\b\u00c1\u0001\u0010L\u001aC\u0010\u00c2\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u0090\u0001*\b\u0012\u0004\u0012\u00028\u00000\t2\u0012\u0010b\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u0013H\u0086\b\u00a2\u0006\u0005\b\u00c2\u0001\u0010=\u001a9\u0010\u00c4\u0001\u001a\t\u0012\u0004\u0012\u00028\u00000\u00ac\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\r\u0010\u00c3\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\tH\u0086\u0004\u00a2\u0006\u0006\b\u00c4\u0001\u0010\u00c5\u0001\u001a9\u0010\u00c6\u0001\u001a\t\u0012\u0004\u0012\u00028\u00000\u00ac\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\r\u0010\u00c3\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\tH\u0086\u0004\u00a2\u0006\u0006\b\u00c6\u0001\u0010\u00c5\u0001\u001a'\u0010\u00c8\u0001\u001a\t\u0012\u0004\u0012\u00028\u00000\u00c7\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t\u00a2\u0006\u0006\b\u00c8\u0001\u0010\u00ae\u0001\u001a9\u0010\u00c9\u0001\u001a\t\u0012\u0004\u0012\u00028\u00000\u00ac\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\r\u0010\u00c3\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\tH\u0086\u0004\u00a2\u0006\u0006\b\u00c9\u0001\u0010\u00c5\u0001\u001a7\u0010\u00ca\u0001\u001a\u00020\u000b\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0086\b\u00a2\u0006\u0006\b\u00ca\u0001\u0010\u00cb\u0001\u001a \u0010\u00cc\u0001\u001a\u00020\u000b\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t\u00a2\u0006\u0006\b\u00cc\u0001\u0010\u00cd\u0001\u001a7\u0010\u00cc\u0001\u001a\u00020\u000b\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0086\b\u00a2\u0006\u0006\b\u00cc\u0001\u0010\u00cb\u0001\u001a \u0010\u00ce\u0001\u001a\u00020\u000e\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t\u00a2\u0006\u0006\b\u00ce\u0001\u0010\u00cf\u0001\u001a#\u0010\u00ce\u0001\u001a\u00020\u000e\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000-H\u0087\b\u00a2\u0006\u0006\b\u00ce\u0001\u0010\u00d0\u0001\u001a6\u0010\u00ce\u0001\u001a\u00020\u000e\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0086\b\u00a2\u0006\u0005\b\u00ce\u0001\u0010'\u001a]\u0010\u00d4\u0001\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u0010I*\b\u0012\u0004\u0012\u00028\u00000\t2\u0007\u0010\u00d1\u0001\u001a\u00028\u00012)\u0010\u00d3\u0001\u001a$\u0012\u0014\u0012\u00128\u0001\u00a2\u0006\r\b@\u0012\t\bA\u0012\u0005\b\b(\u00d2\u0001\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010?H\u0086\b\u00a2\u0006\u0006\b\u00d4\u0001\u0010\u00d5\u0001\u001as\u0010\u00d7\u0001\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u0010I*\b\u0012\u0004\u0012\u00028\u00000\t2\u0007\u0010\u00d1\u0001\u001a\u00028\u00012?\u0010\u00d3\u0001\u001a:\u0012\u0013\u0012\u00110\u000e\u00a2\u0006\f\b@\u0012\b\bA\u0012\u0004\b\b(\u000f\u0012\u0014\u0012\u00128\u0001\u00a2\u0006\r\b@\u0012\t\bA\u0012\u0005\b\b(\u00d2\u0001\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00d6\u0001H\u0086\b\u00a2\u0006\u0006\b\u00d7\u0001\u0010\u00d8\u0001\u001a]\u0010\u00d9\u0001\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u0010I*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0007\u0010\u00d1\u0001\u001a\u00028\u00012)\u0010\u00d3\u0001\u001a$\u0012\u0004\u0012\u00028\u0000\u0012\u0014\u0012\u00128\u0001\u00a2\u0006\r\b@\u0012\t\bA\u0012\u0005\b\b(\u00d2\u0001\u0012\u0004\u0012\u00028\u00010?H\u0086\b\u00a2\u0006\u0006\b\u00d9\u0001\u0010\u00da\u0001\u001as\u0010\u00db\u0001\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u0010I*\b\u0012\u0004\u0012\u00028\u00000\u00012\u0007\u0010\u00d1\u0001\u001a\u00028\u00012?\u0010\u00d3\u0001\u001a:\u0012\u0013\u0012\u00110\u000e\u00a2\u0006\f\b@\u0012\b\bA\u0012\u0004\b\b(\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0014\u0012\u00128\u0001\u00a2\u0006\r\b@\u0012\t\bA\u0012\u0005\b\b(\u00d2\u0001\u0012\u0004\u0012\u00028\u00010\u00d6\u0001H\u0086\b\u00a2\u0006\u0006\b\u00db\u0001\u0010\u00dc\u0001\u001a8\u0010\u00de\u0001\u001a\u00020c\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0013\u0010\u00dd\u0001\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020c0\u0013H\u0087\b\u00a2\u0006\u0006\b\u00de\u0001\u0010\u00df\u0001\u001aM\u0010\u00e0\u0001\u001a\u00020c\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2(\u0010\u00dd\u0001\u001a#\u0012\u0013\u0012\u00110\u000e\u00a2\u0006\f\b@\u0012\b\bA\u0012\u0004\b\b(\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020c0?H\u0086\b\u00a2\u0006\u0006\b\u00e0\u0001\u0010\u00e1\u0001\u001a\u001e\u0010\u00e2\u0001\u001a\u0004\u0018\u00010}*\b\u0012\u0004\u0012\u00020}0\tH\u0007\u00a2\u0006\u0006\b\u00e2\u0001\u0010\u00e3\u0001\u001a \u0010\u00e2\u0001\u001a\u0005\u0018\u00010\u0081\u0001*\t\u0012\u0005\u0012\u00030\u0081\u00010\tH\u0007\u00a2\u0006\u0006\b\u00e2\u0001\u0010\u00e4\u0001\u001a,\u0010\u00e2\u0001\u001a\u0004\u0018\u00018\u0000\"\u000e\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000`*\b\u0012\u0004\u0012\u00028\u00000\t\u00a2\u0006\u0006\b\u00e2\u0001\u0010\u00e5\u0001\u001aH\u0010\u00e6\u0001\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000\"\u000e\b\u0001\u0010I*\b\u0012\u0004\u0012\u00028\u00010`*\b\u0012\u0004\u0012\u00028\u00000\t2\u0012\u0010b\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u0013H\u0086\b\u00a2\u0006\u0005\b\u00e6\u0001\u0010\u001b\u001a>\u0010\u00e7\u0001\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u001a\u0010o\u001a\u0016\u0012\u0006\b\u0000\u0012\u00028\u00000mj\n\u0012\u0006\b\u0000\u0012\u00028\u0000`n\u00a2\u0006\u0006\b\u00e7\u0001\u0010\u00e8\u0001\u001a\u001e\u0010\u00e9\u0001\u001a\u0004\u0018\u00010}*\b\u0012\u0004\u0012\u00020}0\tH\u0007\u00a2\u0006\u0006\b\u00e9\u0001\u0010\u00e3\u0001\u001a \u0010\u00e9\u0001\u001a\u0005\u0018\u00010\u0081\u0001*\t\u0012\u0005\u0012\u00030\u0081\u00010\tH\u0007\u00a2\u0006\u0006\b\u00e9\u0001\u0010\u00e4\u0001\u001a,\u0010\u00e9\u0001\u001a\u0004\u0018\u00018\u0000\"\u000e\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000`*\b\u0012\u0004\u0012\u00028\u00000\t\u00a2\u0006\u0006\b\u00e9\u0001\u0010\u00e5\u0001\u001aH\u0010\u00ea\u0001\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000\"\u000e\b\u0001\u0010I*\b\u0012\u0004\u0012\u00028\u00010`*\b\u0012\u0004\u0012\u00028\u00000\t2\u0012\u0010b\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u0013H\u0086\b\u00a2\u0006\u0005\b\u00ea\u0001\u0010\u001b\u001a>\u0010\u00eb\u0001\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u001a\u0010o\u001a\u0016\u0012\u0006\b\u0000\u0012\u00028\u00000mj\n\u0012\u0006\b\u0000\u0012\u00028\u0000`n\u00a2\u0006\u0006\b\u00eb\u0001\u0010\u00e8\u0001\u001a \u0010\u00ec\u0001\u001a\u00020\u000b\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t\u00a2\u0006\u0006\b\u00ec\u0001\u0010\u00cd\u0001\u001a7\u0010\u00ec\u0001\u001a\u00020\u000b\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0086\b\u00a2\u0006\u0006\b\u00ec\u0001\u0010\u00cb\u0001\u001aB\u0010\u00ed\u0001\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0000\"\u000e\b\u0001\u0010E*\b\u0012\u0004\u0012\u00028\u00000\t*\u00028\u00012\u0013\u0010\u00dd\u0001\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020c0\u0013H\u0087\b\u00a2\u0006\u0006\b\u00ed\u0001\u0010\u00ee\u0001\u001aY\u0010\u00f0\u0001\u001a\u00028\u0000\"\u0005\b\u0000\u0010\u00ef\u0001\"\b\b\u0001\u0010\u0000*\u00028\u0000*\b\u0012\u0004\u0012\u00028\u00010\t2)\u0010\u00d3\u0001\u001a$\u0012\u0014\u0012\u00128\u0000\u00a2\u0006\r\b@\u0012\t\bA\u0012\u0005\b\b(\u00d2\u0001\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00000?H\u0086\b\u00a2\u0006\u0006\b\u00f0\u0001\u0010\u00f1\u0001\u001ao\u0010\u00f2\u0001\u001a\u00028\u0000\"\u0005\b\u0000\u0010\u00ef\u0001\"\b\b\u0001\u0010\u0000*\u00028\u0000*\b\u0012\u0004\u0012\u00028\u00010\t2?\u0010\u00d3\u0001\u001a:\u0012\u0013\u0012\u00110\u000e\u00a2\u0006\f\b@\u0012\b\bA\u0012\u0004\b\b(\u000f\u0012\u0014\u0012\u00128\u0000\u00a2\u0006\r\b@\u0012\t\bA\u0012\u0005\b\b(\u00d2\u0001\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00000\u00d6\u0001H\u0086\b\u00a2\u0006\u0006\b\u00f2\u0001\u0010\u00f3\u0001\u001a[\u0010\u00f4\u0001\u001a\u0004\u0018\u00018\u0000\"\u0005\b\u0000\u0010\u00ef\u0001\"\b\b\u0001\u0010\u0000*\u00028\u0000*\b\u0012\u0004\u0012\u00028\u00010\t2)\u0010\u00d3\u0001\u001a$\u0012\u0014\u0012\u00128\u0000\u00a2\u0006\r\b@\u0012\t\bA\u0012\u0005\b\b(\u00d2\u0001\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00000?H\u0087\b\u00a2\u0006\u0006\b\u00f4\u0001\u0010\u00f1\u0001\u001aY\u0010\u00f5\u0001\u001a\u00028\u0000\"\u0005\b\u0000\u0010\u00ef\u0001\"\b\b\u0001\u0010\u0000*\u00028\u0000*\b\u0012\u0004\u0012\u00028\u00010\u00012)\u0010\u00d3\u0001\u001a$\u0012\u0004\u0012\u00028\u0001\u0012\u0014\u0012\u00128\u0000\u00a2\u0006\r\b@\u0012\t\bA\u0012\u0005\b\b(\u00d2\u0001\u0012\u0004\u0012\u00028\u00000?H\u0086\b\u00a2\u0006\u0006\b\u00f5\u0001\u0010\u00f6\u0001\u001ao\u0010\u00f7\u0001\u001a\u00028\u0000\"\u0005\b\u0000\u0010\u00ef\u0001\"\b\b\u0001\u0010\u0000*\u00028\u0000*\b\u0012\u0004\u0012\u00028\u00010\u00012?\u0010\u00d3\u0001\u001a:\u0012\u0013\u0012\u00110\u000e\u00a2\u0006\f\b@\u0012\b\bA\u0012\u0004\b\b(\u000f\u0012\u0004\u0012\u00028\u0001\u0012\u0014\u0012\u00128\u0000\u00a2\u0006\r\b@\u0012\t\bA\u0012\u0005\b\b(\u00d2\u0001\u0012\u0004\u0012\u00028\u00000\u00d6\u0001H\u0086\b\u00a2\u0006\u0006\b\u00f7\u0001\u0010\u00f8\u0001\u001a[\u0010\u00f9\u0001\u001a\u0004\u0018\u00018\u0000\"\u0005\b\u0000\u0010\u00ef\u0001\"\b\b\u0001\u0010\u0000*\u00028\u0000*\b\u0012\u0004\u0012\u00028\u00010\u00012)\u0010\u00d3\u0001\u001a$\u0012\u0004\u0012\u00028\u0001\u0012\u0014\u0012\u00128\u0000\u00a2\u0006\r\b@\u0012\t\bA\u0012\u0005\b\b(\u00d2\u0001\u0012\u0004\u0012\u00028\u00000?H\u0087\b\u00a2\u0006\u0006\b\u00f9\u0001\u0010\u00f6\u0001\u001ac\u0010\u00fa\u0001\u001a\b\u0012\u0004\u0012\u00028\u00010\u0001\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u0010I*\b\u0012\u0004\u0012\u00028\u00000\t2\u0007\u0010\u00d1\u0001\u001a\u00028\u00012)\u0010\u00d3\u0001\u001a$\u0012\u0014\u0012\u00128\u0001\u00a2\u0006\r\b@\u0012\t\bA\u0012\u0005\b\b(\u00d2\u0001\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010?H\u0087\b\u00a2\u0006\u0006\b\u00fa\u0001\u0010\u00fb\u0001\u001ay\u0010\u00fc\u0001\u001a\b\u0012\u0004\u0012\u00028\u00010\u0001\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u0010I*\b\u0012\u0004\u0012\u00028\u00000\t2\u0007\u0010\u00d1\u0001\u001a\u00028\u00012?\u0010\u00d3\u0001\u001a:\u0012\u0013\u0012\u00110\u000e\u00a2\u0006\f\b@\u0012\b\bA\u0012\u0004\b\b(\u000f\u0012\u0014\u0012\u00128\u0001\u00a2\u0006\r\b@\u0012\t\bA\u0012\u0005\b\b(\u00d2\u0001\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00d6\u0001H\u0087\b\u00a2\u0006\u0006\b\u00fc\u0001\u0010\u00fd\u0001\u001a^\u0010\u00fe\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0005\b\u0000\u0010\u00ef\u0001\"\b\b\u0001\u0010\u0000*\u00028\u0000*\b\u0012\u0004\u0012\u00028\u00010\t2)\u0010\u00d3\u0001\u001a$\u0012\u0014\u0012\u00128\u0000\u00a2\u0006\r\b@\u0012\t\bA\u0012\u0005\b\b(\u00d2\u0001\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00000?H\u0087\b\u00a2\u0006\u0005\b\u00fe\u0001\u0010C\u001au\u0010\u00ff\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0005\b\u0000\u0010\u00ef\u0001\"\b\b\u0001\u0010\u0000*\u00028\u0000*\b\u0012\u0004\u0012\u00028\u00010\t2?\u0010\u00d3\u0001\u001a:\u0012\u0013\u0012\u00110\u000e\u00a2\u0006\f\b@\u0012\b\bA\u0012\u0004\b\b(\u000f\u0012\u0014\u0012\u00128\u0000\u00a2\u0006\r\b@\u0012\t\bA\u0012\u0005\b\b(\u00d2\u0001\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00000\u00d6\u0001H\u0087\b\u00a2\u0006\u0006\b\u00ff\u0001\u0010\u0080\u0002\u001a6\u0010\u0081\u0002\u001a\u00020\u000e\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0012\u0010b\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000e0\u0013H\u0086\b\u00a2\u0006\u0005\b\u0081\u0002\u0010'\u001a7\u0010\u0082\u0002\u001a\u00020}\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0012\u0010b\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020}0\u0013H\u0086\b\u00a2\u0006\u0006\b\u0082\u0002\u0010\u0083\u0002\u001a,\u0010\u0084\u0002\u001a\b\u0012\u0004\u0012\u00028\u00000\t\"\b\b\u0000\u0010\u0000*\u00020P*\n\u0012\u0006\u0012\u0004\u0018\u00018\u00000\t\u00a2\u0006\u0006\b\u0084\u0002\u0010\u00c0\u0001\u001a,\u0010\u0084\u0002\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\b\b\u0000\u0010\u0000*\u00020P*\n\u0012\u0006\u0012\u0004\u0018\u00018\u00000\u0001\u00a2\u0006\u0006\b\u0084\u0002\u0010\u0085\u0002\u001a6\u0010\u0087\u0002\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00000\u00010\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0007\u0010\u0086\u0002\u001a\u00020\u000eH\u0007\u00a2\u0006\u0005\b\u0087\u0002\u00107\u001aR\u0010\u0087\u0002\u001a\b\u0012\u0004\u0012\u00028\u00010\u0001\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u0010I*\b\u0012\u0004\u0012\u00028\u00000\t2\u0007\u0010\u0086\u0002\u001a\u00020\u000e2\u0019\u0010\u0093\u0001\u001a\u0014\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00000\u0001\u0012\u0004\u0012\u00028\u00010\u0013H\u0007\u00a2\u0006\u0006\b\u0087\u0002\u0010\u0088\u0002\u001a1\u0010\u0089\u0002\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u0010\n\u001a\u00028\u0000H\u0086\u0002\u00a2\u0006\u0006\b\u0089\u0002\u0010\u008a\u0002\u001a;\u0010\u0089\u0002\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0010\u0010\u008c\u0002\u001a\u000b\u0012\u0006\b\u0001\u0012\u00028\u00000\u008b\u0002H\u0086\u0002\u00a2\u0006\u0006\b\u0089\u0002\u0010\u008d\u0002\u001a8\u0010\u0089\u0002\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\r\u0010\u008c\u0002\u001a\b\u0012\u0004\u0012\u00028\u00000\tH\u0086\u0002\u00a2\u0006\u0006\b\u0089\u0002\u0010\u008e\u0002\u001a9\u0010\u0089\u0002\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u000e\u0010\u008c\u0002\u001a\t\u0012\u0004\u0012\u00028\u00000\u008f\u0002H\u0086\u0002\u00a2\u0006\u0006\b\u0089\u0002\u0010\u0090\u0002\u001a1\u0010\u0091\u0002\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u0010\n\u001a\u00028\u0000H\u0087\b\u00a2\u0006\u0006\b\u0091\u0002\u0010\u008a\u0002\u001aP\u0010\u0092\u0002\u001a\u001b\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00000\u0001\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00000\u00010\u0092\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u0013H\u0086\b\u00a2\u0006\u0006\b\u0092\u0002\u0010\u0093\u0002\u001a1\u0010\u0094\u0002\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u0010\n\u001a\u00028\u0000H\u0086\u0002\u00a2\u0006\u0006\b\u0094\u0002\u0010\u008a\u0002\u001a1\u0010\u0094\u0002\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000-2\u0006\u0010\n\u001a\u00028\u0000H\u0086\u0002\u00a2\u0006\u0006\b\u0094\u0002\u0010\u0095\u0002\u001a;\u0010\u0094\u0002\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0010\u0010\u008c\u0002\u001a\u000b\u0012\u0006\b\u0001\u0012\u00028\u00000\u008b\u0002H\u0086\u0002\u00a2\u0006\u0006\b\u0094\u0002\u0010\u008d\u0002\u001a;\u0010\u0094\u0002\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000-2\u0010\u0010\u008c\u0002\u001a\u000b\u0012\u0006\b\u0001\u0012\u00028\u00000\u008b\u0002H\u0086\u0002\u00a2\u0006\u0006\b\u0094\u0002\u0010\u0096\u0002\u001a8\u0010\u0094\u0002\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\r\u0010\u008c\u0002\u001a\b\u0012\u0004\u0012\u00028\u00000\tH\u0086\u0002\u00a2\u0006\u0006\b\u0094\u0002\u0010\u008e\u0002\u001a8\u0010\u0094\u0002\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000-2\r\u0010\u008c\u0002\u001a\b\u0012\u0004\u0012\u00028\u00000\tH\u0086\u0002\u00a2\u0006\u0006\b\u0094\u0002\u0010\u0097\u0002\u001a9\u0010\u0094\u0002\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u000e\u0010\u008c\u0002\u001a\t\u0012\u0004\u0012\u00028\u00000\u008f\u0002H\u0086\u0002\u00a2\u0006\u0006\b\u0094\u0002\u0010\u0090\u0002\u001a9\u0010\u0094\u0002\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000-2\u000e\u0010\u008c\u0002\u001a\t\u0012\u0004\u0012\u00028\u00000\u008f\u0002H\u0086\u0002\u00a2\u0006\u0006\b\u0094\u0002\u0010\u0098\u0002\u001a1\u0010\u0099\u0002\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0006\u0010\n\u001a\u00028\u0000H\u0087\b\u00a2\u0006\u0006\b\u0099\u0002\u0010\u008a\u0002\u001a1\u0010\u0099\u0002\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000-2\u0006\u0010\n\u001a\u00028\u0000H\u0087\b\u00a2\u0006\u0006\b\u0099\u0002\u0010\u0095\u0002\u001aM\u0010\u009c\u0002\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00000\u00010\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\u0007\u0010\u0086\u0002\u001a\u00020\u000e2\t\b\u0002\u0010\u009a\u0002\u001a\u00020\u000e2\t\b\u0002\u0010\u009b\u0002\u001a\u00020\u000bH\u0007\u00a2\u0006\u0006\b\u009c\u0002\u0010\u009d\u0002\u001ah\u0010\u009c\u0002\u001a\b\u0012\u0004\u0012\u00028\u00010\u0001\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u0010I*\b\u0012\u0004\u0012\u00028\u00000\t2\u0007\u0010\u0086\u0002\u001a\u00020\u000e2\t\b\u0002\u0010\u009a\u0002\u001a\u00020\u000e2\t\b\u0002\u0010\u009b\u0002\u001a\u00020\u000b2\u0019\u0010\u0093\u0001\u001a\u0014\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00000\u0001\u0012\u0004\u0012\u00028\u00010\u0013H\u0007\u00a2\u0006\u0006\b\u009c\u0002\u0010\u009e\u0002\u001aN\u0010\u009f\u0002\u001a\u0015\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u0092\u00010\u0001\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u0010I*\b\u0012\u0004\u0012\u00028\u00000\t2\u0010\u0010\u00c3\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u00028\u00010\u008b\u0002H\u0086\u0004\u00a2\u0006\u0006\b\u009f\u0002\u0010\u008d\u0002\u001a\u0083\u0001\u0010\u009f\u0002\u001a\b\u0012\u0004\u0012\u00028\u00020\u0001\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u0010I\"\u0005\b\u0002\u0010\u0091\u0001*\b\u0012\u0004\u0012\u00028\u00000\t2\u0010\u0010\u00c3\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u00028\u00010\u008b\u000229\u0010\u0093\u0001\u001a4\u0012\u0014\u0012\u00128\u0000\u00a2\u0006\r\b@\u0012\t\bA\u0012\u0005\b\b(\u00a0\u0002\u0012\u0014\u0012\u00128\u0001\u00a2\u0006\r\b@\u0012\t\bA\u0012\u0005\b\b(\u00a1\u0002\u0012\u0004\u0012\u00028\u00020?H\u0086\b\u00a2\u0006\u0006\b\u009f\u0002\u0010\u00a2\u0002\u001aK\u0010\u009f\u0002\u001a\u0015\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u0092\u00010\u0001\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u0010I*\b\u0012\u0004\u0012\u00028\u00000\t2\r\u0010\u00c3\u0001\u001a\b\u0012\u0004\u0012\u00028\u00010\tH\u0086\u0004\u00a2\u0006\u0006\b\u009f\u0002\u0010\u008e\u0002\u001a\u0080\u0001\u0010\u009f\u0002\u001a\b\u0012\u0004\u0012\u00028\u00020\u0001\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u0010I\"\u0005\b\u0002\u0010\u0091\u0001*\b\u0012\u0004\u0012\u00028\u00000\t2\r\u0010\u00c3\u0001\u001a\b\u0012\u0004\u0012\u00028\u00010\t29\u0010\u0093\u0001\u001a4\u0012\u0014\u0012\u00128\u0000\u00a2\u0006\r\b@\u0012\t\bA\u0012\u0005\b\b(\u00a0\u0002\u0012\u0014\u0012\u00128\u0001\u00a2\u0006\r\b@\u0012\t\bA\u0012\u0005\b\b(\u00a1\u0002\u0012\u0004\u0012\u00028\u00020?H\u0086\b\u00a2\u0006\u0006\b\u009f\u0002\u0010\u00a3\u0002\u001a4\u0010\u00a4\u0002\u001a\u0015\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00000\u0092\u00010\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\tH\u0007\u00a2\u0006\u0005\b\u00a4\u0002\u0010L\u001ai\u0010\u00a4\u0002\u001a\b\u0012\u0004\u0012\u00028\u00010\u0001\"\u0004\b\u0000\u0010\u0000\"\u0004\b\u0001\u0010I*\b\u0012\u0004\u0012\u00028\u00000\t29\u0010\u0093\u0001\u001a4\u0012\u0014\u0012\u00128\u0000\u00a2\u0006\r\b@\u0012\t\bA\u0012\u0005\b\b(\u00a0\u0002\u0012\u0014\u0012\u00128\u0000\u00a2\u0006\r\b@\u0012\t\bA\u0012\u0005\b\b(\u00a1\u0002\u0012\u0004\u0012\u00028\u00010?H\u0087\b\u00a2\u0006\u0005\b\u00a4\u0002\u0010C\u001a\u008f\u0001\u0010\u00af\u0002\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0000\"\u000f\b\u0001\u0010\u00a7\u0002*\b0\u00a5\u0002j\u0003`\u00a6\u0002*\b\u0012\u0004\u0012\u00028\u00000\t2\u0007\u0010\u00a8\u0002\u001a\u00028\u00012\n\b\u0002\u0010\u00aa\u0002\u001a\u00030\u00a9\u00022\n\b\u0002\u0010\u00ab\u0002\u001a\u00030\u00a9\u00022\n\b\u0002\u0010\u00ac\u0002\u001a\u00030\u00a9\u00022\t\b\u0002\u0010\u00ad\u0002\u001a\u00020\u000e2\n\b\u0002\u0010\u00ae\u0002\u001a\u00030\u00a9\u00022\u0018\b\u0002\u0010\u0093\u0001\u001a\u0011\u0012\u0004\u0012\u00028\u0000\u0012\u0005\u0012\u00030\u00a9\u0002\u0018\u00010\u0013\u00a2\u0006\u0006\b\u00af\u0002\u0010\u00b0\u0002\u001av\u0010\u00b2\u0002\u001a\u00030\u00b1\u0002\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t2\n\b\u0002\u0010\u00aa\u0002\u001a\u00030\u00a9\u00022\n\b\u0002\u0010\u00ab\u0002\u001a\u00030\u00a9\u00022\n\b\u0002\u0010\u00ac\u0002\u001a\u00030\u00a9\u00022\t\b\u0002\u0010\u00ad\u0002\u001a\u00020\u000e2\n\b\u0002\u0010\u00ae\u0002\u001a\u00030\u00a9\u00022\u0018\b\u0002\u0010\u0093\u0001\u001a\u0011\u0012\u0004\u0012\u00028\u0000\u0012\u0005\u0012\u00030\u00a9\u0002\u0018\u00010\u0013\u00a2\u0006\u0006\b\u00b2\u0002\u0010\u00b3\u0002\u001a)\u0010\u00b4\u0002\u001a\b\u0012\u0004\u0012\u00028\u00000\t\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\tH\u0087\b\u00a2\u0006\u0006\b\u00b4\u0002\u0010\u00c0\u0001\u001a'\u0010\u00b5\u0002\u001a\t\u0012\u0004\u0012\u00028\u00000\u008f\u0002\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\t\u00a2\u0006\u0006\b\u00b5\u0002\u0010\u00b6\u0002\u001a\u001c\u0010\u00b9\u0002\u001a\u00020}*\b\u0012\u0004\u0012\u00020u0\tH\u0007\u00a2\u0006\u0006\b\u00b7\u0002\u0010\u00b8\u0002\u001a\u001d\u0010\u00b9\u0002\u001a\u00020}*\t\u0012\u0005\u0012\u00030\u008c\u00010\tH\u0007\u00a2\u0006\u0006\b\u00ba\u0002\u0010\u00b8\u0002\u001a\u001c\u0010\u00b9\u0002\u001a\u00020}*\b\u0012\u0004\u0012\u00020\u000e0\tH\u0007\u00a2\u0006\u0006\b\u00bb\u0002\u0010\u00b8\u0002\u001a\u001d\u0010\u00b9\u0002\u001a\u00020}*\t\u0012\u0005\u0012\u00030\u0088\u00010\tH\u0007\u00a2\u0006\u0006\b\u00bc\u0002\u0010\u00b8\u0002\u001a\u001d\u0010\u00b9\u0002\u001a\u00020}*\t\u0012\u0005\u0012\u00030\u0081\u00010\tH\u0007\u00a2\u0006\u0006\b\u00bd\u0002\u0010\u00b8\u0002\u001a\u001c\u0010\u00b9\u0002\u001a\u00020}*\b\u0012\u0004\u0012\u00020}0\tH\u0007\u00a2\u0006\u0006\b\u00be\u0002\u0010\u00b8\u0002\u001a\u001c\u0010\u00c0\u0002\u001a\u00020\u000e*\b\u0012\u0004\u0012\u00020u0\tH\u0007\u00a2\u0006\u0006\b\u00bf\u0002\u0010\u00cf\u0001\u001a\u001d\u0010\u00c0\u0002\u001a\u00020\u000e*\t\u0012\u0005\u0012\u00030\u008c\u00010\tH\u0007\u00a2\u0006\u0006\b\u00c1\u0002\u0010\u00cf\u0001\u001a\u001c\u0010\u00c0\u0002\u001a\u00020\u000e*\b\u0012\u0004\u0012\u00020\u000e0\tH\u0007\u00a2\u0006\u0006\b\u00c2\u0002\u0010\u00cf\u0001\u001a\u001e\u0010\u00c0\u0002\u001a\u00030\u0088\u0001*\t\u0012\u0005\u0012\u00030\u0088\u00010\tH\u0007\u00a2\u0006\u0006\b\u00c3\u0002\u0010\u00c4\u0002\u001a\u001e\u0010\u00c0\u0002\u001a\u00030\u0081\u0001*\t\u0012\u0005\u0012\u00030\u0081\u00010\tH\u0007\u00a2\u0006\u0006\b\u00c5\u0002\u0010\u00c6\u0002\u001a\u001c\u0010\u00c0\u0002\u001a\u00020}*\b\u0012\u0004\u0012\u00020}0\tH\u0007\u00a2\u0006\u0006\b\u00c7\u0002\u0010\u00b8\u0002\u00a8\u0006\u00c8\u0002"}, d2 = {"T", "", "component1", "(Ljava/util/List;)Ljava/lang/Object;", "component2", "component3", "component4", "component5", "Lkotlin/internal/OnlyInputTypes;", "", "element", "", "contains", "(Ljava/lang/Iterable;Ljava/lang/Object;)Z", "", "index", "elementAt", "(Ljava/lang/Iterable;I)Ljava/lang/Object;", "(Ljava/util/List;I)Ljava/lang/Object;", "Lkotlin/Function1;", "defaultValue", "elementAtOrElse", "(Ljava/lang/Iterable;ILkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "(Ljava/util/List;ILkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "elementAtOrNull", "predicate", "find", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "findLast", "(Ljava/util/List;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "first", "(Ljava/lang/Iterable;)Ljava/lang/Object;", "firstOrNull", "getOrElse", "getOrNull", "indexOf", "(Ljava/lang/Iterable;Ljava/lang/Object;)I", "(Ljava/util/List;Ljava/lang/Object;)I", "indexOfFirst", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)I", "(Ljava/util/List;Lkotlin/jvm/functions/Function1;)I", "indexOfLast", "last", "lastIndexOf", "lastOrNull", "", "random", "(Ljava/util/Collection;)Ljava/lang/Object;", "Lkotlin/random/Random;", "(Ljava/util/Collection;Lkotlin/random/Random;)Ljava/lang/Object;", "randomOrNull", "single", "singleOrNull", PersonalConstants.ICON_STYLE_N, "drop", "(Ljava/lang/Iterable;I)Ljava/util/List;", "dropLast", "(Ljava/util/List;I)Ljava/util/List;", "dropLastWhile", "(Ljava/util/List;Lkotlin/jvm/functions/Function1;)Ljava/util/List;", "dropWhile", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)Ljava/util/List;", "filter", "Lkotlin/Function2;", "Lkotlin/ParameterName;", "name", "filterIndexed", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "", "C", "destination", "filterIndexedTo", "(Ljava/lang/Iterable;Ljava/util/Collection;Lkotlin/jvm/functions/Function2;)Ljava/util/Collection;", "R", "Lkotlin/internal/NoInfer;", "filterIsInstance", "(Ljava/lang/Iterable;)Ljava/util/List;", "filterIsInstanceTo", "(Ljava/lang/Iterable;Ljava/util/Collection;)Ljava/util/Collection;", "filterNot", "", "filterNotNull", "filterNotNullTo", "filterNotTo", "(Ljava/lang/Iterable;Ljava/util/Collection;Lkotlin/jvm/functions/Function1;)Ljava/util/Collection;", "filterTo", "Lkotlin/ranges/IntRange;", "indices", "slice", "(Ljava/util/List;Lkotlin/ranges/IntRange;)Ljava/util/List;", "(Ljava/util/List;Ljava/lang/Iterable;)Ljava/util/List;", "take", "takeLast", "takeLastWhile", "takeWhile", "reversed", "", "", "selector", "", "sortBy", "(Ljava/util/List;Lkotlin/jvm/functions/Function1;)V", "sortByDescending", "sortDescending", "(Ljava/util/List;)V", CartConstant.KEY_VENDOR_SORTED, "sortedBy", "sortedByDescending", "sortedDescending", "Ljava/util/Comparator;", "Lkotlin/Comparator;", "comparator", "sortedWith", "(Ljava/lang/Iterable;Ljava/util/Comparator;)Ljava/util/List;", "", "toBooleanArray", "(Ljava/util/Collection;)[Z", "", "", "toByteArray", "(Ljava/util/Collection;)[B", "", "", "toCharArray", "(Ljava/util/Collection;)[C", "", "", "toDoubleArray", "(Ljava/util/Collection;)[D", "", "", "toFloatArray", "(Ljava/util/Collection;)[F", "", "toIntArray", "(Ljava/util/Collection;)[I", "", "", "toLongArray", "(Ljava/util/Collection;)[J", "", "", "toShortArray", "(Ljava/util/Collection;)[S", "K", "V", "Lkotlin/Pair;", "transform", "", "associate", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "keySelector", "associateBy", "valueTransform", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "", "M", "associateByTo", "(Ljava/lang/Iterable;Ljava/util/Map;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "(Ljava/lang/Iterable;Ljava/util/Map;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "associateTo", "valueSelector", "associateWith", "associateWithTo", "toCollection", "Ljava/util/HashSet;", "Lkotlin/collections/HashSet;", "toHashSet", "(Ljava/lang/Iterable;)Ljava/util/HashSet;", "toList", "toMutableList", "(Ljava/util/Collection;)Ljava/util/List;", "", "toSet", "(Ljava/lang/Iterable;)Ljava/util/Set;", "flatMap", "flatMapTo", "groupBy", "groupByTo", "Lkotlin/collections/Grouping;", "groupingBy", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)Lkotlin/collections/Grouping;", "map", "mapIndexed", "mapIndexedNotNull", "mapIndexedNotNullTo", "mapIndexedTo", "mapNotNull", "mapNotNullTo", "mapTo", "Lkotlin/collections/IndexedValue;", "withIndex", "(Ljava/lang/Iterable;)Ljava/lang/Iterable;", "distinct", "distinctBy", "other", "intersect", "(Ljava/lang/Iterable;Ljava/lang/Iterable;)Ljava/util/Set;", "subtract", "", "toMutableSet", JumpUtil.VALUE_DES_CPS_UNION, NavigationDbConstants.TB_COLUMN_FREQUENCY_RULE_POSITION_ALL, "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)Z", Languages.ANY, "(Ljava/lang/Iterable;)Z", "count", "(Ljava/lang/Iterable;)I", "(Ljava/util/Collection;)I", "initial", "acc", "operation", "fold", "(Ljava/lang/Iterable;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "Lkotlin/Function3;", "foldIndexed", "(Ljava/lang/Iterable;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "foldRight", "(Ljava/util/List;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "foldRightIndexed", "(Ljava/util/List;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "action", "forEach", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)V", "forEachIndexed", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function2;)V", "max", "(Ljava/lang/Iterable;)Ljava/lang/Double;", "(Ljava/lang/Iterable;)Ljava/lang/Float;", "(Ljava/lang/Iterable;)Ljava/lang/Comparable;", "maxBy", "maxWith", "(Ljava/lang/Iterable;Ljava/util/Comparator;)Ljava/lang/Object;", "min", "minBy", "minWith", "none", "onEach", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)Ljava/lang/Iterable;", "S", "reduce", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "reduceIndexed", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "reduceOrNull", "reduceRight", "(Ljava/util/List;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "reduceRightIndexed", "(Ljava/util/List;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "reduceRightOrNull", "scan", "(Ljava/lang/Iterable;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "scanIndexed", "(Ljava/lang/Iterable;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/util/List;", "scanReduce", "scanReduceIndexed", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function3;)Ljava/util/List;", "sumBy", "sumByDouble", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)D", "requireNoNulls", "(Ljava/util/List;)Ljava/util/List;", ApkDownloadTable.FIELD_SIZE, "chunked", "(Ljava/lang/Iterable;ILkotlin/jvm/functions/Function1;)Ljava/util/List;", "minus", "(Ljava/lang/Iterable;Ljava/lang/Object;)Ljava/util/List;", "", "elements", "(Ljava/lang/Iterable;[Ljava/lang/Object;)Ljava/util/List;", "(Ljava/lang/Iterable;Ljava/lang/Iterable;)Ljava/util/List;", "Lkotlin/sequences/Sequence;", "(Ljava/lang/Iterable;Lkotlin/sequences/Sequence;)Ljava/util/List;", "minusElement", "partition", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)Lkotlin/Pair;", "plus", "(Ljava/util/Collection;Ljava/lang/Object;)Ljava/util/List;", "(Ljava/util/Collection;[Ljava/lang/Object;)Ljava/util/List;", "(Ljava/util/Collection;Ljava/lang/Iterable;)Ljava/util/List;", "(Ljava/util/Collection;Lkotlin/sequences/Sequence;)Ljava/util/List;", "plusElement", "step", "partialWindows", "windowed", "(Ljava/lang/Iterable;IIZ)Ljava/util/List;", "(Ljava/lang/Iterable;IIZLkotlin/jvm/functions/Function1;)Ljava/util/List;", "zip", a.a, "b", "(Ljava/lang/Iterable;[Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "(Ljava/lang/Iterable;Ljava/lang/Iterable;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "zipWithNext", "Ljava/lang/Appendable;", "Lkotlin/text/Appendable;", "A", "buffer", "", "separator", "prefix", "postfix", "limit", "truncated", "joinTo", "(Ljava/lang/Iterable;Ljava/lang/Appendable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Appendable;", "", "joinToString", "(Ljava/lang/Iterable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/String;", "asIterable", "asSequence", "(Ljava/lang/Iterable;)Lkotlin/sequences/Sequence;", "averageOfByte", "(Ljava/lang/Iterable;)D", "average", "averageOfShort", "averageOfInt", "averageOfLong", "averageOfFloat", "averageOfDouble", "sumOfByte", "sum", "sumOfShort", "sumOfInt", "sumOfLong", "(Ljava/lang/Iterable;)J", "sumOfFloat", "(Ljava/lang/Iterable;)F", "sumOfDouble", "kotlin-stdlib"}, k = 5, mv = {1, 4, 0}, xs = "kotlin/collections/CollectionsKt")
/* loaded from: classes11.dex */
public class CollectionsKt___CollectionsKt extends CollectionsKt___CollectionsJvmKt {
    public static final <T> boolean all(@NotNull Iterable<? extends T> iterable, @NotNull Function1<? super T, Boolean> function1) {
        if ((iterable instanceof Collection) && ((Collection) iterable).isEmpty()) {
            return true;
        }
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            if (!function1.invoke((T) it.next()).booleanValue()) {
                return false;
            }
        }
        return true;
    }

    public static final <T> boolean any(@NotNull Iterable<? extends T> iterable) {
        return iterable instanceof Collection ? !((Collection) iterable).isEmpty() : iterable.iterator().hasNext();
    }

    /* JADX WARN: Multi-variable type inference failed */
    @InlineOnly
    private static final <T> Iterable<T> asIterable(@NotNull Iterable<? extends T> iterable) {
        return iterable;
    }

    @NotNull
    public static <T> Sequence<T> asSequence(@NotNull final Iterable<? extends T> iterable) {
        return new Sequence<T>() { // from class: kotlin.collections.CollectionsKt___CollectionsKt$asSequence$$inlined$Sequence$1
            @Override // kotlin.sequences.Sequence
            @NotNull
            public Iterator<T> iterator() {
                return iterable.iterator();
            }
        };
    }

    @NotNull
    public static final <T, K, V> Map<K, V> associate(@NotNull Iterable<? extends T> iterable, @NotNull Function1<? super T, ? extends Pair<? extends K, ? extends V>> function1) {
        int collectionSizeOrDefault;
        int mapCapacity;
        int coerceAtLeast;
        collectionSizeOrDefault = CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10);
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(collectionSizeOrDefault);
        coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(mapCapacity, 16);
        LinkedHashMap linkedHashMap = new LinkedHashMap(coerceAtLeast);
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            Pair<? extends K, ? extends V> invoke = function1.invoke((T) it.next());
            linkedHashMap.put(invoke.getFirst(), invoke.getSecond());
        }
        return linkedHashMap;
    }

    @NotNull
    public static final <T, K> Map<K, T> associateBy(@NotNull Iterable<? extends T> iterable, @NotNull Function1<? super T, ? extends K> function1) {
        int collectionSizeOrDefault;
        int mapCapacity;
        int coerceAtLeast;
        collectionSizeOrDefault = CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10);
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(collectionSizeOrDefault);
        coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(mapCapacity, 16);
        LinkedHashMap linkedHashMap = new LinkedHashMap(coerceAtLeast);
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            Object obj = (T) it.next();
            linkedHashMap.put(function1.invoke(obj), obj);
        }
        return linkedHashMap;
    }

    @NotNull
    public static final <T, K, M extends Map<? super K, ? super T>> M associateByTo(@NotNull Iterable<? extends T> iterable, @NotNull M m2, @NotNull Function1<? super T, ? extends K> function1) {
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            Object obj = (T) it.next();
            m2.put(function1.invoke(obj), obj);
        }
        return m2;
    }

    @NotNull
    public static final <T, K, V, M extends Map<? super K, ? super V>> M associateTo(@NotNull Iterable<? extends T> iterable, @NotNull M m2, @NotNull Function1<? super T, ? extends Pair<? extends K, ? extends V>> function1) {
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            Pair<? extends K, ? extends V> invoke = function1.invoke((T) it.next());
            m2.put(invoke.getFirst(), invoke.getSecond());
        }
        return m2;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @SinceKotlin(version = "1.3")
    @NotNull
    public static final <K, V> Map<K, V> associateWith(@NotNull Iterable<? extends K> iterable, @NotNull Function1<? super K, ? extends V> function1) {
        int collectionSizeOrDefault;
        int mapCapacity;
        int coerceAtLeast;
        collectionSizeOrDefault = CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10);
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(collectionSizeOrDefault);
        coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(mapCapacity, 16);
        LinkedHashMap linkedHashMap = new LinkedHashMap(coerceAtLeast);
        Iterator<? extends K> it = iterable.iterator();
        while (it.hasNext()) {
            Object obj = (K) it.next();
            linkedHashMap.put(obj, function1.invoke(obj));
        }
        return linkedHashMap;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @SinceKotlin(version = "1.3")
    @NotNull
    public static final <K, V, M extends Map<? super K, ? super V>> M associateWithTo(@NotNull Iterable<? extends K> iterable, @NotNull M m2, @NotNull Function1<? super K, ? extends V> function1) {
        Iterator<? extends K> it = iterable.iterator();
        while (it.hasNext()) {
            Object obj = (K) it.next();
            m2.put(obj, function1.invoke(obj));
        }
        return m2;
    }

    @JvmName(name = "averageOfByte")
    public static final double averageOfByte(@NotNull Iterable<Byte> iterable) {
        Iterator<Byte> it = iterable.iterator();
        double d = 0.0d;
        int i2 = 0;
        while (it.hasNext()) {
            double byteValue = it.next().byteValue();
            Double.isNaN(byteValue);
            d += byteValue;
            i2++;
            if (i2 < 0) {
                CollectionsKt__CollectionsKt.throwCountOverflow();
            }
        }
        if (i2 == 0) {
            return DoubleCompanionObject.INSTANCE.getNaN();
        }
        double d2 = i2;
        Double.isNaN(d2);
        return d / d2;
    }

    @JvmName(name = "averageOfDouble")
    public static final double averageOfDouble(@NotNull Iterable<Double> iterable) {
        Iterator<Double> it = iterable.iterator();
        double d = 0.0d;
        int i2 = 0;
        while (it.hasNext()) {
            d += it.next().doubleValue();
            i2++;
            if (i2 < 0) {
                CollectionsKt__CollectionsKt.throwCountOverflow();
            }
        }
        if (i2 == 0) {
            return DoubleCompanionObject.INSTANCE.getNaN();
        }
        double d2 = i2;
        Double.isNaN(d2);
        return d / d2;
    }

    @JvmName(name = "averageOfFloat")
    public static final double averageOfFloat(@NotNull Iterable<Float> iterable) {
        Iterator<Float> it = iterable.iterator();
        double d = 0.0d;
        int i2 = 0;
        while (it.hasNext()) {
            double floatValue = it.next().floatValue();
            Double.isNaN(floatValue);
            d += floatValue;
            i2++;
            if (i2 < 0) {
                CollectionsKt__CollectionsKt.throwCountOverflow();
            }
        }
        if (i2 == 0) {
            return DoubleCompanionObject.INSTANCE.getNaN();
        }
        double d2 = i2;
        Double.isNaN(d2);
        return d / d2;
    }

    @JvmName(name = "averageOfInt")
    public static final double averageOfInt(@NotNull Iterable<Integer> iterable) {
        Iterator<Integer> it = iterable.iterator();
        double d = 0.0d;
        int i2 = 0;
        while (it.hasNext()) {
            double intValue = it.next().intValue();
            Double.isNaN(intValue);
            d += intValue;
            i2++;
            if (i2 < 0) {
                CollectionsKt__CollectionsKt.throwCountOverflow();
            }
        }
        if (i2 == 0) {
            return DoubleCompanionObject.INSTANCE.getNaN();
        }
        double d2 = i2;
        Double.isNaN(d2);
        return d / d2;
    }

    @JvmName(name = "averageOfLong")
    public static final double averageOfLong(@NotNull Iterable<Long> iterable) {
        Iterator<Long> it = iterable.iterator();
        double d = 0.0d;
        int i2 = 0;
        while (it.hasNext()) {
            double longValue = it.next().longValue();
            Double.isNaN(longValue);
            d += longValue;
            i2++;
            if (i2 < 0) {
                CollectionsKt__CollectionsKt.throwCountOverflow();
            }
        }
        if (i2 == 0) {
            return DoubleCompanionObject.INSTANCE.getNaN();
        }
        double d2 = i2;
        Double.isNaN(d2);
        return d / d2;
    }

    @JvmName(name = "averageOfShort")
    public static final double averageOfShort(@NotNull Iterable<Short> iterable) {
        Iterator<Short> it = iterable.iterator();
        double d = 0.0d;
        int i2 = 0;
        while (it.hasNext()) {
            double shortValue = it.next().shortValue();
            Double.isNaN(shortValue);
            d += shortValue;
            i2++;
            if (i2 < 0) {
                CollectionsKt__CollectionsKt.throwCountOverflow();
            }
        }
        if (i2 == 0) {
            return DoubleCompanionObject.INSTANCE.getNaN();
        }
        double d2 = i2;
        Double.isNaN(d2);
        return d / d2;
    }

    @SinceKotlin(version = "1.2")
    @NotNull
    public static final <T> List<List<T>> chunked(@NotNull Iterable<? extends T> iterable, int i2) {
        return windowed(iterable, i2, i2, true);
    }

    @InlineOnly
    private static final <T> T component1(@NotNull List<? extends T> list) {
        return list.get(0);
    }

    @InlineOnly
    private static final <T> T component2(@NotNull List<? extends T> list) {
        return list.get(1);
    }

    @InlineOnly
    private static final <T> T component3(@NotNull List<? extends T> list) {
        return list.get(2);
    }

    @InlineOnly
    private static final <T> T component4(@NotNull List<? extends T> list) {
        return list.get(3);
    }

    @InlineOnly
    private static final <T> T component5(@NotNull List<? extends T> list) {
        return list.get(4);
    }

    public static final <T> boolean contains(@NotNull Iterable<? extends T> iterable, T t) {
        if (iterable instanceof Collection) {
            return ((Collection) iterable).contains(t);
        }
        return indexOf(iterable, t) >= 0;
    }

    public static final <T> int count(@NotNull Iterable<? extends T> iterable) {
        if (iterable instanceof Collection) {
            return ((Collection) iterable).size();
        }
        int i2 = 0;
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            it.next();
            i2++;
            if (i2 < 0) {
                CollectionsKt__CollectionsKt.throwCountOverflow();
            }
        }
        return i2;
    }

    @NotNull
    public static final <T> List<T> distinct(@NotNull Iterable<? extends T> iterable) {
        List<T> list;
        list = toList(toMutableSet(iterable));
        return list;
    }

    @NotNull
    public static final <T, K> List<T> distinctBy(@NotNull Iterable<? extends T> iterable, @NotNull Function1<? super T, ? extends K> function1) {
        HashSet hashSet = new HashSet();
        ArrayList arrayList = new ArrayList();
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            Object obj = (T) it.next();
            if (hashSet.add(function1.invoke(obj))) {
                arrayList.add(obj);
            }
        }
        return arrayList;
    }

    @NotNull
    public static <T> List<T> drop(@NotNull Iterable<? extends T> iterable, int i2) {
        ArrayList arrayList;
        List<T> optimizeReadOnlyList;
        List<T> listOf;
        List<T> emptyList;
        List<T> list;
        int i3 = 0;
        if (!(i2 >= 0)) {
            throw new IllegalArgumentException(("Requested element count " + i2 + " is less than zero.").toString());
        } else if (i2 == 0) {
            list = toList(iterable);
            return list;
        } else {
            if (iterable instanceof Collection) {
                Collection collection = (Collection) iterable;
                int size = collection.size() - i2;
                if (size <= 0) {
                    emptyList = CollectionsKt__CollectionsKt.emptyList();
                    return emptyList;
                } else if (size == 1) {
                    listOf = CollectionsKt__CollectionsJVMKt.listOf(last(iterable));
                    return listOf;
                } else {
                    arrayList = new ArrayList(size);
                    if (iterable instanceof List) {
                        if (iterable instanceof RandomAccess) {
                            int size2 = collection.size();
                            while (i2 < size2) {
                                arrayList.add(((List) iterable).get(i2));
                                i2++;
                            }
                        } else {
                            ListIterator listIterator = ((List) iterable).listIterator(i2);
                            while (listIterator.hasNext()) {
                                arrayList.add(listIterator.next());
                            }
                        }
                        return arrayList;
                    }
                }
            } else {
                arrayList = new ArrayList();
            }
            for (T t : iterable) {
                if (i3 >= i2) {
                    arrayList.add(t);
                } else {
                    i3++;
                }
            }
            optimizeReadOnlyList = CollectionsKt__CollectionsKt.optimizeReadOnlyList(arrayList);
            return optimizeReadOnlyList;
        }
    }

    @NotNull
    public static final <T> List<T> dropLast(@NotNull List<? extends T> list, int i2) {
        int coerceAtLeast;
        if (i2 >= 0) {
            coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(list.size() - i2, 0);
            return take(list, coerceAtLeast);
        }
        throw new IllegalArgumentException(("Requested element count " + i2 + " is less than zero.").toString());
    }

    @NotNull
    public static final <T> List<T> dropLastWhile(@NotNull List<? extends T> list, @NotNull Function1<? super T, Boolean> function1) {
        List<T> emptyList;
        if (!list.isEmpty()) {
            ListIterator<? extends T> listIterator = list.listIterator(list.size());
            while (listIterator.hasPrevious()) {
                if (!function1.invoke((T) listIterator.previous()).booleanValue()) {
                    return take(list, listIterator.nextIndex() + 1);
                }
            }
        }
        emptyList = CollectionsKt__CollectionsKt.emptyList();
        return emptyList;
    }

    @NotNull
    public static final <T> List<T> dropWhile(@NotNull Iterable<? extends T> iterable, @NotNull Function1<? super T, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        Iterator<? extends T> it = iterable.iterator();
        boolean z = false;
        while (it.hasNext()) {
            Object obj = (T) it.next();
            if (z) {
                arrayList.add(obj);
            } else if (!function1.invoke(obj).booleanValue()) {
                arrayList.add(obj);
                z = true;
            }
        }
        return arrayList;
    }

    public static final <T> T elementAt(@NotNull Iterable<? extends T> iterable, final int i2) {
        if (iterable instanceof List) {
            return (T) ((List) iterable).get(i2);
        }
        return (T) elementAtOrElse(iterable, i2, new Function1() { // from class: kotlin.collections.CollectionsKt___CollectionsKt$elementAt$1
            /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
            {
                super(1);
            }

            @Override // kotlin.jvm.functions.Function1
            public /* bridge */ /* synthetic */ Object invoke(Object obj) {
                return invoke(((Number) obj).intValue());
            }

            @NotNull
            public final Void invoke(int i3) {
                throw new IndexOutOfBoundsException("Collection doesn't contain element at index " + i2 + OrderISVUtil.MONEY_DECIMAL_CHAR);
            }
        });
    }

    public static final <T> T elementAtOrElse(@NotNull Iterable<? extends T> iterable, int i2, @NotNull Function1<? super Integer, ? extends T> function1) {
        int lastIndex;
        if (iterable instanceof List) {
            List list = (List) iterable;
            if (i2 >= 0) {
                lastIndex = CollectionsKt__CollectionsKt.getLastIndex(list);
                if (i2 <= lastIndex) {
                    return (T) list.get(i2);
                }
            }
            return function1.invoke(Integer.valueOf(i2));
        } else if (i2 < 0) {
            return function1.invoke(Integer.valueOf(i2));
        } else {
            int i3 = 0;
            for (T t : iterable) {
                int i4 = i3 + 1;
                if (i2 == i3) {
                    return t;
                }
                i3 = i4;
            }
            return function1.invoke(Integer.valueOf(i2));
        }
    }

    @Nullable
    public static final <T> T elementAtOrNull(@NotNull Iterable<? extends T> iterable, int i2) {
        if (iterable instanceof List) {
            return (T) getOrNull((List) iterable, i2);
        }
        if (i2 < 0) {
            return null;
        }
        int i3 = 0;
        for (T t : iterable) {
            int i4 = i3 + 1;
            if (i2 == i3) {
                return t;
            }
            i3 = i4;
        }
        return null;
    }

    @NotNull
    public static final <T> List<T> filter(@NotNull Iterable<? extends T> iterable, @NotNull Function1<? super T, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            Object obj = (T) it.next();
            if (function1.invoke(obj).booleanValue()) {
                arrayList.add(obj);
            }
        }
        return arrayList;
    }

    @NotNull
    public static final <T> List<T> filterIndexed(@NotNull Iterable<? extends T> iterable, @NotNull Function2<? super Integer, ? super T, Boolean> function2) {
        ArrayList arrayList = new ArrayList();
        Iterator<? extends T> it = iterable.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            Object obj = (T) it.next();
            int i3 = i2 + 1;
            if (i2 < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            if (function2.invoke(Integer.valueOf(i2), obj).booleanValue()) {
                arrayList.add(obj);
            }
            i2 = i3;
        }
        return arrayList;
    }

    @NotNull
    public static final <T, C extends Collection<? super T>> C filterIndexedTo(@NotNull Iterable<? extends T> iterable, @NotNull C c2, @NotNull Function2<? super Integer, ? super T, Boolean> function2) {
        Iterator<? extends T> it = iterable.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            Object obj = (T) it.next();
            int i3 = i2 + 1;
            if (i2 < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            if (function2.invoke(Integer.valueOf(i2), obj).booleanValue()) {
                c2.add(obj);
            }
            i2 = i3;
        }
        return c2;
    }

    @NotNull
    public static final /* synthetic */ <R> List<R> filterIsInstance(@NotNull Iterable<?> iterable) {
        ArrayList arrayList = new ArrayList();
        for (Object obj : iterable) {
            Intrinsics.reifiedOperationMarker(3, "R");
            if (obj instanceof Object) {
                arrayList.add(obj);
            }
        }
        return arrayList;
    }

    @NotNull
    public static final /* synthetic */ <R, C extends Collection<? super R>> C filterIsInstanceTo(@NotNull Iterable<?> iterable, @NotNull C c2) {
        for (Object obj : iterable) {
            Intrinsics.reifiedOperationMarker(3, "R");
            if (obj instanceof Object) {
                c2.add(obj);
            }
        }
        return c2;
    }

    @NotNull
    public static final <T> List<T> filterNot(@NotNull Iterable<? extends T> iterable, @NotNull Function1<? super T, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            Object obj = (T) it.next();
            if (!function1.invoke(obj).booleanValue()) {
                arrayList.add(obj);
            }
        }
        return arrayList;
    }

    @NotNull
    public static final <T> List<T> filterNotNull(@NotNull Iterable<? extends T> iterable) {
        return (List) filterNotNullTo(iterable, new ArrayList());
    }

    @NotNull
    public static final <C extends Collection<? super T>, T> C filterNotNullTo(@NotNull Iterable<? extends T> iterable, @NotNull C c2) {
        for (T t : iterable) {
            if (t != null) {
                c2.add(t);
            }
        }
        return c2;
    }

    @NotNull
    public static final <T, C extends Collection<? super T>> C filterNotTo(@NotNull Iterable<? extends T> iterable, @NotNull C c2, @NotNull Function1<? super T, Boolean> function1) {
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            Object obj = (T) it.next();
            if (!function1.invoke(obj).booleanValue()) {
                c2.add(obj);
            }
        }
        return c2;
    }

    @NotNull
    public static final <T, C extends Collection<? super T>> C filterTo(@NotNull Iterable<? extends T> iterable, @NotNull C c2, @NotNull Function1<? super T, Boolean> function1) {
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            Object obj = (T) it.next();
            if (function1.invoke(obj).booleanValue()) {
                c2.add(obj);
            }
        }
        return c2;
    }

    /* JADX WARN: Type inference failed for: r0v2, types: [T, java.lang.Object] */
    @InlineOnly
    private static final <T> T find(@NotNull Iterable<? extends T> iterable, Function1<? super T, Boolean> function1) {
        for (T t : iterable) {
            if (function1.invoke(t).booleanValue()) {
                return t;
            }
        }
        return null;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @InlineOnly
    private static final <T> T findLast(@NotNull Iterable<? extends T> iterable, Function1<? super T, Boolean> function1) {
        T t = null;
        for (T t2 : iterable) {
            if (function1.invoke(t2).booleanValue()) {
                t = t2;
            }
        }
        return t;
    }

    public static <T> T first(@NotNull Iterable<? extends T> iterable) {
        if (iterable instanceof List) {
            return (T) first((List) iterable);
        }
        Iterator<? extends T> it = iterable.iterator();
        if (it.hasNext()) {
            return it.next();
        }
        throw new NoSuchElementException("Collection is empty.");
    }

    @Nullable
    public static final <T> T firstOrNull(@NotNull Iterable<? extends T> iterable) {
        if (iterable instanceof List) {
            List list = (List) iterable;
            if (list.isEmpty()) {
                return null;
            }
            return (T) list.get(0);
        }
        Iterator<? extends T> it = iterable.iterator();
        if (it.hasNext()) {
            return it.next();
        }
        return null;
    }

    @NotNull
    public static final <T, R> List<R> flatMap(@NotNull Iterable<? extends T> iterable, @NotNull Function1<? super T, ? extends Iterable<? extends R>> function1) {
        ArrayList arrayList = new ArrayList();
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            CollectionsKt__MutableCollectionsKt.addAll(arrayList, function1.invoke((T) it.next()));
        }
        return arrayList;
    }

    @NotNull
    public static final <T, R, C extends Collection<? super R>> C flatMapTo(@NotNull Iterable<? extends T> iterable, @NotNull C c2, @NotNull Function1<? super T, ? extends Iterable<? extends R>> function1) {
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            CollectionsKt__MutableCollectionsKt.addAll(c2, function1.invoke((T) it.next()));
        }
        return c2;
    }

    public static final <T, R> R fold(@NotNull Iterable<? extends T> iterable, R r, @NotNull Function2<? super R, ? super T, ? extends R> function2) {
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            r = function2.invoke(r, (T) it.next());
        }
        return r;
    }

    public static final <T, R> R foldIndexed(@NotNull Iterable<? extends T> iterable, R r, @NotNull Function3<? super Integer, ? super R, ? super T, ? extends R> function3) {
        Iterator<? extends T> it = iterable.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            Object obj = (T) it.next();
            int i3 = i2 + 1;
            if (i2 < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            r = function3.invoke(Integer.valueOf(i2), r, obj);
            i2 = i3;
        }
        return r;
    }

    public static final <T, R> R foldRight(@NotNull List<? extends T> list, R r, @NotNull Function2<? super T, ? super R, ? extends R> function2) {
        if (!list.isEmpty()) {
            ListIterator<? extends T> listIterator = list.listIterator(list.size());
            while (listIterator.hasPrevious()) {
                r = function2.invoke((T) listIterator.previous(), r);
            }
        }
        return r;
    }

    public static final <T, R> R foldRightIndexed(@NotNull List<? extends T> list, R r, @NotNull Function3<? super Integer, ? super T, ? super R, ? extends R> function3) {
        if (!list.isEmpty()) {
            ListIterator<? extends T> listIterator = list.listIterator(list.size());
            while (listIterator.hasPrevious()) {
                r = function3.invoke(Integer.valueOf(listIterator.previousIndex()), (T) listIterator.previous(), r);
            }
        }
        return r;
    }

    @HidesMembers
    public static final <T> void forEach(@NotNull Iterable<? extends T> iterable, @NotNull Function1<? super T, Unit> function1) {
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            function1.invoke((T) it.next());
        }
    }

    public static final <T> void forEachIndexed(@NotNull Iterable<? extends T> iterable, @NotNull Function2<? super Integer, ? super T, Unit> function2) {
        Iterator<? extends T> it = iterable.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            Object obj = (T) it.next();
            int i3 = i2 + 1;
            if (i2 < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            function2.invoke(Integer.valueOf(i2), obj);
            i2 = i3;
        }
    }

    @InlineOnly
    private static final <T> T getOrElse(@NotNull List<? extends T> list, int i2, Function1<? super Integer, ? extends T> function1) {
        int lastIndex;
        if (i2 >= 0) {
            lastIndex = CollectionsKt__CollectionsKt.getLastIndex(list);
            if (i2 <= lastIndex) {
                return list.get(i2);
            }
        }
        return function1.invoke(Integer.valueOf(i2));
    }

    @Nullable
    public static final <T> T getOrNull(@NotNull List<? extends T> list, int i2) {
        int lastIndex;
        if (i2 >= 0) {
            lastIndex = CollectionsKt__CollectionsKt.getLastIndex(list);
            if (i2 <= lastIndex) {
                return list.get(i2);
            }
        }
        return null;
    }

    @NotNull
    public static final <T, K> Map<K, List<T>> groupBy(@NotNull Iterable<? extends T> iterable, @NotNull Function1<? super T, ? extends K> function1) {
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            Object obj = (T) it.next();
            K invoke = function1.invoke(obj);
            Object obj2 = linkedHashMap.get(invoke);
            if (obj2 == null) {
                obj2 = new ArrayList();
                linkedHashMap.put(invoke, obj2);
            }
            ((List) obj2).add(obj);
        }
        return linkedHashMap;
    }

    @NotNull
    public static final <T, K, M extends Map<? super K, List<T>>> M groupByTo(@NotNull Iterable<? extends T> iterable, @NotNull M m2, @NotNull Function1<? super T, ? extends K> function1) {
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            Object obj = (T) it.next();
            K invoke = function1.invoke(obj);
            Object obj2 = m2.get(invoke);
            if (obj2 == null) {
                obj2 = new ArrayList();
                m2.put(invoke, obj2);
            }
            ((List) obj2).add(obj);
        }
        return m2;
    }

    @SinceKotlin(version = "1.1")
    @NotNull
    public static final <T, K> Grouping<T, K> groupingBy(@NotNull final Iterable<? extends T> iterable, @NotNull final Function1<? super T, ? extends K> function1) {
        return new Grouping<T, K>() { // from class: kotlin.collections.CollectionsKt___CollectionsKt$groupingBy$1
            @Override // kotlin.collections.Grouping
            public K keyOf(T element) {
                return (K) function1.invoke(element);
            }

            @Override // kotlin.collections.Grouping
            @NotNull
            public Iterator<T> sourceIterator() {
                return iterable.iterator();
            }
        };
    }

    public static final <T> int indexOf(@NotNull Iterable<? extends T> iterable, T t) {
        if (iterable instanceof List) {
            return ((List) iterable).indexOf(t);
        }
        int i2 = 0;
        for (T t2 : iterable) {
            if (i2 < 0) {
                CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            if (Intrinsics.areEqual(t, t2)) {
                return i2;
            }
            i2++;
        }
        return -1;
    }

    public static final <T> int indexOfFirst(@NotNull Iterable<? extends T> iterable, @NotNull Function1<? super T, Boolean> function1) {
        Iterator<? extends T> it = iterable.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            Object obj = (T) it.next();
            if (i2 < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            if (function1.invoke(obj).booleanValue()) {
                return i2;
            }
            i2++;
        }
        return -1;
    }

    public static final <T> int indexOfLast(@NotNull Iterable<? extends T> iterable, @NotNull Function1<? super T, Boolean> function1) {
        Iterator<? extends T> it = iterable.iterator();
        int i2 = -1;
        int i3 = 0;
        while (it.hasNext()) {
            Object obj = (T) it.next();
            if (i3 < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            if (function1.invoke(obj).booleanValue()) {
                i2 = i3;
            }
            i3++;
        }
        return i2;
    }

    @NotNull
    public static final <T> Set<T> intersect(@NotNull Iterable<? extends T> iterable, @NotNull Iterable<? extends T> iterable2) {
        Set<T> mutableSet = toMutableSet(iterable);
        CollectionsKt__MutableCollectionsKt.retainAll(mutableSet, iterable2);
        return mutableSet;
    }

    @NotNull
    public static final <T, A extends Appendable> A joinTo(@NotNull Iterable<? extends T> iterable, @NotNull A a, @NotNull CharSequence charSequence, @NotNull CharSequence charSequence2, @NotNull CharSequence charSequence3, int i2, @NotNull CharSequence charSequence4, @Nullable Function1<? super T, ? extends CharSequence> function1) {
        a.append(charSequence2);
        int i3 = 0;
        for (T t : iterable) {
            i3++;
            if (i3 > 1) {
                a.append(charSequence);
            }
            if (i2 >= 0 && i3 > i2) {
                break;
            }
            StringsKt__AppendableKt.appendElement(a, t, function1);
        }
        if (i2 >= 0 && i3 > i2) {
            a.append(charSequence4);
        }
        a.append(charSequence3);
        return a;
    }

    public static /* synthetic */ Appendable joinTo$default(Iterable iterable, Appendable appendable, CharSequence charSequence, CharSequence charSequence2, CharSequence charSequence3, int i2, CharSequence charSequence4, Function1 function1, int i3, Object obj) {
        return joinTo(iterable, appendable, (i3 & 2) != 0 ? ", " : charSequence, (i3 & 4) != 0 ? "" : charSequence2, (i3 & 8) == 0 ? charSequence3 : "", (i3 & 16) != 0 ? -1 : i2, (i3 & 32) != 0 ? "..." : charSequence4, (i3 & 64) != 0 ? null : function1);
    }

    @NotNull
    public static final <T> String joinToString(@NotNull Iterable<? extends T> iterable, @NotNull CharSequence charSequence, @NotNull CharSequence charSequence2, @NotNull CharSequence charSequence3, int i2, @NotNull CharSequence charSequence4, @Nullable Function1<? super T, ? extends CharSequence> function1) {
        String sb = ((StringBuilder) joinTo(iterable, new StringBuilder(), charSequence, charSequence2, charSequence3, i2, charSequence4, function1)).toString();
        Intrinsics.checkExpressionValueIsNotNull(sb, "joinTo(StringBuilder(), \u2026ed, transform).toString()");
        return sb;
    }

    public static /* synthetic */ String joinToString$default(Iterable iterable, CharSequence charSequence, CharSequence charSequence2, CharSequence charSequence3, int i2, CharSequence charSequence4, Function1 function1, int i3, Object obj) {
        if ((i3 & 1) != 0) {
            charSequence = ", ";
        }
        CharSequence charSequence5 = (i3 & 2) != 0 ? "" : charSequence2;
        CharSequence charSequence6 = (i3 & 4) == 0 ? charSequence3 : "";
        int i4 = (i3 & 8) != 0 ? -1 : i2;
        if ((i3 & 16) != 0) {
            charSequence4 = "...";
        }
        CharSequence charSequence7 = charSequence4;
        if ((i3 & 32) != 0) {
            function1 = null;
        }
        return joinToString(iterable, charSequence, charSequence5, charSequence6, i4, charSequence7, function1);
    }

    public static final <T> T last(@NotNull Iterable<? extends T> iterable) {
        if (iterable instanceof List) {
            return (T) CollectionsKt.last((List) iterable);
        }
        Iterator<? extends T> it = iterable.iterator();
        if (it.hasNext()) {
            T next = it.next();
            while (it.hasNext()) {
                next = it.next();
            }
            return next;
        }
        throw new NoSuchElementException("Collection is empty.");
    }

    public static final <T> int lastIndexOf(@NotNull Iterable<? extends T> iterable, T t) {
        if (iterable instanceof List) {
            return ((List) iterable).lastIndexOf(t);
        }
        int i2 = -1;
        int i3 = 0;
        for (T t2 : iterable) {
            if (i3 < 0) {
                CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            if (Intrinsics.areEqual(t, t2)) {
                i2 = i3;
            }
            i3++;
        }
        return i2;
    }

    @Nullable
    public static final <T> T lastOrNull(@NotNull Iterable<? extends T> iterable) {
        if (iterable instanceof List) {
            List list = (List) iterable;
            if (list.isEmpty()) {
                return null;
            }
            return (T) list.get(list.size() - 1);
        }
        Iterator<? extends T> it = iterable.iterator();
        if (it.hasNext()) {
            T next = it.next();
            while (it.hasNext()) {
                next = it.next();
            }
            return next;
        }
        return null;
    }

    @NotNull
    public static final <T, R> List<R> map(@NotNull Iterable<? extends T> iterable, @NotNull Function1<? super T, ? extends R> function1) {
        int collectionSizeOrDefault;
        collectionSizeOrDefault = CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10);
        ArrayList arrayList = new ArrayList(collectionSizeOrDefault);
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            arrayList.add(function1.invoke((T) it.next()));
        }
        return arrayList;
    }

    @NotNull
    public static final <T, R> List<R> mapIndexed(@NotNull Iterable<? extends T> iterable, @NotNull Function2<? super Integer, ? super T, ? extends R> function2) {
        int collectionSizeOrDefault;
        collectionSizeOrDefault = CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10);
        ArrayList arrayList = new ArrayList(collectionSizeOrDefault);
        Iterator<? extends T> it = iterable.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            Object obj = (T) it.next();
            int i3 = i2 + 1;
            if (i2 < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            arrayList.add(function2.invoke(Integer.valueOf(i2), obj));
            i2 = i3;
        }
        return arrayList;
    }

    @NotNull
    public static final <T, R> List<R> mapIndexedNotNull(@NotNull Iterable<? extends T> iterable, @NotNull Function2<? super Integer, ? super T, ? extends R> function2) {
        ArrayList arrayList = new ArrayList();
        Iterator<? extends T> it = iterable.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            Object obj = (T) it.next();
            int i3 = i2 + 1;
            if (i2 < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            R invoke = function2.invoke(Integer.valueOf(i2), obj);
            if (invoke != null) {
                arrayList.add(invoke);
            }
            i2 = i3;
        }
        return arrayList;
    }

    @NotNull
    public static final <T, R, C extends Collection<? super R>> C mapIndexedNotNullTo(@NotNull Iterable<? extends T> iterable, @NotNull C c2, @NotNull Function2<? super Integer, ? super T, ? extends R> function2) {
        Iterator<? extends T> it = iterable.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            Object obj = (T) it.next();
            int i3 = i2 + 1;
            if (i2 < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            R invoke = function2.invoke(Integer.valueOf(i2), obj);
            if (invoke != null) {
                c2.add(invoke);
            }
            i2 = i3;
        }
        return c2;
    }

    @NotNull
    public static final <T, R, C extends Collection<? super R>> C mapIndexedTo(@NotNull Iterable<? extends T> iterable, @NotNull C c2, @NotNull Function2<? super Integer, ? super T, ? extends R> function2) {
        Iterator<? extends T> it = iterable.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            Object obj = (T) it.next();
            int i3 = i2 + 1;
            if (i2 < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            c2.add(function2.invoke(Integer.valueOf(i2), obj));
            i2 = i3;
        }
        return c2;
    }

    @NotNull
    public static final <T, R> List<R> mapNotNull(@NotNull Iterable<? extends T> iterable, @NotNull Function1<? super T, ? extends R> function1) {
        ArrayList arrayList = new ArrayList();
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            R invoke = function1.invoke((T) it.next());
            if (invoke != null) {
                arrayList.add(invoke);
            }
        }
        return arrayList;
    }

    @NotNull
    public static final <T, R, C extends Collection<? super R>> C mapNotNullTo(@NotNull Iterable<? extends T> iterable, @NotNull C c2, @NotNull Function1<? super T, ? extends R> function1) {
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            R invoke = function1.invoke((T) it.next());
            if (invoke != null) {
                c2.add(invoke);
            }
        }
        return c2;
    }

    @NotNull
    public static final <T, R, C extends Collection<? super R>> C mapTo(@NotNull Iterable<? extends T> iterable, @NotNull C c2, @NotNull Function1<? super T, ? extends R> function1) {
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            c2.add(function1.invoke((T) it.next()));
        }
        return c2;
    }

    @SinceKotlin(version = "1.1")
    @Nullable
    /* renamed from: max */
    public static final Double m515max(@NotNull Iterable<Double> iterable) {
        Iterator<Double> it = iterable.iterator();
        if (it.hasNext()) {
            double doubleValue = it.next().doubleValue();
            if (Double.isNaN(doubleValue)) {
                return Double.valueOf(doubleValue);
            }
            while (it.hasNext()) {
                double doubleValue2 = it.next().doubleValue();
                if (Double.isNaN(doubleValue2)) {
                    return Double.valueOf(doubleValue2);
                }
                if (doubleValue < doubleValue2) {
                    doubleValue = doubleValue2;
                }
            }
            return Double.valueOf(doubleValue);
        }
        return null;
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r0v1, types: [T, java.lang.Object] */
    /* JADX WARN: Type inference failed for: r0v2 */
    /* JADX WARN: Type inference failed for: r0v3, types: [T] */
    /* JADX WARN: Type inference failed for: r0v8 */
    /* JADX WARN: Type inference failed for: r0v9 */
    @Nullable
    public static final <T, R extends Comparable<? super R>> T maxBy(@NotNull Iterable<? extends T> iterable, @NotNull Function1<? super T, ? extends R> function1) {
        Iterator<? extends T> it = iterable.iterator();
        if (it.hasNext()) {
            T next = it.next();
            if (it.hasNext()) {
                R invoke = function1.invoke(next);
                do {
                    T next2 = it.next();
                    R invoke2 = function1.invoke(next2);
                    next = next;
                    if (invoke.compareTo(invoke2) < 0) {
                        invoke = invoke2;
                        next = next2;
                    }
                } while (it.hasNext());
                return (T) next;
            }
            return next;
        }
        return null;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @Nullable
    public static final <T> T maxWith(@NotNull Iterable<? extends T> iterable, @NotNull Comparator<? super T> comparator) {
        Iterator<? extends T> it = iterable.iterator();
        if (it.hasNext()) {
            Object obj = (T) it.next();
            while (it.hasNext()) {
                T next = it.next();
                if (comparator.compare(obj, next) < 0) {
                    obj = next;
                }
            }
            return (T) obj;
        }
        return null;
    }

    @SinceKotlin(version = "1.1")
    @Nullable
    /* renamed from: min */
    public static final Double m517min(@NotNull Iterable<Double> iterable) {
        Iterator<Double> it = iterable.iterator();
        if (it.hasNext()) {
            double doubleValue = it.next().doubleValue();
            if (Double.isNaN(doubleValue)) {
                return Double.valueOf(doubleValue);
            }
            while (it.hasNext()) {
                double doubleValue2 = it.next().doubleValue();
                if (Double.isNaN(doubleValue2)) {
                    return Double.valueOf(doubleValue2);
                }
                if (doubleValue > doubleValue2) {
                    doubleValue = doubleValue2;
                }
            }
            return Double.valueOf(doubleValue);
        }
        return null;
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r0v1, types: [T, java.lang.Object] */
    /* JADX WARN: Type inference failed for: r0v2 */
    /* JADX WARN: Type inference failed for: r0v3, types: [T] */
    /* JADX WARN: Type inference failed for: r0v8 */
    /* JADX WARN: Type inference failed for: r0v9 */
    @Nullable
    public static final <T, R extends Comparable<? super R>> T minBy(@NotNull Iterable<? extends T> iterable, @NotNull Function1<? super T, ? extends R> function1) {
        Iterator<? extends T> it = iterable.iterator();
        if (it.hasNext()) {
            T next = it.next();
            if (it.hasNext()) {
                R invoke = function1.invoke(next);
                do {
                    T next2 = it.next();
                    R invoke2 = function1.invoke(next2);
                    next = next;
                    if (invoke.compareTo(invoke2) > 0) {
                        invoke = invoke2;
                        next = next2;
                    }
                } while (it.hasNext());
                return (T) next;
            }
            return next;
        }
        return null;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @Nullable
    public static final <T> T minWith(@NotNull Iterable<? extends T> iterable, @NotNull Comparator<? super T> comparator) {
        Iterator<? extends T> it = iterable.iterator();
        if (it.hasNext()) {
            Object obj = (T) it.next();
            while (it.hasNext()) {
                T next = it.next();
                if (comparator.compare(obj, next) > 0) {
                    obj = next;
                }
            }
            return (T) obj;
        }
        return null;
    }

    @NotNull
    public static final <T> List<T> minus(@NotNull Iterable<? extends T> iterable, T t) {
        int collectionSizeOrDefault;
        collectionSizeOrDefault = CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10);
        ArrayList arrayList = new ArrayList(collectionSizeOrDefault);
        boolean z = false;
        for (T t2 : iterable) {
            boolean z2 = true;
            if (!z && Intrinsics.areEqual(t2, t)) {
                z = true;
                z2 = false;
            }
            if (z2) {
                arrayList.add(t2);
            }
        }
        return arrayList;
    }

    @InlineOnly
    private static final <T> List<T> minusElement(@NotNull Iterable<? extends T> iterable, T t) {
        return minus(iterable, t);
    }

    public static final <T> boolean none(@NotNull Iterable<? extends T> iterable) {
        return iterable instanceof Collection ? ((Collection) iterable).isEmpty() : !iterable.iterator().hasNext();
    }

    @SinceKotlin(version = "1.1")
    @NotNull
    public static final <T, C extends Iterable<? extends T>> C onEach(@NotNull C c2, @NotNull Function1<? super T, Unit> function1) {
        Iterator<T> it = c2.iterator();
        while (it.hasNext()) {
            function1.invoke(it.next());
        }
        return c2;
    }

    @NotNull
    public static final <T> Pair<List<T>, List<T>> partition(@NotNull Iterable<? extends T> iterable, @NotNull Function1<? super T, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        ArrayList arrayList2 = new ArrayList();
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            Object obj = (T) it.next();
            if (function1.invoke(obj).booleanValue()) {
                arrayList.add(obj);
            } else {
                arrayList2.add(obj);
            }
        }
        return new Pair<>(arrayList, arrayList2);
    }

    @NotNull
    public static final <T> List<T> plus(@NotNull Iterable<? extends T> iterable, T t) {
        if (iterable instanceof Collection) {
            return plus((Collection) iterable, (Object) t);
        }
        ArrayList arrayList = new ArrayList();
        CollectionsKt__MutableCollectionsKt.addAll(arrayList, iterable);
        arrayList.add(t);
        return arrayList;
    }

    @InlineOnly
    private static final <T> List<T> plusElement(@NotNull Iterable<? extends T> iterable, T t) {
        return plus(iterable, t);
    }

    @SinceKotlin(version = "1.3")
    @InlineOnly
    private static final <T> T random(@NotNull Collection<? extends T> collection) {
        return (T) random(collection, Random.INSTANCE);
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @InlineOnly
    private static final <T> T randomOrNull(@NotNull Collection<? extends T> collection) {
        return (T) randomOrNull(collection, Random.INSTANCE);
    }

    public static final <S, T extends S> S reduce(@NotNull Iterable<? extends T> iterable, @NotNull Function2<? super S, ? super T, ? extends S> function2) {
        Iterator<? extends T> it = iterable.iterator();
        if (it.hasNext()) {
            S next = it.next();
            while (it.hasNext()) {
                next = function2.invoke(next, (T) it.next());
            }
            return (S) next;
        }
        throw new UnsupportedOperationException("Empty collection can't be reduced.");
    }

    public static final <S, T extends S> S reduceIndexed(@NotNull Iterable<? extends T> iterable, @NotNull Function3<? super Integer, ? super S, ? super T, ? extends S> function3) {
        Iterator<? extends T> it = iterable.iterator();
        if (it.hasNext()) {
            S next = it.next();
            int i2 = 1;
            while (it.hasNext()) {
                int i3 = i2 + 1;
                if (i2 < 0) {
                    if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                        throw new ArithmeticException("Index overflow has happened.");
                    }
                    CollectionsKt__CollectionsKt.throwIndexOverflow();
                }
                next = function3.invoke(Integer.valueOf(i2), next, (T) it.next());
                i2 = i3;
            }
            return (S) next;
        }
        throw new UnsupportedOperationException("Empty collection can't be reduced.");
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @Nullable
    public static final <S, T extends S> S reduceOrNull(@NotNull Iterable<? extends T> iterable, @NotNull Function2<? super S, ? super T, ? extends S> function2) {
        Iterator<? extends T> it = iterable.iterator();
        if (it.hasNext()) {
            S next = it.next();
            while (it.hasNext()) {
                next = function2.invoke(next, (T) it.next());
            }
            return (S) next;
        }
        return null;
    }

    public static final <S, T extends S> S reduceRight(@NotNull List<? extends T> list, @NotNull Function2<? super T, ? super S, ? extends S> function2) {
        ListIterator<? extends T> listIterator = list.listIterator(list.size());
        if (listIterator.hasPrevious()) {
            S previous = listIterator.previous();
            while (listIterator.hasPrevious()) {
                previous = function2.invoke((T) listIterator.previous(), previous);
            }
            return (S) previous;
        }
        throw new UnsupportedOperationException("Empty list can't be reduced.");
    }

    public static final <S, T extends S> S reduceRightIndexed(@NotNull List<? extends T> list, @NotNull Function3<? super Integer, ? super T, ? super S, ? extends S> function3) {
        ListIterator<? extends T> listIterator = list.listIterator(list.size());
        if (listIterator.hasPrevious()) {
            S previous = listIterator.previous();
            while (listIterator.hasPrevious()) {
                previous = function3.invoke(Integer.valueOf(listIterator.previousIndex()), (T) listIterator.previous(), previous);
            }
            return (S) previous;
        }
        throw new UnsupportedOperationException("Empty list can't be reduced.");
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @Nullable
    public static final <S, T extends S> S reduceRightOrNull(@NotNull List<? extends T> list, @NotNull Function2<? super T, ? super S, ? extends S> function2) {
        ListIterator<? extends T> listIterator = list.listIterator(list.size());
        if (listIterator.hasPrevious()) {
            S previous = listIterator.previous();
            while (listIterator.hasPrevious()) {
                previous = function2.invoke((T) listIterator.previous(), previous);
            }
            return (S) previous;
        }
        return null;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @NotNull
    public static final <T> Iterable<T> requireNoNulls(@NotNull Iterable<? extends T> iterable) {
        Iterator it = iterable.iterator();
        while (it.hasNext()) {
            if (it.next() == null) {
                throw new IllegalArgumentException("null element found in " + iterable + OrderISVUtil.MONEY_DECIMAL_CHAR);
            }
        }
        return iterable;
    }

    @NotNull
    public static final <T> List<T> reversed(@NotNull Iterable<? extends T> iterable) {
        List<T> list;
        if ((iterable instanceof Collection) && ((Collection) iterable).size() <= 1) {
            list = toList(iterable);
            return list;
        }
        List<T> mutableList = toMutableList(iterable);
        CollectionsKt___CollectionsJvmKt.reverse(mutableList);
        return mutableList;
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @NotNull
    public static final <T, R> List<R> scan(@NotNull Iterable<? extends T> iterable, R r, @NotNull Function2<? super R, ? super T, ? extends R> function2) {
        int collectionSizeOrDefault;
        List<R> listOf;
        collectionSizeOrDefault = CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 9);
        if (collectionSizeOrDefault == 0) {
            listOf = CollectionsKt__CollectionsJVMKt.listOf(r);
            return listOf;
        }
        ArrayList arrayList = new ArrayList(collectionSizeOrDefault + 1);
        arrayList.add(r);
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            r = function2.invoke(r, (T) it.next());
            arrayList.add(r);
        }
        return arrayList;
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @NotNull
    public static final <T, R> List<R> scanIndexed(@NotNull Iterable<? extends T> iterable, R r, @NotNull Function3<? super Integer, ? super R, ? super T, ? extends R> function3) {
        int collectionSizeOrDefault;
        List<R> listOf;
        collectionSizeOrDefault = CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 9);
        if (collectionSizeOrDefault == 0) {
            listOf = CollectionsKt__CollectionsJVMKt.listOf(r);
            return listOf;
        }
        ArrayList arrayList = new ArrayList(collectionSizeOrDefault + 1);
        arrayList.add(r);
        int i2 = 0;
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            Integer valueOf = Integer.valueOf(i2);
            i2++;
            r = function3.invoke(valueOf, r, (T) it.next());
            arrayList.add(r);
        }
        return arrayList;
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @NotNull
    public static final <S, T extends S> List<S> scanReduce(@NotNull Iterable<? extends T> iterable, @NotNull Function2<? super S, ? super T, ? extends S> function2) {
        int collectionSizeOrDefault;
        List<S> emptyList;
        Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        S next = it.next();
        collectionSizeOrDefault = CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10);
        ArrayList arrayList = new ArrayList(collectionSizeOrDefault);
        arrayList.add(next);
        while (it.hasNext()) {
            next = function2.invoke(next, (T) it.next());
            arrayList.add(next);
        }
        return arrayList;
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @NotNull
    public static final <S, T extends S> List<S> scanReduceIndexed(@NotNull Iterable<? extends T> iterable, @NotNull Function3<? super Integer, ? super S, ? super T, ? extends S> function3) {
        int collectionSizeOrDefault;
        List<S> emptyList;
        Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        S next = it.next();
        collectionSizeOrDefault = CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10);
        ArrayList arrayList = new ArrayList(collectionSizeOrDefault);
        arrayList.add(next);
        int i2 = 1;
        while (it.hasNext()) {
            Integer valueOf = Integer.valueOf(i2);
            i2++;
            next = function3.invoke(valueOf, next, (T) it.next());
            arrayList.add(next);
        }
        return arrayList;
    }

    public static <T> T single(@NotNull Iterable<? extends T> iterable) {
        if (iterable instanceof List) {
            return (T) single((List) iterable);
        }
        Iterator<? extends T> it = iterable.iterator();
        if (it.hasNext()) {
            T next = it.next();
            if (it.hasNext()) {
                throw new IllegalArgumentException("Collection has more than one element.");
            }
            return next;
        }
        throw new NoSuchElementException("Collection is empty.");
    }

    @Nullable
    public static final <T> T singleOrNull(@NotNull Iterable<? extends T> iterable) {
        if (iterable instanceof List) {
            List list = (List) iterable;
            if (list.size() == 1) {
                return (T) list.get(0);
            }
            return null;
        }
        Iterator<? extends T> it = iterable.iterator();
        if (it.hasNext()) {
            T next = it.next();
            if (it.hasNext()) {
                return null;
            }
            return next;
        }
        return null;
    }

    @NotNull
    public static final <T> List<T> slice(@NotNull List<? extends T> list, @NotNull  Var) {
        List<T> list2;
        List<T> emptyList;
        if (Var.isEmpty()) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        list2 = toList(list.subList(Var.getStart().intValue(), Var.getEndInclusive().intValue() + 1));
        return list2;
    }

    public static final <T, R extends Comparable<? super R>> void sortBy(@NotNull List<T> list, @NotNull Function1<? super T, ? extends R> function1) {
        if (list.size() > 1) {
            CollectionsKt__MutableCollectionsJVMKt.sortWith(list, new ComparisonsKt__ComparisonsKt$compareBy$2(function1));
        }
    }

    public static final <T, R extends Comparable<? super R>> void sortByDescending(@NotNull List<T> list, @NotNull Function1<? super T, ? extends R> function1) {
        if (list.size() > 1) {
            CollectionsKt__MutableCollectionsJVMKt.sortWith(list, new ComparisonsKt__ComparisonsKt$compareByDescending$1(function1));
        }
    }

    public static final <T extends Comparable<? super T>> void sortDescending(@NotNull List<T> list) {
        Comparator reverseOrder;
        reverseOrder = ComparisonsKt__ComparisonsKt.reverseOrder();
        CollectionsKt__MutableCollectionsJVMKt.sortWith(list, reverseOrder);
    }

    @NotNull
    public static final <T extends Comparable<? super T>> List<T> sorted(@NotNull Iterable<? extends T> iterable) {
        List<T> asList;
        List<T> list;
        if (iterable instanceof Collection) {
            Collection collection = (Collection) iterable;
            if (collection.size() <= 1) {
                list = toList(iterable);
                return list;
            }
            Object[] array = collection.toArray(new Comparable[0]);
            if (array != null) {
                if (array != null) {
                    Comparable[] comparableArr = (Comparable[]) array;
                    if (comparableArr != null) {
                        ArraysKt___ArraysJvmKt.sort((Object[]) comparableArr);
                        asList = ArraysKt___ArraysJvmKt.asList(comparableArr);
                        return asList;
                    }
                    throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<kotlin.Any?>");
                }
                throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
            }
            throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
        }
        List<T> mutableList = toMutableList(iterable);
        CollectionsKt__MutableCollectionsJVMKt.sort(mutableList);
        return mutableList;
    }

    @NotNull
    public static final <T, R extends Comparable<? super R>> List<T> sortedBy(@NotNull Iterable<? extends T> iterable, @NotNull Function1<? super T, ? extends R> function1) {
        List<T> sortedWith;
        sortedWith = sortedWith(iterable, new ComparisonsKt__ComparisonsKt$compareBy$2(function1));
        return sortedWith;
    }

    @NotNull
    public static final <T, R extends Comparable<? super R>> List<T> sortedByDescending(@NotNull Iterable<? extends T> iterable, @NotNull Function1<? super T, ? extends R> function1) {
        List<T> sortedWith;
        sortedWith = sortedWith(iterable, new ComparisonsKt__ComparisonsKt$compareByDescending$1(function1));
        return sortedWith;
    }

    @NotNull
    public static final <T extends Comparable<? super T>> List<T> sortedDescending(@NotNull Iterable<? extends T> iterable) {
        Comparator reverseOrder;
        List<T> sortedWith;
        reverseOrder = ComparisonsKt__ComparisonsKt.reverseOrder();
        sortedWith = sortedWith(iterable, reverseOrder);
        return sortedWith;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @NotNull
    public static <T> List<T> sortedWith(@NotNull Iterable<? extends T> iterable, @NotNull Comparator<? super T> comparator) {
        List<T> asList;
        List<T> list;
        if (iterable instanceof Collection) {
            Collection collection = (Collection) iterable;
            if (collection.size() <= 1) {
                list = toList(iterable);
                return list;
            }
            Object[] array = collection.toArray(new Object[0]);
            if (array != null) {
                if (array != null) {
                    ArraysKt___ArraysJvmKt.sortWith(array, comparator);
                    asList = ArraysKt___ArraysJvmKt.asList(array);
                    return asList;
                }
                throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
            }
            throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
        }
        List<T> mutableList = toMutableList(iterable);
        CollectionsKt__MutableCollectionsJVMKt.sortWith(mutableList, comparator);
        return mutableList;
    }

    @NotNull
    public static final <T> Set<T> subtract(@NotNull Iterable<? extends T> iterable, @NotNull Iterable<? extends T> iterable2) {
        Set<T> mutableSet = toMutableSet(iterable);
        CollectionsKt__MutableCollectionsKt.removeAll(mutableSet, iterable2);
        return mutableSet;
    }

    public static final <T> int sumBy(@NotNull Iterable<? extends T> iterable, @NotNull Function1<? super T, Integer> function1) {
        Iterator<? extends T> it = iterable.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            i2 += function1.invoke((T) it.next()).intValue();
        }
        return i2;
    }

    public static final <T> double sumByDouble(@NotNull Iterable<? extends T> iterable, @NotNull Function1<? super T, Double> function1) {
        Iterator<? extends T> it = iterable.iterator();
        double d = 0.0d;
        while (it.hasNext()) {
            d += function1.invoke((T) it.next()).doubleValue();
        }
        return d;
    }

    @JvmName(name = "sumOfByte")
    public static final int sumOfByte(@NotNull Iterable<Byte> iterable) {
        Iterator<Byte> it = iterable.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            i2 += it.next().byteValue();
        }
        return i2;
    }

    @JvmName(name = "sumOfDouble")
    public static final double sumOfDouble(@NotNull Iterable<Double> iterable) {
        Iterator<Double> it = iterable.iterator();
        double d = 0.0d;
        while (it.hasNext()) {
            d += it.next().doubleValue();
        }
        return d;
    }

    @JvmName(name = "sumOfFloat")
    public static final float sumOfFloat(@NotNull Iterable<Float> iterable) {
        Iterator<Float> it = iterable.iterator();
        float f2 = 0.0f;
        while (it.hasNext()) {
            f2 += it.next().floatValue();
        }
        return f2;
    }

    @JvmName(name = "sumOfInt")
    public static final int sumOfInt(@NotNull Iterable<Integer> iterable) {
        Iterator<Integer> it = iterable.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            i2 += it.next().intValue();
        }
        return i2;
    }

    @JvmName(name = "sumOfLong")
    public static final long sumOfLong(@NotNull Iterable<Long> iterable) {
        Iterator<Long> it = iterable.iterator();
        long j2 = 0;
        while (it.hasNext()) {
            j2 += it.next().longValue();
        }
        return j2;
    }

    @JvmName(name = "sumOfShort")
    public static final int sumOfShort(@NotNull Iterable<Short> iterable) {
        Iterator<Short> it = iterable.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            i2 += it.next().shortValue();
        }
        return i2;
    }

    @NotNull
    public static final <T> List<T> take(@NotNull Iterable<? extends T> iterable, int i2) {
        List<T> optimizeReadOnlyList;
        List<T> listOf;
        List<T> list;
        List<T> emptyList;
        int i3 = 0;
        if (!(i2 >= 0)) {
            throw new IllegalArgumentException(("Requested element count " + i2 + " is less than zero.").toString());
        } else if (i2 == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        } else {
            if (iterable instanceof Collection) {
                if (i2 >= ((Collection) iterable).size()) {
                    list = toList(iterable);
                    return list;
                } else if (i2 == 1) {
                    listOf = CollectionsKt__CollectionsJVMKt.listOf(CollectionsKt.first(iterable));
                    return listOf;
                }
            }
            ArrayList arrayList = new ArrayList(i2);
            Iterator<? extends T> it = iterable.iterator();
            while (it.hasNext()) {
                arrayList.add(it.next());
                i3++;
                if (i3 == i2) {
                    break;
                }
            }
            optimizeReadOnlyList = CollectionsKt__CollectionsKt.optimizeReadOnlyList(arrayList);
            return optimizeReadOnlyList;
        }
    }

    @NotNull
    public static final <T> List<T> takeLast(@NotNull List<? extends T> list, int i2) {
        List<T> listOf;
        List<T> list2;
        List<T> emptyList;
        if (!(i2 >= 0)) {
            throw new IllegalArgumentException(("Requested element count " + i2 + " is less than zero.").toString());
        } else if (i2 == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        } else {
            int size = list.size();
            if (i2 >= size) {
                list2 = toList(list);
                return list2;
            } else if (i2 == 1) {
                listOf = CollectionsKt__CollectionsJVMKt.listOf(CollectionsKt.last((List) list));
                return listOf;
            } else {
                ArrayList arrayList = new ArrayList(i2);
                if (list instanceof RandomAccess) {
                    for (int i3 = size - i2; i3 < size; i3++) {
                        arrayList.add(list.get(i3));
                    }
                } else {
                    ListIterator<? extends T> listIterator = list.listIterator(size - i2);
                    while (listIterator.hasNext()) {
                        arrayList.add(listIterator.next());
                    }
                }
                return arrayList;
            }
        }
    }

    @NotNull
    public static final <T> List<T> takeLastWhile(@NotNull List<? extends T> list, @NotNull Function1<? super T, Boolean> function1) {
        List<T> list2;
        List<T> emptyList;
        List<T> emptyList2;
        if (list.isEmpty()) {
            emptyList2 = CollectionsKt__CollectionsKt.emptyList();
            return emptyList2;
        }
        ListIterator<? extends T> listIterator = list.listIterator(list.size());
        while (listIterator.hasPrevious()) {
            if (!function1.invoke((T) listIterator.previous()).booleanValue()) {
                listIterator.next();
                int size = list.size() - listIterator.nextIndex();
                if (size == 0) {
                    emptyList = CollectionsKt__CollectionsKt.emptyList();
                    return emptyList;
                }
                ArrayList arrayList = new ArrayList(size);
                while (listIterator.hasNext()) {
                    arrayList.add(listIterator.next());
                }
                return arrayList;
            }
        }
        list2 = toList(list);
        return list2;
    }

    @NotNull
    public static final <T> List<T> takeWhile(@NotNull Iterable<? extends T> iterable, @NotNull Function1<? super T, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            Object obj = (T) it.next();
            if (!function1.invoke(obj).booleanValue()) {
                break;
            }
            arrayList.add(obj);
        }
        return arrayList;
    }

    @NotNull
    public static final boolean[] toBooleanArray(@NotNull Collection<Boolean> collection) {
        boolean[] zArr = new boolean[collection.size()];
        Iterator<Boolean> it = collection.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            zArr[i2] = it.next().booleanValue();
            i2++;
        }
        return zArr;
    }

    @NotNull
    public static final byte[] toByteArray(@NotNull Collection<Byte> collection) {
        byte[] bArr = new byte[collection.size()];
        Iterator<Byte> it = collection.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            bArr[i2] = it.next().byteValue();
            i2++;
        }
        return bArr;
    }

    @NotNull
    public static final char[] toCharArray(@NotNull Collection<Character> collection) {
        char[] cArr = new char[collection.size()];
        Iterator<Character> it = collection.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            cArr[i2] = it.next().charValue();
            i2++;
        }
        return cArr;
    }

    @NotNull
    public static final <T, C extends Collection<? super T>> C toCollection(@NotNull Iterable<? extends T> iterable, @NotNull C c2) {
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            c2.add(it.next());
        }
        return c2;
    }

    @NotNull
    public static final double[] toDoubleArray(@NotNull Collection<Double> collection) {
        double[] dArr = new double[collection.size()];
        Iterator<Double> it = collection.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            dArr[i2] = it.next().doubleValue();
            i2++;
        }
        return dArr;
    }

    @NotNull
    public static final float[] toFloatArray(@NotNull Collection<Float> collection) {
        float[] fArr = new float[collection.size()];
        Iterator<Float> it = collection.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            fArr[i2] = it.next().floatValue();
            i2++;
        }
        return fArr;
    }

    @NotNull
    public static final <T> HashSet<T> toHashSet(@NotNull Iterable<? extends T> iterable) {
        int collectionSizeOrDefault;
        int mapCapacity;
        collectionSizeOrDefault = CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 12);
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(collectionSizeOrDefault);
        return (HashSet) toCollection(iterable, new HashSet(mapCapacity));
    }

    @NotNull
    public static final int[] toIntArray(@NotNull Collection<Integer> collection) {
        int[] iArr = new int[collection.size()];
        Iterator<Integer> it = collection.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            iArr[i2] = it.next().intValue();
            i2++;
        }
        return iArr;
    }

    @NotNull
    public static <T> List<T> toList(@NotNull Iterable<? extends T> iterable) {
        List<T> optimizeReadOnlyList;
        List<T> emptyList;
        List<T> listOf;
        List<T> mutableList;
        if (iterable instanceof Collection) {
            Collection collection = (Collection) iterable;
            int size = collection.size();
            if (size == 0) {
                emptyList = CollectionsKt__CollectionsKt.emptyList();
                return emptyList;
            } else if (size != 1) {
                mutableList = toMutableList((Collection) collection);
                return mutableList;
            } else {
                listOf = CollectionsKt__CollectionsJVMKt.listOf(iterable instanceof List ? ((List) iterable).get(0) : iterable.iterator().next());
                return listOf;
            }
        }
        optimizeReadOnlyList = CollectionsKt__CollectionsKt.optimizeReadOnlyList(toMutableList(iterable));
        return optimizeReadOnlyList;
    }

    @NotNull
    public static final long[] toLongArray(@NotNull Collection<Long> collection) {
        long[] jArr = new long[collection.size()];
        Iterator<Long> it = collection.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            jArr[i2] = it.next().longValue();
            i2++;
        }
        return jArr;
    }

    @NotNull
    public static final <T> List<T> toMutableList(@NotNull Iterable<? extends T> iterable) {
        List<T> mutableList;
        if (iterable instanceof Collection) {
            mutableList = toMutableList((Collection) ((Collection) iterable));
            return mutableList;
        }
        return (List) toCollection(iterable, new ArrayList());
    }

    @NotNull
    public static final <T> Set<T> toMutableSet(@NotNull Iterable<? extends T> iterable) {
        return iterable instanceof Collection ? new LinkedHashSet((Collection) iterable) : (Set) toCollection(iterable, new LinkedHashSet());
    }

    @NotNull
    public static <T> Set<T> toSet(@NotNull Iterable<? extends T> iterable) {
        Set<T> optimizeReadOnlySet;
        Set<T> emptySet;
        Set<T> of;
        int mapCapacity;
        if (iterable instanceof Collection) {
            Collection collection = (Collection) iterable;
            int size = collection.size();
            if (size == 0) {
                emptySet = SetsKt__SetsKt.emptySet();
                return emptySet;
            } else if (size != 1) {
                mapCapacity = MapsKt__MapsJVMKt.mapCapacity(collection.size());
                return (Set) toCollection(iterable, new LinkedHashSet(mapCapacity));
            } else {
                of = SetsKt__SetsJVMKt.setOf(iterable instanceof List ? ((List) iterable).get(0) : iterable.iterator().next());
                return of;
            }
        }
        optimizeReadOnlySet = SetsKt__SetsKt.optimizeReadOnlySet((Set) toCollection(iterable, new LinkedHashSet()));
        return optimizeReadOnlySet;
    }

    @NotNull
    public static final short[] toShortArray(@NotNull Collection<Short> collection) {
        short[] sArr = new short[collection.size()];
        Iterator<Short> it = collection.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            sArr[i2] = it.next().shortValue();
            i2++;
        }
        return sArr;
    }

    @NotNull
    public static final <T> Set<T> union(@NotNull Iterable<? extends T> iterable, @NotNull Iterable<? extends T> iterable2) {
        Set<T> mutableSet = toMutableSet(iterable);
        CollectionsKt__MutableCollectionsKt.addAll(mutableSet, iterable2);
        return mutableSet;
    }

    @SinceKotlin(version = "1.2")
    @NotNull
    public static final <T> List<List<T>> windowed(@NotNull Iterable<? extends T> iterable, int i2, int i3, boolean z) {
        int coerceAtMost;
        SlidingWindowKt.checkWindowSizeStep(i2, i3);
        if ((iterable instanceof RandomAccess) && (iterable instanceof List)) {
            List list = (List) iterable;
            int size = list.size();
            ArrayList arrayList = new ArrayList((size / i3) + (size % i3 == 0 ? 0 : 1));
            int i4 = 0;
            while (i4 >= 0 && size > i4) {
                coerceAtMost = RangesKt___RangesKt.coerceAtMost(i2, size - i4);
                if (coerceAtMost < i2 && !z) {
                    break;
                }
                ArrayList arrayList2 = new ArrayList(coerceAtMost);
                for (int i5 = 0; i5 < coerceAtMost; i5++) {
                    arrayList2.add(list.get(i5 + i4));
                }
                arrayList.add(arrayList2);
                i4 += i3;
            }
            return arrayList;
        }
        ArrayList arrayList3 = new ArrayList();
        Iterator windowedIterator = SlidingWindowKt.windowedIterator(iterable.iterator(), i2, i3, z, false);
        while (windowedIterator.hasNext()) {
            arrayList3.add((List) windowedIterator.next());
        }
        return arrayList3;
    }

    public static /* synthetic */ List windowed$default(Iterable iterable, int i2, int i3, boolean z, int i4, Object obj) {
        if ((i4 & 2) != 0) {
            i3 = 1;
        }
        if ((i4 & 4) != 0) {
            z = false;
        }
        return windowed(iterable, i2, i3, z);
    }

    @NotNull
    public static final <T> Iterable<IndexedValue<T>> withIndex(@NotNull final Iterable<? extends T> iterable) {
        return new IndexingIterable(new Function0<Iterator<? extends T>>() { // from class: kotlin.collections.CollectionsKt___CollectionsKt$withIndex$1
            /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
            {
                super(0);
            }

            @Override // kotlin.jvm.functions.Function0
            @NotNull
            public final Iterator<T> invoke() {
                return iterable.iterator();
            }
        });
    }

    /* JADX WARN: Multi-variable type inference failed */
    @NotNull
    public static final <T, R, V> List<V> zip(@NotNull Iterable<? extends T> iterable, @NotNull R[] rArr, @NotNull Function2<? super T, ? super R, ? extends V> function2) {
        int collectionSizeOrDefault;
        int length = rArr.length;
        collectionSizeOrDefault = CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10);
        ArrayList arrayList = new ArrayList(Math.min(collectionSizeOrDefault, length));
        Iterator<? extends T> it = iterable.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            Object obj = (T) it.next();
            if (i2 >= length) {
                break;
            }
            arrayList.add(function2.invoke(obj, rArr[i2]));
            i2++;
        }
        return arrayList;
    }

    @SinceKotlin(version = "1.2")
    @NotNull
    public static final <T, R> List<R> zipWithNext(@NotNull Iterable<? extends T> iterable, @NotNull Function2<? super T, ? super T, ? extends R> function2) {
        List<R> emptyList;
        Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        ArrayList arrayList = new ArrayList();
        T next = it.next();
        while (it.hasNext()) {
            T next2 = it.next();
            arrayList.add(function2.invoke(next, next2));
            next = (Object) next2;
        }
        return arrayList;
    }

    @SinceKotlin(version = "1.2")
    @NotNull
    public static final <T, R> List<R> chunked(@NotNull Iterable<? extends T> iterable, int i2, @NotNull Function1<? super List<? extends T>, ? extends R> function1) {
        return windowed(iterable, i2, i2, true, function1);
    }

    @InlineOnly
    private static final <T> List<T> plusElement(@NotNull Collection<? extends T> collection, T t) {
        return plus((Collection) collection, (Object) t);
    }

    @SinceKotlin(version = "1.3")
    public static final <T> T random(@NotNull Collection<? extends T> collection, @NotNull Random random) {
        if (!collection.isEmpty()) {
            return (T) elementAt(collection, random.nextInt(collection.size()));
        }
        throw new NoSuchElementException("Collection is empty.");
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @Nullable
    public static final <T> T randomOrNull(@NotNull Collection<? extends T> collection, @NotNull Random random) {
        if (collection.isEmpty()) {
            return null;
        }
        return (T) elementAt(collection, random.nextInt(collection.size()));
    }

    public static /* synthetic */ List windowed$default(Iterable iterable, int i2, int i3, boolean z, Function1 function1, int i4, Object obj) {
        if ((i4 & 2) != 0) {
            i3 = 1;
        }
        if ((i4 & 4) != 0) {
            z = false;
        }
        return windowed(iterable, i2, i3, z, function1);
    }

    public static final <T> boolean any(@NotNull Iterable<? extends T> iterable, @NotNull Function1<? super T, Boolean> function1) {
        if ((iterable instanceof Collection) && ((Collection) iterable).isEmpty()) {
            return false;
        }
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            if (function1.invoke((T) it.next()).booleanValue()) {
                return true;
            }
        }
        return false;
    }

    @NotNull
    public static final <T, K, V, M extends Map<? super K, ? super V>> M associateByTo(@NotNull Iterable<? extends T> iterable, @NotNull M m2, @NotNull Function1<? super T, ? extends K> function1, @NotNull Function1<? super T, ? extends V> function12) {
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            Object obj = (T) it.next();
            m2.put(function1.invoke(obj), function12.invoke(obj));
        }
        return m2;
    }

    @InlineOnly
    private static final <T> int count(@NotNull Collection<? extends T> collection) {
        return collection.size();
    }

    /* JADX WARN: Type inference failed for: r0v3, types: [T, java.lang.Object] */
    @InlineOnly
    private static final <T> T findLast(@NotNull List<? extends T> list, Function1<? super T, Boolean> function1) {
        ListIterator<? extends T> listIterator = list.listIterator(list.size());
        while (listIterator.hasPrevious()) {
            T previous = listIterator.previous();
            if (function1.invoke(previous).booleanValue()) {
                return previous;
            }
        }
        return null;
    }

    public static final <T> boolean none(@NotNull Iterable<? extends T> iterable, @NotNull Function1<? super T, Boolean> function1) {
        if ((iterable instanceof Collection) && ((Collection) iterable).isEmpty()) {
            return true;
        }
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            if (function1.invoke((T) it.next()).booleanValue()) {
                return false;
            }
        }
        return true;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @NotNull
    public static final <T> List<T> requireNoNulls(@NotNull List<? extends T> list) {
        Iterator it = list.iterator();
        while (it.hasNext()) {
            if (it.next() == null) {
                throw new IllegalArgumentException("null element found in " + list + OrderISVUtil.MONEY_DECIMAL_CHAR);
            }
        }
        return list;
    }

    @NotNull
    public static final <T> List<T> slice(@NotNull List<? extends T> list, @NotNull Iterable<Integer> iterable) {
        int collectionSizeOrDefault;
        List<T> emptyList;
        collectionSizeOrDefault = CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10);
        if (collectionSizeOrDefault == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        ArrayList arrayList = new ArrayList(collectionSizeOrDefault);
        Iterator<Integer> it = iterable.iterator();
        while (it.hasNext()) {
            arrayList.add(list.get(it.next().intValue()));
        }
        return arrayList;
    }

    public static final <T> int count(@NotNull Iterable<? extends T> iterable, @NotNull Function1<? super T, Boolean> function1) {
        if ((iterable instanceof Collection) && ((Collection) iterable).isEmpty()) {
            return 0;
        }
        Iterator<? extends T> it = iterable.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            if (function1.invoke((T) it.next()).booleanValue() && (i2 = i2 + 1) < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Count overflow has happened.");
                }
                CollectionsKt__CollectionsKt.throwCountOverflow();
            }
        }
        return i2;
    }

    @InlineOnly
    private static final <T> T elementAt(@NotNull List<? extends T> list, int i2) {
        return list.get(i2);
    }

    public static final <T> int indexOfFirst(@NotNull List<? extends T> list, @NotNull Function1<? super T, Boolean> function1) {
        Iterator<? extends T> it = list.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            if (function1.invoke((T) it.next()).booleanValue()) {
                return i2;
            }
            i2++;
        }
        return -1;
    }

    public static final <T> int indexOfLast(@NotNull List<? extends T> list, @NotNull Function1<? super T, Boolean> function1) {
        ListIterator<? extends T> listIterator = list.listIterator(list.size());
        while (listIterator.hasPrevious()) {
            if (function1.invoke((T) listIterator.previous()).booleanValue()) {
                return listIterator.nextIndex();
            }
        }
        return -1;
    }

    @NotNull
    public static final <T> List<T> minus(@NotNull Iterable<? extends T> iterable, @NotNull T[] tArr) {
        HashSet hashSet;
        List<T> list;
        if (tArr.length == 0) {
            list = toList(iterable);
            return list;
        }
        hashSet = ArraysKt___ArraysKt.toHashSet(tArr);
        ArrayList arrayList = new ArrayList();
        for (T t : iterable) {
            if (!hashSet.contains(t)) {
                arrayList.add(t);
            }
        }
        return arrayList;
    }

    @NotNull
    public static <T> List<T> toMutableList(@NotNull Collection<? extends T> collection) {
        return new ArrayList(collection);
    }

    @NotNull
    public static final <T, K, V> Map<K, V> associateBy(@NotNull Iterable<? extends T> iterable, @NotNull Function1<? super T, ? extends K> function1, @NotNull Function1<? super T, ? extends V> function12) {
        int collectionSizeOrDefault;
        int mapCapacity;
        int coerceAtLeast;
        collectionSizeOrDefault = CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10);
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(collectionSizeOrDefault);
        coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(mapCapacity, 16);
        LinkedHashMap linkedHashMap = new LinkedHashMap(coerceAtLeast);
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            Object obj = (T) it.next();
            linkedHashMap.put(function1.invoke(obj), function12.invoke(obj));
        }
        return linkedHashMap;
    }

    public static final <T> int indexOf(@NotNull List<? extends T> list, T t) {
        return list.indexOf(t);
    }

    public static final <T> int lastIndexOf(@NotNull List<? extends T> list, T t) {
        return list.lastIndexOf(t);
    }

    @NotNull
    public static final <T> List<T> plus(@NotNull Collection<? extends T> collection, T t) {
        ArrayList arrayList = new ArrayList(collection.size() + 1);
        arrayList.addAll(collection);
        arrayList.add(t);
        return arrayList;
    }

    @NotNull
    public static final <T, R, V> List<V> zip(@NotNull Iterable<? extends T> iterable, @NotNull Iterable<? extends R> iterable2, @NotNull Function2<? super T, ? super R, ? extends V> function2) {
        int collectionSizeOrDefault;
        int collectionSizeOrDefault2;
        Iterator<? extends T> it = iterable.iterator();
        Iterator<? extends R> it2 = iterable2.iterator();
        collectionSizeOrDefault = CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10);
        collectionSizeOrDefault2 = CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable2, 10);
        ArrayList arrayList = new ArrayList(Math.min(collectionSizeOrDefault, collectionSizeOrDefault2));
        while (it.hasNext() && it2.hasNext()) {
            arrayList.add(function2.invoke((T) it.next(), (R) it2.next()));
        }
        return arrayList;
    }

    @InlineOnly
    private static final <T> T elementAtOrNull(@NotNull List<? extends T> list, int i2) {
        return (T) getOrNull(list, i2);
    }

    public static final <T> T first(@NotNull List<? extends T> list) {
        if (!list.isEmpty()) {
            return list.get(0);
        }
        throw new NoSuchElementException("List is empty.");
    }

    @Nullable
    public static final <T> T singleOrNull(@NotNull List<? extends T> list) {
        if (list.size() == 1) {
            return list.get(0);
        }
        return null;
    }

    @Nullable
    public static <T> T firstOrNull(@NotNull List<? extends T> list) {
        if (list.isEmpty()) {
            return null;
        }
        return list.get(0);
    }

    @Nullable
    public static final <T> T lastOrNull(@NotNull List<? extends T> list) {
        if (list.isEmpty()) {
            return null;
        }
        return list.get(list.size() - 1);
    }

    /* JADX WARN: Multi-variable type inference failed */
    @Nullable
    public static final <T> T singleOrNull(@NotNull Iterable<? extends T> iterable, @NotNull Function1<? super T, Boolean> function1) {
        boolean z = false;
        T t = null;
        for (T t2 : iterable) {
            if (function1.invoke(t2).booleanValue()) {
                if (z) {
                    return null;
                }
                z = true;
                t = t2;
            }
        }
        if (z) {
            return t;
        }
        return null;
    }

    @InlineOnly
    private static final <T> T elementAtOrElse(@NotNull List<? extends T> list, int i2, Function1<? super Integer, ? extends T> function1) {
        int lastIndex;
        if (i2 >= 0) {
            lastIndex = CollectionsKt__CollectionsKt.getLastIndex(list);
            if (i2 <= lastIndex) {
                return list.get(i2);
            }
        }
        return function1.invoke(Integer.valueOf(i2));
    }

    /* JADX WARN: Type inference failed for: r0v1, types: [T, java.lang.Object] */
    @Nullable
    public static final <T> T firstOrNull(@NotNull Iterable<? extends T> iterable, @NotNull Function1<? super T, Boolean> function1) {
        for (T t : iterable) {
            if (function1.invoke(t).booleanValue()) {
                return t;
            }
        }
        return null;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @NotNull
    public static final <T, K, V, M extends Map<? super K, List<V>>> M groupByTo(@NotNull Iterable<? extends T> iterable, @NotNull M m2, @NotNull Function1<? super T, ? extends K> function1, @NotNull Function1<? super T, ? extends V> function12) {
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            Object obj = (T) it.next();
            K invoke = function1.invoke(obj);
            Object obj2 = m2.get(invoke);
            if (obj2 == null) {
                obj2 = new ArrayList();
                m2.put(invoke, obj2);
            }
            ((List) obj2).add(function12.invoke(obj));
        }
        return m2;
    }

    public static <T> T last(@NotNull List<? extends T> list) {
        int lastIndex;
        if (!list.isEmpty()) {
            lastIndex = CollectionsKt__CollectionsKt.getLastIndex(list);
            return list.get(lastIndex);
        }
        throw new NoSuchElementException("List is empty.");
    }

    /* JADX WARN: Multi-variable type inference failed */
    @Nullable
    public static final <T> T lastOrNull(@NotNull Iterable<? extends T> iterable, @NotNull Function1<? super T, Boolean> function1) {
        T t = null;
        for (T t2 : iterable) {
            if (function1.invoke(t2).booleanValue()) {
                t = t2;
            }
        }
        return t;
    }

    @NotNull
    public static final <T> List<T> plus(@NotNull Iterable<? extends T> iterable, @NotNull T[] tArr) {
        if (iterable instanceof Collection) {
            return plus((Collection) iterable, (Object[]) tArr);
        }
        ArrayList arrayList = new ArrayList();
        CollectionsKt__MutableCollectionsKt.addAll(arrayList, iterable);
        CollectionsKt__MutableCollectionsKt.addAll(arrayList, tArr);
        return arrayList;
    }

    public static final <T> T single(@NotNull List<? extends T> list) {
        int size = list.size();
        if (size != 0) {
            if (size == 1) {
                return list.get(0);
            }
            throw new IllegalArgumentException("List has more than one element.");
        }
        throw new NoSuchElementException("List is empty.");
    }

    @SinceKotlin(version = "1.2")
    @NotNull
    public static final <T> List<Pair<T, T>> zipWithNext(@NotNull Iterable<? extends T> iterable) {
        List<Pair<T, T>> emptyList;
        Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        ArrayList arrayList = new ArrayList();
        T next = it.next();
        while (it.hasNext()) {
            T next2 = it.next();
            arrayList.add(TuplesKt.to(next, next2));
            next = next2;
        }
        return arrayList;
    }

    /* JADX WARN: Type inference failed for: r0v1, types: [T, java.lang.Object] */
    public static final <T> T first(@NotNull Iterable<? extends T> iterable, @NotNull Function1<? super T, Boolean> function1) {
        for (T t : iterable) {
            if (function1.invoke(t).booleanValue()) {
                return t;
            }
        }
        throw new NoSuchElementException("Collection contains no element matching the predicate.");
    }

    @NotNull
    public static final <T, K, V> Map<K, List<V>> groupBy(@NotNull Iterable<? extends T> iterable, @NotNull Function1<? super T, ? extends K> function1, @NotNull Function1<? super T, ? extends V> function12) {
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            Object obj = (T) it.next();
            K invoke = function1.invoke(obj);
            List<V> list = linkedHashMap.get(invoke);
            if (list == null) {
                list = new ArrayList<>();
                linkedHashMap.put(invoke, list);
            }
            list.add(function12.invoke(obj));
        }
        return linkedHashMap;
    }

    @SinceKotlin(version = "1.1")
    @Nullable
    /* renamed from: max */
    public static final Float m516max(@NotNull Iterable<Float> iterable) {
        Iterator<Float> it = iterable.iterator();
        if (it.hasNext()) {
            float floatValue = it.next().floatValue();
            if (Float.isNaN(floatValue)) {
                return Float.valueOf(floatValue);
            }
            while (it.hasNext()) {
                float floatValue2 = it.next().floatValue();
                if (Float.isNaN(floatValue2)) {
                    return Float.valueOf(floatValue2);
                }
                if (floatValue < floatValue2) {
                    floatValue = floatValue2;
                }
            }
            return Float.valueOf(floatValue);
        }
        return null;
    }

    @SinceKotlin(version = "1.1")
    @Nullable
    /* renamed from: min */
    public static final Float m518min(@NotNull Iterable<Float> iterable) {
        Iterator<Float> it = iterable.iterator();
        if (it.hasNext()) {
            float floatValue = it.next().floatValue();
            if (Float.isNaN(floatValue)) {
                return Float.valueOf(floatValue);
            }
            while (it.hasNext()) {
                float floatValue2 = it.next().floatValue();
                if (Float.isNaN(floatValue2)) {
                    return Float.valueOf(floatValue2);
                }
                if (floatValue > floatValue2) {
                    floatValue = floatValue2;
                }
            }
            return Float.valueOf(floatValue);
        }
        return null;
    }

    @NotNull
    public static final <T> List<T> minus(@NotNull Iterable<? extends T> iterable, @NotNull Iterable<? extends T> iterable2) {
        List<T> list;
        Collection convertToSetForSetOperationWith = CollectionsKt__IterablesKt.convertToSetForSetOperationWith(iterable2, iterable);
        if (convertToSetForSetOperationWith.isEmpty()) {
            list = toList(iterable);
            return list;
        }
        ArrayList arrayList = new ArrayList();
        for (T t : iterable) {
            if (!convertToSetForSetOperationWith.contains(t)) {
                arrayList.add(t);
            }
        }
        return arrayList;
    }

    /* JADX WARN: Type inference failed for: r0v2, types: [T, java.lang.Object] */
    @Nullable
    public static final <T> T lastOrNull(@NotNull List<? extends T> list, @NotNull Function1<? super T, Boolean> function1) {
        ListIterator<? extends T> listIterator = list.listIterator(list.size());
        while (listIterator.hasPrevious()) {
            T previous = listIterator.previous();
            if (function1.invoke(previous).booleanValue()) {
                return previous;
            }
        }
        return null;
    }

    @NotNull
    public static final <T, R> List<Pair<T, R>> zip(@NotNull Iterable<? extends T> iterable, @NotNull R[] rArr) {
        int collectionSizeOrDefault;
        int length = rArr.length;
        collectionSizeOrDefault = CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10);
        ArrayList arrayList = new ArrayList(Math.min(collectionSizeOrDefault, length));
        int i2 = 0;
        for (T t : iterable) {
            if (i2 >= length) {
                break;
            }
            arrayList.add(TuplesKt.to(t, rArr[i2]));
            i2++;
        }
        return arrayList;
    }

    /* JADX WARN: Multi-variable type inference failed */
    public static final <T> T last(@NotNull Iterable<? extends T> iterable, @NotNull Function1<? super T, Boolean> function1) {
        T t = null;
        boolean z = false;
        for (T t2 : iterable) {
            if (function1.invoke(t2).booleanValue()) {
                t = t2;
                z = true;
            }
        }
        if (z) {
            return t;
        }
        throw new NoSuchElementException("Collection contains no element matching the predicate.");
    }

    @NotNull
    public static final <T> List<T> plus(@NotNull Collection<? extends T> collection, @NotNull T[] tArr) {
        ArrayList arrayList = new ArrayList(collection.size() + tArr.length);
        arrayList.addAll(collection);
        CollectionsKt__MutableCollectionsKt.addAll(arrayList, tArr);
        return arrayList;
    }

    /* JADX WARN: Multi-variable type inference failed */
    public static final <T> T single(@NotNull Iterable<? extends T> iterable, @NotNull Function1<? super T, Boolean> function1) {
        T t = null;
        boolean z = false;
        for (T t2 : iterable) {
            if (function1.invoke(t2).booleanValue()) {
                if (z) {
                    throw new IllegalArgumentException("Collection contains more than one matching element.");
                }
                t = t2;
                z = true;
            }
        }
        if (z) {
            return t;
        }
        throw new NoSuchElementException("Collection contains no element matching the predicate.");
    }

    @SinceKotlin(version = "1.2")
    @NotNull
    public static final <T, R> List<R> windowed(@NotNull Iterable<? extends T> iterable, int i2, int i3, boolean z, @NotNull Function1<? super List<? extends T>, ? extends R> function1) {
        int coerceAtMost;
        SlidingWindowKt.checkWindowSizeStep(i2, i3);
        if ((iterable instanceof RandomAccess) && (iterable instanceof List)) {
            List list = (List) iterable;
            int size = list.size();
            int i4 = 0;
            ArrayList arrayList = new ArrayList((size / i3) + (size % i3 == 0 ? 0 : 1));
            MovingSubList movingSubList = new MovingSubList(list);
            while (i4 >= 0 && size > i4) {
                coerceAtMost = RangesKt___RangesKt.coerceAtMost(i2, size - i4);
                if (!z && coerceAtMost < i2) {
                    break;
                }
                movingSubList.move(i4, coerceAtMost + i4);
                arrayList.add(function1.invoke(movingSubList));
                i4 += i3;
            }
            return arrayList;
        }
        ArrayList arrayList2 = new ArrayList();
        Iterator windowedIterator = SlidingWindowKt.windowedIterator(iterable.iterator(), i2, i3, z, true);
        while (windowedIterator.hasNext()) {
            arrayList2.add(function1.invoke((List) windowedIterator.next()));
        }
        return arrayList2;
    }

    /* JADX WARN: Type inference failed for: r0v2, types: [T, java.lang.Object] */
    public static final <T> T last(@NotNull List<? extends T> list, @NotNull Function1<? super T, Boolean> function1) {
        ListIterator<? extends T> listIterator = list.listIterator(list.size());
        while (listIterator.hasPrevious()) {
            T previous = listIterator.previous();
            if (function1.invoke(previous).booleanValue()) {
                return previous;
            }
        }
        throw new NoSuchElementException("List contains no element matching the predicate.");
    }

    @NotNull
    public static final <T> List<T> minus(@NotNull Iterable<? extends T> iterable, @NotNull Sequence<? extends T> sequence) {
        HashSet hashSet;
        List<T> list;
        hashSet = SequencesKt___SequencesKt.toHashSet(sequence);
        if (hashSet.isEmpty()) {
            list = toList(iterable);
            return list;
        }
        ArrayList arrayList = new ArrayList();
        for (T t : iterable) {
            if (!hashSet.contains(t)) {
                arrayList.add(t);
            }
        }
        return arrayList;
    }

    @NotNull
    public static final <T> List<T> plus(@NotNull Iterable<? extends T> iterable, @NotNull Iterable<? extends T> iterable2) {
        if (iterable instanceof Collection) {
            return plus((Collection) iterable, (Iterable) iterable2);
        }
        ArrayList arrayList = new ArrayList();
        CollectionsKt__MutableCollectionsKt.addAll(arrayList, iterable);
        CollectionsKt__MutableCollectionsKt.addAll(arrayList, iterable2);
        return arrayList;
    }

    @NotNull
    public static final <T, R> List<Pair<T, R>> zip(@NotNull Iterable<? extends T> iterable, @NotNull Iterable<? extends R> iterable2) {
        int collectionSizeOrDefault;
        int collectionSizeOrDefault2;
        Iterator<? extends T> it = iterable.iterator();
        Iterator<? extends R> it2 = iterable2.iterator();
        collectionSizeOrDefault = CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10);
        collectionSizeOrDefault2 = CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable2, 10);
        ArrayList arrayList = new ArrayList(Math.min(collectionSizeOrDefault, collectionSizeOrDefault2));
        while (it.hasNext() && it2.hasNext()) {
            arrayList.add(TuplesKt.to(it.next(), it2.next()));
        }
        return arrayList;
    }

    @Nullable
    public static final <T extends Comparable<? super T>> T max(@NotNull Iterable<? extends T> iterable) {
        Iterator<? extends T> it = iterable.iterator();
        if (it.hasNext()) {
            T next = it.next();
            while (it.hasNext()) {
                T next2 = it.next();
                if (next.compareTo(next2) < 0) {
                    next = next2;
                }
            }
            return next;
        }
        return null;
    }

    @Nullable
    public static <T extends Comparable<? super T>> T min(@NotNull Iterable<? extends T> iterable) {
        Iterator<? extends T> it = iterable.iterator();
        if (it.hasNext()) {
            T next = it.next();
            while (it.hasNext()) {
                T next2 = it.next();
                if (next.compareTo(next2) > 0) {
                    next = next2;
                }
            }
            return next;
        }
        return null;
    }

    @NotNull
    public static final <T> List<T> plus(@NotNull Collection<? extends T> collection, @NotNull Iterable<? extends T> iterable) {
        if (iterable instanceof Collection) {
            Collection collection2 = (Collection) iterable;
            ArrayList arrayList = new ArrayList(collection.size() + collection2.size());
            arrayList.addAll(collection);
            arrayList.addAll(collection2);
            return arrayList;
        }
        ArrayList arrayList2 = new ArrayList(collection);
        CollectionsKt__MutableCollectionsKt.addAll(arrayList2, iterable);
        return arrayList2;
    }

    @NotNull
    public static final <T> List<T> plus(@NotNull Iterable<? extends T> iterable, @NotNull Sequence<? extends T> sequence) {
        ArrayList arrayList = new ArrayList();
        CollectionsKt__MutableCollectionsKt.addAll(arrayList, iterable);
        CollectionsKt__MutableCollectionsKt.addAll(arrayList, sequence);
        return arrayList;
    }

    @NotNull
    public static final <T> List<T> plus(@NotNull Collection<? extends T> collection, @NotNull Sequence<? extends T> sequence) {
        ArrayList arrayList = new ArrayList(collection.size() + 10);
        arrayList.addAll(collection);
        CollectionsKt__MutableCollectionsKt.addAll(arrayList, sequence);
        return arrayList;
    }
}
