package kotlin.collections;

import ..;
import MTT.ThirdAppInfoNew;
import com.jingdong.app.mall.bundle.order_center_isv_core.util.OrderISVUtil;
import com.jingdong.common.entity.personal.PersonalConstants;
import com.jingdong.common.jump.JumpUtil;
import com.jingdong.common.unification.navigationbar.db.NavigationDbConstants;
import com.jingdong.jdsdk.a.a;
import com.jingdong.jdsdk.constant.CartConstant;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import kotlin.ExperimentalStdlibApi;
import kotlin.Metadata;
import kotlin.Pair;
import kotlin.SinceKotlin;
import kotlin.TuplesKt;
import kotlin.TypeCastException;
import kotlin.Unit;
import kotlin.comparisons.ComparisonsKt__ComparisonsKt;
import kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareBy$2;
import kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareByDescending$1;
import kotlin.internal.InlineOnly;
import kotlin.jvm.JvmName;
import kotlin.jvm.functions.Function0;
import kotlin.jvm.functions.Function1;
import kotlin.jvm.functions.Function2;
import kotlin.jvm.functions.Function3;
import kotlin.jvm.internal.ArrayIteratorKt;
import kotlin.jvm.internal.ArrayIteratorsKt;
import kotlin.jvm.internal.DoubleCompanionObject;
import kotlin.jvm.internal.Intrinsics;
import kotlin.random.Random;
import kotlin.ranges.RangesKt___RangesKt;
import kotlin.sequences.Sequence;
import kotlin.sequences.SequencesKt__SequencesKt;
import kotlin.text.StringsKt__AppendableKt;
import org.apache.commons.codec.language.bm.Languages;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

@Metadata(bv = {1, 0, 3}, d1 = {"\u0000\u00c9\u0002\n\u0000\n\u0002\u0010\u0011\n\u0002\b\u0002\n\u0002\u0010\u0012\n\u0002\u0010\u0005\n\u0000\n\u0002\u0010\u0017\n\u0002\u0010\n\n\u0000\n\u0002\u0010\u0015\n\u0002\u0010\b\n\u0000\n\u0002\u0010\u0016\n\u0002\u0010\t\n\u0000\n\u0002\u0010\u0014\n\u0002\u0010\u0007\n\u0000\n\u0002\u0010\u0013\n\u0002\u0010\u0006\n\u0000\n\u0002\u0010\u0018\n\u0002\u0010\u000b\n\u0000\n\u0002\u0010\u0019\n\u0002\u0010\f\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\b\f\n\u0002\u0018\u0002\n\u0002\bM\n\u0002\u0018\u0002\n\u0002\b\u0015\n\u0002\u0010 \n\u0002\b\u0017\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u000b\n\u0002\u0010\u001f\n\u0002\b\r\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u0000\n\u0002\b\r\n\u0002\u0018\u0002\n\u0002\b\u000b\n\u0002\u0010\u001c\n\u0002\b\t\n\u0002\u0010\u001e\n\u0002\b\u0017\n\u0002\u0010\u0002\n\u0002\b\u001d\n\u0002\u0010\u000f\n\u0002\b\u000b\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b,\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\b\u0016\n\u0002\u0010%\n\u0002\b\u001e\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u000b\n\u0002\u0010!\n\u0000\n\u0002\u0010\"\n\u0002\b\u000e\n\u0002\u0018\u0002\n\u0002\b\n\n\u0002\u0018\u0002\n\u0002\b\u0018\n\u0002\u0010#\n\u0002\b\"\n\u0002\u0018\u0002\n\u0003\b\u00b6\u0001\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\r\n\u0002\b\u000f\n\u0002\u0010\u000e\n\u0002\b\u000b\n\u0002\u0018\u0002\n\u0002\b5\u001a\"\u0010\u0002\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u0001H\u0087\n\u00a2\u0006\u0004\b\u0002\u0010\u0003\u001a\u0014\u0010\u0002\u001a\u00020\u0005*\u00020\u0004H\u0087\n\u00a2\u0006\u0004\b\u0002\u0010\u0006\u001a\u0014\u0010\u0002\u001a\u00020\b*\u00020\u0007H\u0087\n\u00a2\u0006\u0004\b\u0002\u0010\t\u001a\u0014\u0010\u0002\u001a\u00020\u000b*\u00020\nH\u0087\n\u00a2\u0006\u0004\b\u0002\u0010\f\u001a\u0014\u0010\u0002\u001a\u00020\u000e*\u00020\rH\u0087\n\u00a2\u0006\u0004\b\u0002\u0010\u000f\u001a\u0014\u0010\u0002\u001a\u00020\u0011*\u00020\u0010H\u0087\n\u00a2\u0006\u0004\b\u0002\u0010\u0012\u001a\u0014\u0010\u0002\u001a\u00020\u0014*\u00020\u0013H\u0087\n\u00a2\u0006\u0004\b\u0002\u0010\u0015\u001a\u0014\u0010\u0002\u001a\u00020\u0017*\u00020\u0016H\u0087\n\u00a2\u0006\u0004\b\u0002\u0010\u0018\u001a\u0014\u0010\u0002\u001a\u00020\u001a*\u00020\u0019H\u0087\n\u00a2\u0006\u0004\b\u0002\u0010\u001b\u001a\"\u0010\u001c\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u0001H\u0087\n\u00a2\u0006\u0004\b\u001c\u0010\u0003\u001a\u0014\u0010\u001c\u001a\u00020\u0005*\u00020\u0004H\u0087\n\u00a2\u0006\u0004\b\u001c\u0010\u0006\u001a\u0014\u0010\u001c\u001a\u00020\b*\u00020\u0007H\u0087\n\u00a2\u0006\u0004\b\u001c\u0010\t\u001a\u0014\u0010\u001c\u001a\u00020\u000b*\u00020\nH\u0087\n\u00a2\u0006\u0004\b\u001c\u0010\f\u001a\u0014\u0010\u001c\u001a\u00020\u000e*\u00020\rH\u0087\n\u00a2\u0006\u0004\b\u001c\u0010\u000f\u001a\u0014\u0010\u001c\u001a\u00020\u0011*\u00020\u0010H\u0087\n\u00a2\u0006\u0004\b\u001c\u0010\u0012\u001a\u0014\u0010\u001c\u001a\u00020\u0014*\u00020\u0013H\u0087\n\u00a2\u0006\u0004\b\u001c\u0010\u0015\u001a\u0014\u0010\u001c\u001a\u00020\u0017*\u00020\u0016H\u0087\n\u00a2\u0006\u0004\b\u001c\u0010\u0018\u001a\u0014\u0010\u001c\u001a\u00020\u001a*\u00020\u0019H\u0087\n\u00a2\u0006\u0004\b\u001c\u0010\u001b\u001a\"\u0010\u001d\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u0001H\u0087\n\u00a2\u0006\u0004\b\u001d\u0010\u0003\u001a\u0014\u0010\u001d\u001a\u00020\u0005*\u00020\u0004H\u0087\n\u00a2\u0006\u0004\b\u001d\u0010\u0006\u001a\u0014\u0010\u001d\u001a\u00020\b*\u00020\u0007H\u0087\n\u00a2\u0006\u0004\b\u001d\u0010\t\u001a\u0014\u0010\u001d\u001a\u00020\u000b*\u00020\nH\u0087\n\u00a2\u0006\u0004\b\u001d\u0010\f\u001a\u0014\u0010\u001d\u001a\u00020\u000e*\u00020\rH\u0087\n\u00a2\u0006\u0004\b\u001d\u0010\u000f\u001a\u0014\u0010\u001d\u001a\u00020\u0011*\u00020\u0010H\u0087\n\u00a2\u0006\u0004\b\u001d\u0010\u0012\u001a\u0014\u0010\u001d\u001a\u00020\u0014*\u00020\u0013H\u0087\n\u00a2\u0006\u0004\b\u001d\u0010\u0015\u001a\u0014\u0010\u001d\u001a\u00020\u0017*\u00020\u0016H\u0087\n\u00a2\u0006\u0004\b\u001d\u0010\u0018\u001a\u0014\u0010\u001d\u001a\u00020\u001a*\u00020\u0019H\u0087\n\u00a2\u0006\u0004\b\u001d\u0010\u001b\u001a\"\u0010\u001e\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u0001H\u0087\n\u00a2\u0006\u0004\b\u001e\u0010\u0003\u001a\u0014\u0010\u001e\u001a\u00020\u0005*\u00020\u0004H\u0087\n\u00a2\u0006\u0004\b\u001e\u0010\u0006\u001a\u0014\u0010\u001e\u001a\u00020\b*\u00020\u0007H\u0087\n\u00a2\u0006\u0004\b\u001e\u0010\t\u001a\u0014\u0010\u001e\u001a\u00020\u000b*\u00020\nH\u0087\n\u00a2\u0006\u0004\b\u001e\u0010\f\u001a\u0014\u0010\u001e\u001a\u00020\u000e*\u00020\rH\u0087\n\u00a2\u0006\u0004\b\u001e\u0010\u000f\u001a\u0014\u0010\u001e\u001a\u00020\u0011*\u00020\u0010H\u0087\n\u00a2\u0006\u0004\b\u001e\u0010\u0012\u001a\u0014\u0010\u001e\u001a\u00020\u0014*\u00020\u0013H\u0087\n\u00a2\u0006\u0004\b\u001e\u0010\u0015\u001a\u0014\u0010\u001e\u001a\u00020\u0017*\u00020\u0016H\u0087\n\u00a2\u0006\u0004\b\u001e\u0010\u0018\u001a\u0014\u0010\u001e\u001a\u00020\u001a*\u00020\u0019H\u0087\n\u00a2\u0006\u0004\b\u001e\u0010\u001b\u001a\"\u0010\u001f\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u0001H\u0087\n\u00a2\u0006\u0004\b\u001f\u0010\u0003\u001a\u0014\u0010\u001f\u001a\u00020\u0005*\u00020\u0004H\u0087\n\u00a2\u0006\u0004\b\u001f\u0010\u0006\u001a\u0014\u0010\u001f\u001a\u00020\b*\u00020\u0007H\u0087\n\u00a2\u0006\u0004\b\u001f\u0010\t\u001a\u0014\u0010\u001f\u001a\u00020\u000b*\u00020\nH\u0087\n\u00a2\u0006\u0004\b\u001f\u0010\f\u001a\u0014\u0010\u001f\u001a\u00020\u000e*\u00020\rH\u0087\n\u00a2\u0006\u0004\b\u001f\u0010\u000f\u001a\u0014\u0010\u001f\u001a\u00020\u0011*\u00020\u0010H\u0087\n\u00a2\u0006\u0004\b\u001f\u0010\u0012\u001a\u0014\u0010\u001f\u001a\u00020\u0014*\u00020\u0013H\u0087\n\u00a2\u0006\u0004\b\u001f\u0010\u0015\u001a\u0014\u0010\u001f\u001a\u00020\u0017*\u00020\u0016H\u0087\n\u00a2\u0006\u0004\b\u001f\u0010\u0018\u001a\u0014\u0010\u001f\u001a\u00020\u001a*\u00020\u0019H\u0087\n\u00a2\u0006\u0004\b\u001f\u0010\u001b\u001a/\u0010\"\u001a\u00020\u0017\"\t\b\u0000\u0010\u0000\u00a2\u0006\u0002\b *\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0006\u0010!\u001a\u00028\u0000H\u0086\u0002\u00a2\u0006\u0004\b\"\u0010#\u001a\u001c\u0010\"\u001a\u00020\u0017*\u00020\u00042\u0006\u0010!\u001a\u00020\u0005H\u0086\u0002\u00a2\u0006\u0004\b\"\u0010$\u001a\u001c\u0010\"\u001a\u00020\u0017*\u00020\u00072\u0006\u0010!\u001a\u00020\bH\u0086\u0002\u00a2\u0006\u0004\b\"\u0010%\u001a\u001c\u0010\"\u001a\u00020\u0017*\u00020\n2\u0006\u0010!\u001a\u00020\u000bH\u0086\u0002\u00a2\u0006\u0004\b\"\u0010&\u001a\u001c\u0010\"\u001a\u00020\u0017*\u00020\r2\u0006\u0010!\u001a\u00020\u000eH\u0086\u0002\u00a2\u0006\u0004\b\"\u0010'\u001a\u001c\u0010\"\u001a\u00020\u0017*\u00020\u00102\u0006\u0010!\u001a\u00020\u0011H\u0086\u0002\u00a2\u0006\u0004\b\"\u0010(\u001a\u001c\u0010\"\u001a\u00020\u0017*\u00020\u00132\u0006\u0010!\u001a\u00020\u0014H\u0086\u0002\u00a2\u0006\u0004\b\"\u0010)\u001a\u001c\u0010\"\u001a\u00020\u0017*\u00020\u00162\u0006\u0010!\u001a\u00020\u0017H\u0086\u0002\u00a2\u0006\u0004\b\"\u0010*\u001a\u001c\u0010\"\u001a\u00020\u0017*\u00020\u00192\u0006\u0010!\u001a\u00020\u001aH\u0086\u0002\u00a2\u0006\u0004\b\"\u0010+\u001a>\u0010/\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0006\u0010,\u001a\u00020\u000b2\u0012\u0010.\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00028\u00000-H\u0087\b\u00a2\u0006\u0004\b/\u00100\u001a0\u0010/\u001a\u00020\u0005*\u00020\u00042\u0006\u0010,\u001a\u00020\u000b2\u0012\u0010.\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\u00050-H\u0087\b\u00a2\u0006\u0004\b/\u00101\u001a0\u0010/\u001a\u00020\b*\u00020\u00072\u0006\u0010,\u001a\u00020\u000b2\u0012\u0010.\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\b0-H\u0087\b\u00a2\u0006\u0004\b/\u00102\u001a0\u0010/\u001a\u00020\u000b*\u00020\n2\u0006\u0010,\u001a\u00020\u000b2\u0012\u0010.\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\u000b0-H\u0087\b\u00a2\u0006\u0004\b/\u00103\u001a0\u0010/\u001a\u00020\u000e*\u00020\r2\u0006\u0010,\u001a\u00020\u000b2\u0012\u0010.\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\u000e0-H\u0087\b\u00a2\u0006\u0004\b/\u00104\u001a0\u0010/\u001a\u00020\u0011*\u00020\u00102\u0006\u0010,\u001a\u00020\u000b2\u0012\u0010.\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\u00110-H\u0087\b\u00a2\u0006\u0004\b/\u00105\u001a0\u0010/\u001a\u00020\u0014*\u00020\u00132\u0006\u0010,\u001a\u00020\u000b2\u0012\u0010.\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\u00140-H\u0087\b\u00a2\u0006\u0004\b/\u00106\u001a0\u0010/\u001a\u00020\u0017*\u00020\u00162\u0006\u0010,\u001a\u00020\u000b2\u0012\u0010.\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\u00170-H\u0087\b\u00a2\u0006\u0004\b/\u00107\u001a0\u0010/\u001a\u00020\u001a*\u00020\u00192\u0006\u0010,\u001a\u00020\u000b2\u0012\u0010.\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\u001a0-H\u0087\b\u00a2\u0006\u0004\b/\u00108\u001a,\u00109\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0006\u0010,\u001a\u00020\u000bH\u0087\b\u00a2\u0006\u0004\b9\u0010:\u001a\u001e\u00109\u001a\u0004\u0018\u00010\u0005*\u00020\u00042\u0006\u0010,\u001a\u00020\u000bH\u0087\b\u00a2\u0006\u0004\b9\u0010;\u001a\u001e\u00109\u001a\u0004\u0018\u00010\b*\u00020\u00072\u0006\u0010,\u001a\u00020\u000bH\u0087\b\u00a2\u0006\u0004\b9\u0010<\u001a\u001e\u00109\u001a\u0004\u0018\u00010\u000b*\u00020\n2\u0006\u0010,\u001a\u00020\u000bH\u0087\b\u00a2\u0006\u0004\b9\u0010=\u001a\u001e\u00109\u001a\u0004\u0018\u00010\u000e*\u00020\r2\u0006\u0010,\u001a\u00020\u000bH\u0087\b\u00a2\u0006\u0004\b9\u0010>\u001a\u001e\u00109\u001a\u0004\u0018\u00010\u0011*\u00020\u00102\u0006\u0010,\u001a\u00020\u000bH\u0087\b\u00a2\u0006\u0004\b9\u0010?\u001a\u001e\u00109\u001a\u0004\u0018\u00010\u0014*\u00020\u00132\u0006\u0010,\u001a\u00020\u000bH\u0087\b\u00a2\u0006\u0004\b9\u0010@\u001a\u001e\u00109\u001a\u0004\u0018\u00010\u0017*\u00020\u00162\u0006\u0010,\u001a\u00020\u000bH\u0087\b\u00a2\u0006\u0004\b9\u0010A\u001a\u001e\u00109\u001a\u0004\u0018\u00010\u001a*\u00020\u00192\u0006\u0010,\u001a\u00020\u000bH\u0087\b\u00a2\u0006\u0004\b9\u0010B\u001a8\u0010D\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00170-H\u0087\b\u00a2\u0006\u0004\bD\u0010E\u001a*\u0010D\u001a\u0004\u0018\u00010\u0005*\u00020\u00042\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00170-H\u0087\b\u00a2\u0006\u0004\bD\u0010F\u001a*\u0010D\u001a\u0004\u0018\u00010\b*\u00020\u00072\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\u00170-H\u0087\b\u00a2\u0006\u0004\bD\u0010G\u001a*\u0010D\u001a\u0004\u0018\u00010\u000b*\u00020\n2\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\u00170-H\u0087\b\u00a2\u0006\u0004\bD\u0010H\u001a*\u0010D\u001a\u0004\u0018\u00010\u000e*\u00020\r2\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00020\u00170-H\u0087\b\u00a2\u0006\u0004\bD\u0010I\u001a*\u0010D\u001a\u0004\u0018\u00010\u0011*\u00020\u00102\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00020\u00170-H\u0087\b\u00a2\u0006\u0004\bD\u0010J\u001a*\u0010D\u001a\u0004\u0018\u00010\u0014*\u00020\u00132\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00020\u00170-H\u0087\b\u00a2\u0006\u0004\bD\u0010K\u001a*\u0010D\u001a\u0004\u0018\u00010\u0017*\u00020\u00162\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00020\u00170-H\u0087\b\u00a2\u0006\u0004\bD\u0010L\u001a*\u0010D\u001a\u0004\u0018\u00010\u001a*\u00020\u00192\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00020\u00170-H\u0087\b\u00a2\u0006\u0004\bD\u0010M\u001a8\u0010N\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00170-H\u0087\b\u00a2\u0006\u0004\bN\u0010E\u001a*\u0010N\u001a\u0004\u0018\u00010\u0005*\u00020\u00042\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00170-H\u0087\b\u00a2\u0006\u0004\bN\u0010F\u001a*\u0010N\u001a\u0004\u0018\u00010\b*\u00020\u00072\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\u00170-H\u0087\b\u00a2\u0006\u0004\bN\u0010G\u001a*\u0010N\u001a\u0004\u0018\u00010\u000b*\u00020\n2\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\u00170-H\u0087\b\u00a2\u0006\u0004\bN\u0010H\u001a*\u0010N\u001a\u0004\u0018\u00010\u000e*\u00020\r2\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00020\u00170-H\u0087\b\u00a2\u0006\u0004\bN\u0010I\u001a*\u0010N\u001a\u0004\u0018\u00010\u0011*\u00020\u00102\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00020\u00170-H\u0087\b\u00a2\u0006\u0004\bN\u0010J\u001a*\u0010N\u001a\u0004\u0018\u00010\u0014*\u00020\u00132\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00020\u00170-H\u0087\b\u00a2\u0006\u0004\bN\u0010K\u001a*\u0010N\u001a\u0004\u0018\u00010\u0017*\u00020\u00162\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00020\u00170-H\u0087\b\u00a2\u0006\u0004\bN\u0010L\u001a*\u0010N\u001a\u0004\u0018\u00010\u001a*\u00020\u00192\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00020\u00170-H\u0087\b\u00a2\u0006\u0004\bN\u0010M\u001a\u001f\u0010O\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u0001\u00a2\u0006\u0004\bO\u0010\u0003\u001a\u0011\u0010O\u001a\u00020\u0005*\u00020\u0004\u00a2\u0006\u0004\bO\u0010\u0006\u001a\u0011\u0010O\u001a\u00020\b*\u00020\u0007\u00a2\u0006\u0004\bO\u0010\t\u001a\u0011\u0010O\u001a\u00020\u000b*\u00020\n\u00a2\u0006\u0004\bO\u0010\f\u001a\u0011\u0010O\u001a\u00020\u000e*\u00020\r\u00a2\u0006\u0004\bO\u0010\u000f\u001a\u0011\u0010O\u001a\u00020\u0011*\u00020\u0010\u00a2\u0006\u0004\bO\u0010\u0012\u001a\u0011\u0010O\u001a\u00020\u0014*\u00020\u0013\u00a2\u0006\u0004\bO\u0010\u0015\u001a\u0011\u0010O\u001a\u00020\u0017*\u00020\u0016\u00a2\u0006\u0004\bO\u0010\u0018\u001a\u0011\u0010O\u001a\u00020\u001a*\u00020\u0019\u00a2\u0006\u0004\bO\u0010\u001b\u001a6\u0010O\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\bO\u0010E\u001a(\u0010O\u001a\u00020\u0005*\u00020\u00042\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\bO\u0010P\u001a(\u0010O\u001a\u00020\b*\u00020\u00072\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\bO\u0010Q\u001a(\u0010O\u001a\u00020\u000b*\u00020\n2\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\bO\u0010R\u001a(\u0010O\u001a\u00020\u000e*\u00020\r2\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\bO\u0010S\u001a(\u0010O\u001a\u00020\u0011*\u00020\u00102\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\bO\u0010T\u001a(\u0010O\u001a\u00020\u0014*\u00020\u00132\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\bO\u0010U\u001a(\u0010O\u001a\u00020\u0017*\u00020\u00162\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\bO\u0010V\u001a(\u0010O\u001a\u00020\u001a*\u00020\u00192\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\bO\u0010W\u001a!\u0010X\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u0001\u00a2\u0006\u0004\bX\u0010\u0003\u001a\u0013\u0010X\u001a\u0004\u0018\u00010\u0005*\u00020\u0004\u00a2\u0006\u0004\bX\u0010Y\u001a\u0013\u0010X\u001a\u0004\u0018\u00010\b*\u00020\u0007\u00a2\u0006\u0004\bX\u0010Z\u001a\u0013\u0010X\u001a\u0004\u0018\u00010\u000b*\u00020\n\u00a2\u0006\u0004\bX\u0010[\u001a\u0013\u0010X\u001a\u0004\u0018\u00010\u000e*\u00020\r\u00a2\u0006\u0004\bX\u0010\\\u001a\u0013\u0010X\u001a\u0004\u0018\u00010\u0011*\u00020\u0010\u00a2\u0006\u0004\bX\u0010]\u001a\u0013\u0010X\u001a\u0004\u0018\u00010\u0014*\u00020\u0013\u00a2\u0006\u0004\bX\u0010^\u001a\u0013\u0010X\u001a\u0004\u0018\u00010\u0017*\u00020\u0016\u00a2\u0006\u0004\bX\u0010_\u001a\u0013\u0010X\u001a\u0004\u0018\u00010\u001a*\u00020\u0019\u00a2\u0006\u0004\bX\u0010`\u001a8\u0010X\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\bX\u0010E\u001a*\u0010X\u001a\u0004\u0018\u00010\u0005*\u00020\u00042\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\bX\u0010F\u001a*\u0010X\u001a\u0004\u0018\u00010\b*\u00020\u00072\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\bX\u0010G\u001a*\u0010X\u001a\u0004\u0018\u00010\u000b*\u00020\n2\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\bX\u0010H\u001a*\u0010X\u001a\u0004\u0018\u00010\u000e*\u00020\r2\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\bX\u0010I\u001a*\u0010X\u001a\u0004\u0018\u00010\u0011*\u00020\u00102\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\bX\u0010J\u001a*\u0010X\u001a\u0004\u0018\u00010\u0014*\u00020\u00132\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\bX\u0010K\u001a*\u0010X\u001a\u0004\u0018\u00010\u0017*\u00020\u00162\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\bX\u0010L\u001a*\u0010X\u001a\u0004\u0018\u00010\u001a*\u00020\u00192\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\bX\u0010M\u001a>\u0010a\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0006\u0010,\u001a\u00020\u000b2\u0012\u0010.\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00028\u00000-H\u0087\b\u00a2\u0006\u0004\ba\u00100\u001a0\u0010a\u001a\u00020\u0005*\u00020\u00042\u0006\u0010,\u001a\u00020\u000b2\u0012\u0010.\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\u00050-H\u0087\b\u00a2\u0006\u0004\ba\u00101\u001a0\u0010a\u001a\u00020\b*\u00020\u00072\u0006\u0010,\u001a\u00020\u000b2\u0012\u0010.\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\b0-H\u0087\b\u00a2\u0006\u0004\ba\u00102\u001a0\u0010a\u001a\u00020\u000b*\u00020\n2\u0006\u0010,\u001a\u00020\u000b2\u0012\u0010.\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\u000b0-H\u0087\b\u00a2\u0006\u0004\ba\u00103\u001a0\u0010a\u001a\u00020\u000e*\u00020\r2\u0006\u0010,\u001a\u00020\u000b2\u0012\u0010.\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\u000e0-H\u0087\b\u00a2\u0006\u0004\ba\u00104\u001a0\u0010a\u001a\u00020\u0011*\u00020\u00102\u0006\u0010,\u001a\u00020\u000b2\u0012\u0010.\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\u00110-H\u0087\b\u00a2\u0006\u0004\ba\u00105\u001a0\u0010a\u001a\u00020\u0014*\u00020\u00132\u0006\u0010,\u001a\u00020\u000b2\u0012\u0010.\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\u00140-H\u0087\b\u00a2\u0006\u0004\ba\u00106\u001a0\u0010a\u001a\u00020\u0017*\u00020\u00162\u0006\u0010,\u001a\u00020\u000b2\u0012\u0010.\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\u00170-H\u0087\b\u00a2\u0006\u0004\ba\u00107\u001a0\u0010a\u001a\u00020\u001a*\u00020\u00192\u0006\u0010,\u001a\u00020\u000b2\u0012\u0010.\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\u001a0-H\u0087\b\u00a2\u0006\u0004\ba\u00108\u001a)\u0010b\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0006\u0010,\u001a\u00020\u000b\u00a2\u0006\u0004\bb\u0010:\u001a\u001b\u0010b\u001a\u0004\u0018\u00010\u0005*\u00020\u00042\u0006\u0010,\u001a\u00020\u000b\u00a2\u0006\u0004\bb\u0010;\u001a\u001b\u0010b\u001a\u0004\u0018\u00010\b*\u00020\u00072\u0006\u0010,\u001a\u00020\u000b\u00a2\u0006\u0004\bb\u0010<\u001a\u001b\u0010b\u001a\u0004\u0018\u00010\u000b*\u00020\n2\u0006\u0010,\u001a\u00020\u000b\u00a2\u0006\u0004\bb\u0010=\u001a\u001b\u0010b\u001a\u0004\u0018\u00010\u000e*\u00020\r2\u0006\u0010,\u001a\u00020\u000b\u00a2\u0006\u0004\bb\u0010>\u001a\u001b\u0010b\u001a\u0004\u0018\u00010\u0011*\u00020\u00102\u0006\u0010,\u001a\u00020\u000b\u00a2\u0006\u0004\bb\u0010?\u001a\u001b\u0010b\u001a\u0004\u0018\u00010\u0014*\u00020\u00132\u0006\u0010,\u001a\u00020\u000b\u00a2\u0006\u0004\bb\u0010@\u001a\u001b\u0010b\u001a\u0004\u0018\u00010\u0017*\u00020\u00162\u0006\u0010,\u001a\u00020\u000b\u00a2\u0006\u0004\bb\u0010A\u001a\u001b\u0010b\u001a\u0004\u0018\u00010\u001a*\u00020\u00192\u0006\u0010,\u001a\u00020\u000b\u00a2\u0006\u0004\bb\u0010B\u001a,\u0010c\u001a\u00020\u000b\"\t\b\u0000\u0010\u0000\u00a2\u0006\u0002\b *\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0006\u0010!\u001a\u00028\u0000\u00a2\u0006\u0004\bc\u0010d\u001a\u0019\u0010c\u001a\u00020\u000b*\u00020\u00042\u0006\u0010!\u001a\u00020\u0005\u00a2\u0006\u0004\bc\u0010e\u001a\u0019\u0010c\u001a\u00020\u000b*\u00020\u00072\u0006\u0010!\u001a\u00020\b\u00a2\u0006\u0004\bc\u0010f\u001a\u0019\u0010c\u001a\u00020\u000b*\u00020\n2\u0006\u0010!\u001a\u00020\u000b\u00a2\u0006\u0004\bc\u0010g\u001a\u0019\u0010c\u001a\u00020\u000b*\u00020\r2\u0006\u0010!\u001a\u00020\u000e\u00a2\u0006\u0004\bc\u0010h\u001a\u0019\u0010c\u001a\u00020\u000b*\u00020\u00102\u0006\u0010!\u001a\u00020\u0011\u00a2\u0006\u0004\bc\u0010i\u001a\u0019\u0010c\u001a\u00020\u000b*\u00020\u00132\u0006\u0010!\u001a\u00020\u0014\u00a2\u0006\u0004\bc\u0010j\u001a\u0019\u0010c\u001a\u00020\u000b*\u00020\u00162\u0006\u0010!\u001a\u00020\u0017\u00a2\u0006\u0004\bc\u0010k\u001a\u0019\u0010c\u001a\u00020\u000b*\u00020\u00192\u0006\u0010!\u001a\u00020\u001a\u00a2\u0006\u0004\bc\u0010l\u001a6\u0010m\u001a\u00020\u000b\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\bm\u0010n\u001a(\u0010m\u001a\u00020\u000b*\u00020\u00042\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\bm\u0010o\u001a(\u0010m\u001a\u00020\u000b*\u00020\u00072\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\bm\u0010p\u001a(\u0010m\u001a\u00020\u000b*\u00020\n2\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\bm\u0010R\u001a(\u0010m\u001a\u00020\u000b*\u00020\r2\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\bm\u0010q\u001a(\u0010m\u001a\u00020\u000b*\u00020\u00102\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\bm\u0010r\u001a(\u0010m\u001a\u00020\u000b*\u00020\u00132\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\bm\u0010s\u001a(\u0010m\u001a\u00020\u000b*\u00020\u00162\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\bm\u0010t\u001a(\u0010m\u001a\u00020\u000b*\u00020\u00192\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\bm\u0010u\u001a6\u0010v\u001a\u00020\u000b\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\bv\u0010n\u001a(\u0010v\u001a\u00020\u000b*\u00020\u00042\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\bv\u0010o\u001a(\u0010v\u001a\u00020\u000b*\u00020\u00072\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\bv\u0010p\u001a(\u0010v\u001a\u00020\u000b*\u00020\n2\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\bv\u0010R\u001a(\u0010v\u001a\u00020\u000b*\u00020\r2\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\bv\u0010q\u001a(\u0010v\u001a\u00020\u000b*\u00020\u00102\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\bv\u0010r\u001a(\u0010v\u001a\u00020\u000b*\u00020\u00132\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\bv\u0010s\u001a(\u0010v\u001a\u00020\u000b*\u00020\u00162\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\bv\u0010t\u001a(\u0010v\u001a\u00020\u000b*\u00020\u00192\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\bv\u0010u\u001a\u001f\u0010w\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u0001\u00a2\u0006\u0004\bw\u0010\u0003\u001a\u0011\u0010w\u001a\u00020\u0005*\u00020\u0004\u00a2\u0006\u0004\bw\u0010\u0006\u001a\u0011\u0010w\u001a\u00020\b*\u00020\u0007\u00a2\u0006\u0004\bw\u0010\t\u001a\u0011\u0010w\u001a\u00020\u000b*\u00020\n\u00a2\u0006\u0004\bw\u0010\f\u001a\u0011\u0010w\u001a\u00020\u000e*\u00020\r\u00a2\u0006\u0004\bw\u0010\u000f\u001a\u0011\u0010w\u001a\u00020\u0011*\u00020\u0010\u00a2\u0006\u0004\bw\u0010\u0012\u001a\u0011\u0010w\u001a\u00020\u0014*\u00020\u0013\u00a2\u0006\u0004\bw\u0010\u0015\u001a\u0011\u0010w\u001a\u00020\u0017*\u00020\u0016\u00a2\u0006\u0004\bw\u0010\u0018\u001a\u0011\u0010w\u001a\u00020\u001a*\u00020\u0019\u00a2\u0006\u0004\bw\u0010\u001b\u001a6\u0010w\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\bw\u0010E\u001a(\u0010w\u001a\u00020\u0005*\u00020\u00042\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\bw\u0010P\u001a(\u0010w\u001a\u00020\b*\u00020\u00072\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\bw\u0010Q\u001a(\u0010w\u001a\u00020\u000b*\u00020\n2\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\bw\u0010R\u001a(\u0010w\u001a\u00020\u000e*\u00020\r2\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\bw\u0010S\u001a(\u0010w\u001a\u00020\u0011*\u00020\u00102\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\bw\u0010T\u001a(\u0010w\u001a\u00020\u0014*\u00020\u00132\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\bw\u0010U\u001a(\u0010w\u001a\u00020\u0017*\u00020\u00162\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\bw\u0010V\u001a(\u0010w\u001a\u00020\u001a*\u00020\u00192\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\bw\u0010W\u001a,\u0010x\u001a\u00020\u000b\"\t\b\u0000\u0010\u0000\u00a2\u0006\u0002\b *\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0006\u0010!\u001a\u00028\u0000\u00a2\u0006\u0004\bx\u0010d\u001a\u0019\u0010x\u001a\u00020\u000b*\u00020\u00042\u0006\u0010!\u001a\u00020\u0005\u00a2\u0006\u0004\bx\u0010e\u001a\u0019\u0010x\u001a\u00020\u000b*\u00020\u00072\u0006\u0010!\u001a\u00020\b\u00a2\u0006\u0004\bx\u0010f\u001a\u0019\u0010x\u001a\u00020\u000b*\u00020\n2\u0006\u0010!\u001a\u00020\u000b\u00a2\u0006\u0004\bx\u0010g\u001a\u0019\u0010x\u001a\u00020\u000b*\u00020\r2\u0006\u0010!\u001a\u00020\u000e\u00a2\u0006\u0004\bx\u0010h\u001a\u0019\u0010x\u001a\u00020\u000b*\u00020\u00102\u0006\u0010!\u001a\u00020\u0011\u00a2\u0006\u0004\bx\u0010i\u001a\u0019\u0010x\u001a\u00020\u000b*\u00020\u00132\u0006\u0010!\u001a\u00020\u0014\u00a2\u0006\u0004\bx\u0010j\u001a\u0019\u0010x\u001a\u00020\u000b*\u00020\u00162\u0006\u0010!\u001a\u00020\u0017\u00a2\u0006\u0004\bx\u0010k\u001a\u0019\u0010x\u001a\u00020\u000b*\u00020\u00192\u0006\u0010!\u001a\u00020\u001a\u00a2\u0006\u0004\bx\u0010l\u001a!\u0010y\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u0001\u00a2\u0006\u0004\by\u0010\u0003\u001a\u0013\u0010y\u001a\u0004\u0018\u00010\u0005*\u00020\u0004\u00a2\u0006\u0004\by\u0010Y\u001a\u0013\u0010y\u001a\u0004\u0018\u00010\b*\u00020\u0007\u00a2\u0006\u0004\by\u0010Z\u001a\u0013\u0010y\u001a\u0004\u0018\u00010\u000b*\u00020\n\u00a2\u0006\u0004\by\u0010[\u001a\u0013\u0010y\u001a\u0004\u0018\u00010\u000e*\u00020\r\u00a2\u0006\u0004\by\u0010\\\u001a\u0013\u0010y\u001a\u0004\u0018\u00010\u0011*\u00020\u0010\u00a2\u0006\u0004\by\u0010]\u001a\u0013\u0010y\u001a\u0004\u0018\u00010\u0014*\u00020\u0013\u00a2\u0006\u0004\by\u0010^\u001a\u0013\u0010y\u001a\u0004\u0018\u00010\u0017*\u00020\u0016\u00a2\u0006\u0004\by\u0010_\u001a\u0013\u0010y\u001a\u0004\u0018\u00010\u001a*\u00020\u0019\u00a2\u0006\u0004\by\u0010`\u001a8\u0010y\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\by\u0010E\u001a*\u0010y\u001a\u0004\u0018\u00010\u0005*\u00020\u00042\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\by\u0010F\u001a*\u0010y\u001a\u0004\u0018\u00010\b*\u00020\u00072\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\by\u0010G\u001a*\u0010y\u001a\u0004\u0018\u00010\u000b*\u00020\n2\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\by\u0010H\u001a*\u0010y\u001a\u0004\u0018\u00010\u000e*\u00020\r2\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\by\u0010I\u001a*\u0010y\u001a\u0004\u0018\u00010\u0011*\u00020\u00102\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\by\u0010J\u001a*\u0010y\u001a\u0004\u0018\u00010\u0014*\u00020\u00132\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\by\u0010K\u001a*\u0010y\u001a\u0004\u0018\u00010\u0017*\u00020\u00162\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\by\u0010L\u001a*\u0010y\u001a\u0004\u0018\u00010\u001a*\u00020\u00192\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0004\by\u0010M\u001a\"\u0010z\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u0001H\u0087\b\u00a2\u0006\u0004\bz\u0010\u0003\u001a\u0014\u0010z\u001a\u00020\u0005*\u00020\u0004H\u0087\b\u00a2\u0006\u0004\bz\u0010\u0006\u001a\u0014\u0010z\u001a\u00020\b*\u00020\u0007H\u0087\b\u00a2\u0006\u0004\bz\u0010\t\u001a\u0014\u0010z\u001a\u00020\u000b*\u00020\nH\u0087\b\u00a2\u0006\u0004\bz\u0010\f\u001a\u0014\u0010z\u001a\u00020\u000e*\u00020\rH\u0087\b\u00a2\u0006\u0004\bz\u0010\u000f\u001a\u0014\u0010z\u001a\u00020\u0011*\u00020\u0010H\u0087\b\u00a2\u0006\u0004\bz\u0010\u0012\u001a\u0014\u0010z\u001a\u00020\u0014*\u00020\u0013H\u0087\b\u00a2\u0006\u0004\bz\u0010\u0015\u001a\u0014\u0010z\u001a\u00020\u0017*\u00020\u0016H\u0087\b\u00a2\u0006\u0004\bz\u0010\u0018\u001a\u0014\u0010z\u001a\u00020\u001a*\u00020\u0019H\u0087\b\u00a2\u0006\u0004\bz\u0010\u001b\u001a)\u0010z\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0006\u0010z\u001a\u00020{H\u0007\u00a2\u0006\u0004\bz\u0010|\u001a\u001b\u0010z\u001a\u00020\u0005*\u00020\u00042\u0006\u0010z\u001a\u00020{H\u0007\u00a2\u0006\u0004\bz\u0010}\u001a\u001b\u0010z\u001a\u00020\b*\u00020\u00072\u0006\u0010z\u001a\u00020{H\u0007\u00a2\u0006\u0004\bz\u0010~\u001a\u001b\u0010z\u001a\u00020\u000b*\u00020\n2\u0006\u0010z\u001a\u00020{H\u0007\u00a2\u0006\u0004\bz\u0010\u007f\u001a\u001c\u0010z\u001a\u00020\u000e*\u00020\r2\u0006\u0010z\u001a\u00020{H\u0007\u00a2\u0006\u0005\bz\u0010\u0080\u0001\u001a\u001c\u0010z\u001a\u00020\u0011*\u00020\u00102\u0006\u0010z\u001a\u00020{H\u0007\u00a2\u0006\u0005\bz\u0010\u0081\u0001\u001a\u001c\u0010z\u001a\u00020\u0014*\u00020\u00132\u0006\u0010z\u001a\u00020{H\u0007\u00a2\u0006\u0005\bz\u0010\u0082\u0001\u001a\u001c\u0010z\u001a\u00020\u0017*\u00020\u00162\u0006\u0010z\u001a\u00020{H\u0007\u00a2\u0006\u0005\bz\u0010\u0083\u0001\u001a\u001c\u0010z\u001a\u00020\u001a*\u00020\u00192\u0006\u0010z\u001a\u00020{H\u0007\u00a2\u0006\u0005\bz\u0010\u0084\u0001\u001a&\u0010\u0085\u0001\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u0001H\u0087\b\u00a2\u0006\u0005\b\u0085\u0001\u0010\u0003\u001a\u0018\u0010\u0085\u0001\u001a\u0004\u0018\u00010\u0005*\u00020\u0004H\u0087\b\u00a2\u0006\u0005\b\u0085\u0001\u0010Y\u001a\u0018\u0010\u0085\u0001\u001a\u0004\u0018\u00010\b*\u00020\u0007H\u0087\b\u00a2\u0006\u0005\b\u0085\u0001\u0010Z\u001a\u0018\u0010\u0085\u0001\u001a\u0004\u0018\u00010\u000b*\u00020\nH\u0087\b\u00a2\u0006\u0005\b\u0085\u0001\u0010[\u001a\u0018\u0010\u0085\u0001\u001a\u0004\u0018\u00010\u000e*\u00020\rH\u0087\b\u00a2\u0006\u0005\b\u0085\u0001\u0010\\\u001a\u0018\u0010\u0085\u0001\u001a\u0004\u0018\u00010\u0011*\u00020\u0010H\u0087\b\u00a2\u0006\u0005\b\u0085\u0001\u0010]\u001a\u0018\u0010\u0085\u0001\u001a\u0004\u0018\u00010\u0014*\u00020\u0013H\u0087\b\u00a2\u0006\u0005\b\u0085\u0001\u0010^\u001a\u0018\u0010\u0085\u0001\u001a\u0004\u0018\u00010\u0017*\u00020\u0016H\u0087\b\u00a2\u0006\u0005\b\u0085\u0001\u0010_\u001a\u0018\u0010\u0085\u0001\u001a\u0004\u0018\u00010\u001a*\u00020\u0019H\u0087\b\u00a2\u0006\u0005\b\u0085\u0001\u0010`\u001a-\u0010\u0085\u0001\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0006\u0010z\u001a\u00020{H\u0007\u00a2\u0006\u0005\b\u0085\u0001\u0010|\u001a \u0010\u0085\u0001\u001a\u0004\u0018\u00010\u0005*\u00020\u00042\u0006\u0010z\u001a\u00020{H\u0007\u00a2\u0006\u0006\b\u0085\u0001\u0010\u0086\u0001\u001a \u0010\u0085\u0001\u001a\u0004\u0018\u00010\b*\u00020\u00072\u0006\u0010z\u001a\u00020{H\u0007\u00a2\u0006\u0006\b\u0085\u0001\u0010\u0087\u0001\u001a \u0010\u0085\u0001\u001a\u0004\u0018\u00010\u000b*\u00020\n2\u0006\u0010z\u001a\u00020{H\u0007\u00a2\u0006\u0006\b\u0085\u0001\u0010\u0088\u0001\u001a \u0010\u0085\u0001\u001a\u0004\u0018\u00010\u000e*\u00020\r2\u0006\u0010z\u001a\u00020{H\u0007\u00a2\u0006\u0006\b\u0085\u0001\u0010\u0089\u0001\u001a \u0010\u0085\u0001\u001a\u0004\u0018\u00010\u0011*\u00020\u00102\u0006\u0010z\u001a\u00020{H\u0007\u00a2\u0006\u0006\b\u0085\u0001\u0010\u008a\u0001\u001a \u0010\u0085\u0001\u001a\u0004\u0018\u00010\u0014*\u00020\u00132\u0006\u0010z\u001a\u00020{H\u0007\u00a2\u0006\u0006\b\u0085\u0001\u0010\u008b\u0001\u001a \u0010\u0085\u0001\u001a\u0004\u0018\u00010\u0017*\u00020\u00162\u0006\u0010z\u001a\u00020{H\u0007\u00a2\u0006\u0006\b\u0085\u0001\u0010\u008c\u0001\u001a \u0010\u0085\u0001\u001a\u0004\u0018\u00010\u001a*\u00020\u00192\u0006\u0010z\u001a\u00020{H\u0007\u00a2\u0006\u0006\b\u0085\u0001\u0010\u008d\u0001\u001a!\u0010\u008e\u0001\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u0001\u00a2\u0006\u0005\b\u008e\u0001\u0010\u0003\u001a\u0013\u0010\u008e\u0001\u001a\u00020\u0005*\u00020\u0004\u00a2\u0006\u0005\b\u008e\u0001\u0010\u0006\u001a\u0013\u0010\u008e\u0001\u001a\u00020\b*\u00020\u0007\u00a2\u0006\u0005\b\u008e\u0001\u0010\t\u001a\u0013\u0010\u008e\u0001\u001a\u00020\u000b*\u00020\n\u00a2\u0006\u0005\b\u008e\u0001\u0010\f\u001a\u0013\u0010\u008e\u0001\u001a\u00020\u000e*\u00020\r\u00a2\u0006\u0005\b\u008e\u0001\u0010\u000f\u001a\u0013\u0010\u008e\u0001\u001a\u00020\u0011*\u00020\u0010\u00a2\u0006\u0005\b\u008e\u0001\u0010\u0012\u001a\u0013\u0010\u008e\u0001\u001a\u00020\u0014*\u00020\u0013\u00a2\u0006\u0005\b\u008e\u0001\u0010\u0015\u001a\u0013\u0010\u008e\u0001\u001a\u00020\u0017*\u00020\u0016\u00a2\u0006\u0005\b\u008e\u0001\u0010\u0018\u001a\u0013\u0010\u008e\u0001\u001a\u00020\u001a*\u00020\u0019\u00a2\u0006\u0005\b\u008e\u0001\u0010\u001b\u001a8\u0010\u008e\u0001\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0005\b\u008e\u0001\u0010E\u001a*\u0010\u008e\u0001\u001a\u00020\u0005*\u00020\u00042\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0005\b\u008e\u0001\u0010P\u001a*\u0010\u008e\u0001\u001a\u00020\b*\u00020\u00072\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0005\b\u008e\u0001\u0010Q\u001a*\u0010\u008e\u0001\u001a\u00020\u000b*\u00020\n2\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0005\b\u008e\u0001\u0010R\u001a*\u0010\u008e\u0001\u001a\u00020\u000e*\u00020\r2\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0005\b\u008e\u0001\u0010S\u001a*\u0010\u008e\u0001\u001a\u00020\u0011*\u00020\u00102\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0005\b\u008e\u0001\u0010T\u001a*\u0010\u008e\u0001\u001a\u00020\u0014*\u00020\u00132\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0005\b\u008e\u0001\u0010U\u001a*\u0010\u008e\u0001\u001a\u00020\u0017*\u00020\u00162\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0005\b\u008e\u0001\u0010V\u001a*\u0010\u008e\u0001\u001a\u00020\u001a*\u00020\u00192\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0005\b\u008e\u0001\u0010W\u001a#\u0010\u008f\u0001\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u0001\u00a2\u0006\u0005\b\u008f\u0001\u0010\u0003\u001a\u0015\u0010\u008f\u0001\u001a\u0004\u0018\u00010\u0005*\u00020\u0004\u00a2\u0006\u0005\b\u008f\u0001\u0010Y\u001a\u0015\u0010\u008f\u0001\u001a\u0004\u0018\u00010\b*\u00020\u0007\u00a2\u0006\u0005\b\u008f\u0001\u0010Z\u001a\u0015\u0010\u008f\u0001\u001a\u0004\u0018\u00010\u000b*\u00020\n\u00a2\u0006\u0005\b\u008f\u0001\u0010[\u001a\u0015\u0010\u008f\u0001\u001a\u0004\u0018\u00010\u000e*\u00020\r\u00a2\u0006\u0005\b\u008f\u0001\u0010\\\u001a\u0015\u0010\u008f\u0001\u001a\u0004\u0018\u00010\u0011*\u00020\u0010\u00a2\u0006\u0005\b\u008f\u0001\u0010]\u001a\u0015\u0010\u008f\u0001\u001a\u0004\u0018\u00010\u0014*\u00020\u0013\u00a2\u0006\u0005\b\u008f\u0001\u0010^\u001a\u0015\u0010\u008f\u0001\u001a\u0004\u0018\u00010\u0017*\u00020\u0016\u00a2\u0006\u0005\b\u008f\u0001\u0010_\u001a\u0015\u0010\u008f\u0001\u001a\u0004\u0018\u00010\u001a*\u00020\u0019\u00a2\u0006\u0005\b\u008f\u0001\u0010`\u001a:\u0010\u008f\u0001\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0005\b\u008f\u0001\u0010E\u001a,\u0010\u008f\u0001\u001a\u0004\u0018\u00010\u0005*\u00020\u00042\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0005\b\u008f\u0001\u0010F\u001a,\u0010\u008f\u0001\u001a\u0004\u0018\u00010\b*\u00020\u00072\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0005\b\u008f\u0001\u0010G\u001a,\u0010\u008f\u0001\u001a\u0004\u0018\u00010\u000b*\u00020\n2\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0005\b\u008f\u0001\u0010H\u001a,\u0010\u008f\u0001\u001a\u0004\u0018\u00010\u000e*\u00020\r2\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0005\b\u008f\u0001\u0010I\u001a,\u0010\u008f\u0001\u001a\u0004\u0018\u00010\u0011*\u00020\u00102\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0005\b\u008f\u0001\u0010J\u001a,\u0010\u008f\u0001\u001a\u0004\u0018\u00010\u0014*\u00020\u00132\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0005\b\u008f\u0001\u0010K\u001a,\u0010\u008f\u0001\u001a\u0004\u0018\u00010\u0017*\u00020\u00162\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0005\b\u008f\u0001\u0010L\u001a,\u0010\u008f\u0001\u001a\u0004\u0018\u00010\u001a*\u00020\u00192\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0005\b\u008f\u0001\u0010M\u001a2\u0010\u0092\u0001\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0007\u0010\u0090\u0001\u001a\u00020\u000b\u00a2\u0006\u0006\b\u0092\u0001\u0010\u0093\u0001\u001a$\u0010\u0092\u0001\u001a\t\u0012\u0004\u0012\u00020\u00050\u0091\u0001*\u00020\u00042\u0007\u0010\u0090\u0001\u001a\u00020\u000b\u00a2\u0006\u0006\b\u0092\u0001\u0010\u0094\u0001\u001a$\u0010\u0092\u0001\u001a\t\u0012\u0004\u0012\u00020\b0\u0091\u0001*\u00020\u00072\u0007\u0010\u0090\u0001\u001a\u00020\u000b\u00a2\u0006\u0006\b\u0092\u0001\u0010\u0095\u0001\u001a$\u0010\u0092\u0001\u001a\t\u0012\u0004\u0012\u00020\u000b0\u0091\u0001*\u00020\n2\u0007\u0010\u0090\u0001\u001a\u00020\u000b\u00a2\u0006\u0006\b\u0092\u0001\u0010\u0096\u0001\u001a$\u0010\u0092\u0001\u001a\t\u0012\u0004\u0012\u00020\u000e0\u0091\u0001*\u00020\r2\u0007\u0010\u0090\u0001\u001a\u00020\u000b\u00a2\u0006\u0006\b\u0092\u0001\u0010\u0097\u0001\u001a$\u0010\u0092\u0001\u001a\t\u0012\u0004\u0012\u00020\u00110\u0091\u0001*\u00020\u00102\u0007\u0010\u0090\u0001\u001a\u00020\u000b\u00a2\u0006\u0006\b\u0092\u0001\u0010\u0098\u0001\u001a$\u0010\u0092\u0001\u001a\t\u0012\u0004\u0012\u00020\u00140\u0091\u0001*\u00020\u00132\u0007\u0010\u0090\u0001\u001a\u00020\u000b\u00a2\u0006\u0006\b\u0092\u0001\u0010\u0099\u0001\u001a$\u0010\u0092\u0001\u001a\t\u0012\u0004\u0012\u00020\u00170\u0091\u0001*\u00020\u00162\u0007\u0010\u0090\u0001\u001a\u00020\u000b\u00a2\u0006\u0006\b\u0092\u0001\u0010\u009a\u0001\u001a$\u0010\u0092\u0001\u001a\t\u0012\u0004\u0012\u00020\u001a0\u0091\u0001*\u00020\u00192\u0007\u0010\u0090\u0001\u001a\u00020\u000b\u00a2\u0006\u0006\b\u0092\u0001\u0010\u009b\u0001\u001a2\u0010\u009c\u0001\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0007\u0010\u0090\u0001\u001a\u00020\u000b\u00a2\u0006\u0006\b\u009c\u0001\u0010\u0093\u0001\u001a$\u0010\u009c\u0001\u001a\t\u0012\u0004\u0012\u00020\u00050\u0091\u0001*\u00020\u00042\u0007\u0010\u0090\u0001\u001a\u00020\u000b\u00a2\u0006\u0006\b\u009c\u0001\u0010\u0094\u0001\u001a$\u0010\u009c\u0001\u001a\t\u0012\u0004\u0012\u00020\b0\u0091\u0001*\u00020\u00072\u0007\u0010\u0090\u0001\u001a\u00020\u000b\u00a2\u0006\u0006\b\u009c\u0001\u0010\u0095\u0001\u001a$\u0010\u009c\u0001\u001a\t\u0012\u0004\u0012\u00020\u000b0\u0091\u0001*\u00020\n2\u0007\u0010\u0090\u0001\u001a\u00020\u000b\u00a2\u0006\u0006\b\u009c\u0001\u0010\u0096\u0001\u001a$\u0010\u009c\u0001\u001a\t\u0012\u0004\u0012\u00020\u000e0\u0091\u0001*\u00020\r2\u0007\u0010\u0090\u0001\u001a\u00020\u000b\u00a2\u0006\u0006\b\u009c\u0001\u0010\u0097\u0001\u001a$\u0010\u009c\u0001\u001a\t\u0012\u0004\u0012\u00020\u00110\u0091\u0001*\u00020\u00102\u0007\u0010\u0090\u0001\u001a\u00020\u000b\u00a2\u0006\u0006\b\u009c\u0001\u0010\u0098\u0001\u001a$\u0010\u009c\u0001\u001a\t\u0012\u0004\u0012\u00020\u00140\u0091\u0001*\u00020\u00132\u0007\u0010\u0090\u0001\u001a\u00020\u000b\u00a2\u0006\u0006\b\u009c\u0001\u0010\u0099\u0001\u001a$\u0010\u009c\u0001\u001a\t\u0012\u0004\u0012\u00020\u00170\u0091\u0001*\u00020\u00162\u0007\u0010\u0090\u0001\u001a\u00020\u000b\u00a2\u0006\u0006\b\u009c\u0001\u0010\u009a\u0001\u001a$\u0010\u009c\u0001\u001a\t\u0012\u0004\u0012\u00020\u001a0\u0091\u0001*\u00020\u00192\u0007\u0010\u0090\u0001\u001a\u00020\u000b\u00a2\u0006\u0006\b\u009c\u0001\u0010\u009b\u0001\u001a@\u0010\u009d\u0001\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u009d\u0001\u0010\u009e\u0001\u001a2\u0010\u009d\u0001\u001a\t\u0012\u0004\u0012\u00020\u00050\u0091\u0001*\u00020\u00042\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u009d\u0001\u0010\u009f\u0001\u001a2\u0010\u009d\u0001\u001a\t\u0012\u0004\u0012\u00020\b0\u0091\u0001*\u00020\u00072\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u009d\u0001\u0010\u00a0\u0001\u001a2\u0010\u009d\u0001\u001a\t\u0012\u0004\u0012\u00020\u000b0\u0091\u0001*\u00020\n2\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u009d\u0001\u0010\u00a1\u0001\u001a2\u0010\u009d\u0001\u001a\t\u0012\u0004\u0012\u00020\u000e0\u0091\u0001*\u00020\r2\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u009d\u0001\u0010\u00a2\u0001\u001a2\u0010\u009d\u0001\u001a\t\u0012\u0004\u0012\u00020\u00110\u0091\u0001*\u00020\u00102\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u009d\u0001\u0010\u00a3\u0001\u001a2\u0010\u009d\u0001\u001a\t\u0012\u0004\u0012\u00020\u00140\u0091\u0001*\u00020\u00132\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u009d\u0001\u0010\u00a4\u0001\u001a2\u0010\u009d\u0001\u001a\t\u0012\u0004\u0012\u00020\u00170\u0091\u0001*\u00020\u00162\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u009d\u0001\u0010\u00a5\u0001\u001a2\u0010\u009d\u0001\u001a\t\u0012\u0004\u0012\u00020\u001a0\u0091\u0001*\u00020\u00192\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u009d\u0001\u0010\u00a6\u0001\u001a@\u0010\u00a7\u0001\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00a7\u0001\u0010\u009e\u0001\u001a2\u0010\u00a7\u0001\u001a\t\u0012\u0004\u0012\u00020\u00050\u0091\u0001*\u00020\u00042\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00a7\u0001\u0010\u009f\u0001\u001a2\u0010\u00a7\u0001\u001a\t\u0012\u0004\u0012\u00020\b0\u0091\u0001*\u00020\u00072\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00a7\u0001\u0010\u00a0\u0001\u001a2\u0010\u00a7\u0001\u001a\t\u0012\u0004\u0012\u00020\u000b0\u0091\u0001*\u00020\n2\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00a7\u0001\u0010\u00a1\u0001\u001a2\u0010\u00a7\u0001\u001a\t\u0012\u0004\u0012\u00020\u000e0\u0091\u0001*\u00020\r2\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00a7\u0001\u0010\u00a2\u0001\u001a2\u0010\u00a7\u0001\u001a\t\u0012\u0004\u0012\u00020\u00110\u0091\u0001*\u00020\u00102\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00a7\u0001\u0010\u00a3\u0001\u001a2\u0010\u00a7\u0001\u001a\t\u0012\u0004\u0012\u00020\u00140\u0091\u0001*\u00020\u00132\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00a7\u0001\u0010\u00a4\u0001\u001a2\u0010\u00a7\u0001\u001a\t\u0012\u0004\u0012\u00020\u00170\u0091\u0001*\u00020\u00162\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00a7\u0001\u0010\u00a5\u0001\u001a2\u0010\u00a7\u0001\u001a\t\u0012\u0004\u0012\u00020\u001a0\u0091\u0001*\u00020\u00192\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00a7\u0001\u0010\u00a6\u0001\u001a@\u0010\u00a8\u0001\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00a8\u0001\u0010\u009e\u0001\u001a2\u0010\u00a8\u0001\u001a\t\u0012\u0004\u0012\u00020\u00050\u0091\u0001*\u00020\u00042\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00a8\u0001\u0010\u009f\u0001\u001a2\u0010\u00a8\u0001\u001a\t\u0012\u0004\u0012\u00020\b0\u0091\u0001*\u00020\u00072\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00a8\u0001\u0010\u00a0\u0001\u001a2\u0010\u00a8\u0001\u001a\t\u0012\u0004\u0012\u00020\u000b0\u0091\u0001*\u00020\n2\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00a8\u0001\u0010\u00a1\u0001\u001a2\u0010\u00a8\u0001\u001a\t\u0012\u0004\u0012\u00020\u000e0\u0091\u0001*\u00020\r2\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00a8\u0001\u0010\u00a2\u0001\u001a2\u0010\u00a8\u0001\u001a\t\u0012\u0004\u0012\u00020\u00110\u0091\u0001*\u00020\u00102\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00a8\u0001\u0010\u00a3\u0001\u001a2\u0010\u00a8\u0001\u001a\t\u0012\u0004\u0012\u00020\u00140\u0091\u0001*\u00020\u00132\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00a8\u0001\u0010\u00a4\u0001\u001a2\u0010\u00a8\u0001\u001a\t\u0012\u0004\u0012\u00020\u00170\u0091\u0001*\u00020\u00162\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00a8\u0001\u0010\u00a5\u0001\u001a2\u0010\u00a8\u0001\u001a\t\u0012\u0004\u0012\u00020\u001a0\u0091\u0001*\u00020\u00192\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00a8\u0001\u0010\u00a6\u0001\u001aX\u0010\u00ac\u0001\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012*\u0010C\u001a&\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00170\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00ac\u0001\u0010\u00ad\u0001\u001aJ\u0010\u00ac\u0001\u001a\t\u0012\u0004\u0012\u00020\u00050\u0091\u0001*\u00020\u00042*\u0010C\u001a&\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00170\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00ac\u0001\u0010\u00ae\u0001\u001aJ\u0010\u00ac\u0001\u001a\t\u0012\u0004\u0012\u00020\b0\u0091\u0001*\u00020\u00072*\u0010C\u001a&\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\u00170\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00ac\u0001\u0010\u00af\u0001\u001aJ\u0010\u00ac\u0001\u001a\t\u0012\u0004\u0012\u00020\u000b0\u0091\u0001*\u00020\n2*\u0010C\u001a&\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\u00170\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00ac\u0001\u0010\u00b0\u0001\u001aJ\u0010\u00ac\u0001\u001a\t\u0012\u0004\u0012\u00020\u000e0\u0091\u0001*\u00020\r2*\u0010C\u001a&\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00020\u00170\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00ac\u0001\u0010\u00b1\u0001\u001aJ\u0010\u00ac\u0001\u001a\t\u0012\u0004\u0012\u00020\u00110\u0091\u0001*\u00020\u00102*\u0010C\u001a&\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00020\u00170\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00ac\u0001\u0010\u00b2\u0001\u001aJ\u0010\u00ac\u0001\u001a\t\u0012\u0004\u0012\u00020\u00140\u0091\u0001*\u00020\u00132*\u0010C\u001a&\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00020\u00170\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00ac\u0001\u0010\u00b3\u0001\u001aJ\u0010\u00ac\u0001\u001a\t\u0012\u0004\u0012\u00020\u00170\u0091\u0001*\u00020\u00162*\u0010C\u001a&\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00020\u00170\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00ac\u0001\u0010\u00b4\u0001\u001aJ\u0010\u00ac\u0001\u001a\t\u0012\u0004\u0012\u00020\u001a0\u0091\u0001*\u00020\u00192*\u0010C\u001a&\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00020\u00170\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00ac\u0001\u0010\u00b5\u0001\u001an\u0010\u00b9\u0001\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0000\"\u0012\b\u0001\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00028\u00000\u00b6\u0001*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0007\u0010\u00b8\u0001\u001a\u00028\u00012*\u0010C\u001a&\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00170\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00b9\u0001\u0010\u00ba\u0001\u001a`\u0010\u00b9\u0001\u001a\u00028\u0000\"\u0012\b\u0000\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00020\u00050\u00b6\u0001*\u00020\u00042\u0007\u0010\u00b8\u0001\u001a\u00028\u00002*\u0010C\u001a&\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00170\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00b9\u0001\u0010\u00bb\u0001\u001a`\u0010\u00b9\u0001\u001a\u00028\u0000\"\u0012\b\u0000\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00020\b0\u00b6\u0001*\u00020\u00072\u0007\u0010\u00b8\u0001\u001a\u00028\u00002*\u0010C\u001a&\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\u00170\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00b9\u0001\u0010\u00bc\u0001\u001a`\u0010\u00b9\u0001\u001a\u00028\u0000\"\u0012\b\u0000\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00020\u000b0\u00b6\u0001*\u00020\n2\u0007\u0010\u00b8\u0001\u001a\u00028\u00002*\u0010C\u001a&\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\u00170\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00b9\u0001\u0010\u00bd\u0001\u001a`\u0010\u00b9\u0001\u001a\u00028\u0000\"\u0012\b\u0000\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00020\u000e0\u00b6\u0001*\u00020\r2\u0007\u0010\u00b8\u0001\u001a\u00028\u00002*\u0010C\u001a&\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00020\u00170\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00b9\u0001\u0010\u00be\u0001\u001a`\u0010\u00b9\u0001\u001a\u00028\u0000\"\u0012\b\u0000\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00020\u00110\u00b6\u0001*\u00020\u00102\u0007\u0010\u00b8\u0001\u001a\u00028\u00002*\u0010C\u001a&\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00020\u00170\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00b9\u0001\u0010\u00bf\u0001\u001a`\u0010\u00b9\u0001\u001a\u00028\u0000\"\u0012\b\u0000\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00020\u00140\u00b6\u0001*\u00020\u00132\u0007\u0010\u00b8\u0001\u001a\u00028\u00002*\u0010C\u001a&\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00020\u00170\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00b9\u0001\u0010\u00c0\u0001\u001a`\u0010\u00b9\u0001\u001a\u00028\u0000\"\u0012\b\u0000\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00020\u00170\u00b6\u0001*\u00020\u00162\u0007\u0010\u00b8\u0001\u001a\u00028\u00002*\u0010C\u001a&\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00020\u00170\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00b9\u0001\u0010\u00c1\u0001\u001a`\u0010\u00b9\u0001\u001a\u00028\u0000\"\u0012\b\u0000\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00020\u001a0\u00b6\u0001*\u00020\u00192\u0007\u0010\u00b8\u0001\u001a\u00028\u00002*\u0010C\u001a&\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00020\u00170\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00b9\u0001\u0010\u00c2\u0001\u001a1\u0010\u00c5\u0001\u001a\u000f\u0012\n\u0012\b8\u0000\u00a2\u0006\u0003\b\u00c4\u00010\u0091\u0001\"\u0007\b\u0000\u0010\u00c3\u0001\u0018\u0001*\u0006\u0012\u0002\b\u00030\u0001H\u0086\b\u00a2\u0006\u0006\b\u00c5\u0001\u0010\u00c6\u0001\u001aA\u0010\u00c7\u0001\u001a\u00028\u0001\"\u0007\b\u0000\u0010\u00c3\u0001\u0018\u0001\"\u0012\b\u0001\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00028\u00000\u00b6\u0001*\u0006\u0012\u0002\b\u00030\u00012\u0007\u0010\u00b8\u0001\u001a\u00028\u0001H\u0086\b\u00a2\u0006\u0006\b\u00c7\u0001\u0010\u00c8\u0001\u001a@\u0010\u00c9\u0001\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00c9\u0001\u0010\u009e\u0001\u001a2\u0010\u00c9\u0001\u001a\t\u0012\u0004\u0012\u00020\u00050\u0091\u0001*\u00020\u00042\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00c9\u0001\u0010\u009f\u0001\u001a2\u0010\u00c9\u0001\u001a\t\u0012\u0004\u0012\u00020\b0\u0091\u0001*\u00020\u00072\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00c9\u0001\u0010\u00a0\u0001\u001a2\u0010\u00c9\u0001\u001a\t\u0012\u0004\u0012\u00020\u000b0\u0091\u0001*\u00020\n2\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00c9\u0001\u0010\u00a1\u0001\u001a2\u0010\u00c9\u0001\u001a\t\u0012\u0004\u0012\u00020\u000e0\u0091\u0001*\u00020\r2\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00c9\u0001\u0010\u00a2\u0001\u001a2\u0010\u00c9\u0001\u001a\t\u0012\u0004\u0012\u00020\u00110\u0091\u0001*\u00020\u00102\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00c9\u0001\u0010\u00a3\u0001\u001a2\u0010\u00c9\u0001\u001a\t\u0012\u0004\u0012\u00020\u00140\u0091\u0001*\u00020\u00132\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00c9\u0001\u0010\u00a4\u0001\u001a2\u0010\u00c9\u0001\u001a\t\u0012\u0004\u0012\u00020\u00170\u0091\u0001*\u00020\u00162\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00c9\u0001\u0010\u00a5\u0001\u001a2\u0010\u00c9\u0001\u001a\t\u0012\u0004\u0012\u00020\u001a0\u0091\u0001*\u00020\u00192\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00c9\u0001\u0010\u00a6\u0001\u001a0\u0010\u00cb\u0001\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\t\b\u0000\u0010\u0000*\u00030\u00ca\u0001*\f\u0012\b\b\u0001\u0012\u0004\u0018\u00018\u00000\u0001\u00a2\u0006\u0006\b\u00cb\u0001\u0010\u00c6\u0001\u001aF\u0010\u00cc\u0001\u001a\u00028\u0000\"\u0012\b\u0000\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00028\u00010\u00b6\u0001\"\t\b\u0001\u0010\u0000*\u00030\u00ca\u0001*\f\u0012\b\b\u0001\u0012\u0004\u0018\u00018\u00010\u00012\u0007\u0010\u00b8\u0001\u001a\u00028\u0000\u00a2\u0006\u0006\b\u00cc\u0001\u0010\u00c8\u0001\u001aV\u0010\u00cd\u0001\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0000\"\u0012\b\u0001\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00028\u00000\u00b6\u0001*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0007\u0010\u00b8\u0001\u001a\u00028\u00012\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00cd\u0001\u0010\u00ce\u0001\u001aH\u0010\u00cd\u0001\u001a\u00028\u0000\"\u0012\b\u0000\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00020\u00050\u00b6\u0001*\u00020\u00042\u0007\u0010\u00b8\u0001\u001a\u00028\u00002\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00cd\u0001\u0010\u00cf\u0001\u001aH\u0010\u00cd\u0001\u001a\u00028\u0000\"\u0012\b\u0000\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00020\b0\u00b6\u0001*\u00020\u00072\u0007\u0010\u00b8\u0001\u001a\u00028\u00002\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00cd\u0001\u0010\u00d0\u0001\u001aH\u0010\u00cd\u0001\u001a\u00028\u0000\"\u0012\b\u0000\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00020\u000b0\u00b6\u0001*\u00020\n2\u0007\u0010\u00b8\u0001\u001a\u00028\u00002\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00cd\u0001\u0010\u00d1\u0001\u001aH\u0010\u00cd\u0001\u001a\u00028\u0000\"\u0012\b\u0000\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00020\u000e0\u00b6\u0001*\u00020\r2\u0007\u0010\u00b8\u0001\u001a\u00028\u00002\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00cd\u0001\u0010\u00d2\u0001\u001aH\u0010\u00cd\u0001\u001a\u00028\u0000\"\u0012\b\u0000\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00020\u00110\u00b6\u0001*\u00020\u00102\u0007\u0010\u00b8\u0001\u001a\u00028\u00002\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00cd\u0001\u0010\u00d3\u0001\u001aH\u0010\u00cd\u0001\u001a\u00028\u0000\"\u0012\b\u0000\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00020\u00140\u00b6\u0001*\u00020\u00132\u0007\u0010\u00b8\u0001\u001a\u00028\u00002\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00cd\u0001\u0010\u00d4\u0001\u001aH\u0010\u00cd\u0001\u001a\u00028\u0000\"\u0012\b\u0000\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00020\u00170\u00b6\u0001*\u00020\u00162\u0007\u0010\u00b8\u0001\u001a\u00028\u00002\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00cd\u0001\u0010\u00d5\u0001\u001aH\u0010\u00cd\u0001\u001a\u00028\u0000\"\u0012\b\u0000\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00020\u001a0\u00b6\u0001*\u00020\u00192\u0007\u0010\u00b8\u0001\u001a\u00028\u00002\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00cd\u0001\u0010\u00d6\u0001\u001aV\u0010\u00d7\u0001\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0000\"\u0012\b\u0001\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00028\u00000\u00b6\u0001*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0007\u0010\u00b8\u0001\u001a\u00028\u00012\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00d7\u0001\u0010\u00ce\u0001\u001aH\u0010\u00d7\u0001\u001a\u00028\u0000\"\u0012\b\u0000\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00020\u00050\u00b6\u0001*\u00020\u00042\u0007\u0010\u00b8\u0001\u001a\u00028\u00002\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00d7\u0001\u0010\u00cf\u0001\u001aH\u0010\u00d7\u0001\u001a\u00028\u0000\"\u0012\b\u0000\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00020\b0\u00b6\u0001*\u00020\u00072\u0007\u0010\u00b8\u0001\u001a\u00028\u00002\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00d7\u0001\u0010\u00d0\u0001\u001aH\u0010\u00d7\u0001\u001a\u00028\u0000\"\u0012\b\u0000\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00020\u000b0\u00b6\u0001*\u00020\n2\u0007\u0010\u00b8\u0001\u001a\u00028\u00002\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00d7\u0001\u0010\u00d1\u0001\u001aH\u0010\u00d7\u0001\u001a\u00028\u0000\"\u0012\b\u0000\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00020\u000e0\u00b6\u0001*\u00020\r2\u0007\u0010\u00b8\u0001\u001a\u00028\u00002\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00d7\u0001\u0010\u00d2\u0001\u001aH\u0010\u00d7\u0001\u001a\u00028\u0000\"\u0012\b\u0000\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00020\u00110\u00b6\u0001*\u00020\u00102\u0007\u0010\u00b8\u0001\u001a\u00028\u00002\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00d7\u0001\u0010\u00d3\u0001\u001aH\u0010\u00d7\u0001\u001a\u00028\u0000\"\u0012\b\u0000\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00020\u00140\u00b6\u0001*\u00020\u00132\u0007\u0010\u00b8\u0001\u001a\u00028\u00002\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00d7\u0001\u0010\u00d4\u0001\u001aH\u0010\u00d7\u0001\u001a\u00028\u0000\"\u0012\b\u0000\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00020\u00170\u00b6\u0001*\u00020\u00162\u0007\u0010\u00b8\u0001\u001a\u00028\u00002\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00d7\u0001\u0010\u00d5\u0001\u001aH\u0010\u00d7\u0001\u001a\u00028\u0000\"\u0012\b\u0000\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00020\u001a0\u00b6\u0001*\u00020\u00192\u0007\u0010\u00b8\u0001\u001a\u00028\u00002\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00d7\u0001\u0010\u00d6\u0001\u001a3\u0010\u00da\u0001\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\b\u0010\u00d9\u0001\u001a\u00030\u00d8\u0001\u00a2\u0006\u0006\b\u00da\u0001\u0010\u00db\u0001\u001a%\u0010\u00da\u0001\u001a\t\u0012\u0004\u0012\u00020\u00050\u0091\u0001*\u00020\u00042\b\u0010\u00d9\u0001\u001a\u00030\u00d8\u0001\u00a2\u0006\u0006\b\u00da\u0001\u0010\u00dc\u0001\u001a%\u0010\u00da\u0001\u001a\t\u0012\u0004\u0012\u00020\b0\u0091\u0001*\u00020\u00072\b\u0010\u00d9\u0001\u001a\u00030\u00d8\u0001\u00a2\u0006\u0006\b\u00da\u0001\u0010\u00dd\u0001\u001a%\u0010\u00da\u0001\u001a\t\u0012\u0004\u0012\u00020\u000b0\u0091\u0001*\u00020\n2\b\u0010\u00d9\u0001\u001a\u00030\u00d8\u0001\u00a2\u0006\u0006\b\u00da\u0001\u0010\u00de\u0001\u001a%\u0010\u00da\u0001\u001a\t\u0012\u0004\u0012\u00020\u000e0\u0091\u0001*\u00020\r2\b\u0010\u00d9\u0001\u001a\u00030\u00d8\u0001\u00a2\u0006\u0006\b\u00da\u0001\u0010\u00df\u0001\u001a%\u0010\u00da\u0001\u001a\t\u0012\u0004\u0012\u00020\u00110\u0091\u0001*\u00020\u00102\b\u0010\u00d9\u0001\u001a\u00030\u00d8\u0001\u00a2\u0006\u0006\b\u00da\u0001\u0010\u00e0\u0001\u001a%\u0010\u00da\u0001\u001a\t\u0012\u0004\u0012\u00020\u00140\u0091\u0001*\u00020\u00132\b\u0010\u00d9\u0001\u001a\u00030\u00d8\u0001\u00a2\u0006\u0006\b\u00da\u0001\u0010\u00e1\u0001\u001a%\u0010\u00da\u0001\u001a\t\u0012\u0004\u0012\u00020\u00170\u0091\u0001*\u00020\u00162\b\u0010\u00d9\u0001\u001a\u00030\u00d8\u0001\u00a2\u0006\u0006\b\u00da\u0001\u0010\u00e2\u0001\u001a%\u0010\u00da\u0001\u001a\t\u0012\u0004\u0012\u00020\u001a0\u0091\u0001*\u00020\u00192\b\u0010\u00d9\u0001\u001a\u00030\u00d8\u0001\u00a2\u0006\u0006\b\u00da\u0001\u0010\u00e3\u0001\u001a9\u0010\u00da\u0001\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u000e\u0010\u00d9\u0001\u001a\t\u0012\u0004\u0012\u00020\u000b0\u00e4\u0001\u00a2\u0006\u0006\b\u00da\u0001\u0010\u00e5\u0001\u001a+\u0010\u00da\u0001\u001a\t\u0012\u0004\u0012\u00020\u00050\u0091\u0001*\u00020\u00042\u000e\u0010\u00d9\u0001\u001a\t\u0012\u0004\u0012\u00020\u000b0\u00e4\u0001\u00a2\u0006\u0006\b\u00da\u0001\u0010\u00e6\u0001\u001a+\u0010\u00da\u0001\u001a\t\u0012\u0004\u0012\u00020\b0\u0091\u0001*\u00020\u00072\u000e\u0010\u00d9\u0001\u001a\t\u0012\u0004\u0012\u00020\u000b0\u00e4\u0001\u00a2\u0006\u0006\b\u00da\u0001\u0010\u00e7\u0001\u001a+\u0010\u00da\u0001\u001a\t\u0012\u0004\u0012\u00020\u000b0\u0091\u0001*\u00020\n2\u000e\u0010\u00d9\u0001\u001a\t\u0012\u0004\u0012\u00020\u000b0\u00e4\u0001\u00a2\u0006\u0006\b\u00da\u0001\u0010\u00e8\u0001\u001a+\u0010\u00da\u0001\u001a\t\u0012\u0004\u0012\u00020\u000e0\u0091\u0001*\u00020\r2\u000e\u0010\u00d9\u0001\u001a\t\u0012\u0004\u0012\u00020\u000b0\u00e4\u0001\u00a2\u0006\u0006\b\u00da\u0001\u0010\u00e9\u0001\u001a+\u0010\u00da\u0001\u001a\t\u0012\u0004\u0012\u00020\u00110\u0091\u0001*\u00020\u00102\u000e\u0010\u00d9\u0001\u001a\t\u0012\u0004\u0012\u00020\u000b0\u00e4\u0001\u00a2\u0006\u0006\b\u00da\u0001\u0010\u00ea\u0001\u001a+\u0010\u00da\u0001\u001a\t\u0012\u0004\u0012\u00020\u00140\u0091\u0001*\u00020\u00132\u000e\u0010\u00d9\u0001\u001a\t\u0012\u0004\u0012\u00020\u000b0\u00e4\u0001\u00a2\u0006\u0006\b\u00da\u0001\u0010\u00eb\u0001\u001a+\u0010\u00da\u0001\u001a\t\u0012\u0004\u0012\u00020\u00170\u0091\u0001*\u00020\u00162\u000e\u0010\u00d9\u0001\u001a\t\u0012\u0004\u0012\u00020\u000b0\u00e4\u0001\u00a2\u0006\u0006\b\u00da\u0001\u0010\u00ec\u0001\u001a+\u0010\u00da\u0001\u001a\t\u0012\u0004\u0012\u00020\u001a0\u0091\u0001*\u00020\u00192\u000e\u0010\u00d9\u0001\u001a\t\u0012\u0004\u0012\u00020\u000b0\u00e4\u0001\u00a2\u0006\u0006\b\u00da\u0001\u0010\u00ed\u0001\u001a6\u0010\u00ef\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\u000e\u0010\u00d9\u0001\u001a\t\u0012\u0004\u0012\u00020\u000b0\u00ee\u0001\u00a2\u0006\u0006\b\u00ef\u0001\u0010\u00f0\u0001\u001a$\u0010\u00ef\u0001\u001a\u00020\u0004*\u00020\u00042\u000e\u0010\u00d9\u0001\u001a\t\u0012\u0004\u0012\u00020\u000b0\u00ee\u0001\u00a2\u0006\u0006\b\u00ef\u0001\u0010\u00f1\u0001\u001a$\u0010\u00ef\u0001\u001a\u00020\u0007*\u00020\u00072\u000e\u0010\u00d9\u0001\u001a\t\u0012\u0004\u0012\u00020\u000b0\u00ee\u0001\u00a2\u0006\u0006\b\u00ef\u0001\u0010\u00f2\u0001\u001a$\u0010\u00ef\u0001\u001a\u00020\n*\u00020\n2\u000e\u0010\u00d9\u0001\u001a\t\u0012\u0004\u0012\u00020\u000b0\u00ee\u0001\u00a2\u0006\u0006\b\u00ef\u0001\u0010\u00f3\u0001\u001a$\u0010\u00ef\u0001\u001a\u00020\r*\u00020\r2\u000e\u0010\u00d9\u0001\u001a\t\u0012\u0004\u0012\u00020\u000b0\u00ee\u0001\u00a2\u0006\u0006\b\u00ef\u0001\u0010\u00f4\u0001\u001a$\u0010\u00ef\u0001\u001a\u00020\u0010*\u00020\u00102\u000e\u0010\u00d9\u0001\u001a\t\u0012\u0004\u0012\u00020\u000b0\u00ee\u0001\u00a2\u0006\u0006\b\u00ef\u0001\u0010\u00f5\u0001\u001a$\u0010\u00ef\u0001\u001a\u00020\u0013*\u00020\u00132\u000e\u0010\u00d9\u0001\u001a\t\u0012\u0004\u0012\u00020\u000b0\u00ee\u0001\u00a2\u0006\u0006\b\u00ef\u0001\u0010\u00f6\u0001\u001a$\u0010\u00ef\u0001\u001a\u00020\u0016*\u00020\u00162\u000e\u0010\u00d9\u0001\u001a\t\u0012\u0004\u0012\u00020\u000b0\u00ee\u0001\u00a2\u0006\u0006\b\u00ef\u0001\u0010\u00f7\u0001\u001a$\u0010\u00ef\u0001\u001a\u00020\u0019*\u00020\u00192\u000e\u0010\u00d9\u0001\u001a\t\u0012\u0004\u0012\u00020\u000b0\u00ee\u0001\u00a2\u0006\u0006\b\u00ef\u0001\u0010\u00f8\u0001\u001a0\u0010\u00ef\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00012\b\u0010\u00d9\u0001\u001a\u00030\u00d8\u0001\u00a2\u0006\u0006\b\u00ef\u0001\u0010\u00f9\u0001\u001a\u001e\u0010\u00ef\u0001\u001a\u00020\u0004*\u00020\u00042\b\u0010\u00d9\u0001\u001a\u00030\u00d8\u0001\u00a2\u0006\u0006\b\u00ef\u0001\u0010\u00fa\u0001\u001a\u001e\u0010\u00ef\u0001\u001a\u00020\u0007*\u00020\u00072\b\u0010\u00d9\u0001\u001a\u00030\u00d8\u0001\u00a2\u0006\u0006\b\u00ef\u0001\u0010\u00fb\u0001\u001a\u001e\u0010\u00ef\u0001\u001a\u00020\n*\u00020\n2\b\u0010\u00d9\u0001\u001a\u00030\u00d8\u0001\u00a2\u0006\u0006\b\u00ef\u0001\u0010\u00fc\u0001\u001a\u001e\u0010\u00ef\u0001\u001a\u00020\r*\u00020\r2\b\u0010\u00d9\u0001\u001a\u00030\u00d8\u0001\u00a2\u0006\u0006\b\u00ef\u0001\u0010\u00fd\u0001\u001a\u001e\u0010\u00ef\u0001\u001a\u00020\u0010*\u00020\u00102\b\u0010\u00d9\u0001\u001a\u00030\u00d8\u0001\u00a2\u0006\u0006\b\u00ef\u0001\u0010\u00fe\u0001\u001a\u001e\u0010\u00ef\u0001\u001a\u00020\u0013*\u00020\u00132\b\u0010\u00d9\u0001\u001a\u00030\u00d8\u0001\u00a2\u0006\u0006\b\u00ef\u0001\u0010\u00ff\u0001\u001a\u001e\u0010\u00ef\u0001\u001a\u00020\u0016*\u00020\u00162\b\u0010\u00d9\u0001\u001a\u00030\u00d8\u0001\u00a2\u0006\u0006\b\u00ef\u0001\u0010\u0080\u0002\u001a\u001e\u0010\u00ef\u0001\u001a\u00020\u0019*\u00020\u00192\b\u0010\u00d9\u0001\u001a\u00030\u00d8\u0001\u00a2\u0006\u0006\b\u00ef\u0001\u0010\u0081\u0002\u001a2\u0010\u0082\u0002\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0007\u0010\u0090\u0001\u001a\u00020\u000b\u00a2\u0006\u0006\b\u0082\u0002\u0010\u0093\u0001\u001a$\u0010\u0082\u0002\u001a\t\u0012\u0004\u0012\u00020\u00050\u0091\u0001*\u00020\u00042\u0007\u0010\u0090\u0001\u001a\u00020\u000b\u00a2\u0006\u0006\b\u0082\u0002\u0010\u0094\u0001\u001a$\u0010\u0082\u0002\u001a\t\u0012\u0004\u0012\u00020\b0\u0091\u0001*\u00020\u00072\u0007\u0010\u0090\u0001\u001a\u00020\u000b\u00a2\u0006\u0006\b\u0082\u0002\u0010\u0095\u0001\u001a$\u0010\u0082\u0002\u001a\t\u0012\u0004\u0012\u00020\u000b0\u0091\u0001*\u00020\n2\u0007\u0010\u0090\u0001\u001a\u00020\u000b\u00a2\u0006\u0006\b\u0082\u0002\u0010\u0096\u0001\u001a$\u0010\u0082\u0002\u001a\t\u0012\u0004\u0012\u00020\u000e0\u0091\u0001*\u00020\r2\u0007\u0010\u0090\u0001\u001a\u00020\u000b\u00a2\u0006\u0006\b\u0082\u0002\u0010\u0097\u0001\u001a$\u0010\u0082\u0002\u001a\t\u0012\u0004\u0012\u00020\u00110\u0091\u0001*\u00020\u00102\u0007\u0010\u0090\u0001\u001a\u00020\u000b\u00a2\u0006\u0006\b\u0082\u0002\u0010\u0098\u0001\u001a$\u0010\u0082\u0002\u001a\t\u0012\u0004\u0012\u00020\u00140\u0091\u0001*\u00020\u00132\u0007\u0010\u0090\u0001\u001a\u00020\u000b\u00a2\u0006\u0006\b\u0082\u0002\u0010\u0099\u0001\u001a$\u0010\u0082\u0002\u001a\t\u0012\u0004\u0012\u00020\u00170\u0091\u0001*\u00020\u00162\u0007\u0010\u0090\u0001\u001a\u00020\u000b\u00a2\u0006\u0006\b\u0082\u0002\u0010\u009a\u0001\u001a$\u0010\u0082\u0002\u001a\t\u0012\u0004\u0012\u00020\u001a0\u0091\u0001*\u00020\u00192\u0007\u0010\u0090\u0001\u001a\u00020\u000b\u00a2\u0006\u0006\b\u0082\u0002\u0010\u009b\u0001\u001a2\u0010\u0083\u0002\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0007\u0010\u0090\u0001\u001a\u00020\u000b\u00a2\u0006\u0006\b\u0083\u0002\u0010\u0093\u0001\u001a$\u0010\u0083\u0002\u001a\t\u0012\u0004\u0012\u00020\u00050\u0091\u0001*\u00020\u00042\u0007\u0010\u0090\u0001\u001a\u00020\u000b\u00a2\u0006\u0006\b\u0083\u0002\u0010\u0094\u0001\u001a$\u0010\u0083\u0002\u001a\t\u0012\u0004\u0012\u00020\b0\u0091\u0001*\u00020\u00072\u0007\u0010\u0090\u0001\u001a\u00020\u000b\u00a2\u0006\u0006\b\u0083\u0002\u0010\u0095\u0001\u001a$\u0010\u0083\u0002\u001a\t\u0012\u0004\u0012\u00020\u000b0\u0091\u0001*\u00020\n2\u0007\u0010\u0090\u0001\u001a\u00020\u000b\u00a2\u0006\u0006\b\u0083\u0002\u0010\u0096\u0001\u001a$\u0010\u0083\u0002\u001a\t\u0012\u0004\u0012\u00020\u000e0\u0091\u0001*\u00020\r2\u0007\u0010\u0090\u0001\u001a\u00020\u000b\u00a2\u0006\u0006\b\u0083\u0002\u0010\u0097\u0001\u001a$\u0010\u0083\u0002\u001a\t\u0012\u0004\u0012\u00020\u00110\u0091\u0001*\u00020\u00102\u0007\u0010\u0090\u0001\u001a\u00020\u000b\u00a2\u0006\u0006\b\u0083\u0002\u0010\u0098\u0001\u001a$\u0010\u0083\u0002\u001a\t\u0012\u0004\u0012\u00020\u00140\u0091\u0001*\u00020\u00132\u0007\u0010\u0090\u0001\u001a\u00020\u000b\u00a2\u0006\u0006\b\u0083\u0002\u0010\u0099\u0001\u001a$\u0010\u0083\u0002\u001a\t\u0012\u0004\u0012\u00020\u00170\u0091\u0001*\u00020\u00162\u0007\u0010\u0090\u0001\u001a\u00020\u000b\u00a2\u0006\u0006\b\u0083\u0002\u0010\u009a\u0001\u001a$\u0010\u0083\u0002\u001a\t\u0012\u0004\u0012\u00020\u001a0\u0091\u0001*\u00020\u00192\u0007\u0010\u0090\u0001\u001a\u00020\u000b\u00a2\u0006\u0006\b\u0083\u0002\u0010\u009b\u0001\u001a@\u0010\u0084\u0002\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u0084\u0002\u0010\u009e\u0001\u001a2\u0010\u0084\u0002\u001a\t\u0012\u0004\u0012\u00020\u00050\u0091\u0001*\u00020\u00042\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u0084\u0002\u0010\u009f\u0001\u001a2\u0010\u0084\u0002\u001a\t\u0012\u0004\u0012\u00020\b0\u0091\u0001*\u00020\u00072\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u0084\u0002\u0010\u00a0\u0001\u001a2\u0010\u0084\u0002\u001a\t\u0012\u0004\u0012\u00020\u000b0\u0091\u0001*\u00020\n2\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u0084\u0002\u0010\u00a1\u0001\u001a2\u0010\u0084\u0002\u001a\t\u0012\u0004\u0012\u00020\u000e0\u0091\u0001*\u00020\r2\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u0084\u0002\u0010\u00a2\u0001\u001a2\u0010\u0084\u0002\u001a\t\u0012\u0004\u0012\u00020\u00110\u0091\u0001*\u00020\u00102\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u0084\u0002\u0010\u00a3\u0001\u001a2\u0010\u0084\u0002\u001a\t\u0012\u0004\u0012\u00020\u00140\u0091\u0001*\u00020\u00132\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u0084\u0002\u0010\u00a4\u0001\u001a2\u0010\u0084\u0002\u001a\t\u0012\u0004\u0012\u00020\u00170\u0091\u0001*\u00020\u00162\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u0084\u0002\u0010\u00a5\u0001\u001a2\u0010\u0084\u0002\u001a\t\u0012\u0004\u0012\u00020\u001a0\u0091\u0001*\u00020\u00192\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u0084\u0002\u0010\u00a6\u0001\u001a@\u0010\u0085\u0002\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u0085\u0002\u0010\u009e\u0001\u001a2\u0010\u0085\u0002\u001a\t\u0012\u0004\u0012\u00020\u00050\u0091\u0001*\u00020\u00042\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u0085\u0002\u0010\u009f\u0001\u001a2\u0010\u0085\u0002\u001a\t\u0012\u0004\u0012\u00020\b0\u0091\u0001*\u00020\u00072\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u0085\u0002\u0010\u00a0\u0001\u001a2\u0010\u0085\u0002\u001a\t\u0012\u0004\u0012\u00020\u000b0\u0091\u0001*\u00020\n2\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u0085\u0002\u0010\u00a1\u0001\u001a2\u0010\u0085\u0002\u001a\t\u0012\u0004\u0012\u00020\u000e0\u0091\u0001*\u00020\r2\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u0085\u0002\u0010\u00a2\u0001\u001a2\u0010\u0085\u0002\u001a\t\u0012\u0004\u0012\u00020\u00110\u0091\u0001*\u00020\u00102\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u0085\u0002\u0010\u00a3\u0001\u001a2\u0010\u0085\u0002\u001a\t\u0012\u0004\u0012\u00020\u00140\u0091\u0001*\u00020\u00132\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u0085\u0002\u0010\u00a4\u0001\u001a2\u0010\u0085\u0002\u001a\t\u0012\u0004\u0012\u00020\u00170\u0091\u0001*\u00020\u00162\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u0085\u0002\u0010\u00a5\u0001\u001a2\u0010\u0085\u0002\u001a\t\u0012\u0004\u0012\u00020\u001a0\u0091\u0001*\u00020\u00192\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u0085\u0002\u0010\u00a6\u0001\u001a!\u0010\u0087\u0002\u001a\u00030\u0086\u0002\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u0001\u00a2\u0006\u0006\b\u0087\u0002\u0010\u0088\u0002\u001a\u0015\u0010\u0087\u0002\u001a\u00030\u0086\u0002*\u00020\u0004\u00a2\u0006\u0006\b\u0087\u0002\u0010\u0089\u0002\u001a\u0015\u0010\u0087\u0002\u001a\u00030\u0086\u0002*\u00020\u0007\u00a2\u0006\u0006\b\u0087\u0002\u0010\u008a\u0002\u001a\u0015\u0010\u0087\u0002\u001a\u00030\u0086\u0002*\u00020\n\u00a2\u0006\u0006\b\u0087\u0002\u0010\u008b\u0002\u001a\u0015\u0010\u0087\u0002\u001a\u00030\u0086\u0002*\u00020\r\u00a2\u0006\u0006\b\u0087\u0002\u0010\u008c\u0002\u001a\u0015\u0010\u0087\u0002\u001a\u00030\u0086\u0002*\u00020\u0010\u00a2\u0006\u0006\b\u0087\u0002\u0010\u008d\u0002\u001a\u0015\u0010\u0087\u0002\u001a\u00030\u0086\u0002*\u00020\u0013\u00a2\u0006\u0006\b\u0087\u0002\u0010\u008e\u0002\u001a\u0015\u0010\u0087\u0002\u001a\u00030\u0086\u0002*\u00020\u0016\u00a2\u0006\u0006\b\u0087\u0002\u0010\u008f\u0002\u001a\u0015\u0010\u0087\u0002\u001a\u00030\u0086\u0002*\u00020\u0019\u00a2\u0006\u0006\b\u0087\u0002\u0010\u0090\u0002\u001a)\u0010\u0091\u0002\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u0001\u00a2\u0006\u0006\b\u0091\u0002\u0010\u00c6\u0001\u001a\u001b\u0010\u0091\u0002\u001a\t\u0012\u0004\u0012\u00020\u00050\u0091\u0001*\u00020\u0004\u00a2\u0006\u0006\b\u0091\u0002\u0010\u0092\u0002\u001a\u001b\u0010\u0091\u0002\u001a\t\u0012\u0004\u0012\u00020\b0\u0091\u0001*\u00020\u0007\u00a2\u0006\u0006\b\u0091\u0002\u0010\u0093\u0002\u001a\u001b\u0010\u0091\u0002\u001a\t\u0012\u0004\u0012\u00020\u000b0\u0091\u0001*\u00020\n\u00a2\u0006\u0006\b\u0091\u0002\u0010\u0094\u0002\u001a\u001b\u0010\u0091\u0002\u001a\t\u0012\u0004\u0012\u00020\u000e0\u0091\u0001*\u00020\r\u00a2\u0006\u0006\b\u0091\u0002\u0010\u0095\u0002\u001a\u001b\u0010\u0091\u0002\u001a\t\u0012\u0004\u0012\u00020\u00110\u0091\u0001*\u00020\u0010\u00a2\u0006\u0006\b\u0091\u0002\u0010\u0096\u0002\u001a\u001b\u0010\u0091\u0002\u001a\t\u0012\u0004\u0012\u00020\u00140\u0091\u0001*\u00020\u0013\u00a2\u0006\u0006\b\u0091\u0002\u0010\u0097\u0002\u001a\u001b\u0010\u0091\u0002\u001a\t\u0012\u0004\u0012\u00020\u00170\u0091\u0001*\u00020\u0016\u00a2\u0006\u0006\b\u0091\u0002\u0010\u0098\u0002\u001a\u001b\u0010\u0091\u0002\u001a\t\u0012\u0004\u0012\u00020\u001a0\u0091\u0001*\u00020\u0019\u00a2\u0006\u0006\b\u0091\u0002\u0010\u0099\u0002\u001a&\u0010\u009a\u0002\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\b\u0012\u0004\u0012\u00028\u00000\u0001\u00a2\u0006\u0006\b\u009a\u0002\u0010\u009b\u0002\u001a\u0014\u0010\u009a\u0002\u001a\u00020\u0004*\u00020\u0004\u00a2\u0006\u0006\b\u009a\u0002\u0010\u009c\u0002\u001a\u0014\u0010\u009a\u0002\u001a\u00020\u0007*\u00020\u0007\u00a2\u0006\u0006\b\u009a\u0002\u0010\u009d\u0002\u001a\u0014\u0010\u009a\u0002\u001a\u00020\n*\u00020\n\u00a2\u0006\u0006\b\u009a\u0002\u0010\u009e\u0002\u001a\u0014\u0010\u009a\u0002\u001a\u00020\r*\u00020\r\u00a2\u0006\u0006\b\u009a\u0002\u0010\u009f\u0002\u001a\u0014\u0010\u009a\u0002\u001a\u00020\u0010*\u00020\u0010\u00a2\u0006\u0006\b\u009a\u0002\u0010\u00a0\u0002\u001a\u0014\u0010\u009a\u0002\u001a\u00020\u0013*\u00020\u0013\u00a2\u0006\u0006\b\u009a\u0002\u0010\u00a1\u0002\u001a\u0014\u0010\u009a\u0002\u001a\u00020\u0016*\u00020\u0016\u00a2\u0006\u0006\b\u009a\u0002\u0010\u00a2\u0002\u001a\u0014\u0010\u009a\u0002\u001a\u00020\u0019*\u00020\u0019\u00a2\u0006\u0006\b\u009a\u0002\u0010\u00a3\u0002\u001aQ\u0010\u00a6\u0002\u001a\u00030\u0086\u0002\"\u0004\b\u0000\u0010\u0000\"\u0010\b\u0001\u0010\u00c3\u0001*\t\u0012\u0004\u0012\u00028\u00010\u00a4\u0002*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0017\b\u0004\u0010\u00a5\u0002\u001a\u0010\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00a6\u0002\u0010\u00a7\u0002\u001aQ\u0010\u00a8\u0002\u001a\u00030\u0086\u0002\"\u0004\b\u0000\u0010\u0000\"\u0010\b\u0001\u0010\u00c3\u0001*\t\u0012\u0004\u0012\u00028\u00010\u00a4\u0002*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0017\b\u0004\u0010\u00a5\u0002\u001a\u0010\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00a8\u0002\u0010\u00a7\u0002\u001a.\u0010\u00a9\u0002\u001a\u00030\u0086\u0002\"\u000f\b\u0000\u0010\u0000*\t\u0012\u0004\u0012\u00028\u00000\u00a4\u0002*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u0001\u00a2\u0006\u0006\b\u00a9\u0002\u0010\u00aa\u0002\u001a\u0015\u0010\u00a9\u0002\u001a\u00030\u0086\u0002*\u00020\u0004\u00a2\u0006\u0006\b\u00a9\u0002\u0010\u0089\u0002\u001a\u0015\u0010\u00a9\u0002\u001a\u00030\u0086\u0002*\u00020\u0007\u00a2\u0006\u0006\b\u00a9\u0002\u0010\u008a\u0002\u001a\u0015\u0010\u00a9\u0002\u001a\u00030\u0086\u0002*\u00020\n\u00a2\u0006\u0006\b\u00a9\u0002\u0010\u008b\u0002\u001a\u0015\u0010\u00a9\u0002\u001a\u00030\u0086\u0002*\u00020\r\u00a2\u0006\u0006\b\u00a9\u0002\u0010\u008c\u0002\u001a\u0015\u0010\u00a9\u0002\u001a\u00030\u0086\u0002*\u00020\u0010\u00a2\u0006\u0006\b\u00a9\u0002\u0010\u008d\u0002\u001a\u0015\u0010\u00a9\u0002\u001a\u00030\u0086\u0002*\u00020\u0013\u00a2\u0006\u0006\b\u00a9\u0002\u0010\u008e\u0002\u001a\u0015\u0010\u00a9\u0002\u001a\u00030\u0086\u0002*\u00020\u0019\u00a2\u0006\u0006\b\u00a9\u0002\u0010\u0090\u0002\u001a4\u0010\u00ab\u0002\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u000f\b\u0000\u0010\u0000*\t\u0012\u0004\u0012\u00028\u00000\u00a4\u0002*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u0001\u00a2\u0006\u0006\b\u00ab\u0002\u0010\u00ac\u0002\u001a\u001b\u0010\u00ab\u0002\u001a\t\u0012\u0004\u0012\u00020\u00050\u0091\u0001*\u00020\u0004\u00a2\u0006\u0006\b\u00ab\u0002\u0010\u0092\u0002\u001a\u001b\u0010\u00ab\u0002\u001a\t\u0012\u0004\u0012\u00020\b0\u0091\u0001*\u00020\u0007\u00a2\u0006\u0006\b\u00ab\u0002\u0010\u0093\u0002\u001a\u001b\u0010\u00ab\u0002\u001a\t\u0012\u0004\u0012\u00020\u000b0\u0091\u0001*\u00020\n\u00a2\u0006\u0006\b\u00ab\u0002\u0010\u0094\u0002\u001a\u001b\u0010\u00ab\u0002\u001a\t\u0012\u0004\u0012\u00020\u000e0\u0091\u0001*\u00020\r\u00a2\u0006\u0006\b\u00ab\u0002\u0010\u0095\u0002\u001a\u001b\u0010\u00ab\u0002\u001a\t\u0012\u0004\u0012\u00020\u00110\u0091\u0001*\u00020\u0010\u00a2\u0006\u0006\b\u00ab\u0002\u0010\u0096\u0002\u001a\u001b\u0010\u00ab\u0002\u001a\t\u0012\u0004\u0012\u00020\u00140\u0091\u0001*\u00020\u0013\u00a2\u0006\u0006\b\u00ab\u0002\u0010\u0097\u0002\u001a\u001b\u0010\u00ab\u0002\u001a\t\u0012\u0004\u0012\u00020\u001a0\u0091\u0001*\u00020\u0019\u00a2\u0006\u0006\b\u00ab\u0002\u0010\u0099\u0002\u001a1\u0010\u00ad\u0002\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u000f\b\u0000\u0010\u0000*\t\u0012\u0004\u0012\u00028\u00000\u00a4\u0002*\b\u0012\u0004\u0012\u00028\u00000\u0001\u00a2\u0006\u0006\b\u00ad\u0002\u0010\u00ae\u0002\u001a\u0014\u0010\u00ad\u0002\u001a\u00020\u0004*\u00020\u0004\u00a2\u0006\u0006\b\u00ad\u0002\u0010\u009c\u0002\u001a\u0014\u0010\u00ad\u0002\u001a\u00020\u0007*\u00020\u0007\u00a2\u0006\u0006\b\u00ad\u0002\u0010\u009d\u0002\u001a\u0014\u0010\u00ad\u0002\u001a\u00020\n*\u00020\n\u00a2\u0006\u0006\b\u00ad\u0002\u0010\u009e\u0002\u001a\u0014\u0010\u00ad\u0002\u001a\u00020\r*\u00020\r\u00a2\u0006\u0006\b\u00ad\u0002\u0010\u009f\u0002\u001a\u0014\u0010\u00ad\u0002\u001a\u00020\u0010*\u00020\u0010\u00a2\u0006\u0006\b\u00ad\u0002\u0010\u00a0\u0002\u001a\u0014\u0010\u00ad\u0002\u001a\u00020\u0013*\u00020\u0013\u00a2\u0006\u0006\b\u00ad\u0002\u0010\u00a1\u0002\u001a\u0014\u0010\u00ad\u0002\u001a\u00020\u0019*\u00020\u0019\u00a2\u0006\u0006\b\u00ad\u0002\u0010\u00a3\u0002\u001a1\u0010\u00af\u0002\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\u000f\b\u0000\u0010\u0000*\t\u0012\u0004\u0012\u00028\u00000\u00a4\u0002*\b\u0012\u0004\u0012\u00028\u00000\u0001\u00a2\u0006\u0006\b\u00af\u0002\u0010\u00ae\u0002\u001a\u0014\u0010\u00af\u0002\u001a\u00020\u0004*\u00020\u0004\u00a2\u0006\u0006\b\u00af\u0002\u0010\u009c\u0002\u001a\u0014\u0010\u00af\u0002\u001a\u00020\u0007*\u00020\u0007\u00a2\u0006\u0006\b\u00af\u0002\u0010\u009d\u0002\u001a\u0014\u0010\u00af\u0002\u001a\u00020\n*\u00020\n\u00a2\u0006\u0006\b\u00af\u0002\u0010\u009e\u0002\u001a\u0014\u0010\u00af\u0002\u001a\u00020\r*\u00020\r\u00a2\u0006\u0006\b\u00af\u0002\u0010\u009f\u0002\u001a\u0014\u0010\u00af\u0002\u001a\u00020\u0010*\u00020\u0010\u00a2\u0006\u0006\b\u00af\u0002\u0010\u00a0\u0002\u001a\u0014\u0010\u00af\u0002\u001a\u00020\u0013*\u00020\u0013\u00a2\u0006\u0006\b\u00af\u0002\u0010\u00a1\u0002\u001a\u0014\u0010\u00af\u0002\u001a\u00020\u0019*\u00020\u0019\u00a2\u0006\u0006\b\u00af\u0002\u0010\u00a3\u0002\u001aI\u0010\u00b3\u0002\u001a\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u0001\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u001d\u0010\u00b2\u0002\u001a\u0018\u0012\u0006\b\u0000\u0012\u00028\u00000\u00b0\u0002j\u000b\u0012\u0006\b\u0000\u0012\u00028\u0000`\u00b1\u0002\u00a2\u0006\u0006\b\u00b3\u0002\u0010\u00b4\u0002\u001aW\u0010\u00b5\u0002\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0004\b\u0000\u0010\u0000\"\u0010\b\u0001\u0010\u00c3\u0001*\t\u0012\u0004\u0012\u00028\u00010\u00a4\u0002*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0017\b\u0004\u0010\u00a5\u0002\u001a\u0010\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00b5\u0002\u0010\u009e\u0001\u001aI\u0010\u00b5\u0002\u001a\t\u0012\u0004\u0012\u00020\u00050\u0091\u0001\"\u0010\b\u0000\u0010\u00c3\u0001*\t\u0012\u0004\u0012\u00028\u00000\u00a4\u0002*\u00020\u00042\u0017\b\u0004\u0010\u00a5\u0002\u001a\u0010\u0012\u0004\u0012\u00020\u0005\u0012\u0006\u0012\u0004\u0018\u00018\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00b5\u0002\u0010\u009f\u0001\u001aI\u0010\u00b5\u0002\u001a\t\u0012\u0004\u0012\u00020\b0\u0091\u0001\"\u0010\b\u0000\u0010\u00c3\u0001*\t\u0012\u0004\u0012\u00028\u00000\u00a4\u0002*\u00020\u00072\u0017\b\u0004\u0010\u00a5\u0002\u001a\u0010\u0012\u0004\u0012\u00020\b\u0012\u0006\u0012\u0004\u0018\u00018\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00b5\u0002\u0010\u00a0\u0001\u001aI\u0010\u00b5\u0002\u001a\t\u0012\u0004\u0012\u00020\u000b0\u0091\u0001\"\u0010\b\u0000\u0010\u00c3\u0001*\t\u0012\u0004\u0012\u00028\u00000\u00a4\u0002*\u00020\n2\u0017\b\u0004\u0010\u00a5\u0002\u001a\u0010\u0012\u0004\u0012\u00020\u000b\u0012\u0006\u0012\u0004\u0018\u00018\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00b5\u0002\u0010\u00a1\u0001\u001aI\u0010\u00b5\u0002\u001a\t\u0012\u0004\u0012\u00020\u000e0\u0091\u0001\"\u0010\b\u0000\u0010\u00c3\u0001*\t\u0012\u0004\u0012\u00028\u00000\u00a4\u0002*\u00020\r2\u0017\b\u0004\u0010\u00a5\u0002\u001a\u0010\u0012\u0004\u0012\u00020\u000e\u0012\u0006\u0012\u0004\u0018\u00018\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00b5\u0002\u0010\u00a2\u0001\u001aI\u0010\u00b5\u0002\u001a\t\u0012\u0004\u0012\u00020\u00110\u0091\u0001\"\u0010\b\u0000\u0010\u00c3\u0001*\t\u0012\u0004\u0012\u00028\u00000\u00a4\u0002*\u00020\u00102\u0017\b\u0004\u0010\u00a5\u0002\u001a\u0010\u0012\u0004\u0012\u00020\u0011\u0012\u0006\u0012\u0004\u0018\u00018\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00b5\u0002\u0010\u00a3\u0001\u001aI\u0010\u00b5\u0002\u001a\t\u0012\u0004\u0012\u00020\u00140\u0091\u0001\"\u0010\b\u0000\u0010\u00c3\u0001*\t\u0012\u0004\u0012\u00028\u00000\u00a4\u0002*\u00020\u00132\u0017\b\u0004\u0010\u00a5\u0002\u001a\u0010\u0012\u0004\u0012\u00020\u0014\u0012\u0006\u0012\u0004\u0018\u00018\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00b5\u0002\u0010\u00a4\u0001\u001aI\u0010\u00b5\u0002\u001a\t\u0012\u0004\u0012\u00020\u00170\u0091\u0001\"\u0010\b\u0000\u0010\u00c3\u0001*\t\u0012\u0004\u0012\u00028\u00000\u00a4\u0002*\u00020\u00162\u0017\b\u0004\u0010\u00a5\u0002\u001a\u0010\u0012\u0004\u0012\u00020\u0017\u0012\u0006\u0012\u0004\u0018\u00018\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00b5\u0002\u0010\u00a5\u0001\u001aI\u0010\u00b5\u0002\u001a\t\u0012\u0004\u0012\u00020\u001a0\u0091\u0001\"\u0010\b\u0000\u0010\u00c3\u0001*\t\u0012\u0004\u0012\u00028\u00000\u00a4\u0002*\u00020\u00192\u0017\b\u0004\u0010\u00a5\u0002\u001a\u0010\u0012\u0004\u0012\u00020\u001a\u0012\u0006\u0012\u0004\u0018\u00018\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00b5\u0002\u0010\u00a6\u0001\u001aW\u0010\u00b6\u0002\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0004\b\u0000\u0010\u0000\"\u0010\b\u0001\u0010\u00c3\u0001*\t\u0012\u0004\u0012\u00028\u00010\u00a4\u0002*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0017\b\u0004\u0010\u00a5\u0002\u001a\u0010\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00b6\u0002\u0010\u009e\u0001\u001aI\u0010\u00b6\u0002\u001a\t\u0012\u0004\u0012\u00020\u00050\u0091\u0001\"\u0010\b\u0000\u0010\u00c3\u0001*\t\u0012\u0004\u0012\u00028\u00000\u00a4\u0002*\u00020\u00042\u0017\b\u0004\u0010\u00a5\u0002\u001a\u0010\u0012\u0004\u0012\u00020\u0005\u0012\u0006\u0012\u0004\u0018\u00018\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00b6\u0002\u0010\u009f\u0001\u001aI\u0010\u00b6\u0002\u001a\t\u0012\u0004\u0012\u00020\b0\u0091\u0001\"\u0010\b\u0000\u0010\u00c3\u0001*\t\u0012\u0004\u0012\u00028\u00000\u00a4\u0002*\u00020\u00072\u0017\b\u0004\u0010\u00a5\u0002\u001a\u0010\u0012\u0004\u0012\u00020\b\u0012\u0006\u0012\u0004\u0018\u00018\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00b6\u0002\u0010\u00a0\u0001\u001aI\u0010\u00b6\u0002\u001a\t\u0012\u0004\u0012\u00020\u000b0\u0091\u0001\"\u0010\b\u0000\u0010\u00c3\u0001*\t\u0012\u0004\u0012\u00028\u00000\u00a4\u0002*\u00020\n2\u0017\b\u0004\u0010\u00a5\u0002\u001a\u0010\u0012\u0004\u0012\u00020\u000b\u0012\u0006\u0012\u0004\u0018\u00018\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00b6\u0002\u0010\u00a1\u0001\u001aI\u0010\u00b6\u0002\u001a\t\u0012\u0004\u0012\u00020\u000e0\u0091\u0001\"\u0010\b\u0000\u0010\u00c3\u0001*\t\u0012\u0004\u0012\u00028\u00000\u00a4\u0002*\u00020\r2\u0017\b\u0004\u0010\u00a5\u0002\u001a\u0010\u0012\u0004\u0012\u00020\u000e\u0012\u0006\u0012\u0004\u0018\u00018\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00b6\u0002\u0010\u00a2\u0001\u001aI\u0010\u00b6\u0002\u001a\t\u0012\u0004\u0012\u00020\u00110\u0091\u0001\"\u0010\b\u0000\u0010\u00c3\u0001*\t\u0012\u0004\u0012\u00028\u00000\u00a4\u0002*\u00020\u00102\u0017\b\u0004\u0010\u00a5\u0002\u001a\u0010\u0012\u0004\u0012\u00020\u0011\u0012\u0006\u0012\u0004\u0018\u00018\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00b6\u0002\u0010\u00a3\u0001\u001aI\u0010\u00b6\u0002\u001a\t\u0012\u0004\u0012\u00020\u00140\u0091\u0001\"\u0010\b\u0000\u0010\u00c3\u0001*\t\u0012\u0004\u0012\u00028\u00000\u00a4\u0002*\u00020\u00132\u0017\b\u0004\u0010\u00a5\u0002\u001a\u0010\u0012\u0004\u0012\u00020\u0014\u0012\u0006\u0012\u0004\u0018\u00018\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00b6\u0002\u0010\u00a4\u0001\u001aI\u0010\u00b6\u0002\u001a\t\u0012\u0004\u0012\u00020\u00170\u0091\u0001\"\u0010\b\u0000\u0010\u00c3\u0001*\t\u0012\u0004\u0012\u00028\u00000\u00a4\u0002*\u00020\u00162\u0017\b\u0004\u0010\u00a5\u0002\u001a\u0010\u0012\u0004\u0012\u00020\u0017\u0012\u0006\u0012\u0004\u0018\u00018\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00b6\u0002\u0010\u00a5\u0001\u001aI\u0010\u00b6\u0002\u001a\t\u0012\u0004\u0012\u00020\u001a0\u0091\u0001\"\u0010\b\u0000\u0010\u00c3\u0001*\t\u0012\u0004\u0012\u00028\u00000\u00a4\u0002*\u00020\u00192\u0017\b\u0004\u0010\u00a5\u0002\u001a\u0010\u0012\u0004\u0012\u00020\u001a\u0012\u0006\u0012\u0004\u0018\u00018\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00b6\u0002\u0010\u00a6\u0001\u001a4\u0010\u00b7\u0002\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u000f\b\u0000\u0010\u0000*\t\u0012\u0004\u0012\u00028\u00000\u00a4\u0002*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u0001\u00a2\u0006\u0006\b\u00b7\u0002\u0010\u00ac\u0002\u001a\u001b\u0010\u00b7\u0002\u001a\t\u0012\u0004\u0012\u00020\u00050\u0091\u0001*\u00020\u0004\u00a2\u0006\u0006\b\u00b7\u0002\u0010\u0092\u0002\u001a\u001b\u0010\u00b7\u0002\u001a\t\u0012\u0004\u0012\u00020\b0\u0091\u0001*\u00020\u0007\u00a2\u0006\u0006\b\u00b7\u0002\u0010\u0093\u0002\u001a\u001b\u0010\u00b7\u0002\u001a\t\u0012\u0004\u0012\u00020\u000b0\u0091\u0001*\u00020\n\u00a2\u0006\u0006\b\u00b7\u0002\u0010\u0094\u0002\u001a\u001b\u0010\u00b7\u0002\u001a\t\u0012\u0004\u0012\u00020\u000e0\u0091\u0001*\u00020\r\u00a2\u0006\u0006\b\u00b7\u0002\u0010\u0095\u0002\u001a\u001b\u0010\u00b7\u0002\u001a\t\u0012\u0004\u0012\u00020\u00110\u0091\u0001*\u00020\u0010\u00a2\u0006\u0006\b\u00b7\u0002\u0010\u0096\u0002\u001a\u001b\u0010\u00b7\u0002\u001a\t\u0012\u0004\u0012\u00020\u00140\u0091\u0001*\u00020\u0013\u00a2\u0006\u0006\b\u00b7\u0002\u0010\u0097\u0002\u001a\u001b\u0010\u00b7\u0002\u001a\t\u0012\u0004\u0012\u00020\u001a0\u0091\u0001*\u00020\u0019\u00a2\u0006\u0006\b\u00b7\u0002\u0010\u0099\u0002\u001aH\u0010\u00b8\u0002\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u001d\u0010\u00b2\u0002\u001a\u0018\u0012\u0006\b\u0000\u0012\u00028\u00000\u00b0\u0002j\u000b\u0012\u0006\b\u0000\u0012\u00028\u0000`\u00b1\u0002\u00a2\u0006\u0006\b\u00b8\u0002\u0010\u00b9\u0002\u001a:\u0010\u00b8\u0002\u001a\t\u0012\u0004\u0012\u00020\u00050\u0091\u0001*\u00020\u00042\u001d\u0010\u00b2\u0002\u001a\u0018\u0012\u0006\b\u0000\u0012\u00020\u00050\u00b0\u0002j\u000b\u0012\u0006\b\u0000\u0012\u00020\u0005`\u00b1\u0002\u00a2\u0006\u0006\b\u00b8\u0002\u0010\u00ba\u0002\u001a:\u0010\u00b8\u0002\u001a\t\u0012\u0004\u0012\u00020\b0\u0091\u0001*\u00020\u00072\u001d\u0010\u00b2\u0002\u001a\u0018\u0012\u0006\b\u0000\u0012\u00020\b0\u00b0\u0002j\u000b\u0012\u0006\b\u0000\u0012\u00020\b`\u00b1\u0002\u00a2\u0006\u0006\b\u00b8\u0002\u0010\u00bb\u0002\u001a:\u0010\u00b8\u0002\u001a\t\u0012\u0004\u0012\u00020\u000b0\u0091\u0001*\u00020\n2\u001d\u0010\u00b2\u0002\u001a\u0018\u0012\u0006\b\u0000\u0012\u00020\u000b0\u00b0\u0002j\u000b\u0012\u0006\b\u0000\u0012\u00020\u000b`\u00b1\u0002\u00a2\u0006\u0006\b\u00b8\u0002\u0010\u00bc\u0002\u001a:\u0010\u00b8\u0002\u001a\t\u0012\u0004\u0012\u00020\u000e0\u0091\u0001*\u00020\r2\u001d\u0010\u00b2\u0002\u001a\u0018\u0012\u0006\b\u0000\u0012\u00020\u000e0\u00b0\u0002j\u000b\u0012\u0006\b\u0000\u0012\u00020\u000e`\u00b1\u0002\u00a2\u0006\u0006\b\u00b8\u0002\u0010\u00bd\u0002\u001a:\u0010\u00b8\u0002\u001a\t\u0012\u0004\u0012\u00020\u00110\u0091\u0001*\u00020\u00102\u001d\u0010\u00b2\u0002\u001a\u0018\u0012\u0006\b\u0000\u0012\u00020\u00110\u00b0\u0002j\u000b\u0012\u0006\b\u0000\u0012\u00020\u0011`\u00b1\u0002\u00a2\u0006\u0006\b\u00b8\u0002\u0010\u00be\u0002\u001a:\u0010\u00b8\u0002\u001a\t\u0012\u0004\u0012\u00020\u00140\u0091\u0001*\u00020\u00132\u001d\u0010\u00b2\u0002\u001a\u0018\u0012\u0006\b\u0000\u0012\u00020\u00140\u00b0\u0002j\u000b\u0012\u0006\b\u0000\u0012\u00020\u0014`\u00b1\u0002\u00a2\u0006\u0006\b\u00b8\u0002\u0010\u00bf\u0002\u001a:\u0010\u00b8\u0002\u001a\t\u0012\u0004\u0012\u00020\u00170\u0091\u0001*\u00020\u00162\u001d\u0010\u00b2\u0002\u001a\u0018\u0012\u0006\b\u0000\u0012\u00020\u00170\u00b0\u0002j\u000b\u0012\u0006\b\u0000\u0012\u00020\u0017`\u00b1\u0002\u00a2\u0006\u0006\b\u00b8\u0002\u0010\u00c0\u0002\u001a:\u0010\u00b8\u0002\u001a\t\u0012\u0004\u0012\u00020\u001a0\u0091\u0001*\u00020\u00192\u001d\u0010\u00b2\u0002\u001a\u0018\u0012\u0006\b\u0000\u0012\u00020\u001a0\u00b0\u0002j\u000b\u0012\u0006\b\u0000\u0012\u00020\u001a`\u00b1\u0002\u00a2\u0006\u0006\b\u00b8\u0002\u0010\u00c1\u0002\u001a%\u0010\u00c2\u0002\u001a\u00020\u0017\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u0001H\u0087\b\u00a2\u0006\u0006\b\u00c2\u0002\u0010\u00c3\u0002\u001a\u0017\u0010\u00c2\u0002\u001a\u00020\u0017*\u00020\u0004H\u0087\b\u00a2\u0006\u0006\b\u00c2\u0002\u0010\u00c4\u0002\u001a\u0017\u0010\u00c2\u0002\u001a\u00020\u0017*\u00020\u0007H\u0087\b\u00a2\u0006\u0006\b\u00c2\u0002\u0010\u00c5\u0002\u001a\u0017\u0010\u00c2\u0002\u001a\u00020\u0017*\u00020\nH\u0087\b\u00a2\u0006\u0006\b\u00c2\u0002\u0010\u00c6\u0002\u001a\u0017\u0010\u00c2\u0002\u001a\u00020\u0017*\u00020\rH\u0087\b\u00a2\u0006\u0006\b\u00c2\u0002\u0010\u00c7\u0002\u001a\u0017\u0010\u00c2\u0002\u001a\u00020\u0017*\u00020\u0010H\u0087\b\u00a2\u0006\u0006\b\u00c2\u0002\u0010\u00c8\u0002\u001a\u0017\u0010\u00c2\u0002\u001a\u00020\u0017*\u00020\u0013H\u0087\b\u00a2\u0006\u0006\b\u00c2\u0002\u0010\u00c9\u0002\u001a\u0016\u0010\u00c2\u0002\u001a\u00020\u0017*\u00020\u0016H\u0087\b\u00a2\u0006\u0005\b\u00c2\u0002\u0010\u0018\u001a\u0017\u0010\u00c2\u0002\u001a\u00020\u0017*\u00020\u0019H\u0087\b\u00a2\u0006\u0006\b\u00c2\u0002\u0010\u00ca\u0002\u001a%\u0010\u00cb\u0002\u001a\u00020\u0017\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u0001H\u0087\b\u00a2\u0006\u0006\b\u00cb\u0002\u0010\u00c3\u0002\u001a\u0017\u0010\u00cb\u0002\u001a\u00020\u0017*\u00020\u0004H\u0087\b\u00a2\u0006\u0006\b\u00cb\u0002\u0010\u00c4\u0002\u001a\u0017\u0010\u00cb\u0002\u001a\u00020\u0017*\u00020\u0007H\u0087\b\u00a2\u0006\u0006\b\u00cb\u0002\u0010\u00c5\u0002\u001a\u0017\u0010\u00cb\u0002\u001a\u00020\u0017*\u00020\nH\u0087\b\u00a2\u0006\u0006\b\u00cb\u0002\u0010\u00c6\u0002\u001a\u0017\u0010\u00cb\u0002\u001a\u00020\u0017*\u00020\rH\u0087\b\u00a2\u0006\u0006\b\u00cb\u0002\u0010\u00c7\u0002\u001a\u0017\u0010\u00cb\u0002\u001a\u00020\u0017*\u00020\u0010H\u0087\b\u00a2\u0006\u0006\b\u00cb\u0002\u0010\u00c8\u0002\u001a\u0017\u0010\u00cb\u0002\u001a\u00020\u0017*\u00020\u0013H\u0087\b\u00a2\u0006\u0006\b\u00cb\u0002\u0010\u00c9\u0002\u001a\u0016\u0010\u00cb\u0002\u001a\u00020\u0017*\u00020\u0016H\u0087\b\u00a2\u0006\u0005\b\u00cb\u0002\u0010\u0018\u001a\u0017\u0010\u00cb\u0002\u001a\u00020\u0017*\u00020\u0019H\u0087\b\u00a2\u0006\u0006\b\u00cb\u0002\u0010\u00ca\u0002\u001a\u001c\u0010\u00cc\u0002\u001a\u00020\u0016*\n\u0012\u0006\b\u0001\u0012\u00020\u00170\u0001\u00a2\u0006\u0006\b\u00cc\u0002\u0010\u00cd\u0002\u001a\u001c\u0010\u00ce\u0002\u001a\u00020\u0004*\n\u0012\u0006\b\u0001\u0012\u00020\u00050\u0001\u00a2\u0006\u0006\b\u00ce\u0002\u0010\u00cf\u0002\u001a\u001c\u0010\u00d0\u0002\u001a\u00020\u0019*\n\u0012\u0006\b\u0001\u0012\u00020\u001a0\u0001\u00a2\u0006\u0006\b\u00d0\u0002\u0010\u00d1\u0002\u001a\u001c\u0010\u00d2\u0002\u001a\u00020\u0013*\n\u0012\u0006\b\u0001\u0012\u00020\u00140\u0001\u00a2\u0006\u0006\b\u00d2\u0002\u0010\u00d3\u0002\u001a\u001c\u0010\u00d4\u0002\u001a\u00020\u0010*\n\u0012\u0006\b\u0001\u0012\u00020\u00110\u0001\u00a2\u0006\u0006\b\u00d4\u0002\u0010\u00d5\u0002\u001a\u001c\u0010\u00d6\u0002\u001a\u00020\n*\n\u0012\u0006\b\u0001\u0012\u00020\u000b0\u0001\u00a2\u0006\u0006\b\u00d6\u0002\u0010\u00d7\u0002\u001a\u001c\u0010\u00d8\u0002\u001a\u00020\r*\n\u0012\u0006\b\u0001\u0012\u00020\u000e0\u0001\u00a2\u0006\u0006\b\u00d8\u0002\u0010\u00d9\u0002\u001a\u001c\u0010\u00da\u0002\u001a\u00020\u0007*\n\u0012\u0006\b\u0001\u0012\u00020\b0\u0001\u00a2\u0006\u0006\b\u00da\u0002\u0010\u00db\u0002\u001ab\u0010\u00e1\u0002\u001a\u000f\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00020\u00e0\u0002\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u00dc\u0002\"\u0005\b\u0002\u0010\u00dd\u0002*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012 \u0010\u00df\u0002\u001a\u001b\u0012\u0004\u0012\u00028\u0000\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00020\u00de\u00020-H\u0086\b\u00a2\u0006\u0006\b\u00e1\u0002\u0010\u00e2\u0002\u001aT\u0010\u00e1\u0002\u001a\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00e0\u0002\"\u0005\b\u0000\u0010\u00dc\u0002\"\u0005\b\u0001\u0010\u00dd\u0002*\u00020\u00042 \u0010\u00df\u0002\u001a\u001b\u0012\u0004\u0012\u00020\u0005\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00de\u00020-H\u0086\b\u00a2\u0006\u0006\b\u00e1\u0002\u0010\u00e3\u0002\u001aT\u0010\u00e1\u0002\u001a\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00e0\u0002\"\u0005\b\u0000\u0010\u00dc\u0002\"\u0005\b\u0001\u0010\u00dd\u0002*\u00020\u00072 \u0010\u00df\u0002\u001a\u001b\u0012\u0004\u0012\u00020\b\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00de\u00020-H\u0086\b\u00a2\u0006\u0006\b\u00e1\u0002\u0010\u00e4\u0002\u001aT\u0010\u00e1\u0002\u001a\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00e0\u0002\"\u0005\b\u0000\u0010\u00dc\u0002\"\u0005\b\u0001\u0010\u00dd\u0002*\u00020\n2 \u0010\u00df\u0002\u001a\u001b\u0012\u0004\u0012\u00020\u000b\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00de\u00020-H\u0086\b\u00a2\u0006\u0006\b\u00e1\u0002\u0010\u00e5\u0002\u001aT\u0010\u00e1\u0002\u001a\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00e0\u0002\"\u0005\b\u0000\u0010\u00dc\u0002\"\u0005\b\u0001\u0010\u00dd\u0002*\u00020\r2 \u0010\u00df\u0002\u001a\u001b\u0012\u0004\u0012\u00020\u000e\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00de\u00020-H\u0086\b\u00a2\u0006\u0006\b\u00e1\u0002\u0010\u00e6\u0002\u001aT\u0010\u00e1\u0002\u001a\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00e0\u0002\"\u0005\b\u0000\u0010\u00dc\u0002\"\u0005\b\u0001\u0010\u00dd\u0002*\u00020\u00102 \u0010\u00df\u0002\u001a\u001b\u0012\u0004\u0012\u00020\u0011\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00de\u00020-H\u0086\b\u00a2\u0006\u0006\b\u00e1\u0002\u0010\u00e7\u0002\u001aT\u0010\u00e1\u0002\u001a\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00e0\u0002\"\u0005\b\u0000\u0010\u00dc\u0002\"\u0005\b\u0001\u0010\u00dd\u0002*\u00020\u00132 \u0010\u00df\u0002\u001a\u001b\u0012\u0004\u0012\u00020\u0014\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00de\u00020-H\u0086\b\u00a2\u0006\u0006\b\u00e1\u0002\u0010\u00e8\u0002\u001aT\u0010\u00e1\u0002\u001a\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00e0\u0002\"\u0005\b\u0000\u0010\u00dc\u0002\"\u0005\b\u0001\u0010\u00dd\u0002*\u00020\u00162 \u0010\u00df\u0002\u001a\u001b\u0012\u0004\u0012\u00020\u0017\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00de\u00020-H\u0086\b\u00a2\u0006\u0006\b\u00e1\u0002\u0010\u00e9\u0002\u001aT\u0010\u00e1\u0002\u001a\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00e0\u0002\"\u0005\b\u0000\u0010\u00dc\u0002\"\u0005\b\u0001\u0010\u00dd\u0002*\u00020\u00192 \u0010\u00df\u0002\u001a\u001b\u0012\u0004\u0012\u00020\u001a\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00de\u00020-H\u0086\b\u00a2\u0006\u0006\b\u00e1\u0002\u0010\u00ea\u0002\u001aN\u0010\u00ec\u0002\u001a\u000f\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00000\u00e0\u0002\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u00dc\u0002*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00ec\u0002\u0010\u00e2\u0002\u001a@\u0010\u00ec\u0002\u001a\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00050\u00e0\u0002\"\u0005\b\u0000\u0010\u00dc\u0002*\u00020\u00042\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00ec\u0002\u0010\u00e3\u0002\u001a@\u0010\u00ec\u0002\u001a\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\b0\u00e0\u0002\"\u0005\b\u0000\u0010\u00dc\u0002*\u00020\u00072\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00ec\u0002\u0010\u00e4\u0002\u001a@\u0010\u00ec\u0002\u001a\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0\u00e0\u0002\"\u0005\b\u0000\u0010\u00dc\u0002*\u00020\n2\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00ec\u0002\u0010\u00e5\u0002\u001a@\u0010\u00ec\u0002\u001a\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000e0\u00e0\u0002\"\u0005\b\u0000\u0010\u00dc\u0002*\u00020\r2\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00ec\u0002\u0010\u00e6\u0002\u001a@\u0010\u00ec\u0002\u001a\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00110\u00e0\u0002\"\u0005\b\u0000\u0010\u00dc\u0002*\u00020\u00102\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00ec\u0002\u0010\u00e7\u0002\u001a@\u0010\u00ec\u0002\u001a\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00140\u00e0\u0002\"\u0005\b\u0000\u0010\u00dc\u0002*\u00020\u00132\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00ec\u0002\u0010\u00e8\u0002\u001a@\u0010\u00ec\u0002\u001a\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00170\u00e0\u0002\"\u0005\b\u0000\u0010\u00dc\u0002*\u00020\u00162\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00ec\u0002\u0010\u00e9\u0002\u001a@\u0010\u00ec\u0002\u001a\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u001a0\u00e0\u0002\"\u0005\b\u0000\u0010\u00dc\u0002*\u00020\u00192\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00ec\u0002\u0010\u00ea\u0002\u001aj\u0010\u00ec\u0002\u001a\u000f\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00020\u00e0\u0002\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u00dc\u0002\"\u0005\b\u0002\u0010\u00dd\u0002*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010-2\u0013\u0010\u00ed\u0002\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00020-H\u0086\b\u00a2\u0006\u0006\b\u00ec\u0002\u0010\u00ee\u0002\u001a\\\u0010\u00ec\u0002\u001a\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00e0\u0002\"\u0005\b\u0000\u0010\u00dc\u0002\"\u0005\b\u0001\u0010\u00dd\u0002*\u00020\u00042\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00028\u00000-2\u0013\u0010\u00ed\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00028\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00ec\u0002\u0010\u00ef\u0002\u001a\\\u0010\u00ec\u0002\u001a\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00e0\u0002\"\u0005\b\u0000\u0010\u00dc\u0002\"\u0005\b\u0001\u0010\u00dd\u0002*\u00020\u00072\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00028\u00000-2\u0013\u0010\u00ed\u0002\u001a\u000e\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00028\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00ec\u0002\u0010\u00f0\u0002\u001a\\\u0010\u00ec\u0002\u001a\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00e0\u0002\"\u0005\b\u0000\u0010\u00dc\u0002\"\u0005\b\u0001\u0010\u00dd\u0002*\u00020\n2\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00028\u00000-2\u0013\u0010\u00ed\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00028\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00ec\u0002\u0010\u00f1\u0002\u001a\\\u0010\u00ec\u0002\u001a\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00e0\u0002\"\u0005\b\u0000\u0010\u00dc\u0002\"\u0005\b\u0001\u0010\u00dd\u0002*\u00020\r2\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00028\u00000-2\u0013\u0010\u00ed\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00028\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00ec\u0002\u0010\u00f2\u0002\u001a\\\u0010\u00ec\u0002\u001a\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00e0\u0002\"\u0005\b\u0000\u0010\u00dc\u0002\"\u0005\b\u0001\u0010\u00dd\u0002*\u00020\u00102\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00028\u00000-2\u0013\u0010\u00ed\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00028\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00ec\u0002\u0010\u00f3\u0002\u001a\\\u0010\u00ec\u0002\u001a\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00e0\u0002\"\u0005\b\u0000\u0010\u00dc\u0002\"\u0005\b\u0001\u0010\u00dd\u0002*\u00020\u00132\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00028\u00000-2\u0013\u0010\u00ed\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00028\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00ec\u0002\u0010\u00f4\u0002\u001a\\\u0010\u00ec\u0002\u001a\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00e0\u0002\"\u0005\b\u0000\u0010\u00dc\u0002\"\u0005\b\u0001\u0010\u00dd\u0002*\u00020\u00162\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00028\u00000-2\u0013\u0010\u00ed\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00028\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00ec\u0002\u0010\u00f5\u0002\u001a\\\u0010\u00ec\u0002\u001a\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00e0\u0002\"\u0005\b\u0000\u0010\u00dc\u0002\"\u0005\b\u0001\u0010\u00dd\u0002*\u00020\u00192\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00028\u00000-2\u0013\u0010\u00ed\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00028\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00ec\u0002\u0010\u00f6\u0002\u001af\u0010\u00f9\u0002\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u00dc\u0002\"\u001a\b\u0002\u0010\u00f8\u0002*\u0013\u0012\u0006\b\u0000\u0012\u00028\u0001\u0012\u0006\b\u0000\u0012\u00028\u00000\u00f7\u0002*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0007\u0010\u00b8\u0001\u001a\u00028\u00022\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00f9\u0002\u0010\u00fa\u0002\u001aX\u0010\u00f9\u0002\u001a\u00028\u0001\"\u0005\b\u0000\u0010\u00dc\u0002\"\u001a\b\u0001\u0010\u00f8\u0002*\u0013\u0012\u0006\b\u0000\u0012\u00028\u0000\u0012\u0006\b\u0000\u0012\u00020\u00050\u00f7\u0002*\u00020\u00042\u0007\u0010\u00b8\u0001\u001a\u00028\u00012\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00f9\u0002\u0010\u00fb\u0002\u001aX\u0010\u00f9\u0002\u001a\u00028\u0001\"\u0005\b\u0000\u0010\u00dc\u0002\"\u001a\b\u0001\u0010\u00f8\u0002*\u0013\u0012\u0006\b\u0000\u0012\u00028\u0000\u0012\u0006\b\u0000\u0012\u00020\b0\u00f7\u0002*\u00020\u00072\u0007\u0010\u00b8\u0001\u001a\u00028\u00012\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00f9\u0002\u0010\u00fc\u0002\u001aX\u0010\u00f9\u0002\u001a\u00028\u0001\"\u0005\b\u0000\u0010\u00dc\u0002\"\u001a\b\u0001\u0010\u00f8\u0002*\u0013\u0012\u0006\b\u0000\u0012\u00028\u0000\u0012\u0006\b\u0000\u0012\u00020\u000b0\u00f7\u0002*\u00020\n2\u0007\u0010\u00b8\u0001\u001a\u00028\u00012\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00f9\u0002\u0010\u00fd\u0002\u001aX\u0010\u00f9\u0002\u001a\u00028\u0001\"\u0005\b\u0000\u0010\u00dc\u0002\"\u001a\b\u0001\u0010\u00f8\u0002*\u0013\u0012\u0006\b\u0000\u0012\u00028\u0000\u0012\u0006\b\u0000\u0012\u00020\u000e0\u00f7\u0002*\u00020\r2\u0007\u0010\u00b8\u0001\u001a\u00028\u00012\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00f9\u0002\u0010\u00fe\u0002\u001aX\u0010\u00f9\u0002\u001a\u00028\u0001\"\u0005\b\u0000\u0010\u00dc\u0002\"\u001a\b\u0001\u0010\u00f8\u0002*\u0013\u0012\u0006\b\u0000\u0012\u00028\u0000\u0012\u0006\b\u0000\u0012\u00020\u00110\u00f7\u0002*\u00020\u00102\u0007\u0010\u00b8\u0001\u001a\u00028\u00012\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00f9\u0002\u0010\u00ff\u0002\u001aX\u0010\u00f9\u0002\u001a\u00028\u0001\"\u0005\b\u0000\u0010\u00dc\u0002\"\u001a\b\u0001\u0010\u00f8\u0002*\u0013\u0012\u0006\b\u0000\u0012\u00028\u0000\u0012\u0006\b\u0000\u0012\u00020\u00140\u00f7\u0002*\u00020\u00132\u0007\u0010\u00b8\u0001\u001a\u00028\u00012\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00f9\u0002\u0010\u0080\u0003\u001aX\u0010\u00f9\u0002\u001a\u00028\u0001\"\u0005\b\u0000\u0010\u00dc\u0002\"\u001a\b\u0001\u0010\u00f8\u0002*\u0013\u0012\u0006\b\u0000\u0012\u00028\u0000\u0012\u0006\b\u0000\u0012\u00020\u00170\u00f7\u0002*\u00020\u00162\u0007\u0010\u00b8\u0001\u001a\u00028\u00012\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00f9\u0002\u0010\u0081\u0003\u001aX\u0010\u00f9\u0002\u001a\u00028\u0001\"\u0005\b\u0000\u0010\u00dc\u0002\"\u001a\b\u0001\u0010\u00f8\u0002*\u0013\u0012\u0006\b\u0000\u0012\u00028\u0000\u0012\u0006\b\u0000\u0012\u00020\u001a0\u00f7\u0002*\u00020\u00192\u0007\u0010\u00b8\u0001\u001a\u00028\u00012\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00f9\u0002\u0010\u0082\u0003\u001a\u0082\u0001\u0010\u00f9\u0002\u001a\u00028\u0003\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u00dc\u0002\"\u0005\b\u0002\u0010\u00dd\u0002\"\u001a\b\u0003\u0010\u00f8\u0002*\u0013\u0012\u0006\b\u0000\u0012\u00028\u0001\u0012\u0006\b\u0000\u0012\u00028\u00020\u00f7\u0002*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0007\u0010\u00b8\u0001\u001a\u00028\u00032\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010-2\u0013\u0010\u00ed\u0002\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00020-H\u0086\b\u00a2\u0006\u0006\b\u00f9\u0002\u0010\u0083\u0003\u001at\u0010\u00f9\u0002\u001a\u00028\u0002\"\u0005\b\u0000\u0010\u00dc\u0002\"\u0005\b\u0001\u0010\u00dd\u0002\"\u001a\b\u0002\u0010\u00f8\u0002*\u0013\u0012\u0006\b\u0000\u0012\u00028\u0000\u0012\u0006\b\u0000\u0012\u00028\u00010\u00f7\u0002*\u00020\u00042\u0007\u0010\u00b8\u0001\u001a\u00028\u00022\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00028\u00000-2\u0013\u0010\u00ed\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00028\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00f9\u0002\u0010\u0084\u0003\u001at\u0010\u00f9\u0002\u001a\u00028\u0002\"\u0005\b\u0000\u0010\u00dc\u0002\"\u0005\b\u0001\u0010\u00dd\u0002\"\u001a\b\u0002\u0010\u00f8\u0002*\u0013\u0012\u0006\b\u0000\u0012\u00028\u0000\u0012\u0006\b\u0000\u0012\u00028\u00010\u00f7\u0002*\u00020\u00072\u0007\u0010\u00b8\u0001\u001a\u00028\u00022\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00028\u00000-2\u0013\u0010\u00ed\u0002\u001a\u000e\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00028\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00f9\u0002\u0010\u0085\u0003\u001at\u0010\u00f9\u0002\u001a\u00028\u0002\"\u0005\b\u0000\u0010\u00dc\u0002\"\u0005\b\u0001\u0010\u00dd\u0002\"\u001a\b\u0002\u0010\u00f8\u0002*\u0013\u0012\u0006\b\u0000\u0012\u00028\u0000\u0012\u0006\b\u0000\u0012\u00028\u00010\u00f7\u0002*\u00020\n2\u0007\u0010\u00b8\u0001\u001a\u00028\u00022\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00028\u00000-2\u0013\u0010\u00ed\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00028\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00f9\u0002\u0010\u0086\u0003\u001at\u0010\u00f9\u0002\u001a\u00028\u0002\"\u0005\b\u0000\u0010\u00dc\u0002\"\u0005\b\u0001\u0010\u00dd\u0002\"\u001a\b\u0002\u0010\u00f8\u0002*\u0013\u0012\u0006\b\u0000\u0012\u00028\u0000\u0012\u0006\b\u0000\u0012\u00028\u00010\u00f7\u0002*\u00020\r2\u0007\u0010\u00b8\u0001\u001a\u00028\u00022\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00028\u00000-2\u0013\u0010\u00ed\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00028\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00f9\u0002\u0010\u0087\u0003\u001at\u0010\u00f9\u0002\u001a\u00028\u0002\"\u0005\b\u0000\u0010\u00dc\u0002\"\u0005\b\u0001\u0010\u00dd\u0002\"\u001a\b\u0002\u0010\u00f8\u0002*\u0013\u0012\u0006\b\u0000\u0012\u00028\u0000\u0012\u0006\b\u0000\u0012\u00028\u00010\u00f7\u0002*\u00020\u00102\u0007\u0010\u00b8\u0001\u001a\u00028\u00022\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00028\u00000-2\u0013\u0010\u00ed\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00028\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00f9\u0002\u0010\u0088\u0003\u001at\u0010\u00f9\u0002\u001a\u00028\u0002\"\u0005\b\u0000\u0010\u00dc\u0002\"\u0005\b\u0001\u0010\u00dd\u0002\"\u001a\b\u0002\u0010\u00f8\u0002*\u0013\u0012\u0006\b\u0000\u0012\u00028\u0000\u0012\u0006\b\u0000\u0012\u00028\u00010\u00f7\u0002*\u00020\u00132\u0007\u0010\u00b8\u0001\u001a\u00028\u00022\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00028\u00000-2\u0013\u0010\u00ed\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00028\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00f9\u0002\u0010\u0089\u0003\u001at\u0010\u00f9\u0002\u001a\u00028\u0002\"\u0005\b\u0000\u0010\u00dc\u0002\"\u0005\b\u0001\u0010\u00dd\u0002\"\u001a\b\u0002\u0010\u00f8\u0002*\u0013\u0012\u0006\b\u0000\u0012\u00028\u0000\u0012\u0006\b\u0000\u0012\u00028\u00010\u00f7\u0002*\u00020\u00162\u0007\u0010\u00b8\u0001\u001a\u00028\u00022\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00028\u00000-2\u0013\u0010\u00ed\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00028\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00f9\u0002\u0010\u008a\u0003\u001at\u0010\u00f9\u0002\u001a\u00028\u0002\"\u0005\b\u0000\u0010\u00dc\u0002\"\u0005\b\u0001\u0010\u00dd\u0002\"\u001a\b\u0002\u0010\u00f8\u0002*\u0013\u0012\u0006\b\u0000\u0012\u00028\u0000\u0012\u0006\b\u0000\u0012\u00028\u00010\u00f7\u0002*\u00020\u00192\u0007\u0010\u00b8\u0001\u001a\u00028\u00022\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00028\u00000-2\u0013\u0010\u00ed\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00028\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00f9\u0002\u0010\u008b\u0003\u001az\u0010\u008c\u0003\u001a\u00028\u0003\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u00dc\u0002\"\u0005\b\u0002\u0010\u00dd\u0002\"\u001a\b\u0003\u0010\u00f8\u0002*\u0013\u0012\u0006\b\u0000\u0012\u00028\u0001\u0012\u0006\b\u0000\u0012\u00028\u00020\u00f7\u0002*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0007\u0010\u00b8\u0001\u001a\u00028\u00032 \u0010\u00df\u0002\u001a\u001b\u0012\u0004\u0012\u00028\u0000\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00020\u00de\u00020-H\u0086\b\u00a2\u0006\u0006\b\u008c\u0003\u0010\u00fa\u0002\u001al\u0010\u008c\u0003\u001a\u00028\u0002\"\u0005\b\u0000\u0010\u00dc\u0002\"\u0005\b\u0001\u0010\u00dd\u0002\"\u001a\b\u0002\u0010\u00f8\u0002*\u0013\u0012\u0006\b\u0000\u0012\u00028\u0000\u0012\u0006\b\u0000\u0012\u00028\u00010\u00f7\u0002*\u00020\u00042\u0007\u0010\u00b8\u0001\u001a\u00028\u00022 \u0010\u00df\u0002\u001a\u001b\u0012\u0004\u0012\u00020\u0005\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00de\u00020-H\u0086\b\u00a2\u0006\u0006\b\u008c\u0003\u0010\u00fb\u0002\u001al\u0010\u008c\u0003\u001a\u00028\u0002\"\u0005\b\u0000\u0010\u00dc\u0002\"\u0005\b\u0001\u0010\u00dd\u0002\"\u001a\b\u0002\u0010\u00f8\u0002*\u0013\u0012\u0006\b\u0000\u0012\u00028\u0000\u0012\u0006\b\u0000\u0012\u00028\u00010\u00f7\u0002*\u00020\u00072\u0007\u0010\u00b8\u0001\u001a\u00028\u00022 \u0010\u00df\u0002\u001a\u001b\u0012\u0004\u0012\u00020\b\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00de\u00020-H\u0086\b\u00a2\u0006\u0006\b\u008c\u0003\u0010\u00fc\u0002\u001al\u0010\u008c\u0003\u001a\u00028\u0002\"\u0005\b\u0000\u0010\u00dc\u0002\"\u0005\b\u0001\u0010\u00dd\u0002\"\u001a\b\u0002\u0010\u00f8\u0002*\u0013\u0012\u0006\b\u0000\u0012\u00028\u0000\u0012\u0006\b\u0000\u0012\u00028\u00010\u00f7\u0002*\u00020\n2\u0007\u0010\u00b8\u0001\u001a\u00028\u00022 \u0010\u00df\u0002\u001a\u001b\u0012\u0004\u0012\u00020\u000b\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00de\u00020-H\u0086\b\u00a2\u0006\u0006\b\u008c\u0003\u0010\u00fd\u0002\u001al\u0010\u008c\u0003\u001a\u00028\u0002\"\u0005\b\u0000\u0010\u00dc\u0002\"\u0005\b\u0001\u0010\u00dd\u0002\"\u001a\b\u0002\u0010\u00f8\u0002*\u0013\u0012\u0006\b\u0000\u0012\u00028\u0000\u0012\u0006\b\u0000\u0012\u00028\u00010\u00f7\u0002*\u00020\r2\u0007\u0010\u00b8\u0001\u001a\u00028\u00022 \u0010\u00df\u0002\u001a\u001b\u0012\u0004\u0012\u00020\u000e\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00de\u00020-H\u0086\b\u00a2\u0006\u0006\b\u008c\u0003\u0010\u00fe\u0002\u001al\u0010\u008c\u0003\u001a\u00028\u0002\"\u0005\b\u0000\u0010\u00dc\u0002\"\u0005\b\u0001\u0010\u00dd\u0002\"\u001a\b\u0002\u0010\u00f8\u0002*\u0013\u0012\u0006\b\u0000\u0012\u00028\u0000\u0012\u0006\b\u0000\u0012\u00028\u00010\u00f7\u0002*\u00020\u00102\u0007\u0010\u00b8\u0001\u001a\u00028\u00022 \u0010\u00df\u0002\u001a\u001b\u0012\u0004\u0012\u00020\u0011\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00de\u00020-H\u0086\b\u00a2\u0006\u0006\b\u008c\u0003\u0010\u00ff\u0002\u001al\u0010\u008c\u0003\u001a\u00028\u0002\"\u0005\b\u0000\u0010\u00dc\u0002\"\u0005\b\u0001\u0010\u00dd\u0002\"\u001a\b\u0002\u0010\u00f8\u0002*\u0013\u0012\u0006\b\u0000\u0012\u00028\u0000\u0012\u0006\b\u0000\u0012\u00028\u00010\u00f7\u0002*\u00020\u00132\u0007\u0010\u00b8\u0001\u001a\u00028\u00022 \u0010\u00df\u0002\u001a\u001b\u0012\u0004\u0012\u00020\u0014\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00de\u00020-H\u0086\b\u00a2\u0006\u0006\b\u008c\u0003\u0010\u0080\u0003\u001al\u0010\u008c\u0003\u001a\u00028\u0002\"\u0005\b\u0000\u0010\u00dc\u0002\"\u0005\b\u0001\u0010\u00dd\u0002\"\u001a\b\u0002\u0010\u00f8\u0002*\u0013\u0012\u0006\b\u0000\u0012\u00028\u0000\u0012\u0006\b\u0000\u0012\u00028\u00010\u00f7\u0002*\u00020\u00162\u0007\u0010\u00b8\u0001\u001a\u00028\u00022 \u0010\u00df\u0002\u001a\u001b\u0012\u0004\u0012\u00020\u0017\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00de\u00020-H\u0086\b\u00a2\u0006\u0006\b\u008c\u0003\u0010\u0081\u0003\u001al\u0010\u008c\u0003\u001a\u00028\u0002\"\u0005\b\u0000\u0010\u00dc\u0002\"\u0005\b\u0001\u0010\u00dd\u0002\"\u001a\b\u0002\u0010\u00f8\u0002*\u0013\u0012\u0006\b\u0000\u0012\u00028\u0000\u0012\u0006\b\u0000\u0012\u00028\u00010\u00f7\u0002*\u00020\u00192\u0007\u0010\u00b8\u0001\u001a\u00028\u00022 \u0010\u00df\u0002\u001a\u001b\u0012\u0004\u0012\u00020\u001a\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00de\u00020-H\u0086\b\u00a2\u0006\u0006\b\u008c\u0003\u0010\u0082\u0003\u001a?\u0010\u008d\u0003\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0000\"\u0012\b\u0001\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00028\u00000\u00b6\u0001*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0007\u0010\u00b8\u0001\u001a\u00028\u0001\u00a2\u0006\u0006\b\u008d\u0003\u0010\u00c8\u0001\u001a1\u0010\u008d\u0003\u001a\u00028\u0000\"\u0012\b\u0000\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00020\u00050\u00b6\u0001*\u00020\u00042\u0007\u0010\u00b8\u0001\u001a\u00028\u0000\u00a2\u0006\u0006\b\u008d\u0003\u0010\u008e\u0003\u001a1\u0010\u008d\u0003\u001a\u00028\u0000\"\u0012\b\u0000\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00020\b0\u00b6\u0001*\u00020\u00072\u0007\u0010\u00b8\u0001\u001a\u00028\u0000\u00a2\u0006\u0006\b\u008d\u0003\u0010\u008f\u0003\u001a1\u0010\u008d\u0003\u001a\u00028\u0000\"\u0012\b\u0000\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00020\u000b0\u00b6\u0001*\u00020\n2\u0007\u0010\u00b8\u0001\u001a\u00028\u0000\u00a2\u0006\u0006\b\u008d\u0003\u0010\u0090\u0003\u001a1\u0010\u008d\u0003\u001a\u00028\u0000\"\u0012\b\u0000\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00020\u000e0\u00b6\u0001*\u00020\r2\u0007\u0010\u00b8\u0001\u001a\u00028\u0000\u00a2\u0006\u0006\b\u008d\u0003\u0010\u0091\u0003\u001a1\u0010\u008d\u0003\u001a\u00028\u0000\"\u0012\b\u0000\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00020\u00110\u00b6\u0001*\u00020\u00102\u0007\u0010\u00b8\u0001\u001a\u00028\u0000\u00a2\u0006\u0006\b\u008d\u0003\u0010\u0092\u0003\u001a1\u0010\u008d\u0003\u001a\u00028\u0000\"\u0012\b\u0000\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00020\u00140\u00b6\u0001*\u00020\u00132\u0007\u0010\u00b8\u0001\u001a\u00028\u0000\u00a2\u0006\u0006\b\u008d\u0003\u0010\u0093\u0003\u001a1\u0010\u008d\u0003\u001a\u00028\u0000\"\u0012\b\u0000\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00020\u00170\u00b6\u0001*\u00020\u00162\u0007\u0010\u00b8\u0001\u001a\u00028\u0000\u00a2\u0006\u0006\b\u008d\u0003\u0010\u0094\u0003\u001a1\u0010\u008d\u0003\u001a\u00028\u0000\"\u0012\b\u0000\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00020\u001a0\u00b6\u0001*\u00020\u00192\u0007\u0010\u00b8\u0001\u001a\u00028\u0000\u00a2\u0006\u0006\b\u008d\u0003\u0010\u0095\u0003\u001a4\u0010\u0098\u0003\u001a\u0014\u0012\u0004\u0012\u00028\u00000\u0096\u0003j\t\u0012\u0004\u0012\u00028\u0000`\u0097\u0003\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u0001\u00a2\u0006\u0006\b\u0098\u0003\u0010\u0099\u0003\u001a&\u0010\u0098\u0003\u001a\u0014\u0012\u0004\u0012\u00020\u00050\u0096\u0003j\t\u0012\u0004\u0012\u00020\u0005`\u0097\u0003*\u00020\u0004\u00a2\u0006\u0006\b\u0098\u0003\u0010\u009a\u0003\u001a&\u0010\u0098\u0003\u001a\u0014\u0012\u0004\u0012\u00020\b0\u0096\u0003j\t\u0012\u0004\u0012\u00020\b`\u0097\u0003*\u00020\u0007\u00a2\u0006\u0006\b\u0098\u0003\u0010\u009b\u0003\u001a&\u0010\u0098\u0003\u001a\u0014\u0012\u0004\u0012\u00020\u000b0\u0096\u0003j\t\u0012\u0004\u0012\u00020\u000b`\u0097\u0003*\u00020\n\u00a2\u0006\u0006\b\u0098\u0003\u0010\u009c\u0003\u001a&\u0010\u0098\u0003\u001a\u0014\u0012\u0004\u0012\u00020\u000e0\u0096\u0003j\t\u0012\u0004\u0012\u00020\u000e`\u0097\u0003*\u00020\r\u00a2\u0006\u0006\b\u0098\u0003\u0010\u009d\u0003\u001a&\u0010\u0098\u0003\u001a\u0014\u0012\u0004\u0012\u00020\u00110\u0096\u0003j\t\u0012\u0004\u0012\u00020\u0011`\u0097\u0003*\u00020\u0010\u00a2\u0006\u0006\b\u0098\u0003\u0010\u009e\u0003\u001a&\u0010\u0098\u0003\u001a\u0014\u0012\u0004\u0012\u00020\u00140\u0096\u0003j\t\u0012\u0004\u0012\u00020\u0014`\u0097\u0003*\u00020\u0013\u00a2\u0006\u0006\b\u0098\u0003\u0010\u009f\u0003\u001a&\u0010\u0098\u0003\u001a\u0014\u0012\u0004\u0012\u00020\u00170\u0096\u0003j\t\u0012\u0004\u0012\u00020\u0017`\u0097\u0003*\u00020\u0016\u00a2\u0006\u0006\b\u0098\u0003\u0010\u00a0\u0003\u001a&\u0010\u0098\u0003\u001a\u0014\u0012\u0004\u0012\u00020\u001a0\u0096\u0003j\t\u0012\u0004\u0012\u00020\u001a`\u0097\u0003*\u00020\u0019\u00a2\u0006\u0006\b\u0098\u0003\u0010\u00a1\u0003\u001a)\u0010\u00a2\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u0001\u00a2\u0006\u0006\b\u00a2\u0003\u0010\u00c6\u0001\u001a\u001b\u0010\u00a2\u0003\u001a\t\u0012\u0004\u0012\u00020\u00050\u0091\u0001*\u00020\u0004\u00a2\u0006\u0006\b\u00a2\u0003\u0010\u0092\u0002\u001a\u001b\u0010\u00a2\u0003\u001a\t\u0012\u0004\u0012\u00020\b0\u0091\u0001*\u00020\u0007\u00a2\u0006\u0006\b\u00a2\u0003\u0010\u0093\u0002\u001a\u001b\u0010\u00a2\u0003\u001a\t\u0012\u0004\u0012\u00020\u000b0\u0091\u0001*\u00020\n\u00a2\u0006\u0006\b\u00a2\u0003\u0010\u0094\u0002\u001a\u001b\u0010\u00a2\u0003\u001a\t\u0012\u0004\u0012\u00020\u000e0\u0091\u0001*\u00020\r\u00a2\u0006\u0006\b\u00a2\u0003\u0010\u0095\u0002\u001a\u001b\u0010\u00a2\u0003\u001a\t\u0012\u0004\u0012\u00020\u00110\u0091\u0001*\u00020\u0010\u00a2\u0006\u0006\b\u00a2\u0003\u0010\u0096\u0002\u001a\u001b\u0010\u00a2\u0003\u001a\t\u0012\u0004\u0012\u00020\u00140\u0091\u0001*\u00020\u0013\u00a2\u0006\u0006\b\u00a2\u0003\u0010\u0097\u0002\u001a\u001b\u0010\u00a2\u0003\u001a\t\u0012\u0004\u0012\u00020\u00170\u0091\u0001*\u00020\u0016\u00a2\u0006\u0006\b\u00a2\u0003\u0010\u0098\u0002\u001a\u001b\u0010\u00a2\u0003\u001a\t\u0012\u0004\u0012\u00020\u001a0\u0091\u0001*\u00020\u0019\u00a2\u0006\u0006\b\u00a2\u0003\u0010\u0099\u0002\u001a)\u0010\u00a4\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u00a3\u0003\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u0001\u00a2\u0006\u0006\b\u00a4\u0003\u0010\u00c6\u0001\u001a\u001b\u0010\u00a4\u0003\u001a\t\u0012\u0004\u0012\u00020\u00050\u00a3\u0003*\u00020\u0004\u00a2\u0006\u0006\b\u00a4\u0003\u0010\u0092\u0002\u001a\u001b\u0010\u00a4\u0003\u001a\t\u0012\u0004\u0012\u00020\b0\u00a3\u0003*\u00020\u0007\u00a2\u0006\u0006\b\u00a4\u0003\u0010\u0093\u0002\u001a\u001b\u0010\u00a4\u0003\u001a\t\u0012\u0004\u0012\u00020\u000b0\u00a3\u0003*\u00020\n\u00a2\u0006\u0006\b\u00a4\u0003\u0010\u0094\u0002\u001a\u001b\u0010\u00a4\u0003\u001a\t\u0012\u0004\u0012\u00020\u000e0\u00a3\u0003*\u00020\r\u00a2\u0006\u0006\b\u00a4\u0003\u0010\u0095\u0002\u001a\u001b\u0010\u00a4\u0003\u001a\t\u0012\u0004\u0012\u00020\u00110\u00a3\u0003*\u00020\u0010\u00a2\u0006\u0006\b\u00a4\u0003\u0010\u0096\u0002\u001a\u001b\u0010\u00a4\u0003\u001a\t\u0012\u0004\u0012\u00020\u00140\u00a3\u0003*\u00020\u0013\u00a2\u0006\u0006\b\u00a4\u0003\u0010\u0097\u0002\u001a\u001b\u0010\u00a4\u0003\u001a\t\u0012\u0004\u0012\u00020\u00170\u00a3\u0003*\u00020\u0016\u00a2\u0006\u0006\b\u00a4\u0003\u0010\u0098\u0002\u001a\u001b\u0010\u00a4\u0003\u001a\t\u0012\u0004\u0012\u00020\u001a0\u00a3\u0003*\u00020\u0019\u00a2\u0006\u0006\b\u00a4\u0003\u0010\u0099\u0002\u001a)\u0010\u00a6\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u00a5\u0003\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u0001\u00a2\u0006\u0006\b\u00a6\u0003\u0010\u00a7\u0003\u001a\u001b\u0010\u00a6\u0003\u001a\t\u0012\u0004\u0012\u00020\u00050\u00a5\u0003*\u00020\u0004\u00a2\u0006\u0006\b\u00a6\u0003\u0010\u00a8\u0003\u001a\u001b\u0010\u00a6\u0003\u001a\t\u0012\u0004\u0012\u00020\b0\u00a5\u0003*\u00020\u0007\u00a2\u0006\u0006\b\u00a6\u0003\u0010\u00a9\u0003\u001a\u001b\u0010\u00a6\u0003\u001a\t\u0012\u0004\u0012\u00020\u000b0\u00a5\u0003*\u00020\n\u00a2\u0006\u0006\b\u00a6\u0003\u0010\u00aa\u0003\u001a\u001b\u0010\u00a6\u0003\u001a\t\u0012\u0004\u0012\u00020\u000e0\u00a5\u0003*\u00020\r\u00a2\u0006\u0006\b\u00a6\u0003\u0010\u00ab\u0003\u001a\u001b\u0010\u00a6\u0003\u001a\t\u0012\u0004\u0012\u00020\u00110\u00a5\u0003*\u00020\u0010\u00a2\u0006\u0006\b\u00a6\u0003\u0010\u00ac\u0003\u001a\u001b\u0010\u00a6\u0003\u001a\t\u0012\u0004\u0012\u00020\u00140\u00a5\u0003*\u00020\u0013\u00a2\u0006\u0006\b\u00a6\u0003\u0010\u00ad\u0003\u001a\u001b\u0010\u00a6\u0003\u001a\t\u0012\u0004\u0012\u00020\u00170\u00a5\u0003*\u00020\u0016\u00a2\u0006\u0006\b\u00a6\u0003\u0010\u00ae\u0003\u001a\u001b\u0010\u00a6\u0003\u001a\t\u0012\u0004\u0012\u00020\u001a0\u00a5\u0003*\u00020\u0019\u00a2\u0006\u0006\b\u00a6\u0003\u0010\u00af\u0003\u001aO\u0010\u00b0\u0003\u001a\t\u0012\u0004\u0012\u00028\u00010\u0091\u0001\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u00c3\u0001*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u001a\u0010\u00df\u0002\u001a\u0015\u0012\u0004\u0012\u00028\u0000\u0012\u000b\u0012\t\u0012\u0004\u0012\u00028\u00010\u00e4\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00b0\u0003\u0010\u009e\u0001\u001aA\u0010\u00b0\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00042\u001a\u0010\u00df\u0002\u001a\u0015\u0012\u0004\u0012\u00020\u0005\u0012\u000b\u0012\t\u0012\u0004\u0012\u00028\u00000\u00e4\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00b0\u0003\u0010\u009f\u0001\u001aA\u0010\u00b0\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00072\u001a\u0010\u00df\u0002\u001a\u0015\u0012\u0004\u0012\u00020\b\u0012\u000b\u0012\t\u0012\u0004\u0012\u00028\u00000\u00e4\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00b0\u0003\u0010\u00a0\u0001\u001aA\u0010\u00b0\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\n2\u001a\u0010\u00df\u0002\u001a\u0015\u0012\u0004\u0012\u00020\u000b\u0012\u000b\u0012\t\u0012\u0004\u0012\u00028\u00000\u00e4\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00b0\u0003\u0010\u00a1\u0001\u001aA\u0010\u00b0\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\r2\u001a\u0010\u00df\u0002\u001a\u0015\u0012\u0004\u0012\u00020\u000e\u0012\u000b\u0012\t\u0012\u0004\u0012\u00028\u00000\u00e4\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00b0\u0003\u0010\u00a2\u0001\u001aA\u0010\u00b0\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00102\u001a\u0010\u00df\u0002\u001a\u0015\u0012\u0004\u0012\u00020\u0011\u0012\u000b\u0012\t\u0012\u0004\u0012\u00028\u00000\u00e4\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00b0\u0003\u0010\u00a3\u0001\u001aA\u0010\u00b0\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00132\u001a\u0010\u00df\u0002\u001a\u0015\u0012\u0004\u0012\u00020\u0014\u0012\u000b\u0012\t\u0012\u0004\u0012\u00028\u00000\u00e4\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00b0\u0003\u0010\u00a4\u0001\u001aA\u0010\u00b0\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00162\u001a\u0010\u00df\u0002\u001a\u0015\u0012\u0004\u0012\u00020\u0017\u0012\u000b\u0012\t\u0012\u0004\u0012\u00028\u00000\u00e4\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00b0\u0003\u0010\u00a5\u0001\u001aA\u0010\u00b0\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00192\u001a\u0010\u00df\u0002\u001a\u0015\u0012\u0004\u0012\u00020\u001a\u0012\u000b\u0012\t\u0012\u0004\u0012\u00028\u00000\u00e4\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00b0\u0003\u0010\u00a6\u0001\u001ae\u0010\u00b1\u0003\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u00c3\u0001\"\u0012\b\u0002\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00028\u00010\u00b6\u0001*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0007\u0010\u00b8\u0001\u001a\u00028\u00022\u001a\u0010\u00df\u0002\u001a\u0015\u0012\u0004\u0012\u00028\u0000\u0012\u000b\u0012\t\u0012\u0004\u0012\u00028\u00010\u00e4\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00b1\u0003\u0010\u00ce\u0001\u001aW\u0010\u00b1\u0003\u001a\u00028\u0001\"\u0005\b\u0000\u0010\u00c3\u0001\"\u0012\b\u0001\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00028\u00000\u00b6\u0001*\u00020\u00042\u0007\u0010\u00b8\u0001\u001a\u00028\u00012\u001a\u0010\u00df\u0002\u001a\u0015\u0012\u0004\u0012\u00020\u0005\u0012\u000b\u0012\t\u0012\u0004\u0012\u00028\u00000\u00e4\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00b1\u0003\u0010\u00cf\u0001\u001aW\u0010\u00b1\u0003\u001a\u00028\u0001\"\u0005\b\u0000\u0010\u00c3\u0001\"\u0012\b\u0001\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00028\u00000\u00b6\u0001*\u00020\u00072\u0007\u0010\u00b8\u0001\u001a\u00028\u00012\u001a\u0010\u00df\u0002\u001a\u0015\u0012\u0004\u0012\u00020\b\u0012\u000b\u0012\t\u0012\u0004\u0012\u00028\u00000\u00e4\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00b1\u0003\u0010\u00d0\u0001\u001aW\u0010\u00b1\u0003\u001a\u00028\u0001\"\u0005\b\u0000\u0010\u00c3\u0001\"\u0012\b\u0001\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00028\u00000\u00b6\u0001*\u00020\n2\u0007\u0010\u00b8\u0001\u001a\u00028\u00012\u001a\u0010\u00df\u0002\u001a\u0015\u0012\u0004\u0012\u00020\u000b\u0012\u000b\u0012\t\u0012\u0004\u0012\u00028\u00000\u00e4\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00b1\u0003\u0010\u00d1\u0001\u001aW\u0010\u00b1\u0003\u001a\u00028\u0001\"\u0005\b\u0000\u0010\u00c3\u0001\"\u0012\b\u0001\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00028\u00000\u00b6\u0001*\u00020\r2\u0007\u0010\u00b8\u0001\u001a\u00028\u00012\u001a\u0010\u00df\u0002\u001a\u0015\u0012\u0004\u0012\u00020\u000e\u0012\u000b\u0012\t\u0012\u0004\u0012\u00028\u00000\u00e4\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00b1\u0003\u0010\u00d2\u0001\u001aW\u0010\u00b1\u0003\u001a\u00028\u0001\"\u0005\b\u0000\u0010\u00c3\u0001\"\u0012\b\u0001\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00028\u00000\u00b6\u0001*\u00020\u00102\u0007\u0010\u00b8\u0001\u001a\u00028\u00012\u001a\u0010\u00df\u0002\u001a\u0015\u0012\u0004\u0012\u00020\u0011\u0012\u000b\u0012\t\u0012\u0004\u0012\u00028\u00000\u00e4\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00b1\u0003\u0010\u00d3\u0001\u001aW\u0010\u00b1\u0003\u001a\u00028\u0001\"\u0005\b\u0000\u0010\u00c3\u0001\"\u0012\b\u0001\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00028\u00000\u00b6\u0001*\u00020\u00132\u0007\u0010\u00b8\u0001\u001a\u00028\u00012\u001a\u0010\u00df\u0002\u001a\u0015\u0012\u0004\u0012\u00020\u0014\u0012\u000b\u0012\t\u0012\u0004\u0012\u00028\u00000\u00e4\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00b1\u0003\u0010\u00d4\u0001\u001aW\u0010\u00b1\u0003\u001a\u00028\u0001\"\u0005\b\u0000\u0010\u00c3\u0001\"\u0012\b\u0001\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00028\u00000\u00b6\u0001*\u00020\u00162\u0007\u0010\u00b8\u0001\u001a\u00028\u00012\u001a\u0010\u00df\u0002\u001a\u0015\u0012\u0004\u0012\u00020\u0017\u0012\u000b\u0012\t\u0012\u0004\u0012\u00028\u00000\u00e4\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00b1\u0003\u0010\u00d5\u0001\u001aW\u0010\u00b1\u0003\u001a\u00028\u0001\"\u0005\b\u0000\u0010\u00c3\u0001\"\u0012\b\u0001\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00028\u00000\u00b6\u0001*\u00020\u00192\u0007\u0010\u00b8\u0001\u001a\u00028\u00012\u001a\u0010\u00df\u0002\u001a\u0015\u0012\u0004\u0012\u00020\u001a\u0012\u000b\u0012\t\u0012\u0004\u0012\u00028\u00000\u00e4\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00b1\u0003\u0010\u00d6\u0001\u001aU\u0010\u00b2\u0003\u001a\u0016\u0012\u0004\u0012\u00028\u0001\u0012\u000b\u0012\t\u0012\u0004\u0012\u00028\u00000\u0091\u00010\u00e0\u0002\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u00dc\u0002*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00b2\u0003\u0010\u00e2\u0002\u001aG\u0010\u00b2\u0003\u001a\u0016\u0012\u0004\u0012\u00028\u0000\u0012\u000b\u0012\t\u0012\u0004\u0012\u00020\u00050\u0091\u00010\u00e0\u0002\"\u0005\b\u0000\u0010\u00dc\u0002*\u00020\u00042\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00b2\u0003\u0010\u00e3\u0002\u001aG\u0010\u00b2\u0003\u001a\u0016\u0012\u0004\u0012\u00028\u0000\u0012\u000b\u0012\t\u0012\u0004\u0012\u00020\b0\u0091\u00010\u00e0\u0002\"\u0005\b\u0000\u0010\u00dc\u0002*\u00020\u00072\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00b2\u0003\u0010\u00e4\u0002\u001aG\u0010\u00b2\u0003\u001a\u0016\u0012\u0004\u0012\u00028\u0000\u0012\u000b\u0012\t\u0012\u0004\u0012\u00020\u000b0\u0091\u00010\u00e0\u0002\"\u0005\b\u0000\u0010\u00dc\u0002*\u00020\n2\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00b2\u0003\u0010\u00e5\u0002\u001aG\u0010\u00b2\u0003\u001a\u0016\u0012\u0004\u0012\u00028\u0000\u0012\u000b\u0012\t\u0012\u0004\u0012\u00020\u000e0\u0091\u00010\u00e0\u0002\"\u0005\b\u0000\u0010\u00dc\u0002*\u00020\r2\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00b2\u0003\u0010\u00e6\u0002\u001aG\u0010\u00b2\u0003\u001a\u0016\u0012\u0004\u0012\u00028\u0000\u0012\u000b\u0012\t\u0012\u0004\u0012\u00020\u00110\u0091\u00010\u00e0\u0002\"\u0005\b\u0000\u0010\u00dc\u0002*\u00020\u00102\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00b2\u0003\u0010\u00e7\u0002\u001aG\u0010\u00b2\u0003\u001a\u0016\u0012\u0004\u0012\u00028\u0000\u0012\u000b\u0012\t\u0012\u0004\u0012\u00020\u00140\u0091\u00010\u00e0\u0002\"\u0005\b\u0000\u0010\u00dc\u0002*\u00020\u00132\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00b2\u0003\u0010\u00e8\u0002\u001aG\u0010\u00b2\u0003\u001a\u0016\u0012\u0004\u0012\u00028\u0000\u0012\u000b\u0012\t\u0012\u0004\u0012\u00020\u00170\u0091\u00010\u00e0\u0002\"\u0005\b\u0000\u0010\u00dc\u0002*\u00020\u00162\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00b2\u0003\u0010\u00e9\u0002\u001aG\u0010\u00b2\u0003\u001a\u0016\u0012\u0004\u0012\u00028\u0000\u0012\u000b\u0012\t\u0012\u0004\u0012\u00020\u001a0\u0091\u00010\u00e0\u0002\"\u0005\b\u0000\u0010\u00dc\u0002*\u00020\u00192\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00b2\u0003\u0010\u00ea\u0002\u001aq\u0010\u00b2\u0003\u001a\u0016\u0012\u0004\u0012\u00028\u0001\u0012\u000b\u0012\t\u0012\u0004\u0012\u00028\u00020\u0091\u00010\u00e0\u0002\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u00dc\u0002\"\u0005\b\u0002\u0010\u00dd\u0002*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010-2\u0013\u0010\u00ed\u0002\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00020-H\u0086\b\u00a2\u0006\u0006\b\u00b2\u0003\u0010\u00ee\u0002\u001ac\u0010\u00b2\u0003\u001a\u0016\u0012\u0004\u0012\u00028\u0000\u0012\u000b\u0012\t\u0012\u0004\u0012\u00028\u00010\u0091\u00010\u00e0\u0002\"\u0005\b\u0000\u0010\u00dc\u0002\"\u0005\b\u0001\u0010\u00dd\u0002*\u00020\u00042\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00028\u00000-2\u0013\u0010\u00ed\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00028\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00b2\u0003\u0010\u00ef\u0002\u001ac\u0010\u00b2\u0003\u001a\u0016\u0012\u0004\u0012\u00028\u0000\u0012\u000b\u0012\t\u0012\u0004\u0012\u00028\u00010\u0091\u00010\u00e0\u0002\"\u0005\b\u0000\u0010\u00dc\u0002\"\u0005\b\u0001\u0010\u00dd\u0002*\u00020\u00072\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00028\u00000-2\u0013\u0010\u00ed\u0002\u001a\u000e\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00028\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00b2\u0003\u0010\u00f0\u0002\u001ac\u0010\u00b2\u0003\u001a\u0016\u0012\u0004\u0012\u00028\u0000\u0012\u000b\u0012\t\u0012\u0004\u0012\u00028\u00010\u0091\u00010\u00e0\u0002\"\u0005\b\u0000\u0010\u00dc\u0002\"\u0005\b\u0001\u0010\u00dd\u0002*\u00020\n2\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00028\u00000-2\u0013\u0010\u00ed\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00028\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00b2\u0003\u0010\u00f1\u0002\u001ac\u0010\u00b2\u0003\u001a\u0016\u0012\u0004\u0012\u00028\u0000\u0012\u000b\u0012\t\u0012\u0004\u0012\u00028\u00010\u0091\u00010\u00e0\u0002\"\u0005\b\u0000\u0010\u00dc\u0002\"\u0005\b\u0001\u0010\u00dd\u0002*\u00020\r2\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00028\u00000-2\u0013\u0010\u00ed\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00028\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00b2\u0003\u0010\u00f2\u0002\u001ac\u0010\u00b2\u0003\u001a\u0016\u0012\u0004\u0012\u00028\u0000\u0012\u000b\u0012\t\u0012\u0004\u0012\u00028\u00010\u0091\u00010\u00e0\u0002\"\u0005\b\u0000\u0010\u00dc\u0002\"\u0005\b\u0001\u0010\u00dd\u0002*\u00020\u00102\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00028\u00000-2\u0013\u0010\u00ed\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00028\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00b2\u0003\u0010\u00f3\u0002\u001ac\u0010\u00b2\u0003\u001a\u0016\u0012\u0004\u0012\u00028\u0000\u0012\u000b\u0012\t\u0012\u0004\u0012\u00028\u00010\u0091\u00010\u00e0\u0002\"\u0005\b\u0000\u0010\u00dc\u0002\"\u0005\b\u0001\u0010\u00dd\u0002*\u00020\u00132\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00028\u00000-2\u0013\u0010\u00ed\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00028\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00b2\u0003\u0010\u00f4\u0002\u001ac\u0010\u00b2\u0003\u001a\u0016\u0012\u0004\u0012\u00028\u0000\u0012\u000b\u0012\t\u0012\u0004\u0012\u00028\u00010\u0091\u00010\u00e0\u0002\"\u0005\b\u0000\u0010\u00dc\u0002\"\u0005\b\u0001\u0010\u00dd\u0002*\u00020\u00162\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00028\u00000-2\u0013\u0010\u00ed\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00028\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00b2\u0003\u0010\u00f5\u0002\u001ac\u0010\u00b2\u0003\u001a\u0016\u0012\u0004\u0012\u00028\u0000\u0012\u000b\u0012\t\u0012\u0004\u0012\u00028\u00010\u0091\u00010\u00e0\u0002\"\u0005\b\u0000\u0010\u00dc\u0002\"\u0005\b\u0001\u0010\u00dd\u0002*\u00020\u00192\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00028\u00000-2\u0013\u0010\u00ed\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00028\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00b2\u0003\u0010\u00f6\u0002\u001ak\u0010\u00b3\u0003\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u00dc\u0002\"\u001f\b\u0002\u0010\u00f8\u0002*\u0018\u0012\u0006\b\u0000\u0012\u00028\u0001\u0012\u000b\u0012\t\u0012\u0004\u0012\u00028\u00000\u00a3\u00030\u00f7\u0002*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0007\u0010\u00b8\u0001\u001a\u00028\u00022\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00b3\u0003\u0010\u00fa\u0002\u001a]\u0010\u00b3\u0003\u001a\u00028\u0001\"\u0005\b\u0000\u0010\u00dc\u0002\"\u001f\b\u0001\u0010\u00f8\u0002*\u0018\u0012\u0006\b\u0000\u0012\u00028\u0000\u0012\u000b\u0012\t\u0012\u0004\u0012\u00020\u00050\u00a3\u00030\u00f7\u0002*\u00020\u00042\u0007\u0010\u00b8\u0001\u001a\u00028\u00012\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00b3\u0003\u0010\u00fb\u0002\u001a]\u0010\u00b3\u0003\u001a\u00028\u0001\"\u0005\b\u0000\u0010\u00dc\u0002\"\u001f\b\u0001\u0010\u00f8\u0002*\u0018\u0012\u0006\b\u0000\u0012\u00028\u0000\u0012\u000b\u0012\t\u0012\u0004\u0012\u00020\b0\u00a3\u00030\u00f7\u0002*\u00020\u00072\u0007\u0010\u00b8\u0001\u001a\u00028\u00012\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00b3\u0003\u0010\u00fc\u0002\u001a]\u0010\u00b3\u0003\u001a\u00028\u0001\"\u0005\b\u0000\u0010\u00dc\u0002\"\u001f\b\u0001\u0010\u00f8\u0002*\u0018\u0012\u0006\b\u0000\u0012\u00028\u0000\u0012\u000b\u0012\t\u0012\u0004\u0012\u00020\u000b0\u00a3\u00030\u00f7\u0002*\u00020\n2\u0007\u0010\u00b8\u0001\u001a\u00028\u00012\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00b3\u0003\u0010\u00fd\u0002\u001a]\u0010\u00b3\u0003\u001a\u00028\u0001\"\u0005\b\u0000\u0010\u00dc\u0002\"\u001f\b\u0001\u0010\u00f8\u0002*\u0018\u0012\u0006\b\u0000\u0012\u00028\u0000\u0012\u000b\u0012\t\u0012\u0004\u0012\u00020\u000e0\u00a3\u00030\u00f7\u0002*\u00020\r2\u0007\u0010\u00b8\u0001\u001a\u00028\u00012\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00b3\u0003\u0010\u00fe\u0002\u001a]\u0010\u00b3\u0003\u001a\u00028\u0001\"\u0005\b\u0000\u0010\u00dc\u0002\"\u001f\b\u0001\u0010\u00f8\u0002*\u0018\u0012\u0006\b\u0000\u0012\u00028\u0000\u0012\u000b\u0012\t\u0012\u0004\u0012\u00020\u00110\u00a3\u00030\u00f7\u0002*\u00020\u00102\u0007\u0010\u00b8\u0001\u001a\u00028\u00012\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00b3\u0003\u0010\u00ff\u0002\u001a]\u0010\u00b3\u0003\u001a\u00028\u0001\"\u0005\b\u0000\u0010\u00dc\u0002\"\u001f\b\u0001\u0010\u00f8\u0002*\u0018\u0012\u0006\b\u0000\u0012\u00028\u0000\u0012\u000b\u0012\t\u0012\u0004\u0012\u00020\u00140\u00a3\u00030\u00f7\u0002*\u00020\u00132\u0007\u0010\u00b8\u0001\u001a\u00028\u00012\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00b3\u0003\u0010\u0080\u0003\u001a]\u0010\u00b3\u0003\u001a\u00028\u0001\"\u0005\b\u0000\u0010\u00dc\u0002\"\u001f\b\u0001\u0010\u00f8\u0002*\u0018\u0012\u0006\b\u0000\u0012\u00028\u0000\u0012\u000b\u0012\t\u0012\u0004\u0012\u00020\u00170\u00a3\u00030\u00f7\u0002*\u00020\u00162\u0007\u0010\u00b8\u0001\u001a\u00028\u00012\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00b3\u0003\u0010\u0081\u0003\u001a]\u0010\u00b3\u0003\u001a\u00028\u0001\"\u0005\b\u0000\u0010\u00dc\u0002\"\u001f\b\u0001\u0010\u00f8\u0002*\u0018\u0012\u0006\b\u0000\u0012\u00028\u0000\u0012\u000b\u0012\t\u0012\u0004\u0012\u00020\u001a0\u00a3\u00030\u00f7\u0002*\u00020\u00192\u0007\u0010\u00b8\u0001\u001a\u00028\u00012\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00b3\u0003\u0010\u0082\u0003\u001a\u0087\u0001\u0010\u00b3\u0003\u001a\u00028\u0003\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u00dc\u0002\"\u0005\b\u0002\u0010\u00dd\u0002\"\u001f\b\u0003\u0010\u00f8\u0002*\u0018\u0012\u0006\b\u0000\u0012\u00028\u0001\u0012\u000b\u0012\t\u0012\u0004\u0012\u00028\u00020\u00a3\u00030\u00f7\u0002*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0007\u0010\u00b8\u0001\u001a\u00028\u00032\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010-2\u0013\u0010\u00ed\u0002\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00020-H\u0086\b\u00a2\u0006\u0006\b\u00b3\u0003\u0010\u0083\u0003\u001ay\u0010\u00b3\u0003\u001a\u00028\u0002\"\u0005\b\u0000\u0010\u00dc\u0002\"\u0005\b\u0001\u0010\u00dd\u0002\"\u001f\b\u0002\u0010\u00f8\u0002*\u0018\u0012\u0006\b\u0000\u0012\u00028\u0000\u0012\u000b\u0012\t\u0012\u0004\u0012\u00028\u00010\u00a3\u00030\u00f7\u0002*\u00020\u00042\u0007\u0010\u00b8\u0001\u001a\u00028\u00022\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00028\u00000-2\u0013\u0010\u00ed\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00028\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00b3\u0003\u0010\u0084\u0003\u001ay\u0010\u00b3\u0003\u001a\u00028\u0002\"\u0005\b\u0000\u0010\u00dc\u0002\"\u0005\b\u0001\u0010\u00dd\u0002\"\u001f\b\u0002\u0010\u00f8\u0002*\u0018\u0012\u0006\b\u0000\u0012\u00028\u0000\u0012\u000b\u0012\t\u0012\u0004\u0012\u00028\u00010\u00a3\u00030\u00f7\u0002*\u00020\u00072\u0007\u0010\u00b8\u0001\u001a\u00028\u00022\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00028\u00000-2\u0013\u0010\u00ed\u0002\u001a\u000e\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00028\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00b3\u0003\u0010\u0085\u0003\u001ay\u0010\u00b3\u0003\u001a\u00028\u0002\"\u0005\b\u0000\u0010\u00dc\u0002\"\u0005\b\u0001\u0010\u00dd\u0002\"\u001f\b\u0002\u0010\u00f8\u0002*\u0018\u0012\u0006\b\u0000\u0012\u00028\u0000\u0012\u000b\u0012\t\u0012\u0004\u0012\u00028\u00010\u00a3\u00030\u00f7\u0002*\u00020\n2\u0007\u0010\u00b8\u0001\u001a\u00028\u00022\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00028\u00000-2\u0013\u0010\u00ed\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00028\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00b3\u0003\u0010\u0086\u0003\u001ay\u0010\u00b3\u0003\u001a\u00028\u0002\"\u0005\b\u0000\u0010\u00dc\u0002\"\u0005\b\u0001\u0010\u00dd\u0002\"\u001f\b\u0002\u0010\u00f8\u0002*\u0018\u0012\u0006\b\u0000\u0012\u00028\u0000\u0012\u000b\u0012\t\u0012\u0004\u0012\u00028\u00010\u00a3\u00030\u00f7\u0002*\u00020\r2\u0007\u0010\u00b8\u0001\u001a\u00028\u00022\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00028\u00000-2\u0013\u0010\u00ed\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00028\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00b3\u0003\u0010\u0087\u0003\u001ay\u0010\u00b3\u0003\u001a\u00028\u0002\"\u0005\b\u0000\u0010\u00dc\u0002\"\u0005\b\u0001\u0010\u00dd\u0002\"\u001f\b\u0002\u0010\u00f8\u0002*\u0018\u0012\u0006\b\u0000\u0012\u00028\u0000\u0012\u000b\u0012\t\u0012\u0004\u0012\u00028\u00010\u00a3\u00030\u00f7\u0002*\u00020\u00102\u0007\u0010\u00b8\u0001\u001a\u00028\u00022\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00028\u00000-2\u0013\u0010\u00ed\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00028\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00b3\u0003\u0010\u0088\u0003\u001ay\u0010\u00b3\u0003\u001a\u00028\u0002\"\u0005\b\u0000\u0010\u00dc\u0002\"\u0005\b\u0001\u0010\u00dd\u0002\"\u001f\b\u0002\u0010\u00f8\u0002*\u0018\u0012\u0006\b\u0000\u0012\u00028\u0000\u0012\u000b\u0012\t\u0012\u0004\u0012\u00028\u00010\u00a3\u00030\u00f7\u0002*\u00020\u00132\u0007\u0010\u00b8\u0001\u001a\u00028\u00022\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00028\u00000-2\u0013\u0010\u00ed\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00028\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00b3\u0003\u0010\u0089\u0003\u001ay\u0010\u00b3\u0003\u001a\u00028\u0002\"\u0005\b\u0000\u0010\u00dc\u0002\"\u0005\b\u0001\u0010\u00dd\u0002\"\u001f\b\u0002\u0010\u00f8\u0002*\u0018\u0012\u0006\b\u0000\u0012\u00028\u0000\u0012\u000b\u0012\t\u0012\u0004\u0012\u00028\u00010\u00a3\u00030\u00f7\u0002*\u00020\u00162\u0007\u0010\u00b8\u0001\u001a\u00028\u00022\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00028\u00000-2\u0013\u0010\u00ed\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00028\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00b3\u0003\u0010\u008a\u0003\u001ay\u0010\u00b3\u0003\u001a\u00028\u0002\"\u0005\b\u0000\u0010\u00dc\u0002\"\u0005\b\u0001\u0010\u00dd\u0002\"\u001f\b\u0002\u0010\u00f8\u0002*\u0018\u0012\u0006\b\u0000\u0012\u00028\u0000\u0012\u000b\u0012\t\u0012\u0004\u0012\u00028\u00010\u00a3\u00030\u00f7\u0002*\u00020\u00192\u0007\u0010\u00b8\u0001\u001a\u00028\u00022\u0013\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00028\u00000-2\u0013\u0010\u00ed\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00028\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00b3\u0003\u0010\u008b\u0003\u001aP\u0010\u00b5\u0003\u001a\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00b4\u0003\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u00dc\u0002*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0015\b\u0004\u0010\u00eb\u0002\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010-H\u0087\b\u00a2\u0006\u0006\b\u00b5\u0003\u0010\u00b6\u0003\u001aH\u0010\u00b7\u0003\u001a\t\u0012\u0004\u0012\u00028\u00010\u0091\u0001\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u00c3\u0001*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0013\u0010\u00df\u0002\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00b7\u0003\u0010\u009e\u0001\u001a:\u0010\u00b7\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00042\u0013\u0010\u00df\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00b7\u0003\u0010\u009f\u0001\u001a:\u0010\u00b7\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00072\u0013\u0010\u00df\u0002\u001a\u000e\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00b7\u0003\u0010\u00a0\u0001\u001a:\u0010\u00b7\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\n2\u0013\u0010\u00df\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00b7\u0003\u0010\u00a1\u0001\u001a:\u0010\u00b7\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\r2\u0013\u0010\u00df\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00b7\u0003\u0010\u00a2\u0001\u001a:\u0010\u00b7\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00102\u0013\u0010\u00df\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00b7\u0003\u0010\u00a3\u0001\u001a:\u0010\u00b7\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00132\u0013\u0010\u00df\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00b7\u0003\u0010\u00a4\u0001\u001a:\u0010\u00b7\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00162\u0013\u0010\u00df\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00b7\u0003\u0010\u00a5\u0001\u001a:\u0010\u00b7\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00192\u0013\u0010\u00df\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00b7\u0003\u0010\u00a6\u0001\u001a`\u0010\u00b8\u0003\u001a\t\u0012\u0004\u0012\u00028\u00010\u0091\u0001\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u00c3\u0001*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012+\u0010\u00df\u0002\u001a&\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00b8\u0003\u0010\u00ad\u0001\u001aR\u0010\u00b8\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00042+\u0010\u00df\u0002\u001a&\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00b8\u0003\u0010\u00ae\u0001\u001aR\u0010\u00b8\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00072+\u0010\u00df\u0002\u001a&\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00b8\u0003\u0010\u00af\u0001\u001aR\u0010\u00b8\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\n2+\u0010\u00df\u0002\u001a&\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00b8\u0003\u0010\u00b0\u0001\u001aR\u0010\u00b8\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\r2+\u0010\u00df\u0002\u001a&\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00b8\u0003\u0010\u00b1\u0001\u001aR\u0010\u00b8\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00102+\u0010\u00df\u0002\u001a&\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00b8\u0003\u0010\u00b2\u0001\u001aR\u0010\u00b8\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00132+\u0010\u00df\u0002\u001a&\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00b8\u0003\u0010\u00b3\u0001\u001aR\u0010\u00b8\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00162+\u0010\u00df\u0002\u001a&\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00b8\u0003\u0010\u00b4\u0001\u001aR\u0010\u00b8\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00192+\u0010\u00df\u0002\u001a&\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00b8\u0003\u0010\u00b5\u0001\u001ag\u0010\u00b9\u0003\u001a\t\u0012\u0004\u0012\u00028\u00010\u0091\u0001\"\u0004\b\u0000\u0010\u0000\"\n\b\u0001\u0010\u00c3\u0001*\u00030\u00ca\u0001*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012-\u0010\u00df\u0002\u001a(\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00b9\u0003\u0010\u00ad\u0001\u001a}\u0010\u00ba\u0003\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u0000\"\n\b\u0001\u0010\u00c3\u0001*\u00030\u00ca\u0001\"\u0012\b\u0002\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00028\u00010\u00b6\u0001*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0007\u0010\u00b8\u0001\u001a\u00028\u00022-\u0010\u00df\u0002\u001a(\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00ba\u0003\u0010\u00ba\u0001\u001av\u0010\u00bb\u0003\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u00c3\u0001\"\u0012\b\u0002\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00028\u00010\u00b6\u0001*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0007\u0010\u00b8\u0001\u001a\u00028\u00022+\u0010\u00df\u0002\u001a&\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00bb\u0003\u0010\u00ba\u0001\u001ah\u0010\u00bb\u0003\u001a\u00028\u0001\"\u0005\b\u0000\u0010\u00c3\u0001\"\u0012\b\u0001\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00028\u00000\u00b6\u0001*\u00020\u00042\u0007\u0010\u00b8\u0001\u001a\u00028\u00012+\u0010\u00df\u0002\u001a&\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00bb\u0003\u0010\u00bb\u0001\u001ah\u0010\u00bb\u0003\u001a\u00028\u0001\"\u0005\b\u0000\u0010\u00c3\u0001\"\u0012\b\u0001\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00028\u00000\u00b6\u0001*\u00020\u00072\u0007\u0010\u00b8\u0001\u001a\u00028\u00012+\u0010\u00df\u0002\u001a&\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00bb\u0003\u0010\u00bc\u0001\u001ah\u0010\u00bb\u0003\u001a\u00028\u0001\"\u0005\b\u0000\u0010\u00c3\u0001\"\u0012\b\u0001\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00028\u00000\u00b6\u0001*\u00020\n2\u0007\u0010\u00b8\u0001\u001a\u00028\u00012+\u0010\u00df\u0002\u001a&\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00bb\u0003\u0010\u00bd\u0001\u001ah\u0010\u00bb\u0003\u001a\u00028\u0001\"\u0005\b\u0000\u0010\u00c3\u0001\"\u0012\b\u0001\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00028\u00000\u00b6\u0001*\u00020\r2\u0007\u0010\u00b8\u0001\u001a\u00028\u00012+\u0010\u00df\u0002\u001a&\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00bb\u0003\u0010\u00be\u0001\u001ah\u0010\u00bb\u0003\u001a\u00028\u0001\"\u0005\b\u0000\u0010\u00c3\u0001\"\u0012\b\u0001\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00028\u00000\u00b6\u0001*\u00020\u00102\u0007\u0010\u00b8\u0001\u001a\u00028\u00012+\u0010\u00df\u0002\u001a&\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00bb\u0003\u0010\u00bf\u0001\u001ah\u0010\u00bb\u0003\u001a\u00028\u0001\"\u0005\b\u0000\u0010\u00c3\u0001\"\u0012\b\u0001\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00028\u00000\u00b6\u0001*\u00020\u00132\u0007\u0010\u00b8\u0001\u001a\u00028\u00012+\u0010\u00df\u0002\u001a&\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00bb\u0003\u0010\u00c0\u0001\u001ah\u0010\u00bb\u0003\u001a\u00028\u0001\"\u0005\b\u0000\u0010\u00c3\u0001\"\u0012\b\u0001\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00028\u00000\u00b6\u0001*\u00020\u00162\u0007\u0010\u00b8\u0001\u001a\u00028\u00012+\u0010\u00df\u0002\u001a&\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00bb\u0003\u0010\u00c1\u0001\u001ah\u0010\u00bb\u0003\u001a\u00028\u0001\"\u0005\b\u0000\u0010\u00c3\u0001\"\u0012\b\u0001\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00028\u00000\u00b6\u0001*\u00020\u00192\u0007\u0010\u00b8\u0001\u001a\u00028\u00012+\u0010\u00df\u0002\u001a&\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00bb\u0003\u0010\u00c2\u0001\u001aO\u0010\u00bc\u0003\u001a\t\u0012\u0004\u0012\u00028\u00010\u0091\u0001\"\u0004\b\u0000\u0010\u0000\"\n\b\u0001\u0010\u00c3\u0001*\u00030\u00ca\u0001*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0015\u0010\u00df\u0002\u001a\u0010\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00bc\u0003\u0010\u009e\u0001\u001ae\u0010\u00bd\u0003\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u0000\"\n\b\u0001\u0010\u00c3\u0001*\u00030\u00ca\u0001\"\u0012\b\u0002\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00028\u00010\u00b6\u0001*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0007\u0010\u00b8\u0001\u001a\u00028\u00022\u0015\u0010\u00df\u0002\u001a\u0010\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00bd\u0003\u0010\u00ce\u0001\u001a^\u0010\u00be\u0003\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u00c3\u0001\"\u0012\b\u0002\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00028\u00010\u00b6\u0001*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0007\u0010\u00b8\u0001\u001a\u00028\u00022\u0013\u0010\u00df\u0002\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00be\u0003\u0010\u00ce\u0001\u001aP\u0010\u00be\u0003\u001a\u00028\u0001\"\u0005\b\u0000\u0010\u00c3\u0001\"\u0012\b\u0001\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00028\u00000\u00b6\u0001*\u00020\u00042\u0007\u0010\u00b8\u0001\u001a\u00028\u00012\u0013\u0010\u00df\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00be\u0003\u0010\u00cf\u0001\u001aP\u0010\u00be\u0003\u001a\u00028\u0001\"\u0005\b\u0000\u0010\u00c3\u0001\"\u0012\b\u0001\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00028\u00000\u00b6\u0001*\u00020\u00072\u0007\u0010\u00b8\u0001\u001a\u00028\u00012\u0013\u0010\u00df\u0002\u001a\u000e\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00be\u0003\u0010\u00d0\u0001\u001aP\u0010\u00be\u0003\u001a\u00028\u0001\"\u0005\b\u0000\u0010\u00c3\u0001\"\u0012\b\u0001\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00028\u00000\u00b6\u0001*\u00020\n2\u0007\u0010\u00b8\u0001\u001a\u00028\u00012\u0013\u0010\u00df\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00be\u0003\u0010\u00d1\u0001\u001aP\u0010\u00be\u0003\u001a\u00028\u0001\"\u0005\b\u0000\u0010\u00c3\u0001\"\u0012\b\u0001\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00028\u00000\u00b6\u0001*\u00020\r2\u0007\u0010\u00b8\u0001\u001a\u00028\u00012\u0013\u0010\u00df\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00be\u0003\u0010\u00d2\u0001\u001aP\u0010\u00be\u0003\u001a\u00028\u0001\"\u0005\b\u0000\u0010\u00c3\u0001\"\u0012\b\u0001\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00028\u00000\u00b6\u0001*\u00020\u00102\u0007\u0010\u00b8\u0001\u001a\u00028\u00012\u0013\u0010\u00df\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00be\u0003\u0010\u00d3\u0001\u001aP\u0010\u00be\u0003\u001a\u00028\u0001\"\u0005\b\u0000\u0010\u00c3\u0001\"\u0012\b\u0001\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00028\u00000\u00b6\u0001*\u00020\u00132\u0007\u0010\u00b8\u0001\u001a\u00028\u00012\u0013\u0010\u00df\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00be\u0003\u0010\u00d4\u0001\u001aP\u0010\u00be\u0003\u001a\u00028\u0001\"\u0005\b\u0000\u0010\u00c3\u0001\"\u0012\b\u0001\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00028\u00000\u00b6\u0001*\u00020\u00162\u0007\u0010\u00b8\u0001\u001a\u00028\u00012\u0013\u0010\u00df\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00be\u0003\u0010\u00d5\u0001\u001aP\u0010\u00be\u0003\u001a\u00028\u0001\"\u0005\b\u0000\u0010\u00c3\u0001\"\u0012\b\u0001\u0010\u00b7\u0001*\u000b\u0012\u0006\b\u0000\u0012\u00028\u00000\u00b6\u0001*\u00020\u00192\u0007\u0010\u00b8\u0001\u001a\u00028\u00012\u0013\u0010\u00df\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00be\u0003\u0010\u00d6\u0001\u001a0\u0010\u00c0\u0003\u001a\u0010\u0012\u000b\u0012\t\u0012\u0004\u0012\u00028\u00000\u00bf\u00030\u00e4\u0001\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u0001\u00a2\u0006\u0006\b\u00c0\u0003\u0010\u00c1\u0003\u001a\"\u0010\u00c0\u0003\u001a\u0010\u0012\u000b\u0012\t\u0012\u0004\u0012\u00020\u00050\u00bf\u00030\u00e4\u0001*\u00020\u0004\u00a2\u0006\u0006\b\u00c0\u0003\u0010\u00c2\u0003\u001a\"\u0010\u00c0\u0003\u001a\u0010\u0012\u000b\u0012\t\u0012\u0004\u0012\u00020\b0\u00bf\u00030\u00e4\u0001*\u00020\u0007\u00a2\u0006\u0006\b\u00c0\u0003\u0010\u00c3\u0003\u001a\"\u0010\u00c0\u0003\u001a\u0010\u0012\u000b\u0012\t\u0012\u0004\u0012\u00020\u000b0\u00bf\u00030\u00e4\u0001*\u00020\n\u00a2\u0006\u0006\b\u00c0\u0003\u0010\u00c4\u0003\u001a\"\u0010\u00c0\u0003\u001a\u0010\u0012\u000b\u0012\t\u0012\u0004\u0012\u00020\u000e0\u00bf\u00030\u00e4\u0001*\u00020\r\u00a2\u0006\u0006\b\u00c0\u0003\u0010\u00c5\u0003\u001a\"\u0010\u00c0\u0003\u001a\u0010\u0012\u000b\u0012\t\u0012\u0004\u0012\u00020\u00110\u00bf\u00030\u00e4\u0001*\u00020\u0010\u00a2\u0006\u0006\b\u00c0\u0003\u0010\u00c6\u0003\u001a\"\u0010\u00c0\u0003\u001a\u0010\u0012\u000b\u0012\t\u0012\u0004\u0012\u00020\u00140\u00bf\u00030\u00e4\u0001*\u00020\u0013\u00a2\u0006\u0006\b\u00c0\u0003\u0010\u00c7\u0003\u001a\"\u0010\u00c0\u0003\u001a\u0010\u0012\u000b\u0012\t\u0012\u0004\u0012\u00020\u00170\u00bf\u00030\u00e4\u0001*\u00020\u0016\u00a2\u0006\u0006\b\u00c0\u0003\u0010\u00c8\u0003\u001a\"\u0010\u00c0\u0003\u001a\u0010\u0012\u000b\u0012\t\u0012\u0004\u0012\u00020\u001a0\u00bf\u00030\u00e4\u0001*\u00020\u0019\u00a2\u0006\u0006\b\u00c0\u0003\u0010\u00c9\u0003\u001a)\u0010\u00ca\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u0001\u00a2\u0006\u0006\b\u00ca\u0003\u0010\u00c6\u0001\u001a\u001b\u0010\u00ca\u0003\u001a\t\u0012\u0004\u0012\u00020\u00050\u0091\u0001*\u00020\u0004\u00a2\u0006\u0006\b\u00ca\u0003\u0010\u0092\u0002\u001a\u001b\u0010\u00ca\u0003\u001a\t\u0012\u0004\u0012\u00020\b0\u0091\u0001*\u00020\u0007\u00a2\u0006\u0006\b\u00ca\u0003\u0010\u0093\u0002\u001a\u001b\u0010\u00ca\u0003\u001a\t\u0012\u0004\u0012\u00020\u000b0\u0091\u0001*\u00020\n\u00a2\u0006\u0006\b\u00ca\u0003\u0010\u0094\u0002\u001a\u001b\u0010\u00ca\u0003\u001a\t\u0012\u0004\u0012\u00020\u000e0\u0091\u0001*\u00020\r\u00a2\u0006\u0006\b\u00ca\u0003\u0010\u0095\u0002\u001a\u001b\u0010\u00ca\u0003\u001a\t\u0012\u0004\u0012\u00020\u00110\u0091\u0001*\u00020\u0010\u00a2\u0006\u0006\b\u00ca\u0003\u0010\u0096\u0002\u001a\u001b\u0010\u00ca\u0003\u001a\t\u0012\u0004\u0012\u00020\u00140\u0091\u0001*\u00020\u0013\u00a2\u0006\u0006\b\u00ca\u0003\u0010\u0097\u0002\u001a\u001b\u0010\u00ca\u0003\u001a\t\u0012\u0004\u0012\u00020\u00170\u0091\u0001*\u00020\u0016\u00a2\u0006\u0006\b\u00ca\u0003\u0010\u0098\u0002\u001a\u001b\u0010\u00ca\u0003\u001a\t\u0012\u0004\u0012\u00020\u001a0\u0091\u0001*\u00020\u0019\u00a2\u0006\u0006\b\u00ca\u0003\u0010\u0099\u0002\u001aH\u0010\u00cb\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u00dc\u0002*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0013\u0010\u00a5\u0002\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010-H\u0086\b\u00a2\u0006\u0006\b\u00cb\u0003\u0010\u009e\u0001\u001a:\u0010\u00cb\u0003\u001a\t\u0012\u0004\u0012\u00020\u00050\u0091\u0001\"\u0005\b\u0000\u0010\u00dc\u0002*\u00020\u00042\u0013\u0010\u00a5\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00cb\u0003\u0010\u009f\u0001\u001a:\u0010\u00cb\u0003\u001a\t\u0012\u0004\u0012\u00020\b0\u0091\u0001\"\u0005\b\u0000\u0010\u00dc\u0002*\u00020\u00072\u0013\u0010\u00a5\u0002\u001a\u000e\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00cb\u0003\u0010\u00a0\u0001\u001a:\u0010\u00cb\u0003\u001a\t\u0012\u0004\u0012\u00020\u000b0\u0091\u0001\"\u0005\b\u0000\u0010\u00dc\u0002*\u00020\n2\u0013\u0010\u00a5\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00cb\u0003\u0010\u00a1\u0001\u001a:\u0010\u00cb\u0003\u001a\t\u0012\u0004\u0012\u00020\u000e0\u0091\u0001\"\u0005\b\u0000\u0010\u00dc\u0002*\u00020\r2\u0013\u0010\u00a5\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00cb\u0003\u0010\u00a2\u0001\u001a:\u0010\u00cb\u0003\u001a\t\u0012\u0004\u0012\u00020\u00110\u0091\u0001\"\u0005\b\u0000\u0010\u00dc\u0002*\u00020\u00102\u0013\u0010\u00a5\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00cb\u0003\u0010\u00a3\u0001\u001a:\u0010\u00cb\u0003\u001a\t\u0012\u0004\u0012\u00020\u00140\u0091\u0001\"\u0005\b\u0000\u0010\u00dc\u0002*\u00020\u00132\u0013\u0010\u00a5\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00cb\u0003\u0010\u00a4\u0001\u001a:\u0010\u00cb\u0003\u001a\t\u0012\u0004\u0012\u00020\u00170\u0091\u0001\"\u0005\b\u0000\u0010\u00dc\u0002*\u00020\u00162\u0013\u0010\u00a5\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00cb\u0003\u0010\u00a5\u0001\u001a:\u0010\u00cb\u0003\u001a\t\u0012\u0004\u0012\u00020\u001a0\u0091\u0001\"\u0005\b\u0000\u0010\u00dc\u0002*\u00020\u00192\u0013\u0010\u00a5\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0006\b\u00cb\u0003\u0010\u00a6\u0001\u001a<\u0010\u00cd\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u00a5\u0003\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u000e\u0010\u00cc\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u00e4\u0001H\u0086\u0004\u00a2\u0006\u0006\b\u00cd\u0003\u0010\u00ce\u0003\u001a.\u0010\u00cd\u0003\u001a\t\u0012\u0004\u0012\u00020\u00050\u00a5\u0003*\u00020\u00042\u000e\u0010\u00cc\u0003\u001a\t\u0012\u0004\u0012\u00020\u00050\u00e4\u0001H\u0086\u0004\u00a2\u0006\u0006\b\u00cd\u0003\u0010\u00cf\u0003\u001a.\u0010\u00cd\u0003\u001a\t\u0012\u0004\u0012\u00020\b0\u00a5\u0003*\u00020\u00072\u000e\u0010\u00cc\u0003\u001a\t\u0012\u0004\u0012\u00020\b0\u00e4\u0001H\u0086\u0004\u00a2\u0006\u0006\b\u00cd\u0003\u0010\u00d0\u0003\u001a.\u0010\u00cd\u0003\u001a\t\u0012\u0004\u0012\u00020\u000b0\u00a5\u0003*\u00020\n2\u000e\u0010\u00cc\u0003\u001a\t\u0012\u0004\u0012\u00020\u000b0\u00e4\u0001H\u0086\u0004\u00a2\u0006\u0006\b\u00cd\u0003\u0010\u00d1\u0003\u001a.\u0010\u00cd\u0003\u001a\t\u0012\u0004\u0012\u00020\u000e0\u00a5\u0003*\u00020\r2\u000e\u0010\u00cc\u0003\u001a\t\u0012\u0004\u0012\u00020\u000e0\u00e4\u0001H\u0086\u0004\u00a2\u0006\u0006\b\u00cd\u0003\u0010\u00d2\u0003\u001a.\u0010\u00cd\u0003\u001a\t\u0012\u0004\u0012\u00020\u00110\u00a5\u0003*\u00020\u00102\u000e\u0010\u00cc\u0003\u001a\t\u0012\u0004\u0012\u00020\u00110\u00e4\u0001H\u0086\u0004\u00a2\u0006\u0006\b\u00cd\u0003\u0010\u00d3\u0003\u001a.\u0010\u00cd\u0003\u001a\t\u0012\u0004\u0012\u00020\u00140\u00a5\u0003*\u00020\u00132\u000e\u0010\u00cc\u0003\u001a\t\u0012\u0004\u0012\u00020\u00140\u00e4\u0001H\u0086\u0004\u00a2\u0006\u0006\b\u00cd\u0003\u0010\u00d4\u0003\u001a.\u0010\u00cd\u0003\u001a\t\u0012\u0004\u0012\u00020\u00170\u00a5\u0003*\u00020\u00162\u000e\u0010\u00cc\u0003\u001a\t\u0012\u0004\u0012\u00020\u00170\u00e4\u0001H\u0086\u0004\u00a2\u0006\u0006\b\u00cd\u0003\u0010\u00d5\u0003\u001a.\u0010\u00cd\u0003\u001a\t\u0012\u0004\u0012\u00020\u001a0\u00a5\u0003*\u00020\u00192\u000e\u0010\u00cc\u0003\u001a\t\u0012\u0004\u0012\u00020\u001a0\u00e4\u0001H\u0086\u0004\u00a2\u0006\u0006\b\u00cd\u0003\u0010\u00d6\u0003\u001a<\u0010\u00d7\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u00a5\u0003\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u000e\u0010\u00cc\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u00e4\u0001H\u0086\u0004\u00a2\u0006\u0006\b\u00d7\u0003\u0010\u00ce\u0003\u001a.\u0010\u00d7\u0003\u001a\t\u0012\u0004\u0012\u00020\u00050\u00a5\u0003*\u00020\u00042\u000e\u0010\u00cc\u0003\u001a\t\u0012\u0004\u0012\u00020\u00050\u00e4\u0001H\u0086\u0004\u00a2\u0006\u0006\b\u00d7\u0003\u0010\u00cf\u0003\u001a.\u0010\u00d7\u0003\u001a\t\u0012\u0004\u0012\u00020\b0\u00a5\u0003*\u00020\u00072\u000e\u0010\u00cc\u0003\u001a\t\u0012\u0004\u0012\u00020\b0\u00e4\u0001H\u0086\u0004\u00a2\u0006\u0006\b\u00d7\u0003\u0010\u00d0\u0003\u001a.\u0010\u00d7\u0003\u001a\t\u0012\u0004\u0012\u00020\u000b0\u00a5\u0003*\u00020\n2\u000e\u0010\u00cc\u0003\u001a\t\u0012\u0004\u0012\u00020\u000b0\u00e4\u0001H\u0086\u0004\u00a2\u0006\u0006\b\u00d7\u0003\u0010\u00d1\u0003\u001a.\u0010\u00d7\u0003\u001a\t\u0012\u0004\u0012\u00020\u000e0\u00a5\u0003*\u00020\r2\u000e\u0010\u00cc\u0003\u001a\t\u0012\u0004\u0012\u00020\u000e0\u00e4\u0001H\u0086\u0004\u00a2\u0006\u0006\b\u00d7\u0003\u0010\u00d2\u0003\u001a.\u0010\u00d7\u0003\u001a\t\u0012\u0004\u0012\u00020\u00110\u00a5\u0003*\u00020\u00102\u000e\u0010\u00cc\u0003\u001a\t\u0012\u0004\u0012\u00020\u00110\u00e4\u0001H\u0086\u0004\u00a2\u0006\u0006\b\u00d7\u0003\u0010\u00d3\u0003\u001a.\u0010\u00d7\u0003\u001a\t\u0012\u0004\u0012\u00020\u00140\u00a5\u0003*\u00020\u00132\u000e\u0010\u00cc\u0003\u001a\t\u0012\u0004\u0012\u00020\u00140\u00e4\u0001H\u0086\u0004\u00a2\u0006\u0006\b\u00d7\u0003\u0010\u00d4\u0003\u001a.\u0010\u00d7\u0003\u001a\t\u0012\u0004\u0012\u00020\u00170\u00a5\u0003*\u00020\u00162\u000e\u0010\u00cc\u0003\u001a\t\u0012\u0004\u0012\u00020\u00170\u00e4\u0001H\u0086\u0004\u00a2\u0006\u0006\b\u00d7\u0003\u0010\u00d5\u0003\u001a.\u0010\u00d7\u0003\u001a\t\u0012\u0004\u0012\u00020\u001a0\u00a5\u0003*\u00020\u00192\u000e\u0010\u00cc\u0003\u001a\t\u0012\u0004\u0012\u00020\u001a0\u00e4\u0001H\u0086\u0004\u00a2\u0006\u0006\b\u00d7\u0003\u0010\u00d6\u0003\u001a)\u0010\u00d9\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u00d8\u0003\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u0001\u00a2\u0006\u0006\b\u00d9\u0003\u0010\u00a7\u0003\u001a\u001b\u0010\u00d9\u0003\u001a\t\u0012\u0004\u0012\u00020\u00050\u00d8\u0003*\u00020\u0004\u00a2\u0006\u0006\b\u00d9\u0003\u0010\u00a8\u0003\u001a\u001b\u0010\u00d9\u0003\u001a\t\u0012\u0004\u0012\u00020\b0\u00d8\u0003*\u00020\u0007\u00a2\u0006\u0006\b\u00d9\u0003\u0010\u00a9\u0003\u001a\u001b\u0010\u00d9\u0003\u001a\t\u0012\u0004\u0012\u00020\u000b0\u00d8\u0003*\u00020\n\u00a2\u0006\u0006\b\u00d9\u0003\u0010\u00aa\u0003\u001a\u001b\u0010\u00d9\u0003\u001a\t\u0012\u0004\u0012\u00020\u000e0\u00d8\u0003*\u00020\r\u00a2\u0006\u0006\b\u00d9\u0003\u0010\u00ab\u0003\u001a\u001b\u0010\u00d9\u0003\u001a\t\u0012\u0004\u0012\u00020\u00110\u00d8\u0003*\u00020\u0010\u00a2\u0006\u0006\b\u00d9\u0003\u0010\u00ac\u0003\u001a\u001b\u0010\u00d9\u0003\u001a\t\u0012\u0004\u0012\u00020\u00140\u00d8\u0003*\u00020\u0013\u00a2\u0006\u0006\b\u00d9\u0003\u0010\u00ad\u0003\u001a\u001b\u0010\u00d9\u0003\u001a\t\u0012\u0004\u0012\u00020\u00170\u00d8\u0003*\u00020\u0016\u00a2\u0006\u0006\b\u00d9\u0003\u0010\u00ae\u0003\u001a\u001b\u0010\u00d9\u0003\u001a\t\u0012\u0004\u0012\u00020\u001a0\u00d8\u0003*\u00020\u0019\u00a2\u0006\u0006\b\u00d9\u0003\u0010\u00af\u0003\u001a<\u0010\u00da\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u00a5\u0003\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u000e\u0010\u00cc\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u00e4\u0001H\u0086\u0004\u00a2\u0006\u0006\b\u00da\u0003\u0010\u00ce\u0003\u001a.\u0010\u00da\u0003\u001a\t\u0012\u0004\u0012\u00020\u00050\u00a5\u0003*\u00020\u00042\u000e\u0010\u00cc\u0003\u001a\t\u0012\u0004\u0012\u00020\u00050\u00e4\u0001H\u0086\u0004\u00a2\u0006\u0006\b\u00da\u0003\u0010\u00cf\u0003\u001a.\u0010\u00da\u0003\u001a\t\u0012\u0004\u0012\u00020\b0\u00a5\u0003*\u00020\u00072\u000e\u0010\u00cc\u0003\u001a\t\u0012\u0004\u0012\u00020\b0\u00e4\u0001H\u0086\u0004\u00a2\u0006\u0006\b\u00da\u0003\u0010\u00d0\u0003\u001a.\u0010\u00da\u0003\u001a\t\u0012\u0004\u0012\u00020\u000b0\u00a5\u0003*\u00020\n2\u000e\u0010\u00cc\u0003\u001a\t\u0012\u0004\u0012\u00020\u000b0\u00e4\u0001H\u0086\u0004\u00a2\u0006\u0006\b\u00da\u0003\u0010\u00d1\u0003\u001a.\u0010\u00da\u0003\u001a\t\u0012\u0004\u0012\u00020\u000e0\u00a5\u0003*\u00020\r2\u000e\u0010\u00cc\u0003\u001a\t\u0012\u0004\u0012\u00020\u000e0\u00e4\u0001H\u0086\u0004\u00a2\u0006\u0006\b\u00da\u0003\u0010\u00d2\u0003\u001a.\u0010\u00da\u0003\u001a\t\u0012\u0004\u0012\u00020\u00110\u00a5\u0003*\u00020\u00102\u000e\u0010\u00cc\u0003\u001a\t\u0012\u0004\u0012\u00020\u00110\u00e4\u0001H\u0086\u0004\u00a2\u0006\u0006\b\u00da\u0003\u0010\u00d3\u0003\u001a.\u0010\u00da\u0003\u001a\t\u0012\u0004\u0012\u00020\u00140\u00a5\u0003*\u00020\u00132\u000e\u0010\u00cc\u0003\u001a\t\u0012\u0004\u0012\u00020\u00140\u00e4\u0001H\u0086\u0004\u00a2\u0006\u0006\b\u00da\u0003\u0010\u00d4\u0003\u001a.\u0010\u00da\u0003\u001a\t\u0012\u0004\u0012\u00020\u00170\u00a5\u0003*\u00020\u00162\u000e\u0010\u00cc\u0003\u001a\t\u0012\u0004\u0012\u00020\u00170\u00e4\u0001H\u0086\u0004\u00a2\u0006\u0006\b\u00da\u0003\u0010\u00d5\u0003\u001a.\u0010\u00da\u0003\u001a\t\u0012\u0004\u0012\u00020\u001a0\u00a5\u0003*\u00020\u00192\u000e\u0010\u00cc\u0003\u001a\t\u0012\u0004\u0012\u00020\u001a0\u00e4\u0001H\u0086\u0004\u00a2\u0006\u0006\b\u00da\u0003\u0010\u00d6\u0003\u001a9\u0010\u00db\u0003\u001a\u00020\u0017\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00db\u0003\u0010\u00dc\u0003\u001a+\u0010\u00db\u0003\u001a\u00020\u0017*\u00020\u00042\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00db\u0003\u0010\u00dd\u0003\u001a+\u0010\u00db\u0003\u001a\u00020\u0017*\u00020\u00072\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00db\u0003\u0010\u00de\u0003\u001a+\u0010\u00db\u0003\u001a\u00020\u0017*\u00020\n2\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00db\u0003\u0010\u00df\u0003\u001a+\u0010\u00db\u0003\u001a\u00020\u0017*\u00020\r2\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00db\u0003\u0010\u00e0\u0003\u001a+\u0010\u00db\u0003\u001a\u00020\u0017*\u00020\u00102\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00db\u0003\u0010\u00e1\u0003\u001a+\u0010\u00db\u0003\u001a\u00020\u0017*\u00020\u00132\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00db\u0003\u0010\u00e2\u0003\u001a*\u0010\u00db\u0003\u001a\u00020\u0017*\u00020\u00162\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0005\b\u00db\u0003\u0010V\u001a+\u0010\u00db\u0003\u001a\u00020\u0017*\u00020\u00192\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00db\u0003\u0010\u00e3\u0003\u001a\"\u0010\u00e4\u0003\u001a\u00020\u0017\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u0001\u00a2\u0006\u0006\b\u00e4\u0003\u0010\u00c3\u0002\u001a\u0014\u0010\u00e4\u0003\u001a\u00020\u0017*\u00020\u0004\u00a2\u0006\u0006\b\u00e4\u0003\u0010\u00c4\u0002\u001a\u0014\u0010\u00e4\u0003\u001a\u00020\u0017*\u00020\u0007\u00a2\u0006\u0006\b\u00e4\u0003\u0010\u00c5\u0002\u001a\u0014\u0010\u00e4\u0003\u001a\u00020\u0017*\u00020\n\u00a2\u0006\u0006\b\u00e4\u0003\u0010\u00c6\u0002\u001a\u0014\u0010\u00e4\u0003\u001a\u00020\u0017*\u00020\r\u00a2\u0006\u0006\b\u00e4\u0003\u0010\u00c7\u0002\u001a\u0014\u0010\u00e4\u0003\u001a\u00020\u0017*\u00020\u0010\u00a2\u0006\u0006\b\u00e4\u0003\u0010\u00c8\u0002\u001a\u0014\u0010\u00e4\u0003\u001a\u00020\u0017*\u00020\u0013\u00a2\u0006\u0006\b\u00e4\u0003\u0010\u00c9\u0002\u001a\u0013\u0010\u00e4\u0003\u001a\u00020\u0017*\u00020\u0016\u00a2\u0006\u0005\b\u00e4\u0003\u0010\u0018\u001a\u0014\u0010\u00e4\u0003\u001a\u00020\u0017*\u00020\u0019\u00a2\u0006\u0006\b\u00e4\u0003\u0010\u00ca\u0002\u001a9\u0010\u00e4\u0003\u001a\u00020\u0017\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00e4\u0003\u0010\u00dc\u0003\u001a+\u0010\u00e4\u0003\u001a\u00020\u0017*\u00020\u00042\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00e4\u0003\u0010\u00dd\u0003\u001a+\u0010\u00e4\u0003\u001a\u00020\u0017*\u00020\u00072\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00e4\u0003\u0010\u00de\u0003\u001a+\u0010\u00e4\u0003\u001a\u00020\u0017*\u00020\n2\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00e4\u0003\u0010\u00df\u0003\u001a+\u0010\u00e4\u0003\u001a\u00020\u0017*\u00020\r2\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00e4\u0003\u0010\u00e0\u0003\u001a+\u0010\u00e4\u0003\u001a\u00020\u0017*\u00020\u00102\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00e4\u0003\u0010\u00e1\u0003\u001a+\u0010\u00e4\u0003\u001a\u00020\u0017*\u00020\u00132\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00e4\u0003\u0010\u00e2\u0003\u001a*\u0010\u00e4\u0003\u001a\u00020\u0017*\u00020\u00162\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0005\b\u00e4\u0003\u0010V\u001a+\u0010\u00e4\u0003\u001a\u00020\u0017*\u00020\u00192\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00e4\u0003\u0010\u00e3\u0003\u001a%\u0010\u00e5\u0003\u001a\u00020\u000b\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u0001H\u0087\b\u00a2\u0006\u0006\b\u00e5\u0003\u0010\u00e6\u0003\u001a\u0017\u0010\u00e5\u0003\u001a\u00020\u000b*\u00020\u0004H\u0087\b\u00a2\u0006\u0006\b\u00e5\u0003\u0010\u00e7\u0003\u001a\u0017\u0010\u00e5\u0003\u001a\u00020\u000b*\u00020\u0007H\u0087\b\u00a2\u0006\u0006\b\u00e5\u0003\u0010\u00e8\u0003\u001a\u0016\u0010\u00e5\u0003\u001a\u00020\u000b*\u00020\nH\u0087\b\u00a2\u0006\u0005\b\u00e5\u0003\u0010\f\u001a\u0017\u0010\u00e5\u0003\u001a\u00020\u000b*\u00020\rH\u0087\b\u00a2\u0006\u0006\b\u00e5\u0003\u0010\u00e9\u0003\u001a\u0017\u0010\u00e5\u0003\u001a\u00020\u000b*\u00020\u0010H\u0087\b\u00a2\u0006\u0006\b\u00e5\u0003\u0010\u00ea\u0003\u001a\u0017\u0010\u00e5\u0003\u001a\u00020\u000b*\u00020\u0013H\u0087\b\u00a2\u0006\u0006\b\u00e5\u0003\u0010\u00eb\u0003\u001a\u0017\u0010\u00e5\u0003\u001a\u00020\u000b*\u00020\u0016H\u0087\b\u00a2\u0006\u0006\b\u00e5\u0003\u0010\u00ec\u0003\u001a\u0017\u0010\u00e5\u0003\u001a\u00020\u000b*\u00020\u0019H\u0087\b\u00a2\u0006\u0006\b\u00e5\u0003\u0010\u00ed\u0003\u001a8\u0010\u00e5\u0003\u001a\u00020\u000b\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0005\b\u00e5\u0003\u0010n\u001a*\u0010\u00e5\u0003\u001a\u00020\u000b*\u00020\u00042\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0005\b\u00e5\u0003\u0010o\u001a*\u0010\u00e5\u0003\u001a\u00020\u000b*\u00020\u00072\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0005\b\u00e5\u0003\u0010p\u001a*\u0010\u00e5\u0003\u001a\u00020\u000b*\u00020\n2\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0005\b\u00e5\u0003\u0010R\u001a*\u0010\u00e5\u0003\u001a\u00020\u000b*\u00020\r2\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0005\b\u00e5\u0003\u0010q\u001a*\u0010\u00e5\u0003\u001a\u00020\u000b*\u00020\u00102\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0005\b\u00e5\u0003\u0010r\u001a*\u0010\u00e5\u0003\u001a\u00020\u000b*\u00020\u00132\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0005\b\u00e5\u0003\u0010s\u001a*\u0010\u00e5\u0003\u001a\u00020\u000b*\u00020\u00162\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0005\b\u00e5\u0003\u0010t\u001a*\u0010\u00e5\u0003\u001a\u00020\u000b*\u00020\u00192\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0005\b\u00e5\u0003\u0010u\u001ac\u0010\u00f1\u0003\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u00c3\u0001*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0007\u0010\u00ee\u0003\u001a\u00028\u00012,\u0010\u00f0\u0003\u001a'\u0012\u0016\u0012\u00148\u0001\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00f1\u0003\u0010\u00f2\u0003\u001aU\u0010\u00f1\u0003\u001a\u00028\u0000\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00042\u0007\u0010\u00ee\u0003\u001a\u00028\u00002,\u0010\u00f0\u0003\u001a'\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00f1\u0003\u0010\u00f3\u0003\u001aU\u0010\u00f1\u0003\u001a\u00028\u0000\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00072\u0007\u0010\u00ee\u0003\u001a\u00028\u00002,\u0010\u00f0\u0003\u001a'\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00f1\u0003\u0010\u00f4\u0003\u001aU\u0010\u00f1\u0003\u001a\u00028\u0000\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\n2\u0007\u0010\u00ee\u0003\u001a\u00028\u00002,\u0010\u00f0\u0003\u001a'\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00f1\u0003\u0010\u00f5\u0003\u001aU\u0010\u00f1\u0003\u001a\u00028\u0000\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\r2\u0007\u0010\u00ee\u0003\u001a\u00028\u00002,\u0010\u00f0\u0003\u001a'\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00f1\u0003\u0010\u00f6\u0003\u001aU\u0010\u00f1\u0003\u001a\u00028\u0000\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00102\u0007\u0010\u00ee\u0003\u001a\u00028\u00002,\u0010\u00f0\u0003\u001a'\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00f1\u0003\u0010\u00f7\u0003\u001aU\u0010\u00f1\u0003\u001a\u00028\u0000\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00132\u0007\u0010\u00ee\u0003\u001a\u00028\u00002,\u0010\u00f0\u0003\u001a'\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00f1\u0003\u0010\u00f8\u0003\u001aU\u0010\u00f1\u0003\u001a\u00028\u0000\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00162\u0007\u0010\u00ee\u0003\u001a\u00028\u00002,\u0010\u00f0\u0003\u001a'\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00f1\u0003\u0010\u00f9\u0003\u001aU\u0010\u00f1\u0003\u001a\u00028\u0000\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00192\u0007\u0010\u00ee\u0003\u001a\u00028\u00002,\u0010\u00f0\u0003\u001a'\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00f1\u0003\u0010\u00fa\u0003\u001az\u0010\u00fc\u0003\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u00c3\u0001*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0007\u0010\u00ee\u0003\u001a\u00028\u00012C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0016\u0012\u00148\u0001\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00fb\u0003H\u0086\b\u00a2\u0006\u0006\b\u00fc\u0003\u0010\u00fd\u0003\u001al\u0010\u00fc\u0003\u001a\u00028\u0000\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00042\u0007\u0010\u00ee\u0003\u001a\u00028\u00002C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00028\u00000\u00fb\u0003H\u0086\b\u00a2\u0006\u0006\b\u00fc\u0003\u0010\u00fe\u0003\u001al\u0010\u00fc\u0003\u001a\u00028\u0000\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00072\u0007\u0010\u00ee\u0003\u001a\u00028\u00002C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00028\u00000\u00fb\u0003H\u0086\b\u00a2\u0006\u0006\b\u00fc\u0003\u0010\u00ff\u0003\u001al\u0010\u00fc\u0003\u001a\u00028\u0000\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\n2\u0007\u0010\u00ee\u0003\u001a\u00028\u00002C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00028\u00000\u00fb\u0003H\u0086\b\u00a2\u0006\u0006\b\u00fc\u0003\u0010\u0080\u0004\u001al\u0010\u00fc\u0003\u001a\u00028\u0000\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\r2\u0007\u0010\u00ee\u0003\u001a\u00028\u00002C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00028\u00000\u00fb\u0003H\u0086\b\u00a2\u0006\u0006\b\u00fc\u0003\u0010\u0081\u0004\u001al\u0010\u00fc\u0003\u001a\u00028\u0000\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00102\u0007\u0010\u00ee\u0003\u001a\u00028\u00002C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00028\u00000\u00fb\u0003H\u0086\b\u00a2\u0006\u0006\b\u00fc\u0003\u0010\u0082\u0004\u001al\u0010\u00fc\u0003\u001a\u00028\u0000\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00132\u0007\u0010\u00ee\u0003\u001a\u00028\u00002C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00028\u00000\u00fb\u0003H\u0086\b\u00a2\u0006\u0006\b\u00fc\u0003\u0010\u0083\u0004\u001al\u0010\u00fc\u0003\u001a\u00028\u0000\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00162\u0007\u0010\u00ee\u0003\u001a\u00028\u00002C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00028\u00000\u00fb\u0003H\u0086\b\u00a2\u0006\u0006\b\u00fc\u0003\u0010\u0084\u0004\u001al\u0010\u00fc\u0003\u001a\u00028\u0000\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00192\u0007\u0010\u00ee\u0003\u001a\u00028\u00002C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00028\u00000\u00fb\u0003H\u0086\b\u00a2\u0006\u0006\b\u00fc\u0003\u0010\u0085\u0004\u001ac\u0010\u0086\u0004\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u00c3\u0001*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0007\u0010\u00ee\u0003\u001a\u00028\u00012,\u0010\u00f0\u0003\u001a'\u0012\u0004\u0012\u00028\u0000\u0012\u0016\u0012\u00148\u0001\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00028\u00010\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u0086\u0004\u0010\u00f2\u0003\u001aU\u0010\u0086\u0004\u001a\u00028\u0000\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00042\u0007\u0010\u00ee\u0003\u001a\u00028\u00002,\u0010\u00f0\u0003\u001a'\u0012\u0004\u0012\u00020\u0005\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u0086\u0004\u0010\u00f3\u0003\u001aU\u0010\u0086\u0004\u001a\u00028\u0000\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00072\u0007\u0010\u00ee\u0003\u001a\u00028\u00002,\u0010\u00f0\u0003\u001a'\u0012\u0004\u0012\u00020\b\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u0086\u0004\u0010\u00f4\u0003\u001aU\u0010\u0086\u0004\u001a\u00028\u0000\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\n2\u0007\u0010\u00ee\u0003\u001a\u00028\u00002,\u0010\u00f0\u0003\u001a'\u0012\u0004\u0012\u00020\u000b\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u0086\u0004\u0010\u00f5\u0003\u001aU\u0010\u0086\u0004\u001a\u00028\u0000\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\r2\u0007\u0010\u00ee\u0003\u001a\u00028\u00002,\u0010\u00f0\u0003\u001a'\u0012\u0004\u0012\u00020\u000e\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u0086\u0004\u0010\u00f6\u0003\u001aU\u0010\u0086\u0004\u001a\u00028\u0000\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00102\u0007\u0010\u00ee\u0003\u001a\u00028\u00002,\u0010\u00f0\u0003\u001a'\u0012\u0004\u0012\u00020\u0011\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u0086\u0004\u0010\u00f7\u0003\u001aU\u0010\u0086\u0004\u001a\u00028\u0000\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00132\u0007\u0010\u00ee\u0003\u001a\u00028\u00002,\u0010\u00f0\u0003\u001a'\u0012\u0004\u0012\u00020\u0014\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u0086\u0004\u0010\u00f8\u0003\u001aU\u0010\u0086\u0004\u001a\u00028\u0000\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00162\u0007\u0010\u00ee\u0003\u001a\u00028\u00002,\u0010\u00f0\u0003\u001a'\u0012\u0004\u0012\u00020\u0017\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u0086\u0004\u0010\u00f9\u0003\u001aU\u0010\u0086\u0004\u001a\u00028\u0000\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00192\u0007\u0010\u00ee\u0003\u001a\u00028\u00002,\u0010\u00f0\u0003\u001a'\u0012\u0004\u0012\u00020\u001a\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u0086\u0004\u0010\u00fa\u0003\u001az\u0010\u0087\u0004\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u00c3\u0001*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0007\u0010\u00ee\u0003\u001a\u00028\u00012C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00028\u0000\u0012\u0016\u0012\u00148\u0001\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00028\u00010\u00fb\u0003H\u0086\b\u00a2\u0006\u0006\b\u0087\u0004\u0010\u00fd\u0003\u001al\u0010\u0087\u0004\u001a\u00028\u0000\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00042\u0007\u0010\u00ee\u0003\u001a\u00028\u00002C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u0005\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00028\u00000\u00fb\u0003H\u0086\b\u00a2\u0006\u0006\b\u0087\u0004\u0010\u00fe\u0003\u001al\u0010\u0087\u0004\u001a\u00028\u0000\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00072\u0007\u0010\u00ee\u0003\u001a\u00028\u00002C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\b\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00028\u00000\u00fb\u0003H\u0086\b\u00a2\u0006\u0006\b\u0087\u0004\u0010\u00ff\u0003\u001al\u0010\u0087\u0004\u001a\u00028\u0000\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\n2\u0007\u0010\u00ee\u0003\u001a\u00028\u00002C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u000b\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00028\u00000\u00fb\u0003H\u0086\b\u00a2\u0006\u0006\b\u0087\u0004\u0010\u0080\u0004\u001al\u0010\u0087\u0004\u001a\u00028\u0000\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\r2\u0007\u0010\u00ee\u0003\u001a\u00028\u00002C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u000e\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00028\u00000\u00fb\u0003H\u0086\b\u00a2\u0006\u0006\b\u0087\u0004\u0010\u0081\u0004\u001al\u0010\u0087\u0004\u001a\u00028\u0000\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00102\u0007\u0010\u00ee\u0003\u001a\u00028\u00002C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u0011\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00028\u00000\u00fb\u0003H\u0086\b\u00a2\u0006\u0006\b\u0087\u0004\u0010\u0082\u0004\u001al\u0010\u0087\u0004\u001a\u00028\u0000\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00132\u0007\u0010\u00ee\u0003\u001a\u00028\u00002C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u0014\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00028\u00000\u00fb\u0003H\u0086\b\u00a2\u0006\u0006\b\u0087\u0004\u0010\u0083\u0004\u001al\u0010\u0087\u0004\u001a\u00028\u0000\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00162\u0007\u0010\u00ee\u0003\u001a\u00028\u00002C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u0017\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00028\u00000\u00fb\u0003H\u0086\b\u00a2\u0006\u0006\b\u0087\u0004\u0010\u0084\u0004\u001al\u0010\u0087\u0004\u001a\u00028\u0000\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00192\u0007\u0010\u00ee\u0003\u001a\u00028\u00002C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u001a\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00028\u00000\u00fb\u0003H\u0086\b\u00a2\u0006\u0006\b\u0087\u0004\u0010\u0085\u0004\u001a<\u0010\u0089\u0004\u001a\u00030\u0086\u0002\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0014\u0010\u0088\u0004\u001a\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0005\u0012\u00030\u0086\u00020-H\u0086\b\u00a2\u0006\u0006\b\u0089\u0004\u0010\u00a7\u0002\u001a.\u0010\u0089\u0004\u001a\u00030\u0086\u0002*\u00020\u00042\u0014\u0010\u0088\u0004\u001a\u000f\u0012\u0004\u0012\u00020\u0005\u0012\u0005\u0012\u00030\u0086\u00020-H\u0086\b\u00a2\u0006\u0006\b\u0089\u0004\u0010\u008a\u0004\u001a.\u0010\u0089\u0004\u001a\u00030\u0086\u0002*\u00020\u00072\u0014\u0010\u0088\u0004\u001a\u000f\u0012\u0004\u0012\u00020\b\u0012\u0005\u0012\u00030\u0086\u00020-H\u0086\b\u00a2\u0006\u0006\b\u0089\u0004\u0010\u008b\u0004\u001a.\u0010\u0089\u0004\u001a\u00030\u0086\u0002*\u00020\n2\u0014\u0010\u0088\u0004\u001a\u000f\u0012\u0004\u0012\u00020\u000b\u0012\u0005\u0012\u00030\u0086\u00020-H\u0086\b\u00a2\u0006\u0006\b\u0089\u0004\u0010\u008c\u0004\u001a.\u0010\u0089\u0004\u001a\u00030\u0086\u0002*\u00020\r2\u0014\u0010\u0088\u0004\u001a\u000f\u0012\u0004\u0012\u00020\u000e\u0012\u0005\u0012\u00030\u0086\u00020-H\u0086\b\u00a2\u0006\u0006\b\u0089\u0004\u0010\u008d\u0004\u001a.\u0010\u0089\u0004\u001a\u00030\u0086\u0002*\u00020\u00102\u0014\u0010\u0088\u0004\u001a\u000f\u0012\u0004\u0012\u00020\u0011\u0012\u0005\u0012\u00030\u0086\u00020-H\u0086\b\u00a2\u0006\u0006\b\u0089\u0004\u0010\u008e\u0004\u001a.\u0010\u0089\u0004\u001a\u00030\u0086\u0002*\u00020\u00132\u0014\u0010\u0088\u0004\u001a\u000f\u0012\u0004\u0012\u00020\u0014\u0012\u0005\u0012\u00030\u0086\u00020-H\u0086\b\u00a2\u0006\u0006\b\u0089\u0004\u0010\u008f\u0004\u001a.\u0010\u0089\u0004\u001a\u00030\u0086\u0002*\u00020\u00162\u0014\u0010\u0088\u0004\u001a\u000f\u0012\u0004\u0012\u00020\u0017\u0012\u0005\u0012\u00030\u0086\u00020-H\u0086\b\u00a2\u0006\u0006\b\u0089\u0004\u0010\u0090\u0004\u001a.\u0010\u0089\u0004\u001a\u00030\u0086\u0002*\u00020\u00192\u0014\u0010\u0088\u0004\u001a\u000f\u0012\u0004\u0012\u00020\u001a\u0012\u0005\u0012\u00030\u0086\u00020-H\u0086\b\u00a2\u0006\u0006\b\u0089\u0004\u0010\u0091\u0004\u001aT\u0010\u0092\u0004\u001a\u00030\u0086\u0002\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012,\u0010\u0088\u0004\u001a'\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00028\u0000\u0012\u0005\u0012\u00030\u0086\u00020\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u0092\u0004\u0010\u0093\u0004\u001aF\u0010\u0092\u0004\u001a\u00030\u0086\u0002*\u00020\u00042,\u0010\u0088\u0004\u001a'\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u0005\u0012\u0005\u0012\u00030\u0086\u00020\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u0092\u0004\u0010\u0094\u0004\u001aF\u0010\u0092\u0004\u001a\u00030\u0086\u0002*\u00020\u00072,\u0010\u0088\u0004\u001a'\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\b\u0012\u0005\u0012\u00030\u0086\u00020\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u0092\u0004\u0010\u0095\u0004\u001aF\u0010\u0092\u0004\u001a\u00030\u0086\u0002*\u00020\n2,\u0010\u0088\u0004\u001a'\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u000b\u0012\u0005\u0012\u00030\u0086\u00020\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u0092\u0004\u0010\u0096\u0004\u001aF\u0010\u0092\u0004\u001a\u00030\u0086\u0002*\u00020\r2,\u0010\u0088\u0004\u001a'\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u000e\u0012\u0005\u0012\u00030\u0086\u00020\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u0092\u0004\u0010\u0097\u0004\u001aF\u0010\u0092\u0004\u001a\u00030\u0086\u0002*\u00020\u00102,\u0010\u0088\u0004\u001a'\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u0011\u0012\u0005\u0012\u00030\u0086\u00020\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u0092\u0004\u0010\u0098\u0004\u001aF\u0010\u0092\u0004\u001a\u00030\u0086\u0002*\u00020\u00132,\u0010\u0088\u0004\u001a'\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u0014\u0012\u0005\u0012\u00030\u0086\u00020\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u0092\u0004\u0010\u0099\u0004\u001aF\u0010\u0092\u0004\u001a\u00030\u0086\u0002*\u00020\u00162,\u0010\u0088\u0004\u001a'\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u0017\u0012\u0005\u0012\u00030\u0086\u00020\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u0092\u0004\u0010\u009a\u0004\u001aF\u0010\u0092\u0004\u001a\u00030\u0086\u0002*\u00020\u00192,\u0010\u0088\u0004\u001a'\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u001a\u0012\u0005\u0012\u00030\u0086\u00020\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u0092\u0004\u0010\u009b\u0004\u001a \u0010\u009c\u0004\u001a\u0004\u0018\u00010\u0014*\n\u0012\u0006\b\u0001\u0012\u00020\u00140\u0001H\u0007\u00a2\u0006\u0006\b\u009c\u0004\u0010\u009d\u0004\u001a \u0010\u009c\u0004\u001a\u0004\u0018\u00010\u0011*\n\u0012\u0006\b\u0001\u0012\u00020\u00110\u0001H\u0007\u00a2\u0006\u0006\b\u009c\u0004\u0010\u009e\u0004\u001a/\u0010\u009c\u0004\u001a\u0004\u0018\u00018\u0000\"\u000f\b\u0000\u0010\u0000*\t\u0012\u0004\u0012\u00028\u00000\u00a4\u0002*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u0001\u00a2\u0006\u0006\b\u009c\u0004\u0010\u009f\u0004\u001a\u0015\u0010\u009c\u0004\u001a\u0004\u0018\u00010\u0005*\u00020\u0004\u00a2\u0006\u0005\b\u009c\u0004\u0010Y\u001a\u0015\u0010\u009c\u0004\u001a\u0004\u0018\u00010\b*\u00020\u0007\u00a2\u0006\u0005\b\u009c\u0004\u0010Z\u001a\u0015\u0010\u009c\u0004\u001a\u0004\u0018\u00010\u000b*\u00020\n\u00a2\u0006\u0005\b\u009c\u0004\u0010[\u001a\u0015\u0010\u009c\u0004\u001a\u0004\u0018\u00010\u000e*\u00020\r\u00a2\u0006\u0005\b\u009c\u0004\u0010\\\u001a\u0015\u0010\u009c\u0004\u001a\u0004\u0018\u00010\u0011*\u00020\u0010\u00a2\u0006\u0005\b\u009c\u0004\u0010]\u001a\u0015\u0010\u009c\u0004\u001a\u0004\u0018\u00010\u0014*\u00020\u0013\u00a2\u0006\u0005\b\u009c\u0004\u0010^\u001a\u0015\u0010\u009c\u0004\u001a\u0004\u0018\u00010\u001a*\u00020\u0019\u00a2\u0006\u0005\b\u009c\u0004\u0010`\u001aM\u0010\u00a0\u0004\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000\"\u0010\b\u0001\u0010\u00c3\u0001*\t\u0012\u0004\u0012\u00028\u00010\u00a4\u0002*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0013\u0010\u00a5\u0002\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010-H\u0086\b\u00a2\u0006\u0005\b\u00a0\u0004\u0010E\u001a?\u0010\u00a0\u0004\u001a\u0004\u0018\u00010\u0005\"\u0010\b\u0000\u0010\u00c3\u0001*\t\u0012\u0004\u0012\u00028\u00000\u00a4\u0002*\u00020\u00042\u0013\u0010\u00a5\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0005\b\u00a0\u0004\u0010F\u001a?\u0010\u00a0\u0004\u001a\u0004\u0018\u00010\b\"\u0010\b\u0000\u0010\u00c3\u0001*\t\u0012\u0004\u0012\u00028\u00000\u00a4\u0002*\u00020\u00072\u0013\u0010\u00a5\u0002\u001a\u000e\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0005\b\u00a0\u0004\u0010G\u001a?\u0010\u00a0\u0004\u001a\u0004\u0018\u00010\u000b\"\u0010\b\u0000\u0010\u00c3\u0001*\t\u0012\u0004\u0012\u00028\u00000\u00a4\u0002*\u00020\n2\u0013\u0010\u00a5\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0005\b\u00a0\u0004\u0010H\u001a?\u0010\u00a0\u0004\u001a\u0004\u0018\u00010\u000e\"\u0010\b\u0000\u0010\u00c3\u0001*\t\u0012\u0004\u0012\u00028\u00000\u00a4\u0002*\u00020\r2\u0013\u0010\u00a5\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0005\b\u00a0\u0004\u0010I\u001a?\u0010\u00a0\u0004\u001a\u0004\u0018\u00010\u0011\"\u0010\b\u0000\u0010\u00c3\u0001*\t\u0012\u0004\u0012\u00028\u00000\u00a4\u0002*\u00020\u00102\u0013\u0010\u00a5\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0005\b\u00a0\u0004\u0010J\u001a?\u0010\u00a0\u0004\u001a\u0004\u0018\u00010\u0014\"\u0010\b\u0000\u0010\u00c3\u0001*\t\u0012\u0004\u0012\u00028\u00000\u00a4\u0002*\u00020\u00132\u0013\u0010\u00a5\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0005\b\u00a0\u0004\u0010K\u001a?\u0010\u00a0\u0004\u001a\u0004\u0018\u00010\u0017\"\u0010\b\u0000\u0010\u00c3\u0001*\t\u0012\u0004\u0012\u00028\u00000\u00a4\u0002*\u00020\u00162\u0013\u0010\u00a5\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0005\b\u00a0\u0004\u0010L\u001a?\u0010\u00a0\u0004\u001a\u0004\u0018\u00010\u001a\"\u0010\b\u0000\u0010\u00c3\u0001*\t\u0012\u0004\u0012\u00028\u00000\u00a4\u0002*\u00020\u00192\u0013\u0010\u00a5\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0005\b\u00a0\u0004\u0010M\u001aC\u0010\u00a1\u0004\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u001d\u0010\u00b2\u0002\u001a\u0018\u0012\u0006\b\u0000\u0012\u00028\u00000\u00b0\u0002j\u000b\u0012\u0006\b\u0000\u0012\u00028\u0000`\u00b1\u0002\u00a2\u0006\u0006\b\u00a1\u0004\u0010\u00a2\u0004\u001a5\u0010\u00a1\u0004\u001a\u0004\u0018\u00010\u0005*\u00020\u00042\u001d\u0010\u00b2\u0002\u001a\u0018\u0012\u0006\b\u0000\u0012\u00020\u00050\u00b0\u0002j\u000b\u0012\u0006\b\u0000\u0012\u00020\u0005`\u00b1\u0002\u00a2\u0006\u0006\b\u00a1\u0004\u0010\u00a3\u0004\u001a5\u0010\u00a1\u0004\u001a\u0004\u0018\u00010\b*\u00020\u00072\u001d\u0010\u00b2\u0002\u001a\u0018\u0012\u0006\b\u0000\u0012\u00020\b0\u00b0\u0002j\u000b\u0012\u0006\b\u0000\u0012\u00020\b`\u00b1\u0002\u00a2\u0006\u0006\b\u00a1\u0004\u0010\u00a4\u0004\u001a5\u0010\u00a1\u0004\u001a\u0004\u0018\u00010\u000b*\u00020\n2\u001d\u0010\u00b2\u0002\u001a\u0018\u0012\u0006\b\u0000\u0012\u00020\u000b0\u00b0\u0002j\u000b\u0012\u0006\b\u0000\u0012\u00020\u000b`\u00b1\u0002\u00a2\u0006\u0006\b\u00a1\u0004\u0010\u00a5\u0004\u001a5\u0010\u00a1\u0004\u001a\u0004\u0018\u00010\u000e*\u00020\r2\u001d\u0010\u00b2\u0002\u001a\u0018\u0012\u0006\b\u0000\u0012\u00020\u000e0\u00b0\u0002j\u000b\u0012\u0006\b\u0000\u0012\u00020\u000e`\u00b1\u0002\u00a2\u0006\u0006\b\u00a1\u0004\u0010\u00a6\u0004\u001a5\u0010\u00a1\u0004\u001a\u0004\u0018\u00010\u0011*\u00020\u00102\u001d\u0010\u00b2\u0002\u001a\u0018\u0012\u0006\b\u0000\u0012\u00020\u00110\u00b0\u0002j\u000b\u0012\u0006\b\u0000\u0012\u00020\u0011`\u00b1\u0002\u00a2\u0006\u0006\b\u00a1\u0004\u0010\u00a7\u0004\u001a5\u0010\u00a1\u0004\u001a\u0004\u0018\u00010\u0014*\u00020\u00132\u001d\u0010\u00b2\u0002\u001a\u0018\u0012\u0006\b\u0000\u0012\u00020\u00140\u00b0\u0002j\u000b\u0012\u0006\b\u0000\u0012\u00020\u0014`\u00b1\u0002\u00a2\u0006\u0006\b\u00a1\u0004\u0010\u00a8\u0004\u001a5\u0010\u00a1\u0004\u001a\u0004\u0018\u00010\u0017*\u00020\u00162\u001d\u0010\u00b2\u0002\u001a\u0018\u0012\u0006\b\u0000\u0012\u00020\u00170\u00b0\u0002j\u000b\u0012\u0006\b\u0000\u0012\u00020\u0017`\u00b1\u0002\u00a2\u0006\u0006\b\u00a1\u0004\u0010\u00a9\u0004\u001a5\u0010\u00a1\u0004\u001a\u0004\u0018\u00010\u001a*\u00020\u00192\u001d\u0010\u00b2\u0002\u001a\u0018\u0012\u0006\b\u0000\u0012\u00020\u001a0\u00b0\u0002j\u000b\u0012\u0006\b\u0000\u0012\u00020\u001a`\u00b1\u0002\u00a2\u0006\u0006\b\u00a1\u0004\u0010\u00aa\u0004\u001a \u0010\u00ab\u0004\u001a\u0004\u0018\u00010\u0014*\n\u0012\u0006\b\u0001\u0012\u00020\u00140\u0001H\u0007\u00a2\u0006\u0006\b\u00ab\u0004\u0010\u009d\u0004\u001a \u0010\u00ab\u0004\u001a\u0004\u0018\u00010\u0011*\n\u0012\u0006\b\u0001\u0012\u00020\u00110\u0001H\u0007\u00a2\u0006\u0006\b\u00ab\u0004\u0010\u009e\u0004\u001a/\u0010\u00ab\u0004\u001a\u0004\u0018\u00018\u0000\"\u000f\b\u0000\u0010\u0000*\t\u0012\u0004\u0012\u00028\u00000\u00a4\u0002*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u0001\u00a2\u0006\u0006\b\u00ab\u0004\u0010\u009f\u0004\u001a\u0015\u0010\u00ab\u0004\u001a\u0004\u0018\u00010\u0005*\u00020\u0004\u00a2\u0006\u0005\b\u00ab\u0004\u0010Y\u001a\u0015\u0010\u00ab\u0004\u001a\u0004\u0018\u00010\b*\u00020\u0007\u00a2\u0006\u0005\b\u00ab\u0004\u0010Z\u001a\u0015\u0010\u00ab\u0004\u001a\u0004\u0018\u00010\u000b*\u00020\n\u00a2\u0006\u0005\b\u00ab\u0004\u0010[\u001a\u0015\u0010\u00ab\u0004\u001a\u0004\u0018\u00010\u000e*\u00020\r\u00a2\u0006\u0005\b\u00ab\u0004\u0010\\\u001a\u0015\u0010\u00ab\u0004\u001a\u0004\u0018\u00010\u0011*\u00020\u0010\u00a2\u0006\u0005\b\u00ab\u0004\u0010]\u001a\u0015\u0010\u00ab\u0004\u001a\u0004\u0018\u00010\u0014*\u00020\u0013\u00a2\u0006\u0005\b\u00ab\u0004\u0010^\u001a\u0015\u0010\u00ab\u0004\u001a\u0004\u0018\u00010\u001a*\u00020\u0019\u00a2\u0006\u0005\b\u00ab\u0004\u0010`\u001aM\u0010\u00ac\u0004\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000\"\u0010\b\u0001\u0010\u00c3\u0001*\t\u0012\u0004\u0012\u00028\u00010\u00a4\u0002*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0013\u0010\u00a5\u0002\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010-H\u0086\b\u00a2\u0006\u0005\b\u00ac\u0004\u0010E\u001a?\u0010\u00ac\u0004\u001a\u0004\u0018\u00010\u0005\"\u0010\b\u0000\u0010\u00c3\u0001*\t\u0012\u0004\u0012\u00028\u00000\u00a4\u0002*\u00020\u00042\u0013\u0010\u00a5\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0005\b\u00ac\u0004\u0010F\u001a?\u0010\u00ac\u0004\u001a\u0004\u0018\u00010\b\"\u0010\b\u0000\u0010\u00c3\u0001*\t\u0012\u0004\u0012\u00028\u00000\u00a4\u0002*\u00020\u00072\u0013\u0010\u00a5\u0002\u001a\u000e\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0005\b\u00ac\u0004\u0010G\u001a?\u0010\u00ac\u0004\u001a\u0004\u0018\u00010\u000b\"\u0010\b\u0000\u0010\u00c3\u0001*\t\u0012\u0004\u0012\u00028\u00000\u00a4\u0002*\u00020\n2\u0013\u0010\u00a5\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0005\b\u00ac\u0004\u0010H\u001a?\u0010\u00ac\u0004\u001a\u0004\u0018\u00010\u000e\"\u0010\b\u0000\u0010\u00c3\u0001*\t\u0012\u0004\u0012\u00028\u00000\u00a4\u0002*\u00020\r2\u0013\u0010\u00a5\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0005\b\u00ac\u0004\u0010I\u001a?\u0010\u00ac\u0004\u001a\u0004\u0018\u00010\u0011\"\u0010\b\u0000\u0010\u00c3\u0001*\t\u0012\u0004\u0012\u00028\u00000\u00a4\u0002*\u00020\u00102\u0013\u0010\u00a5\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0005\b\u00ac\u0004\u0010J\u001a?\u0010\u00ac\u0004\u001a\u0004\u0018\u00010\u0014\"\u0010\b\u0000\u0010\u00c3\u0001*\t\u0012\u0004\u0012\u00028\u00000\u00a4\u0002*\u00020\u00132\u0013\u0010\u00a5\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0005\b\u00ac\u0004\u0010K\u001a?\u0010\u00ac\u0004\u001a\u0004\u0018\u00010\u0017\"\u0010\b\u0000\u0010\u00c3\u0001*\t\u0012\u0004\u0012\u00028\u00000\u00a4\u0002*\u00020\u00162\u0013\u0010\u00a5\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0005\b\u00ac\u0004\u0010L\u001a?\u0010\u00ac\u0004\u001a\u0004\u0018\u00010\u001a\"\u0010\b\u0000\u0010\u00c3\u0001*\t\u0012\u0004\u0012\u00028\u00000\u00a4\u0002*\u00020\u00192\u0013\u0010\u00a5\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00028\u00000-H\u0086\b\u00a2\u0006\u0005\b\u00ac\u0004\u0010M\u001aC\u0010\u00ad\u0004\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u001d\u0010\u00b2\u0002\u001a\u0018\u0012\u0006\b\u0000\u0012\u00028\u00000\u00b0\u0002j\u000b\u0012\u0006\b\u0000\u0012\u00028\u0000`\u00b1\u0002\u00a2\u0006\u0006\b\u00ad\u0004\u0010\u00a2\u0004\u001a5\u0010\u00ad\u0004\u001a\u0004\u0018\u00010\u0005*\u00020\u00042\u001d\u0010\u00b2\u0002\u001a\u0018\u0012\u0006\b\u0000\u0012\u00020\u00050\u00b0\u0002j\u000b\u0012\u0006\b\u0000\u0012\u00020\u0005`\u00b1\u0002\u00a2\u0006\u0006\b\u00ad\u0004\u0010\u00a3\u0004\u001a5\u0010\u00ad\u0004\u001a\u0004\u0018\u00010\b*\u00020\u00072\u001d\u0010\u00b2\u0002\u001a\u0018\u0012\u0006\b\u0000\u0012\u00020\b0\u00b0\u0002j\u000b\u0012\u0006\b\u0000\u0012\u00020\b`\u00b1\u0002\u00a2\u0006\u0006\b\u00ad\u0004\u0010\u00a4\u0004\u001a5\u0010\u00ad\u0004\u001a\u0004\u0018\u00010\u000b*\u00020\n2\u001d\u0010\u00b2\u0002\u001a\u0018\u0012\u0006\b\u0000\u0012\u00020\u000b0\u00b0\u0002j\u000b\u0012\u0006\b\u0000\u0012\u00020\u000b`\u00b1\u0002\u00a2\u0006\u0006\b\u00ad\u0004\u0010\u00a5\u0004\u001a5\u0010\u00ad\u0004\u001a\u0004\u0018\u00010\u000e*\u00020\r2\u001d\u0010\u00b2\u0002\u001a\u0018\u0012\u0006\b\u0000\u0012\u00020\u000e0\u00b0\u0002j\u000b\u0012\u0006\b\u0000\u0012\u00020\u000e`\u00b1\u0002\u00a2\u0006\u0006\b\u00ad\u0004\u0010\u00a6\u0004\u001a5\u0010\u00ad\u0004\u001a\u0004\u0018\u00010\u0011*\u00020\u00102\u001d\u0010\u00b2\u0002\u001a\u0018\u0012\u0006\b\u0000\u0012\u00020\u00110\u00b0\u0002j\u000b\u0012\u0006\b\u0000\u0012\u00020\u0011`\u00b1\u0002\u00a2\u0006\u0006\b\u00ad\u0004\u0010\u00a7\u0004\u001a5\u0010\u00ad\u0004\u001a\u0004\u0018\u00010\u0014*\u00020\u00132\u001d\u0010\u00b2\u0002\u001a\u0018\u0012\u0006\b\u0000\u0012\u00020\u00140\u00b0\u0002j\u000b\u0012\u0006\b\u0000\u0012\u00020\u0014`\u00b1\u0002\u00a2\u0006\u0006\b\u00ad\u0004\u0010\u00a8\u0004\u001a5\u0010\u00ad\u0004\u001a\u0004\u0018\u00010\u0017*\u00020\u00162\u001d\u0010\u00b2\u0002\u001a\u0018\u0012\u0006\b\u0000\u0012\u00020\u00170\u00b0\u0002j\u000b\u0012\u0006\b\u0000\u0012\u00020\u0017`\u00b1\u0002\u00a2\u0006\u0006\b\u00ad\u0004\u0010\u00a9\u0004\u001a5\u0010\u00ad\u0004\u001a\u0004\u0018\u00010\u001a*\u00020\u00192\u001d\u0010\u00b2\u0002\u001a\u0018\u0012\u0006\b\u0000\u0012\u00020\u001a0\u00b0\u0002j\u000b\u0012\u0006\b\u0000\u0012\u00020\u001a`\u00b1\u0002\u00a2\u0006\u0006\b\u00ad\u0004\u0010\u00aa\u0004\u001a\"\u0010\u00ae\u0004\u001a\u00020\u0017\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u0001\u00a2\u0006\u0006\b\u00ae\u0004\u0010\u00c3\u0002\u001a\u0014\u0010\u00ae\u0004\u001a\u00020\u0017*\u00020\u0004\u00a2\u0006\u0006\b\u00ae\u0004\u0010\u00c4\u0002\u001a\u0014\u0010\u00ae\u0004\u001a\u00020\u0017*\u00020\u0007\u00a2\u0006\u0006\b\u00ae\u0004\u0010\u00c5\u0002\u001a\u0014\u0010\u00ae\u0004\u001a\u00020\u0017*\u00020\n\u00a2\u0006\u0006\b\u00ae\u0004\u0010\u00c6\u0002\u001a\u0014\u0010\u00ae\u0004\u001a\u00020\u0017*\u00020\r\u00a2\u0006\u0006\b\u00ae\u0004\u0010\u00c7\u0002\u001a\u0014\u0010\u00ae\u0004\u001a\u00020\u0017*\u00020\u0010\u00a2\u0006\u0006\b\u00ae\u0004\u0010\u00c8\u0002\u001a\u0014\u0010\u00ae\u0004\u001a\u00020\u0017*\u00020\u0013\u00a2\u0006\u0006\b\u00ae\u0004\u0010\u00c9\u0002\u001a\u0013\u0010\u00ae\u0004\u001a\u00020\u0017*\u00020\u0016\u00a2\u0006\u0005\b\u00ae\u0004\u0010\u0018\u001a\u0014\u0010\u00ae\u0004\u001a\u00020\u0017*\u00020\u0019\u00a2\u0006\u0006\b\u00ae\u0004\u0010\u00ca\u0002\u001a9\u0010\u00ae\u0004\u001a\u00020\u0017\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00ae\u0004\u0010\u00dc\u0003\u001a+\u0010\u00ae\u0004\u001a\u00020\u0017*\u00020\u00042\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00ae\u0004\u0010\u00dd\u0003\u001a+\u0010\u00ae\u0004\u001a\u00020\u0017*\u00020\u00072\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00ae\u0004\u0010\u00de\u0003\u001a+\u0010\u00ae\u0004\u001a\u00020\u0017*\u00020\n2\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00ae\u0004\u0010\u00df\u0003\u001a+\u0010\u00ae\u0004\u001a\u00020\u0017*\u00020\r2\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00ae\u0004\u0010\u00e0\u0003\u001a+\u0010\u00ae\u0004\u001a\u00020\u0017*\u00020\u00102\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00ae\u0004\u0010\u00e1\u0003\u001a+\u0010\u00ae\u0004\u001a\u00020\u0017*\u00020\u00132\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00ae\u0004\u0010\u00e2\u0003\u001a*\u0010\u00ae\u0004\u001a\u00020\u0017*\u00020\u00162\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0005\b\u00ae\u0004\u0010V\u001a+\u0010\u00ae\u0004\u001a\u00020\u0017*\u00020\u00192\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00ae\u0004\u0010\u00e3\u0003\u001a^\u0010\u00b0\u0004\u001a\u00028\u0000\"\u0005\b\u0000\u0010\u00af\u0004\"\b\b\u0001\u0010\u0000*\u00028\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00010\u00012,\u0010\u00f0\u0003\u001a'\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00b0\u0004\u0010\u00b1\u0004\u001aE\u0010\u00b0\u0004\u001a\u00020\u0005*\u00020\u00042,\u0010\u00f0\u0003\u001a'\u0012\u0016\u0012\u00140\u0005\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00050\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00b0\u0004\u0010\u00b2\u0004\u001aE\u0010\u00b0\u0004\u001a\u00020\b*\u00020\u00072,\u0010\u00f0\u0003\u001a'\u0012\u0016\u0012\u00140\b\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\b0\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00b0\u0004\u0010\u00b3\u0004\u001aE\u0010\u00b0\u0004\u001a\u00020\u000b*\u00020\n2,\u0010\u00f0\u0003\u001a'\u0012\u0016\u0012\u00140\u000b\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\u000b0\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00b0\u0004\u0010\u00b4\u0004\u001aE\u0010\u00b0\u0004\u001a\u00020\u000e*\u00020\r2,\u0010\u00f0\u0003\u001a'\u0012\u0016\u0012\u00140\u000e\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00020\u000e0\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00b0\u0004\u0010\u00b5\u0004\u001aE\u0010\u00b0\u0004\u001a\u00020\u0011*\u00020\u00102,\u0010\u00f0\u0003\u001a'\u0012\u0016\u0012\u00140\u0011\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00020\u00110\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00b0\u0004\u0010\u00b6\u0004\u001aE\u0010\u00b0\u0004\u001a\u00020\u0014*\u00020\u00132,\u0010\u00f0\u0003\u001a'\u0012\u0016\u0012\u00140\u0014\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00020\u00140\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00b0\u0004\u0010\u00b7\u0004\u001aE\u0010\u00b0\u0004\u001a\u00020\u0017*\u00020\u00162,\u0010\u00f0\u0003\u001a'\u0012\u0016\u0012\u00140\u0017\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00020\u00170\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00b0\u0004\u0010\u00b8\u0004\u001aE\u0010\u00b0\u0004\u001a\u00020\u001a*\u00020\u00192,\u0010\u00f0\u0003\u001a'\u0012\u0016\u0012\u00140\u001a\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00020\u001a0\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00b0\u0004\u0010\u00b9\u0004\u001au\u0010\u00ba\u0004\u001a\u00028\u0000\"\u0005\b\u0000\u0010\u00af\u0004\"\b\b\u0001\u0010\u0000*\u00028\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00010\u00012C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00000\u00fb\u0003H\u0086\b\u00a2\u0006\u0006\b\u00ba\u0004\u0010\u00bb\u0004\u001a\\\u0010\u00ba\u0004\u001a\u00020\u0005*\u00020\u00042C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0016\u0012\u00140\u0005\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00050\u00fb\u0003H\u0086\b\u00a2\u0006\u0006\b\u00ba\u0004\u0010\u00bc\u0004\u001a\\\u0010\u00ba\u0004\u001a\u00020\b*\u00020\u00072C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0016\u0012\u00140\b\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\b0\u00fb\u0003H\u0086\b\u00a2\u0006\u0006\b\u00ba\u0004\u0010\u00bd\u0004\u001a\\\u0010\u00ba\u0004\u001a\u00020\u000b*\u00020\n2C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0016\u0012\u00140\u000b\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\u000b0\u00fb\u0003H\u0086\b\u00a2\u0006\u0006\b\u00ba\u0004\u0010\u00be\u0004\u001a\\\u0010\u00ba\u0004\u001a\u00020\u000e*\u00020\r2C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0016\u0012\u00140\u000e\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00020\u000e0\u00fb\u0003H\u0086\b\u00a2\u0006\u0006\b\u00ba\u0004\u0010\u00bf\u0004\u001a\\\u0010\u00ba\u0004\u001a\u00020\u0011*\u00020\u00102C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0016\u0012\u00140\u0011\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00020\u00110\u00fb\u0003H\u0086\b\u00a2\u0006\u0006\b\u00ba\u0004\u0010\u00c0\u0004\u001a\\\u0010\u00ba\u0004\u001a\u00020\u0014*\u00020\u00132C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0016\u0012\u00140\u0014\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00020\u00140\u00fb\u0003H\u0086\b\u00a2\u0006\u0006\b\u00ba\u0004\u0010\u00c1\u0004\u001a\\\u0010\u00ba\u0004\u001a\u00020\u0017*\u00020\u00162C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0016\u0012\u00140\u0017\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00020\u00170\u00fb\u0003H\u0086\b\u00a2\u0006\u0006\b\u00ba\u0004\u0010\u00c2\u0004\u001a\\\u0010\u00ba\u0004\u001a\u00020\u001a*\u00020\u00192C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0016\u0012\u00140\u001a\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00020\u001a0\u00fb\u0003H\u0086\b\u00a2\u0006\u0006\b\u00ba\u0004\u0010\u00c3\u0004\u001a`\u0010\u00c4\u0004\u001a\u0004\u0018\u00018\u0000\"\u0005\b\u0000\u0010\u00af\u0004\"\b\b\u0001\u0010\u0000*\u00028\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00010\u00012,\u0010\u00f0\u0003\u001a'\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0087\b\u00a2\u0006\u0006\b\u00c4\u0004\u0010\u00b1\u0004\u001aG\u0010\u00c4\u0004\u001a\u0004\u0018\u00010\u0005*\u00020\u00042,\u0010\u00f0\u0003\u001a'\u0012\u0016\u0012\u00140\u0005\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00050\u00a9\u0001H\u0087\b\u00a2\u0006\u0006\b\u00c4\u0004\u0010\u00c5\u0004\u001aG\u0010\u00c4\u0004\u001a\u0004\u0018\u00010\b*\u00020\u00072,\u0010\u00f0\u0003\u001a'\u0012\u0016\u0012\u00140\b\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\b0\u00a9\u0001H\u0087\b\u00a2\u0006\u0006\b\u00c4\u0004\u0010\u00c6\u0004\u001aG\u0010\u00c4\u0004\u001a\u0004\u0018\u00010\u000b*\u00020\n2,\u0010\u00f0\u0003\u001a'\u0012\u0016\u0012\u00140\u000b\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\u000b0\u00a9\u0001H\u0087\b\u00a2\u0006\u0006\b\u00c4\u0004\u0010\u00c7\u0004\u001aG\u0010\u00c4\u0004\u001a\u0004\u0018\u00010\u000e*\u00020\r2,\u0010\u00f0\u0003\u001a'\u0012\u0016\u0012\u00140\u000e\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00020\u000e0\u00a9\u0001H\u0087\b\u00a2\u0006\u0006\b\u00c4\u0004\u0010\u00c8\u0004\u001aG\u0010\u00c4\u0004\u001a\u0004\u0018\u00010\u0011*\u00020\u00102,\u0010\u00f0\u0003\u001a'\u0012\u0016\u0012\u00140\u0011\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00020\u00110\u00a9\u0001H\u0087\b\u00a2\u0006\u0006\b\u00c4\u0004\u0010\u00c9\u0004\u001aG\u0010\u00c4\u0004\u001a\u0004\u0018\u00010\u0014*\u00020\u00132,\u0010\u00f0\u0003\u001a'\u0012\u0016\u0012\u00140\u0014\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00020\u00140\u00a9\u0001H\u0087\b\u00a2\u0006\u0006\b\u00c4\u0004\u0010\u00ca\u0004\u001aG\u0010\u00c4\u0004\u001a\u0004\u0018\u00010\u0017*\u00020\u00162,\u0010\u00f0\u0003\u001a'\u0012\u0016\u0012\u00140\u0017\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00020\u00170\u00a9\u0001H\u0087\b\u00a2\u0006\u0006\b\u00c4\u0004\u0010\u00cb\u0004\u001aG\u0010\u00c4\u0004\u001a\u0004\u0018\u00010\u001a*\u00020\u00192,\u0010\u00f0\u0003\u001a'\u0012\u0016\u0012\u00140\u001a\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00020\u001a0\u00a9\u0001H\u0087\b\u00a2\u0006\u0006\b\u00c4\u0004\u0010\u00cc\u0004\u001a^\u0010\u00cd\u0004\u001a\u00028\u0000\"\u0005\b\u0000\u0010\u00af\u0004\"\b\b\u0001\u0010\u0000*\u00028\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00010\u00012,\u0010\u00f0\u0003\u001a'\u0012\u0004\u0012\u00028\u0001\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00cd\u0004\u0010\u00b1\u0004\u001aE\u0010\u00cd\u0004\u001a\u00020\u0005*\u00020\u00042,\u0010\u00f0\u0003\u001a'\u0012\u0004\u0012\u00020\u0005\u0012\u0016\u0012\u00140\u0005\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u00050\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00cd\u0004\u0010\u00b2\u0004\u001aE\u0010\u00cd\u0004\u001a\u00020\b*\u00020\u00072,\u0010\u00f0\u0003\u001a'\u0012\u0004\u0012\u00020\b\u0012\u0016\u0012\u00140\b\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\b0\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00cd\u0004\u0010\u00b3\u0004\u001aE\u0010\u00cd\u0004\u001a\u00020\u000b*\u00020\n2,\u0010\u00f0\u0003\u001a'\u0012\u0004\u0012\u00020\u000b\u0012\u0016\u0012\u00140\u000b\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u000b0\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00cd\u0004\u0010\u00b4\u0004\u001aE\u0010\u00cd\u0004\u001a\u00020\u000e*\u00020\r2,\u0010\u00f0\u0003\u001a'\u0012\u0004\u0012\u00020\u000e\u0012\u0016\u0012\u00140\u000e\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u000e0\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00cd\u0004\u0010\u00b5\u0004\u001aE\u0010\u00cd\u0004\u001a\u00020\u0011*\u00020\u00102,\u0010\u00f0\u0003\u001a'\u0012\u0004\u0012\u00020\u0011\u0012\u0016\u0012\u00140\u0011\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u00110\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00cd\u0004\u0010\u00b6\u0004\u001aE\u0010\u00cd\u0004\u001a\u00020\u0014*\u00020\u00132,\u0010\u00f0\u0003\u001a'\u0012\u0004\u0012\u00020\u0014\u0012\u0016\u0012\u00140\u0014\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u00140\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00cd\u0004\u0010\u00b7\u0004\u001aE\u0010\u00cd\u0004\u001a\u00020\u0017*\u00020\u00162,\u0010\u00f0\u0003\u001a'\u0012\u0004\u0012\u00020\u0017\u0012\u0016\u0012\u00140\u0017\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u00170\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00cd\u0004\u0010\u00b8\u0004\u001aE\u0010\u00cd\u0004\u001a\u00020\u001a*\u00020\u00192,\u0010\u00f0\u0003\u001a'\u0012\u0004\u0012\u00020\u001a\u0012\u0016\u0012\u00140\u001a\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u001a0\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u00cd\u0004\u0010\u00b9\u0004\u001au\u0010\u00ce\u0004\u001a\u00028\u0000\"\u0005\b\u0000\u0010\u00af\u0004\"\b\b\u0001\u0010\u0000*\u00028\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00010\u00012C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00028\u0001\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00028\u00000\u00fb\u0003H\u0086\b\u00a2\u0006\u0006\b\u00ce\u0004\u0010\u00bb\u0004\u001a\\\u0010\u00ce\u0004\u001a\u00020\u0005*\u00020\u00042C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u0005\u0012\u0016\u0012\u00140\u0005\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u00050\u00fb\u0003H\u0086\b\u00a2\u0006\u0006\b\u00ce\u0004\u0010\u00bc\u0004\u001a\\\u0010\u00ce\u0004\u001a\u00020\b*\u00020\u00072C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\b\u0012\u0016\u0012\u00140\b\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\b0\u00fb\u0003H\u0086\b\u00a2\u0006\u0006\b\u00ce\u0004\u0010\u00bd\u0004\u001a\\\u0010\u00ce\u0004\u001a\u00020\u000b*\u00020\n2C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u000b\u0012\u0016\u0012\u00140\u000b\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u000b0\u00fb\u0003H\u0086\b\u00a2\u0006\u0006\b\u00ce\u0004\u0010\u00be\u0004\u001a\\\u0010\u00ce\u0004\u001a\u00020\u000e*\u00020\r2C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u000e\u0012\u0016\u0012\u00140\u000e\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u000e0\u00fb\u0003H\u0086\b\u00a2\u0006\u0006\b\u00ce\u0004\u0010\u00bf\u0004\u001a\\\u0010\u00ce\u0004\u001a\u00020\u0011*\u00020\u00102C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u0011\u0012\u0016\u0012\u00140\u0011\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u00110\u00fb\u0003H\u0086\b\u00a2\u0006\u0006\b\u00ce\u0004\u0010\u00c0\u0004\u001a\\\u0010\u00ce\u0004\u001a\u00020\u0014*\u00020\u00132C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u0014\u0012\u0016\u0012\u00140\u0014\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u00140\u00fb\u0003H\u0086\b\u00a2\u0006\u0006\b\u00ce\u0004\u0010\u00c1\u0004\u001a\\\u0010\u00ce\u0004\u001a\u00020\u0017*\u00020\u00162C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u0017\u0012\u0016\u0012\u00140\u0017\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u00170\u00fb\u0003H\u0086\b\u00a2\u0006\u0006\b\u00ce\u0004\u0010\u00c2\u0004\u001a\\\u0010\u00ce\u0004\u001a\u00020\u001a*\u00020\u00192C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0004\u0012\u00020\u001a\u0012\u0016\u0012\u00140\u001a\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u001a0\u00fb\u0003H\u0086\b\u00a2\u0006\u0006\b\u00ce\u0004\u0010\u00c3\u0004\u001a`\u0010\u00cf\u0004\u001a\u0004\u0018\u00018\u0000\"\u0005\b\u0000\u0010\u00af\u0004\"\b\b\u0001\u0010\u0000*\u00028\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00010\u00012,\u0010\u00f0\u0003\u001a'\u0012\u0004\u0012\u00028\u0001\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0087\b\u00a2\u0006\u0006\b\u00cf\u0004\u0010\u00b1\u0004\u001aG\u0010\u00cf\u0004\u001a\u0004\u0018\u00010\u0005*\u00020\u00042,\u0010\u00f0\u0003\u001a'\u0012\u0004\u0012\u00020\u0005\u0012\u0016\u0012\u00140\u0005\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u00050\u00a9\u0001H\u0087\b\u00a2\u0006\u0006\b\u00cf\u0004\u0010\u00c5\u0004\u001aG\u0010\u00cf\u0004\u001a\u0004\u0018\u00010\b*\u00020\u00072,\u0010\u00f0\u0003\u001a'\u0012\u0004\u0012\u00020\b\u0012\u0016\u0012\u00140\b\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\b0\u00a9\u0001H\u0087\b\u00a2\u0006\u0006\b\u00cf\u0004\u0010\u00c6\u0004\u001aG\u0010\u00cf\u0004\u001a\u0004\u0018\u00010\u000b*\u00020\n2,\u0010\u00f0\u0003\u001a'\u0012\u0004\u0012\u00020\u000b\u0012\u0016\u0012\u00140\u000b\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u000b0\u00a9\u0001H\u0087\b\u00a2\u0006\u0006\b\u00cf\u0004\u0010\u00c7\u0004\u001aG\u0010\u00cf\u0004\u001a\u0004\u0018\u00010\u000e*\u00020\r2,\u0010\u00f0\u0003\u001a'\u0012\u0004\u0012\u00020\u000e\u0012\u0016\u0012\u00140\u000e\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u000e0\u00a9\u0001H\u0087\b\u00a2\u0006\u0006\b\u00cf\u0004\u0010\u00c8\u0004\u001aG\u0010\u00cf\u0004\u001a\u0004\u0018\u00010\u0011*\u00020\u00102,\u0010\u00f0\u0003\u001a'\u0012\u0004\u0012\u00020\u0011\u0012\u0016\u0012\u00140\u0011\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u00110\u00a9\u0001H\u0087\b\u00a2\u0006\u0006\b\u00cf\u0004\u0010\u00c9\u0004\u001aG\u0010\u00cf\u0004\u001a\u0004\u0018\u00010\u0014*\u00020\u00132,\u0010\u00f0\u0003\u001a'\u0012\u0004\u0012\u00020\u0014\u0012\u0016\u0012\u00140\u0014\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u00140\u00a9\u0001H\u0087\b\u00a2\u0006\u0006\b\u00cf\u0004\u0010\u00ca\u0004\u001aG\u0010\u00cf\u0004\u001a\u0004\u0018\u00010\u0017*\u00020\u00162,\u0010\u00f0\u0003\u001a'\u0012\u0004\u0012\u00020\u0017\u0012\u0016\u0012\u00140\u0017\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u00170\u00a9\u0001H\u0087\b\u00a2\u0006\u0006\b\u00cf\u0004\u0010\u00cb\u0004\u001aG\u0010\u00cf\u0004\u001a\u0004\u0018\u00010\u001a*\u00020\u00192,\u0010\u00f0\u0003\u001a'\u0012\u0004\u0012\u00020\u001a\u0012\u0016\u0012\u00140\u001a\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u001a0\u00a9\u0001H\u0087\b\u00a2\u0006\u0006\b\u00cf\u0004\u0010\u00cc\u0004\u001aj\u0010\u00d0\u0004\u001a\t\u0012\u0004\u0012\u00028\u00010\u0091\u0001\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u00c3\u0001*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0007\u0010\u00ee\u0003\u001a\u00028\u00012,\u0010\u00f0\u0003\u001a'\u0012\u0016\u0012\u00148\u0001\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00a9\u0001H\u0087\b\u00a2\u0006\u0006\b\u00d0\u0004\u0010\u00d1\u0004\u001a\\\u0010\u00d0\u0004\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00042\u0007\u0010\u00ee\u0003\u001a\u00028\u00002,\u0010\u00f0\u0003\u001a'\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0087\b\u00a2\u0006\u0006\b\u00d0\u0004\u0010\u00d2\u0004\u001a\\\u0010\u00d0\u0004\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00072\u0007\u0010\u00ee\u0003\u001a\u00028\u00002,\u0010\u00f0\u0003\u001a'\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0087\b\u00a2\u0006\u0006\b\u00d0\u0004\u0010\u00d3\u0004\u001a\\\u0010\u00d0\u0004\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\n2\u0007\u0010\u00ee\u0003\u001a\u00028\u00002,\u0010\u00f0\u0003\u001a'\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0087\b\u00a2\u0006\u0006\b\u00d0\u0004\u0010\u00d4\u0004\u001a\\\u0010\u00d0\u0004\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\r2\u0007\u0010\u00ee\u0003\u001a\u00028\u00002,\u0010\u00f0\u0003\u001a'\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0087\b\u00a2\u0006\u0006\b\u00d0\u0004\u0010\u00d5\u0004\u001a\\\u0010\u00d0\u0004\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00102\u0007\u0010\u00ee\u0003\u001a\u00028\u00002,\u0010\u00f0\u0003\u001a'\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0087\b\u00a2\u0006\u0006\b\u00d0\u0004\u0010\u00d6\u0004\u001a\\\u0010\u00d0\u0004\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00132\u0007\u0010\u00ee\u0003\u001a\u00028\u00002,\u0010\u00f0\u0003\u001a'\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0087\b\u00a2\u0006\u0006\b\u00d0\u0004\u0010\u00d7\u0004\u001a\\\u0010\u00d0\u0004\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00162\u0007\u0010\u00ee\u0003\u001a\u00028\u00002,\u0010\u00f0\u0003\u001a'\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0087\b\u00a2\u0006\u0006\b\u00d0\u0004\u0010\u00d8\u0004\u001a\\\u0010\u00d0\u0004\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00192\u0007\u0010\u00ee\u0003\u001a\u00028\u00002,\u0010\u00f0\u0003\u001a'\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0087\b\u00a2\u0006\u0006\b\u00d0\u0004\u0010\u00d9\u0004\u001a\u0081\u0001\u0010\u00da\u0004\u001a\t\u0012\u0004\u0012\u00028\u00010\u0091\u0001\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u00c3\u0001*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0007\u0010\u00ee\u0003\u001a\u00028\u00012C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0016\u0012\u00148\u0001\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00fb\u0003H\u0087\b\u00a2\u0006\u0006\b\u00da\u0004\u0010\u00db\u0004\u001as\u0010\u00da\u0004\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020", "\u00042\u0007\u0010\u00ee\u0003\u001a\u00028\u00002C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00028\u00000\u00fb\u0003H\u0087\b\u00a2\u0006\u0006\b\u00da\u0004\u0010\u00dc\u0004\u001as\u0010\u00da\u0004\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00072\u0007\u0010\u00ee\u0003\u001a\u00028\u00002C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00028\u00000\u00fb\u0003H\u0087\b\u00a2\u0006\u0006\b\u00da\u0004\u0010\u00dd\u0004\u001as\u0010\u00da\u0004\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\n2\u0007\u0010\u00ee\u0003\u001a\u00028\u00002C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00028\u00000\u00fb\u0003H\u0087\b\u00a2\u0006\u0006\b\u00da\u0004\u0010\u00de\u0004\u001as\u0010\u00da\u0004\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\r2\u0007\u0010\u00ee\u0003\u001a\u00028\u00002C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00028\u00000\u00fb\u0003H\u0087\b\u00a2\u0006\u0006\b\u00da\u0004\u0010\u00df\u0004\u001as\u0010\u00da\u0004\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00102\u0007\u0010\u00ee\u0003\u001a\u00028\u00002C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00028\u00000\u00fb\u0003H\u0087\b\u00a2\u0006\u0006\b\u00da\u0004\u0010\u00e0\u0004\u001as\u0010\u00da\u0004\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00132\u0007\u0010\u00ee\u0003\u001a\u00028\u00002C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00028\u00000\u00fb\u0003H\u0087\b\u00a2\u0006\u0006\b\u00da\u0004\u0010\u00e1\u0004\u001as\u0010\u00da\u0004\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00162\u0007\u0010\u00ee\u0003\u001a\u00028\u00002C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00028\u00000\u00fb\u0003H\u0087\b\u00a2\u0006\u0006\b\u00da\u0004\u0010\u00e2\u0004\u001as\u0010\u00da\u0004\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00192\u0007\u0010\u00ee\u0003\u001a\u00028\u00002C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00028\u00000\u00fb\u0003H\u0087\b\u00a2\u0006\u0006\b\u00da\u0004\u0010\u00e3\u0004\u001ae\u0010\u00e4\u0004\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0005\b\u0000\u0010\u00af\u0004\"\b\b\u0001\u0010\u0000*\u00028\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00010\u00012,\u0010\u00f0\u0003\u001a'\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0087\b\u00a2\u0006\u0006\b\u00e4\u0004\u0010\u00ad\u0001\u001aL\u0010\u00e4\u0004\u001a\t\u0012\u0004\u0012\u00020\u00050\u0091\u0001*\u00020\u00042,\u0010\u00f0\u0003\u001a'\u0012\u0016\u0012\u00140\u0005\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00050\u00a9\u0001H\u0087\b\u00a2\u0006\u0006\b\u00e4\u0004\u0010\u00ae\u0001\u001aL\u0010\u00e4\u0004\u001a\t\u0012\u0004\u0012\u00020\b0\u0091\u0001*\u00020\u00072,\u0010\u00f0\u0003\u001a'\u0012\u0016\u0012\u00140\b\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\b0\u00a9\u0001H\u0087\b\u00a2\u0006\u0006\b\u00e4\u0004\u0010\u00af\u0001\u001aL\u0010\u00e4\u0004\u001a\t\u0012\u0004\u0012\u00020\u000b0\u0091\u0001*\u00020\n2,\u0010\u00f0\u0003\u001a'\u0012\u0016\u0012\u00140\u000b\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\u000b0\u00a9\u0001H\u0087\b\u00a2\u0006\u0006\b\u00e4\u0004\u0010\u00b0\u0001\u001aL\u0010\u00e4\u0004\u001a\t\u0012\u0004\u0012\u00020\u000e0\u0091\u0001*\u00020\r2,\u0010\u00f0\u0003\u001a'\u0012\u0016\u0012\u00140\u000e\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00020\u000e0\u00a9\u0001H\u0087\b\u00a2\u0006\u0006\b\u00e4\u0004\u0010\u00b1\u0001\u001aL\u0010\u00e4\u0004\u001a\t\u0012\u0004\u0012\u00020\u00110\u0091\u0001*\u00020\u00102,\u0010\u00f0\u0003\u001a'\u0012\u0016\u0012\u00140\u0011\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00020\u00110\u00a9\u0001H\u0087\b\u00a2\u0006\u0006\b\u00e4\u0004\u0010\u00b2\u0001\u001aL\u0010\u00e4\u0004\u001a\t\u0012\u0004\u0012\u00020\u00140\u0091\u0001*\u00020\u00132,\u0010\u00f0\u0003\u001a'\u0012\u0016\u0012\u00140\u0014\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00020\u00140\u00a9\u0001H\u0087\b\u00a2\u0006\u0006\b\u00e4\u0004\u0010\u00b3\u0001\u001aL\u0010\u00e4\u0004\u001a\t\u0012\u0004\u0012\u00020\u00170\u0091\u0001*\u00020\u00162,\u0010\u00f0\u0003\u001a'\u0012\u0016\u0012\u00140\u0017\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00020\u00170\u00a9\u0001H\u0087\b\u00a2\u0006\u0006\b\u00e4\u0004\u0010\u00b4\u0001\u001aL\u0010\u00e4\u0004\u001a\t\u0012\u0004\u0012\u00020\u001a0\u0091\u0001*\u00020\u00192,\u0010\u00f0\u0003\u001a'\u0012\u0016\u0012\u00140\u001a\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00020\u001a0\u00a9\u0001H\u0087\b\u00a2\u0006\u0006\b\u00e4\u0004\u0010\u00b5\u0001\u001a|\u0010\u00e5\u0004\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0005\b\u0000\u0010\u00af\u0004\"\b\b\u0001\u0010\u0000*\u00028\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00010\u00012C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00000\u00fb\u0003H\u0087\b\u00a2\u0006\u0006\b\u00e5\u0004\u0010\u00e6\u0004\u001ac\u0010\u00e5\u0004\u001a\t\u0012\u0004\u0012\u00020\u00050\u0091\u0001*\u00020\u00042C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0016\u0012\u00140\u0005\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00050\u00fb\u0003H\u0087\b\u00a2\u0006\u0006\b\u00e5\u0004\u0010\u00e7\u0004\u001ac\u0010\u00e5\u0004\u001a\t\u0012\u0004\u0012\u00020\b0\u0091\u0001*\u00020\u00072C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0016\u0012\u00140\b\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\b0\u00fb\u0003H\u0087\b\u00a2\u0006\u0006\b\u00e5\u0004\u0010\u00e8\u0004\u001ac\u0010\u00e5\u0004\u001a\t\u0012\u0004\u0012\u00020\u000b0\u0091\u0001*\u00020\n2C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0016\u0012\u00140\u000b\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\u000b0\u00fb\u0003H\u0087\b\u00a2\u0006\u0006\b\u00e5\u0004\u0010\u00e9\u0004\u001ac\u0010\u00e5\u0004\u001a\t\u0012\u0004\u0012\u00020\u000e0\u0091\u0001*\u00020\r2C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0016\u0012\u00140\u000e\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00020\u000e0\u00fb\u0003H\u0087\b\u00a2\u0006\u0006\b\u00e5\u0004\u0010\u00ea\u0004\u001ac\u0010\u00e5\u0004\u001a\t\u0012\u0004\u0012\u00020\u00110\u0091\u0001*\u00020\u00102C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0016\u0012\u00140\u0011\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00020\u00110\u00fb\u0003H\u0087\b\u00a2\u0006\u0006\b\u00e5\u0004\u0010\u00eb\u0004\u001ac\u0010\u00e5\u0004\u001a\t\u0012\u0004\u0012\u00020\u00140\u0091\u0001*\u00020\u00132C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0016\u0012\u00140\u0014\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00020\u00140\u00fb\u0003H\u0087\b\u00a2\u0006\u0006\b\u00e5\u0004\u0010\u00ec\u0004\u001ac\u0010\u00e5\u0004\u001a\t\u0012\u0004\u0012\u00020\u00170\u0091\u0001*\u00020\u00162C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0016\u0012\u00140\u0017\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00020\u00170\u00fb\u0003H\u0087\b\u00a2\u0006\u0006\b\u00e5\u0004\u0010\u00ed\u0004\u001ac\u0010\u00e5\u0004\u001a\t\u0012\u0004\u0012\u00020\u001a0\u0091\u0001*\u00020\u00192C\u0010\u00f0\u0003\u001a>\u0012\u0015\u0012\u00130\u000b\u00a2\u0006\u000e\b\u00aa\u0001\u0012\t\b\u00ab\u0001\u0012\u0004\b\b(,\u0012\u0016\u0012\u00140\u001a\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u00ef\u0003\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00020\u001a0\u00fb\u0003H\u0087\b\u00a2\u0006\u0006\b\u00e5\u0004\u0010\u00ee\u0004\u001a9\u0010\u00ef\u0004\u001a\u00020\u000b\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0013\u0010\u00a5\u0002\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u000b0-H\u0086\b\u00a2\u0006\u0005\b\u00ef\u0004\u0010n\u001a+\u0010\u00ef\u0004\u001a\u00020\u000b*\u00020\u00042\u0013\u0010\u00a5\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u000b0-H\u0086\b\u00a2\u0006\u0005\b\u00ef\u0004\u0010o\u001a+\u0010\u00ef\u0004\u001a\u00020\u000b*\u00020\u00072\u0013\u0010\u00a5\u0002\u001a\u000e\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\u000b0-H\u0086\b\u00a2\u0006\u0005\b\u00ef\u0004\u0010p\u001a+\u0010\u00ef\u0004\u001a\u00020\u000b*\u00020\n2\u0013\u0010\u00a5\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\u000b0-H\u0086\b\u00a2\u0006\u0005\b\u00ef\u0004\u0010R\u001a+\u0010\u00ef\u0004\u001a\u00020\u000b*\u00020\r2\u0013\u0010\u00a5\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00020\u000b0-H\u0086\b\u00a2\u0006\u0005\b\u00ef\u0004\u0010q\u001a+\u0010\u00ef\u0004\u001a\u00020\u000b*\u00020\u00102\u0013\u0010\u00a5\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00020\u000b0-H\u0086\b\u00a2\u0006\u0005\b\u00ef\u0004\u0010r\u001a+\u0010\u00ef\u0004\u001a\u00020\u000b*\u00020\u00132\u0013\u0010\u00a5\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00020\u000b0-H\u0086\b\u00a2\u0006\u0005\b\u00ef\u0004\u0010s\u001a+\u0010\u00ef\u0004\u001a\u00020\u000b*\u00020\u00162\u0013\u0010\u00a5\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00020\u000b0-H\u0086\b\u00a2\u0006\u0005\b\u00ef\u0004\u0010t\u001a+\u0010\u00ef\u0004\u001a\u00020\u000b*\u00020\u00192\u0013\u0010\u00a5\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00020\u000b0-H\u0086\b\u00a2\u0006\u0005\b\u00ef\u0004\u0010u\u001a:\u0010\u00f0\u0004\u001a\u00020\u0014\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0013\u0010\u00a5\u0002\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00140-H\u0086\b\u00a2\u0006\u0006\b\u00f0\u0004\u0010\u00f1\u0004\u001a,\u0010\u00f0\u0004\u001a\u00020\u0014*\u00020\u00042\u0013\u0010\u00a5\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00140-H\u0086\b\u00a2\u0006\u0006\b\u00f0\u0004\u0010\u00f2\u0004\u001a,\u0010\u00f0\u0004\u001a\u00020\u0014*\u00020\u00072\u0013\u0010\u00a5\u0002\u001a\u000e\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\u00140-H\u0086\b\u00a2\u0006\u0006\b\u00f0\u0004\u0010\u00f3\u0004\u001a,\u0010\u00f0\u0004\u001a\u00020\u0014*\u00020\n2\u0013\u0010\u00a5\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\u00140-H\u0086\b\u00a2\u0006\u0006\b\u00f0\u0004\u0010\u00f4\u0004\u001a,\u0010\u00f0\u0004\u001a\u00020\u0014*\u00020\r2\u0013\u0010\u00a5\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00020\u00140-H\u0086\b\u00a2\u0006\u0006\b\u00f0\u0004\u0010\u00f5\u0004\u001a,\u0010\u00f0\u0004\u001a\u00020\u0014*\u00020\u00102\u0013\u0010\u00a5\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00020\u00140-H\u0086\b\u00a2\u0006\u0006\b\u00f0\u0004\u0010\u00f6\u0004\u001a+\u0010\u00f0\u0004\u001a\u00020\u0014*\u00020\u00132\u0013\u0010\u00a5\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00020\u00140-H\u0086\b\u00a2\u0006\u0005\b\u00f0\u0004\u0010U\u001a,\u0010\u00f0\u0004\u001a\u00020\u0014*\u00020\u00162\u0013\u0010\u00a5\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00020\u00140-H\u0086\b\u00a2\u0006\u0006\b\u00f0\u0004\u0010\u00f7\u0004\u001a,\u0010\u00f0\u0004\u001a\u00020\u0014*\u00020\u00192\u0013\u0010\u00a5\u0002\u001a\u000e\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00020\u00140-H\u0086\b\u00a2\u0006\u0006\b\u00f0\u0004\u0010\u00f8\u0004\u001a-\u0010\u00f9\u0004\u001a\b\u0012\u0004\u0012\u00028\u00000\u0001\"\t\b\u0000\u0010\u0000*\u00030\u00ca\u0001*\n\u0012\u0006\u0012\u0004\u0018\u00018\u00000\u0001\u00a2\u0006\u0006\b\u00f9\u0004\u0010\u009b\u0002\u001aT\u0010\u00fa\u0004\u001a\u001d\u0012\u000b\u0012\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\u0012\u000b\u0012\t\u0012\u0004\u0012\u00028\u00000\u0091\u00010\u00de\u0002\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00fa\u0004\u0010\u00fb\u0004\u001aF\u0010\u00fa\u0004\u001a\u001d\u0012\u000b\u0012\t\u0012\u0004\u0012\u00020\u00050\u0091\u0001\u0012\u000b\u0012\t\u0012\u0004\u0012\u00020\u00050\u0091\u00010\u00de\u0002*\u00020\u00042\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00fa\u0004\u0010\u00fc\u0004\u001aF\u0010\u00fa\u0004\u001a\u001d\u0012\u000b\u0012\t\u0012\u0004\u0012\u00020\b0\u0091\u0001\u0012\u000b\u0012\t\u0012\u0004\u0012\u00020\b0\u0091\u00010\u00de\u0002*\u00020\u00072\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00fa\u0004\u0010\u00fd\u0004\u001aF\u0010\u00fa\u0004\u001a\u001d\u0012\u000b\u0012\t\u0012\u0004\u0012\u00020\u000b0\u0091\u0001\u0012\u000b\u0012\t\u0012\u0004\u0012\u00020\u000b0\u0091\u00010\u00de\u0002*\u00020\n2\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00fa\u0004\u0010\u00fe\u0004\u001aF\u0010\u00fa\u0004\u001a\u001d\u0012\u000b\u0012\t\u0012\u0004\u0012\u00020\u000e0\u0091\u0001\u0012\u000b\u0012\t\u0012\u0004\u0012\u00020\u000e0\u0091\u00010\u00de\u0002*\u00020\r2\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00fa\u0004\u0010\u00ff\u0004\u001aF\u0010\u00fa\u0004\u001a\u001d\u0012\u000b\u0012\t\u0012\u0004\u0012\u00020\u00110\u0091\u0001\u0012\u000b\u0012\t\u0012\u0004\u0012\u00020\u00110\u0091\u00010\u00de\u0002*\u00020\u00102\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00fa\u0004\u0010\u0080\u0005\u001aF\u0010\u00fa\u0004\u001a\u001d\u0012\u000b\u0012\t\u0012\u0004\u0012\u00020\u00140\u0091\u0001\u0012\u000b\u0012\t\u0012\u0004\u0012\u00020\u00140\u0091\u00010\u00de\u0002*\u00020\u00132\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00fa\u0004\u0010\u0081\u0005\u001aF\u0010\u00fa\u0004\u001a\u001d\u0012\u000b\u0012\t\u0012\u0004\u0012\u00020\u00170\u0091\u0001\u0012\u000b\u0012\t\u0012\u0004\u0012\u00020\u00170\u0091\u00010\u00de\u0002*\u00020\u00162\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00fa\u0004\u0010\u0082\u0005\u001aF\u0010\u00fa\u0004\u001a\u001d\u0012\u000b\u0012\t\u0012\u0004\u0012\u00020\u001a0\u0091\u0001\u0012\u000b\u0012\t\u0012\u0004\u0012\u00020\u001a0\u0091\u00010\u00de\u0002*\u00020\u00192\u0012\u0010C\u001a\u000e\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00020\u00170-H\u0086\b\u00a2\u0006\u0006\b\u00fa\u0004\u0010\u0083\u0005\u001aQ\u0010\u0084\u0005\u001a\u0016\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00de\u00020\u0091\u0001\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u00c3\u0001*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u000f\u0010\u00cc\u0003\u001a\n\u0012\u0006\b\u0001\u0012\u00028\u00010\u0001H\u0086\u0004\u00a2\u0006\u0006\b\u0084\u0005\u0010\u0085\u0005\u001aC\u0010\u0084\u0005\u001a\u0016\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00028\u00000\u00de\u00020\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00042\u000f\u0010\u00cc\u0003\u001a\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u0001H\u0086\u0004\u00a2\u0006\u0006\b\u0084\u0005\u0010\u0086\u0005\u001aC\u0010\u0084\u0005\u001a\u0016\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00028\u00000\u00de\u00020\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00072\u000f\u0010\u00cc\u0003\u001a\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u0001H\u0086\u0004\u00a2\u0006\u0006\b\u0084\u0005\u0010\u0087\u0005\u001aC\u0010\u0084\u0005\u001a\u0016\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00028\u00000\u00de\u00020\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\n2\u000f\u0010\u00cc\u0003\u001a\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u0001H\u0086\u0004\u00a2\u0006\u0006\b\u0084\u0005\u0010\u0088\u0005\u001aC\u0010\u0084\u0005\u001a\u0016\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00028\u00000\u00de\u00020\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\r2\u000f\u0010\u00cc\u0003\u001a\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u0001H\u0086\u0004\u00a2\u0006\u0006\b\u0084\u0005\u0010\u0089\u0005\u001aC\u0010\u0084\u0005\u001a\u0016\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00028\u00000\u00de\u00020\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00102\u000f\u0010\u00cc\u0003\u001a\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u0001H\u0086\u0004\u00a2\u0006\u0006\b\u0084\u0005\u0010\u008a\u0005\u001aC\u0010\u0084\u0005\u001a\u0016\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00028\u00000\u00de\u00020\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00132\u000f\u0010\u00cc\u0003\u001a\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u0001H\u0086\u0004\u00a2\u0006\u0006\b\u0084\u0005\u0010\u008b\u0005\u001aC\u0010\u0084\u0005\u001a\u0016\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00028\u00000\u00de\u00020\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00162\u000f\u0010\u00cc\u0003\u001a\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u0001H\u0086\u0004\u00a2\u0006\u0006\b\u0084\u0005\u0010\u008c\u0005\u001aC\u0010\u0084\u0005\u001a\u0016\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00028\u00000\u00de\u00020\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00192\u000f\u0010\u00cc\u0003\u001a\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u0001H\u0086\u0004\u00a2\u0006\u0006\b\u0084\u0005\u0010\u008d\u0005\u001a\u008b\u0001\u0010\u0084\u0005\u001a\t\u0012\u0004\u0012\u00028\u00020\u0091\u0001\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u00c3\u0001\"\u0005\b\u0002\u0010\u00dd\u0002*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u000f\u0010\u00cc\u0003\u001a\n\u0012\u0006\b\u0001\u0012\u00028\u00010\u00012>\u0010\u00df\u0002\u001a9\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008e\u0005\u0012\u0016\u0012\u00148\u0001\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008f\u0005\u0012\u0004\u0012\u00028\u00020\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u0084\u0005\u0010\u0090\u0005\u001a}\u0010\u0084\u0005\u001a\t\u0012\u0004\u0012\u00028\u00010\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001\"\u0005\b\u0001\u0010\u00dd\u0002*\u00020\u00042\u000f\u0010\u00cc\u0003\u001a\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012>\u0010\u00df\u0002\u001a9\u0012\u0016\u0012\u00140\u0005\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008e\u0005\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008f\u0005\u0012\u0004\u0012\u00028\u00010\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u0084\u0005\u0010\u0091\u0005\u001a}\u0010\u0084\u0005\u001a\t\u0012\u0004\u0012\u00028\u00010\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001\"\u0005\b\u0001\u0010\u00dd\u0002*\u00020\u00072\u000f\u0010\u00cc\u0003\u001a\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012>\u0010\u00df\u0002\u001a9\u0012\u0016\u0012\u00140\b\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008e\u0005\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008f\u0005\u0012\u0004\u0012\u00028\u00010\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u0084\u0005\u0010\u0092\u0005\u001a}\u0010\u0084\u0005\u001a\t\u0012\u0004\u0012\u00028\u00010\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001\"\u0005\b\u0001\u0010\u00dd\u0002*\u00020\n2\u000f\u0010\u00cc\u0003\u001a\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012>\u0010\u00df\u0002\u001a9\u0012\u0016\u0012\u00140\u000b\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008e\u0005\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008f\u0005\u0012\u0004\u0012\u00028\u00010\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u0084\u0005\u0010\u0093\u0005\u001a}\u0010\u0084\u0005\u001a\t\u0012\u0004\u0012\u00028\u00010\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001\"\u0005\b\u0001\u0010\u00dd\u0002*\u00020\r2\u000f\u0010\u00cc\u0003\u001a\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012>\u0010\u00df\u0002\u001a9\u0012\u0016\u0012\u00140\u000e\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008e\u0005\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008f\u0005\u0012\u0004\u0012\u00028\u00010\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u0084\u0005\u0010\u0094\u0005\u001a}\u0010\u0084\u0005\u001a\t\u0012\u0004\u0012\u00028\u00010\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001\"\u0005\b\u0001\u0010\u00dd\u0002*\u00020\u00102\u000f\u0010\u00cc\u0003\u001a\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012>\u0010\u00df\u0002\u001a9\u0012\u0016\u0012\u00140\u0011\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008e\u0005\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008f\u0005\u0012\u0004\u0012\u00028\u00010\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u0084\u0005\u0010\u0095\u0005\u001a}\u0010\u0084\u0005\u001a\t\u0012\u0004\u0012\u00028\u00010\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001\"\u0005\b\u0001\u0010\u00dd\u0002*\u00020\u00132\u000f\u0010\u00cc\u0003\u001a\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012>\u0010\u00df\u0002\u001a9\u0012\u0016\u0012\u00140\u0014\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008e\u0005\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008f\u0005\u0012\u0004\u0012\u00028\u00010\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u0084\u0005\u0010\u0096\u0005\u001a}\u0010\u0084\u0005\u001a\t\u0012\u0004\u0012\u00028\u00010\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001\"\u0005\b\u0001\u0010\u00dd\u0002*\u00020\u00162\u000f\u0010\u00cc\u0003\u001a\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012>\u0010\u00df\u0002\u001a9\u0012\u0016\u0012\u00140\u0017\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008e\u0005\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008f\u0005\u0012\u0004\u0012\u00028\u00010\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u0084\u0005\u0010\u0097\u0005\u001a}\u0010\u0084\u0005\u001a\t\u0012\u0004\u0012\u00028\u00010\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001\"\u0005\b\u0001\u0010\u00dd\u0002*\u00020\u00192\u000f\u0010\u00cc\u0003\u001a\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012>\u0010\u00df\u0002\u001a9\u0012\u0016\u0012\u00140\u001a\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008e\u0005\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008f\u0005\u0012\u0004\u0012\u00028\u00010\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u0084\u0005\u0010\u0098\u0005\u001aP\u0010\u0084\u0005\u001a\u0016\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u00de\u00020\u0091\u0001\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u00c3\u0001*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u000e\u0010\u00cc\u0003\u001a\t\u0012\u0004\u0012\u00028\u00010\u00e4\u0001H\u0086\u0004\u00a2\u0006\u0006\b\u0084\u0005\u0010\u00e5\u0001\u001aB\u0010\u0084\u0005\u001a\u0016\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00028\u00000\u00de\u00020\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00042\u000e\u0010\u00cc\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u00e4\u0001H\u0086\u0004\u00a2\u0006\u0006\b\u0084\u0005\u0010\u00e6\u0001\u001aB\u0010\u0084\u0005\u001a\u0016\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00028\u00000\u00de\u00020\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00072\u000e\u0010\u00cc\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u00e4\u0001H\u0086\u0004\u00a2\u0006\u0006\b\u0084\u0005\u0010\u00e7\u0001\u001aB\u0010\u0084\u0005\u001a\u0016\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00028\u00000\u00de\u00020\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\n2\u000e\u0010\u00cc\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u00e4\u0001H\u0086\u0004\u00a2\u0006\u0006\b\u0084\u0005\u0010\u00e8\u0001\u001aB\u0010\u0084\u0005\u001a\u0016\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00028\u00000\u00de\u00020\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\r2\u000e\u0010\u00cc\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u00e4\u0001H\u0086\u0004\u00a2\u0006\u0006\b\u0084\u0005\u0010\u00e9\u0001\u001aB\u0010\u0084\u0005\u001a\u0016\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00028\u00000\u00de\u00020\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00102\u000e\u0010\u00cc\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u00e4\u0001H\u0086\u0004\u00a2\u0006\u0006\b\u0084\u0005\u0010\u00ea\u0001\u001aB\u0010\u0084\u0005\u001a\u0016\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00028\u00000\u00de\u00020\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00132\u000e\u0010\u00cc\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u00e4\u0001H\u0086\u0004\u00a2\u0006\u0006\b\u0084\u0005\u0010\u00eb\u0001\u001aB\u0010\u0084\u0005\u001a\u0016\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00028\u00000\u00de\u00020\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00162\u000e\u0010\u00cc\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u00e4\u0001H\u0086\u0004\u00a2\u0006\u0006\b\u0084\u0005\u0010\u00ec\u0001\u001aB\u0010\u0084\u0005\u001a\u0016\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00028\u00000\u00de\u00020\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001*\u00020\u00192\u000e\u0010\u00cc\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u00e4\u0001H\u0086\u0004\u00a2\u0006\u0006\b\u0084\u0005\u0010\u00ed\u0001\u001a\u008a\u0001\u0010\u0084\u0005\u001a\t\u0012\u0004\u0012\u00028\u00020\u0091\u0001\"\u0004\b\u0000\u0010\u0000\"\u0005\b\u0001\u0010\u00c3\u0001\"\u0005\b\u0002\u0010\u00dd\u0002*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u000e\u0010\u00cc\u0003\u001a\t\u0012\u0004\u0012\u00028\u00010\u00e4\u00012>\u0010\u00df\u0002\u001a9\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008e\u0005\u0012\u0016\u0012\u00148\u0001\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008f\u0005\u0012\u0004\u0012\u00028\u00020\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u0084\u0005\u0010\u0099\u0005\u001a|\u0010\u0084\u0005\u001a\t\u0012\u0004\u0012\u00028\u00010\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001\"\u0005\b\u0001\u0010\u00dd\u0002*\u00020\u00042\u000e\u0010\u00cc\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u00e4\u00012>\u0010\u00df\u0002\u001a9\u0012\u0016\u0012\u00140\u0005\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008e\u0005\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008f\u0005\u0012\u0004\u0012\u00028\u00010\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u0084\u0005\u0010\u009a\u0005\u001a|\u0010\u0084\u0005\u001a\t\u0012\u0004\u0012\u00028\u00010\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001\"\u0005\b\u0001\u0010\u00dd\u0002*\u00020\u00072\u000e\u0010\u00cc\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u00e4\u00012>\u0010\u00df\u0002\u001a9\u0012\u0016\u0012\u00140\b\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008e\u0005\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008f\u0005\u0012\u0004\u0012\u00028\u00010\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u0084\u0005\u0010\u009b\u0005\u001a|\u0010\u0084\u0005\u001a\t\u0012\u0004\u0012\u00028\u00010\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001\"\u0005\b\u0001\u0010\u00dd\u0002*\u00020\n2\u000e\u0010\u00cc\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u00e4\u00012>\u0010\u00df\u0002\u001a9\u0012\u0016\u0012\u00140\u000b\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008e\u0005\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008f\u0005\u0012\u0004\u0012\u00028\u00010\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u0084\u0005\u0010\u009c\u0005\u001a|\u0010\u0084\u0005\u001a\t\u0012\u0004\u0012\u00028\u00010\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001\"\u0005\b\u0001\u0010\u00dd\u0002*\u00020\r2\u000e\u0010\u00cc\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u00e4\u00012>\u0010\u00df\u0002\u001a9\u0012\u0016\u0012\u00140\u000e\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008e\u0005\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008f\u0005\u0012\u0004\u0012\u00028\u00010\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u0084\u0005\u0010\u009d\u0005\u001a|\u0010\u0084\u0005\u001a\t\u0012\u0004\u0012\u00028\u00010\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001\"\u0005\b\u0001\u0010\u00dd\u0002*\u00020\u00102\u000e\u0010\u00cc\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u00e4\u00012>\u0010\u00df\u0002\u001a9\u0012\u0016\u0012\u00140\u0011\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008e\u0005\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008f\u0005\u0012\u0004\u0012\u00028\u00010\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u0084\u0005\u0010\u009e\u0005\u001a|\u0010\u0084\u0005\u001a\t\u0012\u0004\u0012\u00028\u00010\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001\"\u0005\b\u0001\u0010\u00dd\u0002*\u00020\u00132\u000e\u0010\u00cc\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u00e4\u00012>\u0010\u00df\u0002\u001a9\u0012\u0016\u0012\u00140\u0014\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008e\u0005\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008f\u0005\u0012\u0004\u0012\u00028\u00010\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u0084\u0005\u0010\u009f\u0005\u001a|\u0010\u0084\u0005\u001a\t\u0012\u0004\u0012\u00028\u00010\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001\"\u0005\b\u0001\u0010\u00dd\u0002*\u00020\u00162\u000e\u0010\u00cc\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u00e4\u00012>\u0010\u00df\u0002\u001a9\u0012\u0016\u0012\u00140\u0017\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008e\u0005\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008f\u0005\u0012\u0004\u0012\u00028\u00010\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u0084\u0005\u0010\u00a0\u0005\u001a|\u0010\u0084\u0005\u001a\t\u0012\u0004\u0012\u00028\u00010\u0091\u0001\"\u0005\b\u0000\u0010\u00c3\u0001\"\u0005\b\u0001\u0010\u00dd\u0002*\u00020\u00192\u000e\u0010\u00cc\u0003\u001a\t\u0012\u0004\u0012\u00028\u00000\u00e4\u00012>\u0010\u00df\u0002\u001a9\u0012\u0016\u0012\u00140\u001a\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008e\u0005\u0012\u0016\u0012\u00148\u0000\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008f\u0005\u0012\u0004\u0012\u00028\u00010\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u0084\u0005\u0010\u00a1\u0005\u001a4\u0010\u0084\u0005\u001a\u0016\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00050\u00de\u00020\u0091\u0001*\u00020\u00042\u0007\u0010\u00cc\u0003\u001a\u00020\u0004H\u0086\u0004\u00a2\u0006\u0006\b\u0084\u0005\u0010\u00a2\u0005\u001a4\u0010\u0084\u0005\u001a\u0016\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\b0\u00de\u00020\u0091\u0001*\u00020\u00072\u0007\u0010\u00cc\u0003\u001a\u00020\u0007H\u0086\u0004\u00a2\u0006\u0006\b\u0084\u0005\u0010\u00a3\u0005\u001a4\u0010\u0084\u0005\u001a\u0016\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\u000b0\u00de\u00020\u0091\u0001*\u00020\n2\u0007\u0010\u00cc\u0003\u001a\u00020\nH\u0086\u0004\u00a2\u0006\u0006\b\u0084\u0005\u0010\u00a4\u0005\u001a4\u0010\u0084\u0005\u001a\u0016\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00020\u000e\u0012\u0004\u0012\u00020\u000e0\u00de\u00020\u0091\u0001*\u00020\r2\u0007\u0010\u00cc\u0003\u001a\u00020\rH\u0086\u0004\u00a2\u0006\u0006\b\u0084\u0005\u0010\u00a5\u0005\u001a4\u0010\u0084\u0005\u001a\u0016\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00020\u0011\u0012\u0004\u0012\u00020\u00110\u00de\u00020\u0091\u0001*\u00020\u00102\u0007\u0010\u00cc\u0003\u001a\u00020\u0010H\u0086\u0004\u00a2\u0006\u0006\b\u0084\u0005\u0010\u00a6\u0005\u001a4\u0010\u0084\u0005\u001a\u0016\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00020\u0014\u0012\u0004\u0012\u00020\u00140\u00de\u00020\u0091\u0001*\u00020\u00132\u0007\u0010\u00cc\u0003\u001a\u00020\u0013H\u0086\u0004\u00a2\u0006\u0006\b\u0084\u0005\u0010\u00a7\u0005\u001a4\u0010\u0084\u0005\u001a\u0016\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00020\u0017\u0012\u0004\u0012\u00020\u00170\u00de\u00020\u0091\u0001*\u00020\u00162\u0007\u0010\u00cc\u0003\u001a\u00020\u0016H\u0086\u0004\u00a2\u0006\u0006\b\u0084\u0005\u0010\u00a8\u0005\u001a4\u0010\u0084\u0005\u001a\u0016\u0012\u0011\u0012\u000f\u0012\u0004\u0012\u00020\u001a\u0012\u0004\u0012\u00020\u001a0\u00de\u00020\u0091\u0001*\u00020\u00192\u0007\u0010\u00cc\u0003\u001a\u00020\u0019H\u0086\u0004\u00a2\u0006\u0006\b\u0084\u0005\u0010\u00a9\u0005\u001an\u0010\u0084\u0005\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0005\b\u0000\u0010\u00dd\u0002*\u00020\u00042\u0007\u0010\u00cc\u0003\u001a\u00020\u00042>\u0010\u00df\u0002\u001a9\u0012\u0016\u0012\u00140\u0005\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008e\u0005\u0012\u0016\u0012\u00140\u0005\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008f\u0005\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u0084\u0005\u0010\u00aa\u0005\u001an\u0010\u0084\u0005\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0005\b\u0000\u0010\u00dd\u0002*\u00020\u00072\u0007\u0010\u00cc\u0003\u001a\u00020\u00072>\u0010\u00df\u0002\u001a9\u0012\u0016\u0012\u00140\b\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008e\u0005\u0012\u0016\u0012\u00140\b\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008f\u0005\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u0084\u0005\u0010\u00ab\u0005\u001an\u0010\u0084\u0005\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0005\b\u0000\u0010\u00dd\u0002*\u00020\n2\u0007\u0010\u00cc\u0003\u001a\u00020\n2>\u0010\u00df\u0002\u001a9\u0012\u0016\u0012\u00140\u000b\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008e\u0005\u0012\u0016\u0012\u00140\u000b\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008f\u0005\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u0084\u0005\u0010\u00ac\u0005\u001an\u0010\u0084\u0005\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0005\b\u0000\u0010\u00dd\u0002*\u00020\r2\u0007\u0010\u00cc\u0003\u001a\u00020\r2>\u0010\u00df\u0002\u001a9\u0012\u0016\u0012\u00140\u000e\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008e\u0005\u0012\u0016\u0012\u00140\u000e\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008f\u0005\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u0084\u0005\u0010\u00ad\u0005\u001an\u0010\u0084\u0005\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0005\b\u0000\u0010\u00dd\u0002*\u00020\u00102\u0007\u0010\u00cc\u0003\u001a\u00020\u00102>\u0010\u00df\u0002\u001a9\u0012\u0016\u0012\u00140\u0011\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008e\u0005\u0012\u0016\u0012\u00140\u0011\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008f\u0005\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u0084\u0005\u0010\u00ae\u0005\u001an\u0010\u0084\u0005\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0005\b\u0000\u0010\u00dd\u0002*\u00020\u00132\u0007\u0010\u00cc\u0003\u001a\u00020\u00132>\u0010\u00df\u0002\u001a9\u0012\u0016\u0012\u00140\u0014\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008e\u0005\u0012\u0016\u0012\u00140\u0014\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008f\u0005\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u0084\u0005\u0010\u00af\u0005\u001an\u0010\u0084\u0005\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0005\b\u0000\u0010\u00dd\u0002*\u00020\u00162\u0007\u0010\u00cc\u0003\u001a\u00020\u00162>\u0010\u00df\u0002\u001a9\u0012\u0016\u0012\u00140\u0017\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008e\u0005\u0012\u0016\u0012\u00140\u0017\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008f\u0005\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u0084\u0005\u0010\u00b0\u0005\u001an\u0010\u0084\u0005\u001a\t\u0012\u0004\u0012\u00028\u00000\u0091\u0001\"\u0005\b\u0000\u0010\u00dd\u0002*\u00020\u00192\u0007\u0010\u00cc\u0003\u001a\u00020\u00192>\u0010\u00df\u0002\u001a9\u0012\u0016\u0012\u00140\u001a\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008e\u0005\u0012\u0016\u0012\u00140\u001a\u00a2\u0006\u000f\b\u00aa\u0001\u0012\n\b\u00ab\u0001\u0012\u0005\b\b(\u008f\u0005\u0012\u0004\u0012\u00028\u00000\u00a9\u0001H\u0086\b\u00a2\u0006\u0006\b\u0084\u0005\u0010\u00b1\u0005\u001a\u0091\u0001\u0010\u00bc\u0005\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0000\"\u000f\b\u0001\u0010\u00b4\u0005*\b0\u00b2\u0005j\u0003`\u00b3\u0005*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\u0007\u0010\u00b5\u0005\u001a\u00028\u00012\n\b\u0002\u0010\u00b7\u0005\u001a\u00030\u00b6\u00052\n\b\u0002\u0010\u00b8\u0005\u001a\u00030\u00b6\u00052\n\b\u0002\u0010\u00b9\u0005\u001a\u00030\u00b6\u00052\t\b\u0002\u0010\u00ba\u0005\u001a\u00020\u000b2\n\b\u0002\u0010\u00bb\u0005\u001a\u00030\u00b6\u00052\u0018\b\u0002\u0010\u00df\u0002\u001a\u0011\u0012\u0004\u0012\u00028\u0000\u0012\u0005\u0012\u00030\u00b6\u0005\u0018\u00010-\u00a2\u0006\u0006\b\u00bc\u0005\u0010\u00bd\u0005\u001a\u0083\u0001\u0010\u00bc\u0005\u001a\u00028\u0000\"\u000f\b\u0000\u0010\u00b4\u0005*\b0\u00b2\u0005j\u0003`\u00b3\u0005*\u00020\u00042\u0007\u0010\u00b5\u0005\u001a\u00028\u00002\n\b\u0002\u0010\u00b7\u0005\u001a\u00030\u00b6\u00052\n\b\u0002\u0010\u00b8\u0005\u001a\u00030\u00b6\u00052\n\b\u0002\u0010\u00b9\u0005\u001a\u00030\u00b6\u00052\t\b\u0002\u0010\u00ba\u0005\u001a\u00020\u000b2\n\b\u0002\u0010\u00bb\u0005\u001a\u00030\u00b6\u00052\u0018\b\u0002\u0010\u00df\u0002\u001a\u0011\u0012\u0004\u0012\u00020\u0005\u0012\u0005\u0012\u00030\u00b6\u0005\u0018\u00010-\u00a2\u0006\u0006\b\u00bc\u0005\u0010\u00be\u0005\u001a\u0083\u0001\u0010\u00bc\u0005\u001a\u00028\u0000\"\u000f\b\u0000\u0010\u00b4\u0005*\b0\u00b2\u0005j\u0003`\u00b3\u0005*\u00020\u00072\u0007\u0010\u00b5\u0005\u001a\u00028\u00002\n\b\u0002\u0010\u00b7\u0005\u001a\u00030\u00b6\u00052\n\b\u0002\u0010\u00b8\u0005\u001a\u00030\u00b6\u00052\n\b\u0002\u0010\u00b9\u0005\u001a\u00030\u00b6\u00052\t\b\u0002\u0010\u00ba\u0005\u001a\u00020\u000b2\n\b\u0002\u0010\u00bb\u0005\u001a\u00030\u00b6\u00052\u0018\b\u0002\u0010\u00df\u0002\u001a\u0011\u0012\u0004\u0012\u00020\b\u0012\u0005\u0012\u00030\u00b6\u0005\u0018\u00010-\u00a2\u0006\u0006\b\u00bc\u0005\u0010\u00bf\u0005\u001a\u0083\u0001\u0010\u00bc\u0005\u001a\u00028\u0000\"\u000f\b\u0000\u0010\u00b4\u0005*\b0\u00b2\u0005j\u0003`\u00b3\u0005*\u00020\n2\u0007\u0010\u00b5\u0005\u001a\u00028\u00002\n\b\u0002\u0010\u00b7\u0005\u001a\u00030\u00b6\u00052\n\b\u0002\u0010\u00b8\u0005\u001a\u00030\u00b6\u00052\n\b\u0002\u0010\u00b9\u0005\u001a\u00030\u00b6\u00052\t\b\u0002\u0010\u00ba\u0005\u001a\u00020\u000b2\n\b\u0002\u0010\u00bb\u0005\u001a\u00030\u00b6\u00052\u0018\b\u0002\u0010\u00df\u0002\u001a\u0011\u0012\u0004\u0012\u00020\u000b\u0012\u0005\u0012\u00030\u00b6\u0005\u0018\u00010-\u00a2\u0006\u0006\b\u00bc\u0005\u0010\u00c0\u0005\u001a\u0083\u0001\u0010\u00bc\u0005\u001a\u00028\u0000\"\u000f\b\u0000\u0010\u00b4\u0005*\b0\u00b2\u0005j\u0003`\u00b3\u0005*\u00020\r2\u0007\u0010\u00b5\u0005\u001a\u00028\u00002\n\b\u0002\u0010\u00b7\u0005\u001a\u00030\u00b6\u00052\n\b\u0002\u0010\u00b8\u0005\u001a\u00030\u00b6\u00052\n\b\u0002\u0010\u00b9\u0005\u001a\u00030\u00b6\u00052\t\b\u0002\u0010\u00ba\u0005\u001a\u00020\u000b2\n\b\u0002\u0010\u00bb\u0005\u001a\u00030\u00b6\u00052\u0018\b\u0002\u0010\u00df\u0002\u001a\u0011\u0012\u0004\u0012\u00020\u000e\u0012\u0005\u0012\u00030\u00b6\u0005\u0018\u00010-\u00a2\u0006\u0006\b\u00bc\u0005\u0010\u00c1\u0005\u001a\u0083\u0001\u0010\u00bc\u0005\u001a\u00028\u0000\"\u000f\b\u0000\u0010\u00b4\u0005*\b0\u00b2\u0005j\u0003`\u00b3\u0005*\u00020\u00102\u0007\u0010\u00b5\u0005\u001a\u00028\u00002\n\b\u0002\u0010\u00b7\u0005\u001a\u00030\u00b6\u00052\n\b\u0002\u0010\u00b8\u0005\u001a\u00030\u00b6\u00052\n\b\u0002\u0010\u00b9\u0005\u001a\u00030\u00b6\u00052\t\b\u0002\u0010\u00ba\u0005\u001a\u00020\u000b2\n\b\u0002\u0010\u00bb\u0005\u001a\u00030\u00b6\u00052\u0018\b\u0002\u0010\u00df\u0002\u001a\u0011\u0012\u0004\u0012\u00020\u0011\u0012\u0005\u0012\u00030\u00b6\u0005\u0018\u00010-\u00a2\u0006\u0006\b\u00bc\u0005\u0010\u00c2\u0005\u001a\u0083\u0001\u0010\u00bc\u0005\u001a\u00028\u0000\"\u000f\b\u0000\u0010\u00b4\u0005*\b0\u00b2\u0005j\u0003`\u00b3\u0005*\u00020\u00132\u0007\u0010\u00b5\u0005\u001a\u00028\u00002\n\b\u0002\u0010\u00b7\u0005\u001a\u00030\u00b6\u00052\n\b\u0002\u0010\u00b8\u0005\u001a\u00030\u00b6\u00052\n\b\u0002\u0010\u00b9\u0005\u001a\u00030\u00b6\u00052\t\b\u0002\u0010\u00ba\u0005\u001a\u00020\u000b2\n\b\u0002\u0010\u00bb\u0005\u001a\u00030\u00b6\u00052\u0018\b\u0002\u0010\u00df\u0002\u001a\u0011\u0012\u0004\u0012\u00020\u0014\u0012\u0005\u0012\u00030\u00b6\u0005\u0018\u00010-\u00a2\u0006\u0006\b\u00bc\u0005\u0010\u00c3\u0005\u001a\u0083\u0001\u0010\u00bc\u0005\u001a\u00028\u0000\"\u000f\b\u0000\u0010\u00b4\u0005*\b0\u00b2\u0005j\u0003`\u00b3\u0005*\u00020\u00162\u0007\u0010\u00b5\u0005\u001a\u00028\u00002\n\b\u0002\u0010\u00b7\u0005\u001a\u00030\u00b6\u00052\n\b\u0002\u0010\u00b8\u0005\u001a\u00030\u00b6\u00052\n\b\u0002\u0010\u00b9\u0005\u001a\u00030\u00b6\u00052\t\b\u0002\u0010\u00ba\u0005\u001a\u00020\u000b2\n\b\u0002\u0010\u00bb\u0005\u001a\u00030\u00b6\u00052\u0018\b\u0002\u0010\u00df\u0002\u001a\u0011\u0012\u0004\u0012\u00020\u0017\u0012\u0005\u0012\u00030\u00b6\u0005\u0018\u00010-\u00a2\u0006\u0006\b\u00bc\u0005\u0010\u00c4\u0005\u001a\u0083\u0001\u0010\u00bc\u0005\u001a\u00028\u0000\"\u000f\b\u0000\u0010\u00b4\u0005*\b0\u00b2\u0005j\u0003`\u00b3\u0005*\u00020\u00192\u0007\u0010\u00b5\u0005\u001a\u00028\u00002\n\b\u0002\u0010\u00b7\u0005\u001a\u00030\u00b6\u00052\n\b\u0002\u0010\u00b8\u0005\u001a\u00030\u00b6\u00052\n\b\u0002\u0010\u00b9\u0005\u001a\u00030\u00b6\u00052\t\b\u0002\u0010\u00ba\u0005\u001a\u00020\u000b2\n\b\u0002\u0010\u00bb\u0005\u001a\u00030\u00b6\u00052\u0018\b\u0002\u0010\u00df\u0002\u001a\u0011\u0012\u0004\u0012\u00020\u001a\u0012\u0005\u0012\u00030\u00b6\u0005\u0018\u00010-\u00a2\u0006\u0006\b\u00bc\u0005\u0010\u00c5\u0005\u001ax\u0010\u00c7\u0005\u001a\u00030\u00c6\u0005\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00012\n\b\u0002\u0010\u00b7\u0005\u001a\u00030\u00b6\u00052\n\b\u0002\u0010\u00b8\u0005\u001a\u00030\u00b6\u00052\n\b\u0002\u0010\u00b9\u0005\u001a\u00030\u00b6\u00052\t\b\u0002\u0010\u00ba\u0005\u001a\u00020\u000b2\n\b\u0002\u0010\u00bb\u0005\u001a\u00030\u00b6\u00052\u0018\b\u0002\u0010\u00df\u0002\u001a\u0011\u0012\u0004\u0012\u00028\u0000\u0012\u0005\u0012\u00030\u00b6\u0005\u0018\u00010-\u00a2\u0006\u0006\b\u00c7\u0005\u0010\u00c8\u0005\u001aj\u0010\u00c7\u0005\u001a\u00030\u00c6\u0005*\u00020\u00042\n\b\u0002\u0010\u00b7\u0005\u001a\u00030\u00b6\u00052\n\b\u0002\u0010\u00b8\u0005\u001a\u00030\u00b6\u00052\n\b\u0002\u0010\u00b9\u0005\u001a\u00030\u00b6\u00052\t\b\u0002\u0010\u00ba\u0005\u001a\u00020\u000b2\n\b\u0002\u0010\u00bb\u0005\u001a\u00030\u00b6\u00052\u0018\b\u0002\u0010\u00df\u0002\u001a\u0011\u0012\u0004\u0012\u00020\u0005\u0012\u0005\u0012\u00030\u00b6\u0005\u0018\u00010-\u00a2\u0006\u0006\b\u00c7\u0005\u0010\u00c9\u0005\u001aj\u0010\u00c7\u0005\u001a\u00030\u00c6\u0005*\u00020\u00072\n\b\u0002\u0010\u00b7\u0005\u001a\u00030\u00b6\u00052\n\b\u0002\u0010\u00b8\u0005\u001a\u00030\u00b6\u00052\n\b\u0002\u0010\u00b9\u0005\u001a\u00030\u00b6\u00052\t\b\u0002\u0010\u00ba\u0005\u001a\u00020\u000b2\n\b\u0002\u0010\u00bb\u0005\u001a\u00030\u00b6\u00052\u0018\b\u0002\u0010\u00df\u0002\u001a\u0011\u0012\u0004\u0012\u00020\b\u0012\u0005\u0012\u00030\u00b6\u0005\u0018\u00010-\u00a2\u0006\u0006\b\u00c7\u0005\u0010\u00ca\u0005\u001aj\u0010\u00c7\u0005\u001a\u00030\u00c6\u0005*\u00020\n2\n\b\u0002\u0010\u00b7\u0005\u001a\u00030\u00b6\u00052\n\b\u0002\u0010\u00b8\u0005\u001a\u00030\u00b6\u00052\n\b\u0002\u0010\u00b9\u0005\u001a\u00030\u00b6\u00052\t\b\u0002\u0010\u00ba\u0005\u001a\u00020\u000b2\n\b\u0002\u0010\u00bb\u0005\u001a\u00030\u00b6\u00052\u0018\b\u0002\u0010\u00df\u0002\u001a\u0011\u0012\u0004\u0012\u00020\u000b\u0012\u0005\u0012\u00030\u00b6\u0005\u0018\u00010-\u00a2\u0006\u0006\b\u00c7\u0005\u0010\u00cb\u0005\u001aj\u0010\u00c7\u0005\u001a\u00030\u00c6\u0005*\u00020\r2\n\b\u0002\u0010\u00b7\u0005\u001a\u00030\u00b6\u00052\n\b\u0002\u0010\u00b8\u0005\u001a\u00030\u00b6\u00052\n\b\u0002\u0010\u00b9\u0005\u001a\u00030\u00b6\u00052\t\b\u0002\u0010\u00ba\u0005\u001a\u00020\u000b2\n\b\u0002\u0010\u00bb\u0005\u001a\u00030\u00b6\u00052\u0018\b\u0002\u0010\u00df\u0002\u001a\u0011\u0012\u0004\u0012\u00020\u000e\u0012\u0005\u0012\u00030\u00b6\u0005\u0018\u00010-\u00a2\u0006\u0006\b\u00c7\u0005\u0010\u00cc\u0005\u001aj\u0010\u00c7\u0005\u001a\u00030\u00c6\u0005*\u00020\u00102\n\b\u0002\u0010\u00b7\u0005\u001a\u00030\u00b6\u00052\n\b\u0002\u0010\u00b8\u0005\u001a\u00030\u00b6\u00052\n\b\u0002\u0010\u00b9\u0005\u001a\u00030\u00b6\u00052\t\b\u0002\u0010\u00ba\u0005\u001a\u00020\u000b2\n\b\u0002\u0010\u00bb\u0005\u001a\u00030\u00b6\u00052\u0018\b\u0002\u0010\u00df\u0002\u001a\u0011\u0012\u0004\u0012\u00020\u0011\u0012\u0005\u0012\u00030\u00b6\u0005\u0018\u00010-\u00a2\u0006\u0006\b\u00c7\u0005\u0010\u00cd\u0005\u001aj\u0010\u00c7\u0005\u001a\u00030\u00c6\u0005*\u00020\u00132\n\b\u0002\u0010\u00b7\u0005\u001a\u00030\u00b6\u00052\n\b\u0002\u0010\u00b8\u0005\u001a\u00030\u00b6\u00052\n\b\u0002\u0010\u00b9\u0005\u001a\u00030\u00b6\u00052\t\b\u0002\u0010\u00ba\u0005\u001a\u00020\u000b2\n\b\u0002\u0010\u00bb\u0005\u001a\u00030\u00b6\u00052\u0018\b\u0002\u0010\u00df\u0002\u001a\u0011\u0012\u0004\u0012\u00020\u0014\u0012\u0005\u0012\u00030\u00b6\u0005\u0018\u00010-\u00a2\u0006\u0006\b\u00c7\u0005\u0010\u00ce\u0005\u001aj\u0010\u00c7\u0005\u001a\u00030\u00c6\u0005*\u00020\u00162\n\b\u0002\u0010\u00b7\u0005\u001a\u00030\u00b6\u00052\n\b\u0002\u0010\u00b8\u0005\u001a\u00030\u00b6\u00052\n\b\u0002\u0010\u00b9\u0005\u001a\u00030\u00b6\u00052\t\b\u0002\u0010\u00ba\u0005\u001a\u00020\u000b2\n\b\u0002\u0010\u00bb\u0005\u001a\u00030\u00b6\u00052\u0018\b\u0002\u0010\u00df\u0002\u001a\u0011\u0012\u0004\u0012\u00020\u0017\u0012\u0005\u0012\u00030\u00b6\u0005\u0018\u00010-\u00a2\u0006\u0006\b\u00c7\u0005\u0010\u00cf\u0005\u001aj\u0010\u00c7\u0005\u001a\u00030\u00c6\u0005*\u00020\u00192\n\b\u0002\u0010\u00b7\u0005\u001a\u00030\u00b6\u00052\n\b\u0002\u0010\u00b8\u0005\u001a\u00030\u00b6\u00052\n\b\u0002\u0010\u00b9\u0005\u001a\u00030\u00b6\u00052\t\b\u0002\u0010\u00ba\u0005\u001a\u00020\u000b2\n\b\u0002\u0010\u00bb\u0005\u001a\u00030\u00b6\u00052\u0018\b\u0002\u0010\u00df\u0002\u001a\u0011\u0012\u0004\u0012\u00020\u001a\u0012\u0005\u0012\u00030\u00b6\u0005\u0018\u00010-\u00a2\u0006\u0006\b\u00c7\u0005\u0010\u00d0\u0005\u001a)\u0010\u00d1\u0005\u001a\t\u0012\u0004\u0012\u00028\u00000\u00e4\u0001\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u0001\u00a2\u0006\u0006\b\u00d1\u0005\u0010\u00c1\u0003\u001a\u001b\u0010\u00d1\u0005\u001a\t\u0012\u0004\u0012\u00020\u00050\u00e4\u0001*\u00020\u0004\u00a2\u0006\u0006\b\u00d1\u0005\u0010\u00c2\u0003\u001a\u001b\u0010\u00d1\u0005\u001a\t\u0012\u0004\u0012\u00020\b0\u00e4\u0001*\u00020\u0007\u00a2\u0006\u0006\b\u00d1\u0005\u0010\u00c3\u0003\u001a\u001b\u0010\u00d1\u0005\u001a\t\u0012\u0004\u0012\u00020\u000b0\u00e4\u0001*\u00020\n\u00a2\u0006\u0006\b\u00d1\u0005\u0010\u00c4\u0003\u001a\u001b\u0010\u00d1\u0005\u001a\t\u0012\u0004\u0012\u00020\u000e0\u00e4\u0001*\u00020\r\u00a2\u0006\u0006\b\u00d1\u0005\u0010\u00c5\u0003\u001a\u001b\u0010\u00d1\u0005\u001a\t\u0012\u0004\u0012\u00020\u00110\u00e4\u0001*\u00020\u0010\u00a2\u0006\u0006\b\u00d1\u0005\u0010\u00c6\u0003\u001a\u001b\u0010\u00d1\u0005\u001a\t\u0012\u0004\u0012\u00020\u00140\u00e4\u0001*\u00020\u0013\u00a2\u0006\u0006\b\u00d1\u0005\u0010\u00c7\u0003\u001a\u001b\u0010\u00d1\u0005\u001a\t\u0012\u0004\u0012\u00020\u00170\u00e4\u0001*\u00020\u0016\u00a2\u0006\u0006\b\u00d1\u0005\u0010\u00c8\u0003\u001a\u001b\u0010\u00d1\u0005\u001a\t\u0012\u0004\u0012\u00020\u001a0\u00e4\u0001*\u00020\u0019\u00a2\u0006\u0006\b\u00d1\u0005\u0010\u00c9\u0003\u001a)\u0010\u00d3\u0005\u001a\t\u0012\u0004\u0012\u00028\u00000\u00d2\u0005\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u0001\u00a2\u0006\u0006\b\u00d3\u0005\u0010\u00d4\u0005\u001a\u001b\u0010\u00d3\u0005\u001a\t\u0012\u0004\u0012\u00020\u00050\u00d2\u0005*\u00020\u0004\u00a2\u0006\u0006\b\u00d3\u0005\u0010\u00d5\u0005\u001a\u001b\u0010\u00d3\u0005\u001a\t\u0012\u0004\u0012\u00020\b0\u00d2\u0005*\u00020\u0007\u00a2\u0006\u0006\b\u00d3\u0005\u0010\u00d6\u0005\u001a\u001b\u0010\u00d3\u0005\u001a\t\u0012\u0004\u0012\u00020\u000b0\u00d2\u0005*\u00020\n\u00a2\u0006\u0006\b\u00d3\u0005\u0010\u00d7\u0005\u001a\u001b\u0010\u00d3\u0005\u001a\t\u0012\u0004\u0012\u00020\u000e0\u00d2\u0005*\u00020\r\u00a2\u0006\u0006\b\u00d3\u0005\u0010\u00d8\u0005\u001a\u001b\u0010\u00d3\u0005\u001a\t\u0012\u0004\u0012\u00020\u00110\u00d2\u0005*\u00020\u0010\u00a2\u0006\u0006\b\u00d3\u0005\u0010\u00d9\u0005\u001a\u001b\u0010\u00d3\u0005\u001a\t\u0012\u0004\u0012\u00020\u00140\u00d2\u0005*\u00020\u0013\u00a2\u0006\u0006\b\u00d3\u0005\u0010\u00da\u0005\u001a\u001b\u0010\u00d3\u0005\u001a\t\u0012\u0004\u0012\u00020\u00170\u00d2\u0005*\u00020\u0016\u00a2\u0006\u0006\b\u00d3\u0005\u0010\u00db\u0005\u001a\u001b\u0010\u00d3\u0005\u001a\t\u0012\u0004\u0012\u00020\u001a0\u00d2\u0005*\u00020\u0019\u00a2\u0006\u0006\b\u00d3\u0005\u0010\u00dc\u0005\u001a\u001e\u0010\u00df\u0005\u001a\u00020\u0014*\n\u0012\u0006\b\u0001\u0012\u00020\u00050\u0001H\u0007\u00a2\u0006\u0006\b\u00dd\u0005\u0010\u00de\u0005\u001a\u001e\u0010\u00df\u0005\u001a\u00020\u0014*\n\u0012\u0006\b\u0001\u0012\u00020\b0\u0001H\u0007\u00a2\u0006\u0006\b\u00e0\u0005\u0010\u00e1\u0005\u001a\u001e\u0010\u00df\u0005\u001a\u00020\u0014*\n\u0012\u0006\b\u0001\u0012\u00020\u000b0\u0001H\u0007\u00a2\u0006\u0006\b\u00e2\u0005\u0010\u00e3\u0005\u001a\u001e\u0010\u00df\u0005\u001a\u00020\u0014*\n\u0012\u0006\b\u0001\u0012\u00020\u000e0\u0001H\u0007\u00a2\u0006\u0006\b\u00e4\u0005\u0010\u00e5\u0005\u001a\u001e\u0010\u00df\u0005\u001a\u00020\u0014*\n\u0012\u0006\b\u0001\u0012\u00020\u00110\u0001H\u0007\u00a2\u0006\u0006\b\u00e6\u0005\u0010\u00e7\u0005\u001a\u001e\u0010\u00df\u0005\u001a\u00020\u0014*\n\u0012\u0006\b\u0001\u0012\u00020\u00140\u0001H\u0007\u00a2\u0006\u0006\b\u00e8\u0005\u0010\u00e9\u0005\u001a\u0014\u0010\u00df\u0005\u001a\u00020\u0014*\u00020\u0004\u00a2\u0006\u0006\b\u00df\u0005\u0010\u00ea\u0005\u001a\u0014\u0010\u00df\u0005\u001a\u00020\u0014*\u00020\u0007\u00a2\u0006\u0006\b\u00df\u0005\u0010\u00eb\u0005\u001a\u0014\u0010\u00df\u0005\u001a\u00020\u0014*\u00020\n\u00a2\u0006\u0006\b\u00df\u0005\u0010\u00ec\u0005\u001a\u0014\u0010\u00df\u0005\u001a\u00020\u0014*\u00020\r\u00a2\u0006\u0006\b\u00df\u0005\u0010\u00ed\u0005\u001a\u0014\u0010\u00df\u0005\u001a\u00020\u0014*\u00020\u0010\u00a2\u0006\u0006\b\u00df\u0005\u0010\u00ee\u0005\u001a\u0013\u0010\u00df\u0005\u001a\u00020\u0014*\u00020\u0013\u00a2\u0006\u0005\b\u00df\u0005\u0010\u0015\u001a\u001e\u0010\u00f1\u0005\u001a\u00020\u000b*\n\u0012\u0006\b\u0001\u0012\u00020\u00050\u0001H\u0007\u00a2\u0006\u0006\b\u00ef\u0005\u0010\u00f0\u0005\u001a\u001e\u0010\u00f1\u0005\u001a\u00020\u000b*\n\u0012\u0006\b\u0001\u0012\u00020\b0\u0001H\u0007\u00a2\u0006\u0006\b\u00f2\u0005\u0010\u00f3\u0005\u001a\u001e\u0010\u00f1\u0005\u001a\u00020\u000b*\n\u0012\u0006\b\u0001\u0012\u00020\u000b0\u0001H\u0007\u00a2\u0006\u0006\b\u00f4\u0005\u0010\u00f5\u0005\u001a\u001e\u0010\u00f1\u0005\u001a\u00020\u000e*\n\u0012\u0006\b\u0001\u0012\u00020\u000e0\u0001H\u0007\u00a2\u0006\u0006\b\u00f6\u0005\u0010\u00f7\u0005\u001a\u001e\u0010\u00f1\u0005\u001a\u00020\u0011*\n\u0012\u0006\b\u0001\u0012\u00020\u00110\u0001H\u0007\u00a2\u0006\u0006\b\u00f8\u0005\u0010\u00f9\u0005\u001a\u001e\u0010\u00f1\u0005\u001a\u00020\u0014*\n\u0012\u0006\b\u0001\u0012\u00020\u00140\u0001H\u0007\u00a2\u0006\u0006\b\u00fa\u0005\u0010\u00e9\u0005\u001a\u0014\u0010\u00f1\u0005\u001a\u00020\u000b*\u00020\u0004\u00a2\u0006\u0006\b\u00f1\u0005\u0010\u00e7\u0003\u001a\u0014\u0010\u00f1\u0005\u001a\u00020\u000b*\u00020\u0007\u00a2\u0006\u0006\b\u00f1\u0005\u0010\u00e8\u0003\u001a\u0013\u0010\u00f1\u0005\u001a\u00020\u000b*\u00020\n\u00a2\u0006\u0005\b\u00f1\u0005\u0010\f\u001a\u0013\u0010\u00f1\u0005\u001a\u00020\u000e*\u00020\r\u00a2\u0006\u0005\b\u00f1\u0005\u0010\u000f\u001a\u0013\u0010\u00f1\u0005\u001a\u00020\u0011*\u00020\u0010\u00a2\u0006\u0005\b\u00f1\u0005\u0010\u0012\u001a\u0013\u0010\u00f1\u0005\u001a\u00020\u0014*\u00020\u0013\u00a2\u0006\u0005\b\u00f1\u0005\u0010\u0015\"\u001b\u0010\u00d9\u0001\u001a\u00030\u00d8\u0001*\u00020\r8F@\u0006\u00a2\u0006\b\u001a\u0006\b\u00fb\u0005\u0010\u00fc\u0005\"\u001b\u0010\u00d9\u0001\u001a\u00030\u00d8\u0001*\u00020\u00168F@\u0006\u00a2\u0006\b\u001a\u0006\b\u00fb\u0005\u0010\u00fd\u0005\"\u001b\u0010\u00d9\u0001\u001a\u00030\u00d8\u0001*\u00020\u00078F@\u0006\u00a2\u0006\b\u001a\u0006\b\u00fb\u0005\u0010\u00fe\u0005\"\u001a\u0010\u0080\u0006\u001a\u00020\u000b*\u00020\u00108F@\u0006\u00a2\u0006\b\u001a\u0006\b\u00ff\u0005\u0010\u00ea\u0003\"\u001b\u0010\u00d9\u0001\u001a\u00030\u00d8\u0001*\u00020\u00138F@\u0006\u00a2\u0006\b\u001a\u0006\b\u00fb\u0005\u0010\u0081\u0006\"\u001b\u0010\u00d9\u0001\u001a\u00030\u00d8\u0001*\u00020\u00198F@\u0006\u00a2\u0006\b\u001a\u0006\b\u00fb\u0005\u0010\u0082\u0006\"(\u0010\u0080\u0006\u001a\u00020\u000b\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00018F@\u0006\u00a2\u0006\b\u001a\u0006\b\u00ff\u0005\u0010\u00e6\u0003\"\u001a\u0010\u0080\u0006\u001a\u00020\u000b*\u00020\u00048F@\u0006\u00a2\u0006\b\u001a\u0006\b\u00ff\u0005\u0010\u00e7\u0003\"\u001a\u0010\u0080\u0006\u001a\u00020\u000b*\u00020\u00138F@\u0006\u00a2\u0006\b\u001a\u0006\b\u00ff\u0005\u0010\u00eb\u0003\"\u001b\u0010\u00d9\u0001\u001a\u00030\u00d8\u0001*\u00020\u00108F@\u0006\u00a2\u0006\b\u001a\u0006\b\u00fb\u0005\u0010\u0083\u0006\"\u001a\u0010\u0080\u0006\u001a\u00020\u000b*\u00020\u00198F@\u0006\u00a2\u0006\b\u001a\u0006\b\u00ff\u0005\u0010\u00ed\u0003\"\u001a\u0010\u0080\u0006\u001a\u00020\u000b*\u00020\u00078F@\u0006\u00a2\u0006\b\u001a\u0006\b\u00ff\u0005\u0010\u00e8\u0003\"\u0019\u0010\u0080\u0006\u001a\u00020\u000b*\u00020\n8F@\u0006\u00a2\u0006\u0007\u001a\u0005\b\u00ff\u0005\u0010\f\"\u001a\u0010\u0080\u0006\u001a\u00020\u000b*\u00020\r8F@\u0006\u00a2\u0006\b\u001a\u0006\b\u00ff\u0005\u0010\u00e9\u0003\"\u001a\u0010\u0080\u0006\u001a\u00020\u000b*\u00020\u00168F@\u0006\u00a2\u0006\b\u001a\u0006\b\u00ff\u0005\u0010\u00ec\u0003\"\u001b\u0010\u00d9\u0001\u001a\u00030\u00d8\u0001*\u00020\n8F@\u0006\u00a2\u0006\b\u001a\u0006\b\u00fb\u0005\u0010\u0084\u0006\"\u001b\u0010\u00d9\u0001\u001a\u00030\u00d8\u0001*\u00020\u00048F@\u0006\u00a2\u0006\b\u001a\u0006\b\u00fb\u0005\u0010\u0085\u0006\")\u0010\u00d9\u0001\u001a\u00030\u00d8\u0001\"\u0004\b\u0000\u0010\u0000*\n\u0012\u0006\b\u0001\u0012\u00028\u00000\u00018F@\u0006\u00a2\u0006\b\u001a\u0006\b\u00fb\u0005\u0010\u0086\u0006\u00a8\u0006\u0087\u0006"}, d2 = {"T", "", "component1", "([Ljava/lang/Object;)Ljava/lang/Object;", "", "", "([B)B", "", "", "([S)S", "", "", "([I)I", "", "", "([J)J", "", "", "([F)F", "", "", "([D)D", "", "", "([Z)Z", "", "", "([C)C", "component2", "component3", "component4", "component5", "Lkotlin/internal/OnlyInputTypes;", "element", "contains", "([Ljava/lang/Object;Ljava/lang/Object;)Z", "([BB)Z", "([SS)Z", "([II)Z", "([JJ)Z", "([FF)Z", "([DD)Z", "([ZZ)Z", "([CC)Z", "index", "Lkotlin/Function1;", "defaultValue", "elementAtOrElse", "([Ljava/lang/Object;ILkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "([BILkotlin/jvm/functions/Function1;)B", "([SILkotlin/jvm/functions/Function1;)S", "([IILkotlin/jvm/functions/Function1;)I", "([JILkotlin/jvm/functions/Function1;)J", "([FILkotlin/jvm/functions/Function1;)F", "([DILkotlin/jvm/functions/Function1;)D", "([ZILkotlin/jvm/functions/Function1;)Z", "([CILkotlin/jvm/functions/Function1;)C", "elementAtOrNull", "([Ljava/lang/Object;I)Ljava/lang/Object;", "([BI)Ljava/lang/Byte;", "([SI)Ljava/lang/Short;", "([II)Ljava/lang/Integer;", "([JI)Ljava/lang/Long;", "([FI)Ljava/lang/Float;", "([DI)Ljava/lang/Double;", "([ZI)Ljava/lang/Boolean;", "([CI)Ljava/lang/Character;", "predicate", "find", "([Ljava/lang/Object;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "([BLkotlin/jvm/functions/Function1;)Ljava/lang/Byte;", "([SLkotlin/jvm/functions/Function1;)Ljava/lang/Short;", "([ILkotlin/jvm/functions/Function1;)Ljava/lang/Integer;", "([JLkotlin/jvm/functions/Function1;)Ljava/lang/Long;", "([FLkotlin/jvm/functions/Function1;)Ljava/lang/Float;", "([DLkotlin/jvm/functions/Function1;)Ljava/lang/Double;", "([ZLkotlin/jvm/functions/Function1;)Ljava/lang/Boolean;", "([CLkotlin/jvm/functions/Function1;)Ljava/lang/Character;", "findLast", "first", "([BLkotlin/jvm/functions/Function1;)B", "([SLkotlin/jvm/functions/Function1;)S", "([ILkotlin/jvm/functions/Function1;)I", "([JLkotlin/jvm/functions/Function1;)J", "([FLkotlin/jvm/functions/Function1;)F", "([DLkotlin/jvm/functions/Function1;)D", "([ZLkotlin/jvm/functions/Function1;)Z", "([CLkotlin/jvm/functions/Function1;)C", "firstOrNull", "([B)Ljava/lang/Byte;", "([S)Ljava/lang/Short;", "([I)Ljava/lang/Integer;", "([J)Ljava/lang/Long;", "([F)Ljava/lang/Float;", "([D)Ljava/lang/Double;", "([Z)Ljava/lang/Boolean;", "([C)Ljava/lang/Character;", "getOrElse", "getOrNull", "indexOf", "([Ljava/lang/Object;Ljava/lang/Object;)I", "([BB)I", "([SS)I", "([II)I", "([JJ)I", "([FF)I", "([DD)I", "([ZZ)I", "([CC)I", "indexOfFirst", "([Ljava/lang/Object;Lkotlin/jvm/functions/Function1;)I", "([BLkotlin/jvm/functions/Function1;)I", "([SLkotlin/jvm/functions/Function1;)I", "([JLkotlin/jvm/functions/Function1;)I", "([FLkotlin/jvm/functions/Function1;)I", "([DLkotlin/jvm/functions/Function1;)I", "([ZLkotlin/jvm/functions/Function1;)I", "([CLkotlin/jvm/functions/Function1;)I", "indexOfLast", "last", "lastIndexOf", "lastOrNull", "random", "Lkotlin/random/Random;", "([Ljava/lang/Object;Lkotlin/random/Random;)Ljava/lang/Object;", "([BLkotlin/random/Random;)B", "([SLkotlin/random/Random;)S", "([ILkotlin/random/Random;)I", "([JLkotlin/random/Random;)J", "([FLkotlin/random/Random;)F", "([DLkotlin/random/Random;)D", "([ZLkotlin/random/Random;)Z", "([CLkotlin/random/Random;)C", "randomOrNull", "([BLkotlin/random/Random;)Ljava/lang/Byte;", "([SLkotlin/random/Random;)Ljava/lang/Short;", "([ILkotlin/random/Random;)Ljava/lang/Integer;", "([JLkotlin/random/Random;)Ljava/lang/Long;", "([FLkotlin/random/Random;)Ljava/lang/Float;", "([DLkotlin/random/Random;)Ljava/lang/Double;", "([ZLkotlin/random/Random;)Ljava/lang/Boolean;", "([CLkotlin/random/Random;)Ljava/lang/Character;", "single", "singleOrNull", PersonalConstants.ICON_STYLE_N, "", "drop", "([Ljava/lang/Object;I)Ljava/util/List;", "([BI)Ljava/util/List;", "([SI)Ljava/util/List;", "([II)Ljava/util/List;", "([JI)Ljava/util/List;", "([FI)Ljava/util/List;", "([DI)Ljava/util/List;", "([ZI)Ljava/util/List;", "([CI)Ljava/util/List;", "dropLast", "dropLastWhile", "([Ljava/lang/Object;Lkotlin/jvm/functions/Function1;)Ljava/util/List;", "([BLkotlin/jvm/functions/Function1;)Ljava/util/List;", "([SLkotlin/jvm/functions/Function1;)Ljava/util/List;", "([ILkotlin/jvm/functions/Function1;)Ljava/util/List;", "([JLkotlin/jvm/functions/Function1;)Ljava/util/List;", "([FLkotlin/jvm/functions/Function1;)Ljava/util/List;", "([DLkotlin/jvm/functions/Function1;)Ljava/util/List;", "([ZLkotlin/jvm/functions/Function1;)Ljava/util/List;", "([CLkotlin/jvm/functions/Function1;)Ljava/util/List;", "dropWhile", "filter", "Lkotlin/Function2;", "Lkotlin/ParameterName;", "name", "filterIndexed", "([Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "([BLkotlin/jvm/functions/Function2;)Ljava/util/List;", "([SLkotlin/jvm/functions/Function2;)Ljava/util/List;", "([ILkotlin/jvm/functions/Function2;)Ljava/util/List;", "([JLkotlin/jvm/functions/Function2;)Ljava/util/List;", "([FLkotlin/jvm/functions/Function2;)Ljava/util/List;", "([DLkotlin/jvm/functions/Function2;)Ljava/util/List;", "([ZLkotlin/jvm/functions/Function2;)Ljava/util/List;", "([CLkotlin/jvm/functions/Function2;)Ljava/util/List;", "", "C", "destination", "filterIndexedTo", "([Ljava/lang/Object;Ljava/util/Collection;Lkotlin/jvm/functions/Function2;)Ljava/util/Collection;", "([BLjava/util/Collection;Lkotlin/jvm/functions/Function2;)Ljava/util/Collection;", "([SLjava/util/Collection;Lkotlin/jvm/functions/Function2;)Ljava/util/Collection;", "([ILjava/util/Collection;Lkotlin/jvm/functions/Function2;)Ljava/util/Collection;", "([JLjava/util/Collection;Lkotlin/jvm/functions/Function2;)Ljava/util/Collection;", "([FLjava/util/Collection;Lkotlin/jvm/functions/Function2;)Ljava/util/Collection;", "([DLjava/util/Collection;Lkotlin/jvm/functions/Function2;)Ljava/util/Collection;", "([ZLjava/util/Collection;Lkotlin/jvm/functions/Function2;)Ljava/util/Collection;", "([CLjava/util/Collection;Lkotlin/jvm/functions/Function2;)Ljava/util/Collection;", "R", "Lkotlin/internal/NoInfer;", "filterIsInstance", "([Ljava/lang/Object;)Ljava/util/List;", "filterIsInstanceTo", "([Ljava/lang/Object;Ljava/util/Collection;)Ljava/util/Collection;", "filterNot", "", "filterNotNull", "filterNotNullTo", "filterNotTo", "([Ljava/lang/Object;Ljava/util/Collection;Lkotlin/jvm/functions/Function1;)Ljava/util/Collection;", "([BLjava/util/Collection;Lkotlin/jvm/functions/Function1;)Ljava/util/Collection;", "([SLjava/util/Collection;Lkotlin/jvm/functions/Function1;)Ljava/util/Collection;", "([ILjava/util/Collection;Lkotlin/jvm/functions/Function1;)Ljava/util/Collection;", "([JLjava/util/Collection;Lkotlin/jvm/functions/Function1;)Ljava/util/Collection;", "([FLjava/util/Collection;Lkotlin/jvm/functions/Function1;)Ljava/util/Collection;", "([DLjava/util/Collection;Lkotlin/jvm/functions/Function1;)Ljava/util/Collection;", "([ZLjava/util/Collection;Lkotlin/jvm/functions/Function1;)Ljava/util/Collection;", "([CLjava/util/Collection;Lkotlin/jvm/functions/Function1;)Ljava/util/Collection;", "filterTo", "Lkotlin/ranges/IntRange;", "indices", "slice", "([Ljava/lang/Object;Lkotlin/ranges/IntRange;)Ljava/util/List;", "([BLkotlin/ranges/IntRange;)Ljava/util/List;", "([SLkotlin/ranges/IntRange;)Ljava/util/List;", "([ILkotlin/ranges/IntRange;)Ljava/util/List;", "([JLkotlin/ranges/IntRange;)Ljava/util/List;", "([FLkotlin/ranges/IntRange;)Ljava/util/List;", "([DLkotlin/ranges/IntRange;)Ljava/util/List;", "([ZLkotlin/ranges/IntRange;)Ljava/util/List;", "([CLkotlin/ranges/IntRange;)Ljava/util/List;", "", "([Ljava/lang/Object;Ljava/lang/Iterable;)Ljava/util/List;", "([BLjava/lang/Iterable;)Ljava/util/List;", "([SLjava/lang/Iterable;)Ljava/util/List;", "([ILjava/lang/Iterable;)Ljava/util/List;", "([JLjava/lang/Iterable;)Ljava/util/List;", "([FLjava/lang/Iterable;)Ljava/util/List;", "([DLjava/lang/Iterable;)Ljava/util/List;", "([ZLjava/lang/Iterable;)Ljava/util/List;", "([CLjava/lang/Iterable;)Ljava/util/List;", "", "sliceArray", "([Ljava/lang/Object;Ljava/util/Collection;)[Ljava/lang/Object;", "([BLjava/util/Collection;)[B", "([SLjava/util/Collection;)[S", "([ILjava/util/Collection;)[I", "([JLjava/util/Collection;)[J", "([FLjava/util/Collection;)[F", "([DLjava/util/Collection;)[D", "([ZLjava/util/Collection;)[Z", "([CLjava/util/Collection;)[C", "([Ljava/lang/Object;Lkotlin/ranges/IntRange;)[Ljava/lang/Object;", "([BLkotlin/ranges/IntRange;)[B", "([SLkotlin/ranges/IntRange;)[S", "([ILkotlin/ranges/IntRange;)[I", "([JLkotlin/ranges/IntRange;)[J", "([FLkotlin/ranges/IntRange;)[F", "([DLkotlin/ranges/IntRange;)[D", "([ZLkotlin/ranges/IntRange;)[Z", "([CLkotlin/ranges/IntRange;)[C", "take", "takeLast", "takeLastWhile", "takeWhile", "", "reverse", "([Ljava/lang/Object;)V", "([B)V", "([S)V", "([I)V", "([J)V", "([F)V", "([D)V", "([Z)V", "([C)V", "reversed", "([B)Ljava/util/List;", "([S)Ljava/util/List;", "([I)Ljava/util/List;", "([J)Ljava/util/List;", "([F)Ljava/util/List;", "([D)Ljava/util/List;", "([Z)Ljava/util/List;", "([C)Ljava/util/List;", "reversedArray", "([Ljava/lang/Object;)[Ljava/lang/Object;", "([B)[B", "([S)[S", "([I)[I", "([J)[J", "([F)[F", "([D)[D", "([Z)[Z", "([C)[C", "", "selector", "sortBy", "([Ljava/lang/Object;Lkotlin/jvm/functions/Function1;)V", "sortByDescending", "sortDescending", "([Ljava/lang/Comparable;)V", CartConstant.KEY_VENDOR_SORTED, "([Ljava/lang/Comparable;)Ljava/util/List;", "sortedArray", "([Ljava/lang/Comparable;)[Ljava/lang/Comparable;", "sortedArrayDescending", "Ljava/util/Comparator;", "Lkotlin/Comparator;", "comparator", "sortedArrayWith", "([Ljava/lang/Object;Ljava/util/Comparator;)[Ljava/lang/Object;", "sortedBy", "sortedByDescending", "sortedDescending", "sortedWith", "([Ljava/lang/Object;Ljava/util/Comparator;)Ljava/util/List;", "([BLjava/util/Comparator;)Ljava/util/List;", "([SLjava/util/Comparator;)Ljava/util/List;", "([ILjava/util/Comparator;)Ljava/util/List;", "([JLjava/util/Comparator;)Ljava/util/List;", "([FLjava/util/Comparator;)Ljava/util/List;", "([DLjava/util/Comparator;)Ljava/util/List;", "([ZLjava/util/Comparator;)Ljava/util/List;", "([CLjava/util/Comparator;)Ljava/util/List;", CartConstant.KEY_GLOBAL_IS_EMPTY, "([Ljava/lang/Object;)Z", "([B)Z", "([S)Z", "([I)Z", "([J)Z", "([F)Z", "([D)Z", "([C)Z", "isNotEmpty", "toBooleanArray", "([Ljava/lang/Boolean;)[Z", "toByteArray", "([Ljava/lang/Byte;)[B", "toCharArray", "([Ljava/lang/Character;)[C", "toDoubleArray", "([Ljava/lang/Double;)[D", "toFloatArray", "([Ljava/lang/Float;)[F", "toIntArray", "([Ljava/lang/Integer;)[I", "toLongArray", "([Ljava/lang/Long;)[J", "toShortArray", "([Ljava/lang/Short;)[S", "K", "V", "Lkotlin/Pair;", "transform", "", "associate", "([Ljava/lang/Object;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "([BLkotlin/jvm/functions/Function1;)Ljava/util/Map;", "([SLkotlin/jvm/functions/Function1;)Ljava/util/Map;", "([ILkotlin/jvm/functions/Function1;)Ljava/util/Map;", "([JLkotlin/jvm/functions/Function1;)Ljava/util/Map;", "([FLkotlin/jvm/functions/Function1;)Ljava/util/Map;", "([DLkotlin/jvm/functions/Function1;)Ljava/util/Map;", "([ZLkotlin/jvm/functions/Function1;)Ljava/util/Map;", "([CLkotlin/jvm/functions/Function1;)Ljava/util/Map;", "keySelector", "associateBy", "valueTransform", "([Ljava/lang/Object;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "([BLkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "([SLkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "([ILkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "([JLkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "([FLkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "([DLkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "([ZLkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "([CLkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "", "M", "associateByTo", "([Ljava/lang/Object;Ljava/util/Map;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "([BLjava/util/Map;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "([SLjava/util/Map;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "([ILjava/util/Map;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "([JLjava/util/Map;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "([FLjava/util/Map;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "([DLjava/util/Map;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "([ZLjava/util/Map;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "([CLjava/util/Map;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "([Ljava/lang/Object;Ljava/util/Map;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "([BLjava/util/Map;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "([SLjava/util/Map;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "([ILjava/util/Map;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "([JLjava/util/Map;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "([FLjava/util/Map;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "([DLjava/util/Map;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "([ZLjava/util/Map;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "([CLjava/util/Map;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "associateTo", "toCollection", "([BLjava/util/Collection;)Ljava/util/Collection;", "([SLjava/util/Collection;)Ljava/util/Collection;", "([ILjava/util/Collection;)Ljava/util/Collection;", "([JLjava/util/Collection;)Ljava/util/Collection;", "([FLjava/util/Collection;)Ljava/util/Collection;", "([DLjava/util/Collection;)Ljava/util/Collection;", "([ZLjava/util/Collection;)Ljava/util/Collection;", "([CLjava/util/Collection;)Ljava/util/Collection;", "Ljava/util/HashSet;", "Lkotlin/collections/HashSet;", "toHashSet", "([Ljava/lang/Object;)Ljava/util/HashSet;", "([B)Ljava/util/HashSet;", "([S)Ljava/util/HashSet;", "([I)Ljava/util/HashSet;", "([J)Ljava/util/HashSet;", "([F)Ljava/util/HashSet;", "([D)Ljava/util/HashSet;", "([Z)Ljava/util/HashSet;", "([C)Ljava/util/HashSet;", "toList", "", "toMutableList", "", "toSet", "([Ljava/lang/Object;)Ljava/util/Set;", "([B)Ljava/util/Set;", "([S)Ljava/util/Set;", "([I)Ljava/util/Set;", "([J)Ljava/util/Set;", "([F)Ljava/util/Set;", "([D)Ljava/util/Set;", "([Z)Ljava/util/Set;", "([C)Ljava/util/Set;", "flatMap", "flatMapTo", "groupBy", "groupByTo", "Lkotlin/collections/Grouping;", "groupingBy", "([Ljava/lang/Object;Lkotlin/jvm/functions/Function1;)Lkotlin/collections/Grouping;", "map", "mapIndexed", "mapIndexedNotNull", "mapIndexedNotNullTo", "mapIndexedTo", "mapNotNull", "mapNotNullTo", "mapTo", "Lkotlin/collections/IndexedValue;", "withIndex", "([Ljava/lang/Object;)Ljava/lang/Iterable;", "([B)Ljava/lang/Iterable;", "([S)Ljava/lang/Iterable;", "([I)Ljava/lang/Iterable;", "([J)Ljava/lang/Iterable;", "([F)Ljava/lang/Iterable;", "([D)Ljava/lang/Iterable;", "([Z)Ljava/lang/Iterable;", "([C)Ljava/lang/Iterable;", "distinct", "distinctBy", "other", "intersect", "([Ljava/lang/Object;Ljava/lang/Iterable;)Ljava/util/Set;", "([BLjava/lang/Iterable;)Ljava/util/Set;", "([SLjava/lang/Iterable;)Ljava/util/Set;", "([ILjava/lang/Iterable;)Ljava/util/Set;", "([JLjava/lang/Iterable;)Ljava/util/Set;", "([FLjava/lang/Iterable;)Ljava/util/Set;", "([DLjava/lang/Iterable;)Ljava/util/Set;", "([ZLjava/lang/Iterable;)Ljava/util/Set;", "([CLjava/lang/Iterable;)Ljava/util/Set;", "subtract", "", "toMutableSet", JumpUtil.VALUE_DES_CPS_UNION, NavigationDbConstants.TB_COLUMN_FREQUENCY_RULE_POSITION_ALL, "([Ljava/lang/Object;Lkotlin/jvm/functions/Function1;)Z", "([BLkotlin/jvm/functions/Function1;)Z", "([SLkotlin/jvm/functions/Function1;)Z", "([ILkotlin/jvm/functions/Function1;)Z", "([JLkotlin/jvm/functions/Function1;)Z", "([FLkotlin/jvm/functions/Function1;)Z", "([DLkotlin/jvm/functions/Function1;)Z", "([CLkotlin/jvm/functions/Function1;)Z", Languages.ANY, "count", "([Ljava/lang/Object;)I", "([B)I", "([S)I", "([J)I", "([F)I", "([D)I", "([Z)I", "([C)I", "initial", "acc", "operation", "fold", "([Ljava/lang/Object;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "([BLjava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "([SLjava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "([ILjava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "([JLjava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "([FLjava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "([DLjava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "([ZLjava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "([CLjava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "Lkotlin/Function3;", "foldIndexed", "([Ljava/lang/Object;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "([BLjava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "([SLjava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "([ILjava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "([JLjava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "([FLjava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "([DLjava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "([ZLjava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "([CLjava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "foldRight", "foldRightIndexed", "action", "forEach", "([BLkotlin/jvm/functions/Function1;)V", "([SLkotlin/jvm/functions/Function1;)V", "([ILkotlin/jvm/functions/Function1;)V", "([JLkotlin/jvm/functions/Function1;)V", "([FLkotlin/jvm/functions/Function1;)V", "([DLkotlin/jvm/functions/Function1;)V", "([ZLkotlin/jvm/functions/Function1;)V", "([CLkotlin/jvm/functions/Function1;)V", "forEachIndexed", "([Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)V", "([BLkotlin/jvm/functions/Function2;)V", "([SLkotlin/jvm/functions/Function2;)V", "([ILkotlin/jvm/functions/Function2;)V", "([JLkotlin/jvm/functions/Function2;)V", "([FLkotlin/jvm/functions/Function2;)V", "([DLkotlin/jvm/functions/Function2;)V", "([ZLkotlin/jvm/functions/Function2;)V", "([CLkotlin/jvm/functions/Function2;)V", "max", "([Ljava/lang/Double;)Ljava/lang/Double;", "([Ljava/lang/Float;)Ljava/lang/Float;", "([Ljava/lang/Comparable;)Ljava/lang/Comparable;", "maxBy", "maxWith", "([Ljava/lang/Object;Ljava/util/Comparator;)Ljava/lang/Object;", "([BLjava/util/Comparator;)Ljava/lang/Byte;", "([SLjava/util/Comparator;)Ljava/lang/Short;", "([ILjava/util/Comparator;)Ljava/lang/Integer;", "([JLjava/util/Comparator;)Ljava/lang/Long;", "([FLjava/util/Comparator;)Ljava/lang/Float;", "([DLjava/util/Comparator;)Ljava/lang/Double;", "([ZLjava/util/Comparator;)Ljava/lang/Boolean;", "([CLjava/util/Comparator;)Ljava/lang/Character;", "min", "minBy", "minWith", "none", "S", "reduce", "([Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "([BLkotlin/jvm/functions/Function2;)B", "([SLkotlin/jvm/functions/Function2;)S", "([ILkotlin/jvm/functions/Function2;)I", "([JLkotlin/jvm/functions/Function2;)J", "([FLkotlin/jvm/functions/Function2;)F", "([DLkotlin/jvm/functions/Function2;)D", "([ZLkotlin/jvm/functions/Function2;)Z", "([CLkotlin/jvm/functions/Function2;)C", "reduceIndexed", "([Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "([BLkotlin/jvm/functions/Function3;)B", "([SLkotlin/jvm/functions/Function3;)S", "([ILkotlin/jvm/functions/Function3;)I", "([JLkotlin/jvm/functions/Function3;)J", "([FLkotlin/jvm/functions/Function3;)F", "([DLkotlin/jvm/functions/Function3;)D", "([ZLkotlin/jvm/functions/Function3;)Z", "([CLkotlin/jvm/functions/Function3;)C", "reduceOrNull", "([BLkotlin/jvm/functions/Function2;)Ljava/lang/Byte;", "([SLkotlin/jvm/functions/Function2;)Ljava/lang/Short;", "([ILkotlin/jvm/functions/Function2;)Ljava/lang/Integer;", "([JLkotlin/jvm/functions/Function2;)Ljava/lang/Long;", "([FLkotlin/jvm/functions/Function2;)Ljava/lang/Float;", "([DLkotlin/jvm/functions/Function2;)Ljava/lang/Double;", "([ZLkotlin/jvm/functions/Function2;)Ljava/lang/Boolean;", "([CLkotlin/jvm/functions/Function2;)Ljava/lang/Character;", "reduceRight", "reduceRightIndexed", "reduceRightOrNull", "scan", "([Ljava/lang/Object;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "([BLjava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "([SLjava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "([ILjava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "([JLjava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "([FLjava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "([DLjava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "([ZLjava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "([CLjava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "scanIndexed", "([Ljava/lang/Object;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/util/List;", "([BLjava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/util/List;", "([SLjava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/util/List;", "([ILjava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/util/List;", "([JLjava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/util/List;", "([FLjava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/util/List;", "([DLjava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/util/List;", "([ZLjava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/util/List;", "([CLjava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/util/List;", "scanReduce", "scanReduceIndexed", "([Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/util/List;", "([BLkotlin/jvm/functions/Function3;)Ljava/util/List;", "([SLkotlin/jvm/functions/Function3;)Ljava/util/List;", "([ILkotlin/jvm/functions/Function3;)Ljava/util/List;", "([JLkotlin/jvm/functions/Function3;)Ljava/util/List;", "([FLkotlin/jvm/functions/Function3;)Ljava/util/List;", "([DLkotlin/jvm/functions/Function3;)Ljava/util/List;", "([ZLkotlin/jvm/functions/Function3;)Ljava/util/List;", "([CLkotlin/jvm/functions/Function3;)Ljava/util/List;", "sumBy", "sumByDouble", "([Ljava/lang/Object;Lkotlin/jvm/functions/Function1;)D", "([BLkotlin/jvm/functions/Function1;)D", "([SLkotlin/jvm/functions/Function1;)D", "([ILkotlin/jvm/functions/Function1;)D", "([JLkotlin/jvm/functions/Function1;)D", "([FLkotlin/jvm/functions/Function1;)D", "([ZLkotlin/jvm/functions/Function1;)D", "([CLkotlin/jvm/functions/Function1;)D", "requireNoNulls", "partition", "([Ljava/lang/Object;Lkotlin/jvm/functions/Function1;)Lkotlin/Pair;", "([BLkotlin/jvm/functions/Function1;)Lkotlin/Pair;", "([SLkotlin/jvm/functions/Function1;)Lkotlin/Pair;", "([ILkotlin/jvm/functions/Function1;)Lkotlin/Pair;", "([JLkotlin/jvm/functions/Function1;)Lkotlin/Pair;", "([FLkotlin/jvm/functions/Function1;)Lkotlin/Pair;", "([DLkotlin/jvm/functions/Function1;)Lkotlin/Pair;", "([ZLkotlin/jvm/functions/Function1;)Lkotlin/Pair;", "([CLkotlin/jvm/functions/Function1;)Lkotlin/Pair;", "zip", "([Ljava/lang/Object;[Ljava/lang/Object;)Ljava/util/List;", "([B[Ljava/lang/Object;)Ljava/util/List;", "([S[Ljava/lang/Object;)Ljava/util/List;", "([I[Ljava/lang/Object;)Ljava/util/List;", "([J[Ljava/lang/Object;)Ljava/util/List;", "([F[Ljava/lang/Object;)Ljava/util/List;", "([D[Ljava/lang/Object;)Ljava/util/List;", "([Z[Ljava/lang/Object;)Ljava/util/List;", "([C[Ljava/lang/Object;)Ljava/util/List;", a.a, "b", "([Ljava/lang/Object;[Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "([B[Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "([S[Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "([I[Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "([J[Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "([F[Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "([D[Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "([Z[Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "([C[Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "([Ljava/lang/Object;Ljava/lang/Iterable;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "([BLjava/lang/Iterable;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "([SLjava/lang/Iterable;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "([ILjava/lang/Iterable;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "([JLjava/lang/Iterable;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "([FLjava/lang/Iterable;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "([DLjava/lang/Iterable;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "([ZLjava/lang/Iterable;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "([CLjava/lang/Iterable;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "([B[B)Ljava/util/List;", "([S[S)Ljava/util/List;", "([I[I)Ljava/util/List;", "([J[J)Ljava/util/List;", "([F[F)Ljava/util/List;", "([D[D)Ljava/util/List;", "([Z[Z)Ljava/util/List;", "([C[C)Ljava/util/List;", "([B[BLkotlin/jvm/functions/Function2;)Ljava/util/List;", "([S[SLkotlin/jvm/functions/Function2;)Ljava/util/List;", "([I[ILkotlin/jvm/functions/Function2;)Ljava/util/List;", "([J[JLkotlin/jvm/functions/Function2;)Ljava/util/List;", "([F[FLkotlin/jvm/functions/Function2;)Ljava/util/List;", "([D[DLkotlin/jvm/functions/Function2;)Ljava/util/List;", "([Z[ZLkotlin/jvm/functions/Function2;)Ljava/util/List;", "([C[CLkotlin/jvm/functions/Function2;)Ljava/util/List;", "Ljava/lang/Appendable;", "Lkotlin/text/Appendable;", "A", "buffer", "", "separator", "prefix", "postfix", "limit", "truncated", "joinTo", "([Ljava/lang/Object;Ljava/lang/Appendable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Appendable;", "([BLjava/lang/Appendable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Appendable;", "([SLjava/lang/Appendable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Appendable;", "([ILjava/lang/Appendable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Appendable;", "([JLjava/lang/Appendable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Appendable;", "([FLjava/lang/Appendable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Appendable;", "([DLjava/lang/Appendable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Appendable;", "([ZLjava/lang/Appendable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Appendable;", "([CLjava/lang/Appendable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Appendable;", "", "joinToString", "([Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/String;", "([BLjava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/String;", "([SLjava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/String;", "([ILjava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/String;", "([JLjava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/String;", "([FLjava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/String;", "([DLjava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/String;", "([ZLjava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/String;", "([CLjava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/String;", "asIterable", "Lkotlin/sequences/Sequence;", "asSequence", "([Ljava/lang/Object;)Lkotlin/sequences/Sequence;", "([B)Lkotlin/sequences/Sequence;", "([S)Lkotlin/sequences/Sequence;", "([I)Lkotlin/sequences/Sequence;", "([J)Lkotlin/sequences/Sequence;", "([F)Lkotlin/sequences/Sequence;", "([D)Lkotlin/sequences/Sequence;", "([Z)Lkotlin/sequences/Sequence;", "([C)Lkotlin/sequences/Sequence;", "averageOfByte", "([Ljava/lang/Byte;)D", "average", "averageOfShort", "([Ljava/lang/Short;)D", "averageOfInt", "([Ljava/lang/Integer;)D", "averageOfLong", "([Ljava/lang/Long;)D", "averageOfFloat", "([Ljava/lang/Float;)D", "averageOfDouble", "([Ljava/lang/Double;)D", "([B)D", "([S)D", "([I)D", "([J)D", "([F)D", "sumOfByte", "([Ljava/lang/Byte;)I", "sum", "sumOfShort", "([Ljava/lang/Short;)I", "sumOfInt", "([Ljava/lang/Integer;)I", "sumOfLong", "([Ljava/lang/Long;)J", "sumOfFloat", "([Ljava/lang/Float;)F", "sumOfDouble", "getIndices", "([J)Lkotlin/ranges/IntRange;", "([Z)Lkotlin/ranges/IntRange;", "([S)Lkotlin/ranges/IntRange;", "getLastIndex", "lastIndex", "([D)Lkotlin/ranges/IntRange;", "([C)Lkotlin/ranges/IntRange;", "([F)Lkotlin/ranges/IntRange;", "([I)Lkotlin/ranges/IntRange;", "([B)Lkotlin/ranges/IntRange;", "([Ljava/lang/Object;)Lkotlin/ranges/IntRange;", "kotlin-stdlib"}, k = 5, mv = {1, 4, 0}, xs = "kotlin/collections/ArraysKt")
/* loaded from: classes11.dex */
public class ArraysKt___ArraysKt extends ArraysKt___ArraysJvmKt {
    public static final <T> boolean all(@NotNull T[] tArr, @NotNull Function1<? super T, Boolean> function1) {
        for (T t : tArr) {
            if (!function1.invoke(t).booleanValue()) {
                return false;
            }
        }
        return true;
    }

    public static final <T> boolean any(@NotNull T[] tArr) {
        return !(tArr.length == 0);
    }

    @NotNull
    public static <T> Iterable<T> asIterable(@NotNull T[] tArr) {
        List emptyList;
        if (tArr.length == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        return new ArraysKt___ArraysKt$asIterable$$inlined$Iterable$1(tArr);
    }

    @NotNull
    public static <T> Sequence<T> asSequence(@NotNull final T[] tArr) {
        Sequence<T> emptySequence;
        if (tArr.length == 0) {
            emptySequence = SequencesKt__SequencesKt.emptySequence();
            return emptySequence;
        }
        return new Sequence<T>() { // from class: kotlin.collections.ArraysKt___ArraysKt$asSequence$$inlined$Sequence$1
            @Override // kotlin.sequences.Sequence
            @NotNull
            public Iterator<T> iterator() {
                return ArrayIteratorKt.iterator(tArr);
            }
        };
    }

    /* JADX WARN: Multi-variable type inference failed */
    @NotNull
    public static final <T, K, V> Map<K, V> associate(@NotNull T[] tArr, @NotNull Function1<? super T, ? extends Pair<? extends K, ? extends V>> function1) {
        int mapCapacity;
        int coerceAtLeast;
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(tArr.length);
        coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(mapCapacity, 16);
        LinkedHashMap linkedHashMap = new LinkedHashMap(coerceAtLeast);
        for (ThirdAppInfoNew thirdAppInfoNew : tArr) {
            Pair<? extends K, ? extends V> invoke = function1.invoke(thirdAppInfoNew);
            linkedHashMap.put(invoke.getFirst(), invoke.getSecond());
        }
        return linkedHashMap;
    }

    @NotNull
    public static final <T, K> Map<K, T> associateBy(@NotNull T[] tArr, @NotNull Function1<? super T, ? extends K> function1) {
        int mapCapacity;
        int coerceAtLeast;
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(tArr.length);
        coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(mapCapacity, 16);
        LinkedHashMap linkedHashMap = new LinkedHashMap(coerceAtLeast);
        for (T t : tArr) {
            linkedHashMap.put(function1.invoke(t), t);
        }
        return linkedHashMap;
    }

    @NotNull
    public static final <T, K, M extends Map<? super K, ? super T>> M associateByTo(@NotNull T[] tArr, @NotNull M m2, @NotNull Function1<? super T, ? extends K> function1) {
        for (T t : tArr) {
            m2.put(function1.invoke(t), t);
        }
        return m2;
    }

    @NotNull
    public static final <T, K, V, M extends Map<? super K, ? super V>> M associateTo(@NotNull T[] tArr, @NotNull M m2, @NotNull Function1<? super T, ? extends Pair<? extends K, ? extends V>> function1) {
        for (T t : tArr) {
            Pair<? extends K, ? extends V> invoke = function1.invoke(t);
            m2.put(invoke.getFirst(), invoke.getSecond());
        }
        return m2;
    }

    public static final double average(@NotNull byte[] bArr) {
        double d = 0.0d;
        int i2 = 0;
        for (double d2 : bArr) {
            Double.isNaN(d2);
            d += d2;
            i2++;
        }
        if (i2 == 0) {
            return DoubleCompanionObject.INSTANCE.getNaN();
        }
        double d3 = i2;
        Double.isNaN(d3);
        return d / d3;
    }

    @JvmName(name = "averageOfByte")
    public static final double averageOfByte(@NotNull Byte[] bArr) {
        double d = 0.0d;
        int i2 = 0;
        for (Byte b : bArr) {
            double byteValue = b.byteValue();
            Double.isNaN(byteValue);
            d += byteValue;
            i2++;
        }
        if (i2 == 0) {
            return DoubleCompanionObject.INSTANCE.getNaN();
        }
        double d2 = i2;
        Double.isNaN(d2);
        return d / d2;
    }

    @JvmName(name = "averageOfDouble")
    public static final double averageOfDouble(@NotNull Double[] dArr) {
        double d = 0.0d;
        int i2 = 0;
        for (Double d2 : dArr) {
            d += d2.doubleValue();
            i2++;
        }
        if (i2 == 0) {
            return DoubleCompanionObject.INSTANCE.getNaN();
        }
        double d3 = i2;
        Double.isNaN(d3);
        return d / d3;
    }

    @JvmName(name = "averageOfFloat")
    public static final double averageOfFloat(@NotNull Float[] fArr) {
        double d = 0.0d;
        int i2 = 0;
        for (Float f2 : fArr) {
            double floatValue = f2.floatValue();
            Double.isNaN(floatValue);
            d += floatValue;
            i2++;
        }
        if (i2 == 0) {
            return DoubleCompanionObject.INSTANCE.getNaN();
        }
        double d2 = i2;
        Double.isNaN(d2);
        return d / d2;
    }

    @JvmName(name = "averageOfInt")
    public static final double averageOfInt(@NotNull Integer[] numArr) {
        double d = 0.0d;
        int i2 = 0;
        for (Integer num : numArr) {
            double intValue = num.intValue();
            Double.isNaN(intValue);
            d += intValue;
            i2++;
        }
        if (i2 == 0) {
            return DoubleCompanionObject.INSTANCE.getNaN();
        }
        double d2 = i2;
        Double.isNaN(d2);
        return d / d2;
    }

    @JvmName(name = "averageOfLong")
    public static final double averageOfLong(@NotNull Long[] lArr) {
        double d = 0.0d;
        int i2 = 0;
        for (Long l2 : lArr) {
            double longValue = l2.longValue();
            Double.isNaN(longValue);
            d += longValue;
            i2++;
        }
        if (i2 == 0) {
            return DoubleCompanionObject.INSTANCE.getNaN();
        }
        double d2 = i2;
        Double.isNaN(d2);
        return d / d2;
    }

    @JvmName(name = "averageOfShort")
    public static final double averageOfShort(@NotNull Short[] shArr) {
        double d = 0.0d;
        int i2 = 0;
        for (Short sh : shArr) {
            double shortValue = sh.shortValue();
            Double.isNaN(shortValue);
            d += shortValue;
            i2++;
        }
        if (i2 == 0) {
            return DoubleCompanionObject.INSTANCE.getNaN();
        }
        double d2 = i2;
        Double.isNaN(d2);
        return d / d2;
    }

    @InlineOnly
    private static final <T> T component1(@NotNull T[] tArr) {
        return tArr[0];
    }

    @InlineOnly
    private static final <T> T component2(@NotNull T[] tArr) {
        return tArr[1];
    }

    @InlineOnly
    private static final <T> T component3(@NotNull T[] tArr) {
        return tArr[2];
    }

    @InlineOnly
    private static final <T> T component4(@NotNull T[] tArr) {
        return tArr[3];
    }

    @InlineOnly
    private static final <T> T component5(@NotNull T[] tArr) {
        return tArr[4];
    }

    public static final <T> boolean contains(@NotNull T[] tArr, T t) {
        int indexOf;
        indexOf = indexOf(tArr, t);
        return indexOf >= 0;
    }

    @InlineOnly
    private static final <T> int count(@NotNull T[] tArr) {
        return tArr.length;
    }

    @NotNull
    public static final <T> List<T> distinct(@NotNull T[] tArr) {
        List<T> list;
        list = CollectionsKt___CollectionsKt.toList(toMutableSet(tArr));
        return list;
    }

    @NotNull
    public static final <T, K> List<T> distinctBy(@NotNull T[] tArr, @NotNull Function1<? super T, ? extends K> function1) {
        HashSet hashSet = new HashSet();
        ArrayList arrayList = new ArrayList();
        for (T t : tArr) {
            if (hashSet.add(function1.invoke(t))) {
                arrayList.add(t);
            }
        }
        return arrayList;
    }

    @NotNull
    public static final <T> List<T> drop(@NotNull T[] tArr, int i2) {
        int coerceAtLeast;
        if (i2 >= 0) {
            coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(tArr.length - i2, 0);
            return takeLast(tArr, coerceAtLeast);
        }
        throw new IllegalArgumentException(("Requested element count " + i2 + " is less than zero.").toString());
    }

    @NotNull
    public static final <T> List<T> dropLast(@NotNull T[] tArr, int i2) {
        int coerceAtLeast;
        if (i2 >= 0) {
            coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(tArr.length - i2, 0);
            return take(tArr, coerceAtLeast);
        }
        throw new IllegalArgumentException(("Requested element count " + i2 + " is less than zero.").toString());
    }

    @NotNull
    public static final <T> List<T> dropLastWhile(@NotNull T[] tArr, @NotNull Function1<? super T, Boolean> function1) {
        List<T> emptyList;
        for (int lastIndex = getLastIndex(tArr); lastIndex >= 0; lastIndex--) {
            if (!function1.invoke(tArr[lastIndex]).booleanValue()) {
                return take(tArr, lastIndex + 1);
            }
        }
        emptyList = CollectionsKt__CollectionsKt.emptyList();
        return emptyList;
    }

    @NotNull
    public static final <T> List<T> dropWhile(@NotNull T[] tArr, @NotNull Function1<? super T, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        boolean z = false;
        for (T t : tArr) {
            if (z) {
                arrayList.add(t);
            } else if (!function1.invoke(t).booleanValue()) {
                arrayList.add(t);
                z = true;
            }
        }
        return arrayList;
    }

    @InlineOnly
    private static final <T> T elementAtOrElse(@NotNull T[] tArr, int i2, Function1<? super Integer, ? extends T> function1) {
        return (i2 < 0 || i2 > getLastIndex(tArr)) ? function1.invoke(Integer.valueOf(i2)) : tArr[i2];
    }

    @InlineOnly
    private static final <T> T elementAtOrNull(@NotNull T[] tArr, int i2) {
        return (T) ArraysKt.getOrNull(tArr, i2);
    }

    @NotNull
    public static final <T> List<T> filter(@NotNull T[] tArr, @NotNull Function1<? super T, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        for (T t : tArr) {
            if (function1.invoke(t).booleanValue()) {
                arrayList.add(t);
            }
        }
        return arrayList;
    }

    @NotNull
    public static final <T> List<T> filterIndexed(@NotNull T[] tArr, @NotNull Function2<? super Integer, ? super T, Boolean> function2) {
        ArrayList arrayList = new ArrayList();
        int length = tArr.length;
        int i2 = 0;
        int i3 = 0;
        while (i2 < length) {
            T t = tArr[i2];
            int i4 = i3 + 1;
            if (function2.invoke(Integer.valueOf(i3), t).booleanValue()) {
                arrayList.add(t);
            }
            i2++;
            i3 = i4;
        }
        return arrayList;
    }

    @NotNull
    public static final <T, C extends Collection<? super T>> C filterIndexedTo(@NotNull T[] tArr, @NotNull C c2, @NotNull Function2<? super Integer, ? super T, Boolean> function2) {
        int length = tArr.length;
        int i2 = 0;
        int i3 = 0;
        while (i2 < length) {
            T t = tArr[i2];
            int i4 = i3 + 1;
            if (function2.invoke(Integer.valueOf(i3), t).booleanValue()) {
                c2.add(t);
            }
            i2++;
            i3 = i4;
        }
        return c2;
    }

    @NotNull
    public static final /* synthetic */ <R> List<R> filterIsInstance(@NotNull Object[] objArr) {
        ArrayList arrayList = new ArrayList();
        for (Object obj : objArr) {
            Intrinsics.reifiedOperationMarker(3, "R");
            if (obj instanceof Object) {
                arrayList.add(obj);
            }
        }
        return arrayList;
    }

    @NotNull
    public static final /* synthetic */ <R, C extends Collection<? super R>> C filterIsInstanceTo(@NotNull Object[] objArr, @NotNull C c2) {
        for (Object obj : objArr) {
            Intrinsics.reifiedOperationMarker(3, "R");
            if (obj instanceof Object) {
                c2.add(obj);
            }
        }
        return c2;
    }

    @NotNull
    public static final <T> List<T> filterNot(@NotNull T[] tArr, @NotNull Function1<? super T, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        for (T t : tArr) {
            if (!function1.invoke(t).booleanValue()) {
                arrayList.add(t);
            }
        }
        return arrayList;
    }

    @NotNull
    public static final <T> List<T> filterNotNull(@NotNull T[] tArr) {
        return (List) filterNotNullTo(tArr, new ArrayList());
    }

    @NotNull
    public static final <C extends Collection<? super T>, T> C filterNotNullTo(@NotNull T[] tArr, @NotNull C c2) {
        for (T t : tArr) {
            if (t != null) {
                c2.add(t);
            }
        }
        return c2;
    }

    @NotNull
    public static final <T, C extends Collection<? super T>> C filterNotTo(@NotNull T[] tArr, @NotNull C c2, @NotNull Function1<? super T, Boolean> function1) {
        for (T t : tArr) {
            if (!function1.invoke(t).booleanValue()) {
                c2.add(t);
            }
        }
        return c2;
    }

    @NotNull
    public static final <T, C extends Collection<? super T>> C filterTo(@NotNull T[] tArr, @NotNull C c2, @NotNull Function1<? super T, Boolean> function1) {
        for (T t : tArr) {
            if (function1.invoke(t).booleanValue()) {
                c2.add(t);
            }
        }
        return c2;
    }

    @InlineOnly
    private static final <T> T find(@NotNull T[] tArr, Function1<? super T, Boolean> function1) {
        for (T t : tArr) {
            if (function1.invoke(t).booleanValue()) {
                return t;
            }
        }
        return null;
    }

    @InlineOnly
    private static final <T> T findLast(@NotNull T[] tArr, Function1<? super T, Boolean> function1) {
        T t;
        int length = tArr.length;
        do {
            length--;
            if (length < 0) {
                return null;
            }
            t = tArr[length];
        } while (!function1.invoke(t).booleanValue());
        return t;
    }

    public static final <T> T first(@NotNull T[] tArr) {
        if (!(tArr.length == 0)) {
            return tArr[0];
        }
        throw new NoSuchElementException("Array is empty.");
    }

    @Nullable
    public static final <T> T firstOrNull(@NotNull T[] tArr) {
        if (tArr.length == 0) {
            return null;
        }
        return tArr[0];
    }

    @NotNull
    public static final <T, R> List<R> flatMap(@NotNull T[] tArr, @NotNull Function1<? super T, ? extends Iterable<? extends R>> function1) {
        ArrayList arrayList = new ArrayList();
        for (T t : tArr) {
            CollectionsKt__MutableCollectionsKt.addAll(arrayList, function1.invoke(t));
        }
        return arrayList;
    }

    @NotNull
    public static final <T, R, C extends Collection<? super R>> C flatMapTo(@NotNull T[] tArr, @NotNull C c2, @NotNull Function1<? super T, ? extends Iterable<? extends R>> function1) {
        for (T t : tArr) {
            CollectionsKt__MutableCollectionsKt.addAll(c2, function1.invoke(t));
        }
        return c2;
    }

    /* JADX WARN: Multi-variable type inference failed */
    public static final <T, R> R fold(@NotNull T[] tArr, R r, @NotNull Function2<? super R, ? super T, ? extends R> function2) {
        for (ThirdAppInfoNew thirdAppInfoNew : tArr) {
            r = function2.invoke(r, thirdAppInfoNew);
        }
        return r;
    }

    /* JADX WARN: Multi-variable type inference failed */
    public static final <T, R> R foldIndexed(@NotNull T[] tArr, R r, @NotNull Function3<? super Integer, ? super R, ? super T, ? extends R> function3) {
        int i2 = 0;
        for (ThirdAppInfoNew thirdAppInfoNew : tArr) {
            Integer valueOf = Integer.valueOf(i2);
            i2++;
            r = function3.invoke(valueOf, r, thirdAppInfoNew);
        }
        return r;
    }

    /* JADX WARN: Multi-variable type inference failed */
    public static final <T, R> R foldRight(@NotNull T[] tArr, R r, @NotNull Function2<? super T, ? super R, ? extends R> function2) {
        for (int lastIndex = getLastIndex(tArr); lastIndex >= 0; lastIndex--) {
            r = function2.invoke(tArr[lastIndex], r);
        }
        return r;
    }

    /* JADX WARN: Multi-variable type inference failed */
    public static final <T, R> R foldRightIndexed(@NotNull T[] tArr, R r, @NotNull Function3<? super Integer, ? super T, ? super R, ? extends R> function3) {
        for (int lastIndex = getLastIndex(tArr); lastIndex >= 0; lastIndex--) {
            r = function3.invoke(Integer.valueOf(lastIndex), tArr[lastIndex], r);
        }
        return r;
    }

    public static final <T> void forEach(@NotNull T[] tArr, @NotNull Function1<? super T, Unit> function1) {
        for (T t : tArr) {
            function1.invoke(t);
        }
    }

    public static final <T> void forEachIndexed(@NotNull T[] tArr, @NotNull Function2<? super Integer, ? super T, Unit> function2) {
        int i2 = 0;
        for (T t : tArr) {
            Integer valueOf = Integer.valueOf(i2);
            i2++;
            function2.invoke(valueOf, t);
        }
    }

    @NotNull
    public static final <T>  getIndices(@NotNull T[] tArr) {
        return new (0, getLastIndex(tArr));
    }

    public static final <T> int getLastIndex(@NotNull T[] tArr) {
        return tArr.length - 1;
    }

    @InlineOnly
    private static final <T> T getOrElse(@NotNull T[] tArr, int i2, Function1<? super Integer, ? extends T> function1) {
        return (i2 < 0 || i2 > getLastIndex(tArr)) ? function1.invoke(Integer.valueOf(i2)) : tArr[i2];
    }

    @Nullable
    public static <T> T getOrNull(@NotNull T[] tArr, int i2) {
        if (i2 < 0 || i2 > getLastIndex(tArr)) {
            return null;
        }
        return tArr[i2];
    }

    @NotNull
    public static final <T, K> Map<K, List<T>> groupBy(@NotNull T[] tArr, @NotNull Function1<? super T, ? extends K> function1) {
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        for (T t : tArr) {
            K invoke = function1.invoke(t);
            Object obj = linkedHashMap.get(invoke);
            if (obj == null) {
                obj = new ArrayList();
                linkedHashMap.put(invoke, obj);
            }
            ((List) obj).add(t);
        }
        return linkedHashMap;
    }

    @NotNull
    public static final <T, K, M extends Map<? super K, List<T>>> M groupByTo(@NotNull T[] tArr, @NotNull M m2, @NotNull Function1<? super T, ? extends K> function1) {
        for (T t : tArr) {
            K invoke = function1.invoke(t);
            Object obj = m2.get(invoke);
            if (obj == null) {
                obj = new ArrayList();
                m2.put(invoke, obj);
            }
            ((List) obj).add(t);
        }
        return m2;
    }

    @SinceKotlin(version = "1.1")
    @NotNull
    public static final <T, K> Grouping<T, K> groupingBy(@NotNull final T[] tArr, @NotNull final Function1<? super T, ? extends K> function1) {
        return new Grouping<T, K>() { // from class: kotlin.collections.ArraysKt___ArraysKt$groupingBy$1
            @Override // kotlin.collections.Grouping
            public K keyOf(T element) {
                return (K) function1.invoke(element);
            }

            @Override // kotlin.collections.Grouping
            @NotNull
            public Iterator<T> sourceIterator() {
                return ArrayIteratorKt.iterator(tArr);
            }
        };
    }

    public static <T> int indexOf(@NotNull T[] tArr, T t) {
        int i2 = 0;
        if (t == null) {
            int length = tArr.length;
            while (i2 < length) {
                if (tArr[i2] == null) {
                    return i2;
                }
                i2++;
            }
            return -1;
        }
        int length2 = tArr.length;
        while (i2 < length2) {
            if (Intrinsics.areEqual(t, tArr[i2])) {
                return i2;
            }
            i2++;
        }
        return -1;
    }

    public static final <T> int indexOfFirst(@NotNull T[] tArr, @NotNull Function1<? super T, Boolean> function1) {
        int length = tArr.length;
        for (int i2 = 0; i2 < length; i2++) {
            if (function1.invoke(tArr[i2]).booleanValue()) {
                return i2;
            }
        }
        return -1;
    }

    public static final <T> int indexOfLast(@NotNull T[] tArr, @NotNull Function1<? super T, Boolean> function1) {
        for (int length = tArr.length - 1; length >= 0; length--) {
            if (function1.invoke(tArr[length]).booleanValue()) {
                return length;
            }
        }
        return -1;
    }

    @NotNull
    public static final <T> Set<T> intersect(@NotNull T[] tArr, @NotNull Iterable<? extends T> iterable) {
        Set<T> mutableSet = toMutableSet(tArr);
        CollectionsKt__MutableCollectionsKt.retainAll(mutableSet, iterable);
        return mutableSet;
    }

    @InlineOnly
    private static final <T> boolean isEmpty(@NotNull T[] tArr) {
        return tArr.length == 0;
    }

    @InlineOnly
    private static final <T> boolean isNotEmpty(@NotNull T[] tArr) {
        return !(tArr.length == 0);
    }

    @NotNull
    public static final <T, A extends Appendable> A joinTo(@NotNull T[] tArr, @NotNull A a, @NotNull CharSequence charSequence, @NotNull CharSequence charSequence2, @NotNull CharSequence charSequence3, int i2, @NotNull CharSequence charSequence4, @Nullable Function1<? super T, ? extends CharSequence> function1) {
        a.append(charSequence2);
        int i3 = 0;
        for (T t : tArr) {
            i3++;
            if (i3 > 1) {
                a.append(charSequence);
            }
            if (i2 >= 0 && i3 > i2) {
                break;
            }
            StringsKt__AppendableKt.appendElement(a, t, function1);
        }
        if (i2 >= 0 && i3 > i2) {
            a.append(charSequence4);
        }
        a.append(charSequence3);
        return a;
    }

    @NotNull
    public static final <T> String joinToString(@NotNull T[] tArr, @NotNull CharSequence charSequence, @NotNull CharSequence charSequence2, @NotNull CharSequence charSequence3, int i2, @NotNull CharSequence charSequence4, @Nullable Function1<? super T, ? extends CharSequence> function1) {
        String sb = ((StringBuilder) joinTo(tArr, new StringBuilder(), charSequence, charSequence2, charSequence3, i2, charSequence4, function1)).toString();
        Intrinsics.checkExpressionValueIsNotNull(sb, "joinTo(StringBuilder(), \u2026ed, transform).toString()");
        return sb;
    }

    public static /* synthetic */ String joinToString$default(Object[] objArr, CharSequence charSequence, CharSequence charSequence2, CharSequence charSequence3, int i2, CharSequence charSequence4, Function1 function1, int i3, Object obj) {
        if ((i3 & 1) != 0) {
            charSequence = ", ";
        }
        CharSequence charSequence5 = (i3 & 2) != 0 ? "" : charSequence2;
        CharSequence charSequence6 = (i3 & 4) == 0 ? charSequence3 : "";
        int i4 = (i3 & 8) != 0 ? -1 : i2;
        if ((i3 & 16) != 0) {
            charSequence4 = "...";
        }
        CharSequence charSequence7 = charSequence4;
        if ((i3 & 32) != 0) {
            function1 = null;
        }
        return joinToString(objArr, charSequence, charSequence5, charSequence6, i4, charSequence7, function1);
    }

    public static final <T> T last(@NotNull T[] tArr) {
        if (!(tArr.length == 0)) {
            return tArr[getLastIndex(tArr)];
        }
        throw new NoSuchElementException("Array is empty.");
    }

    public static final <T> int lastIndexOf(@NotNull T[] tArr, T t) {
        if (t == null) {
            for (int length = tArr.length - 1; length >= 0; length--) {
                if (tArr[length] == null) {
                    return length;
                }
            }
        } else {
            for (int length2 = tArr.length - 1; length2 >= 0; length2--) {
                if (Intrinsics.areEqual(t, tArr[length2])) {
                    return length2;
                }
            }
        }
        return -1;
    }

    @Nullable
    public static final <T> T lastOrNull(@NotNull T[] tArr) {
        if (tArr.length == 0) {
            return null;
        }
        return tArr[tArr.length - 1];
    }

    @NotNull
    public static final <T, R> List<R> map(@NotNull T[] tArr, @NotNull Function1<? super T, ? extends R> function1) {
        ArrayList arrayList = new ArrayList(tArr.length);
        for (T t : tArr) {
            arrayList.add(function1.invoke(t));
        }
        return arrayList;
    }

    @NotNull
    public static final <T, R> List<R> mapIndexed(@NotNull T[] tArr, @NotNull Function2<? super Integer, ? super T, ? extends R> function2) {
        ArrayList arrayList = new ArrayList(tArr.length);
        int i2 = 0;
        for (T t : tArr) {
            Integer valueOf = Integer.valueOf(i2);
            i2++;
            arrayList.add(function2.invoke(valueOf, t));
        }
        return arrayList;
    }

    @NotNull
    public static final <T, R> List<R> mapIndexedNotNull(@NotNull T[] tArr, @NotNull Function2<? super Integer, ? super T, ? extends R> function2) {
        ArrayList arrayList = new ArrayList();
        int length = tArr.length;
        int i2 = 0;
        int i3 = 0;
        while (i2 < length) {
            int i4 = i3 + 1;
            R invoke = function2.invoke(Integer.valueOf(i3), tArr[i2]);
            if (invoke != null) {
                arrayList.add(invoke);
            }
            i2++;
            i3 = i4;
        }
        return arrayList;
    }

    @NotNull
    public static final <T, R, C extends Collection<? super R>> C mapIndexedNotNullTo(@NotNull T[] tArr, @NotNull C c2, @NotNull Function2<? super Integer, ? super T, ? extends R> function2) {
        int length = tArr.length;
        int i2 = 0;
        int i3 = 0;
        while (i2 < length) {
            int i4 = i3 + 1;
            R invoke = function2.invoke(Integer.valueOf(i3), tArr[i2]);
            if (invoke != null) {
                c2.add(invoke);
            }
            i2++;
            i3 = i4;
        }
        return c2;
    }

    @NotNull
    public static final <T, R, C extends Collection<? super R>> C mapIndexedTo(@NotNull T[] tArr, @NotNull C c2, @NotNull Function2<? super Integer, ? super T, ? extends R> function2) {
        int i2 = 0;
        for (T t : tArr) {
            Integer valueOf = Integer.valueOf(i2);
            i2++;
            c2.add(function2.invoke(valueOf, t));
        }
        return c2;
    }

    @NotNull
    public static final <T, R> List<R> mapNotNull(@NotNull T[] tArr, @NotNull Function1<? super T, ? extends R> function1) {
        ArrayList arrayList = new ArrayList();
        for (T t : tArr) {
            R invoke = function1.invoke(t);
            if (invoke != null) {
                arrayList.add(invoke);
            }
        }
        return arrayList;
    }

    @NotNull
    public static final <T, R, C extends Collection<? super R>> C mapNotNullTo(@NotNull T[] tArr, @NotNull C c2, @NotNull Function1<? super T, ? extends R> function1) {
        for (T t : tArr) {
            R invoke = function1.invoke(t);
            if (invoke != null) {
                c2.add(invoke);
            }
        }
        return c2;
    }

    @NotNull
    public static final <T, R, C extends Collection<? super R>> C mapTo(@NotNull T[] tArr, @NotNull C c2, @NotNull Function1<? super T, ? extends R> function1) {
        for (T t : tArr) {
            c2.add(function1.invoke(t));
        }
        return c2;
    }

    @SinceKotlin(version = "1.1")
    @Nullable
    public static final Double max(@NotNull Double[] dArr) {
        int i2 = 1;
        if (dArr.length == 0) {
            return null;
        }
        double doubleValue = dArr[0].doubleValue();
        if (Double.isNaN(doubleValue)) {
            return Double.valueOf(doubleValue);
        }
        int lastIndex = getLastIndex(dArr);
        if (1 <= lastIndex) {
            while (true) {
                double doubleValue2 = dArr[i2].doubleValue();
                if (!Double.isNaN(doubleValue2)) {
                    if (doubleValue < doubleValue2) {
                        doubleValue = doubleValue2;
                    }
                    if (i2 == lastIndex) {
                        break;
                    }
                    i2++;
                } else {
                    return Double.valueOf(doubleValue2);
                }
            }
        }
        return Double.valueOf(doubleValue);
    }

    @Nullable
    public static final <T, R extends Comparable<? super R>> T maxBy(@NotNull T[] tArr, @NotNull Function1<? super T, ? extends R> function1) {
        int i2 = 1;
        if (tArr.length == 0) {
            return null;
        }
        T t = tArr[0];
        int lastIndex = getLastIndex(tArr);
        if (lastIndex == 0) {
            return t;
        }
        R invoke = function1.invoke(t);
        if (1 <= lastIndex) {
            while (true) {
                T t2 = tArr[i2];
                R invoke2 = function1.invoke(t2);
                if (invoke.compareTo(invoke2) < 0) {
                    t = t2;
                    invoke = invoke2;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return t;
    }

    @Nullable
    public static final <T> T maxWith(@NotNull T[] tArr, @NotNull Comparator<? super T> comparator) {
        int i2 = 1;
        if (tArr.length == 0) {
            return null;
        }
        T t = tArr[0];
        int lastIndex = getLastIndex(tArr);
        if (1 <= lastIndex) {
            while (true) {
                T t2 = tArr[i2];
                if (comparator.compare(t, t2) < 0) {
                    t = t2;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return t;
    }

    @SinceKotlin(version = "1.1")
    @Nullable
    public static final Double min(@NotNull Double[] dArr) {
        int i2 = 1;
        if (dArr.length == 0) {
            return null;
        }
        double doubleValue = dArr[0].doubleValue();
        if (Double.isNaN(doubleValue)) {
            return Double.valueOf(doubleValue);
        }
        int lastIndex = getLastIndex(dArr);
        if (1 <= lastIndex) {
            while (true) {
                double doubleValue2 = dArr[i2].doubleValue();
                if (!Double.isNaN(doubleValue2)) {
                    if (doubleValue > doubleValue2) {
                        doubleValue = doubleValue2;
                    }
                    if (i2 == lastIndex) {
                        break;
                    }
                    i2++;
                } else {
                    return Double.valueOf(doubleValue2);
                }
            }
        }
        return Double.valueOf(doubleValue);
    }

    @Nullable
    public static final <T, R extends Comparable<? super R>> T minBy(@NotNull T[] tArr, @NotNull Function1<? super T, ? extends R> function1) {
        int i2 = 1;
        if (tArr.length == 0) {
            return null;
        }
        T t = tArr[0];
        int lastIndex = getLastIndex(tArr);
        if (lastIndex == 0) {
            return t;
        }
        R invoke = function1.invoke(t);
        if (1 <= lastIndex) {
            while (true) {
                T t2 = tArr[i2];
                R invoke2 = function1.invoke(t2);
                if (invoke.compareTo(invoke2) > 0) {
                    t = t2;
                    invoke = invoke2;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return t;
    }

    @Nullable
    public static final <T> T minWith(@NotNull T[] tArr, @NotNull Comparator<? super T> comparator) {
        int i2 = 1;
        if (tArr.length == 0) {
            return null;
        }
        T t = tArr[0];
        int lastIndex = getLastIndex(tArr);
        if (1 <= lastIndex) {
            while (true) {
                T t2 = tArr[i2];
                if (comparator.compare(t, t2) > 0) {
                    t = t2;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return t;
    }

    public static final <T> boolean none(@NotNull T[] tArr) {
        return tArr.length == 0;
    }

    @NotNull
    public static final <T> Pair<List<T>, List<T>> partition(@NotNull T[] tArr, @NotNull Function1<? super T, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        ArrayList arrayList2 = new ArrayList();
        for (T t : tArr) {
            if (function1.invoke(t).booleanValue()) {
                arrayList.add(t);
            } else {
                arrayList2.add(t);
            }
        }
        return new Pair<>(arrayList, arrayList2);
    }

    @SinceKotlin(version = "1.3")
    @InlineOnly
    private static final <T> T random(@NotNull T[] tArr) {
        return (T) random(tArr, Random.INSTANCE);
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @InlineOnly
    private static final <T> T randomOrNull(@NotNull T[] tArr) {
        return (T) randomOrNull(tArr, Random.INSTANCE);
    }

    public static final <S, T extends S> S reduce(@NotNull T[] tArr, @NotNull Function2<? super S, ? super T, ? extends S> function2) {
        int i2 = 1;
        if (!(tArr.length == 0)) {
            S s = (Object) tArr[0];
            int lastIndex = getLastIndex(tArr);
            if (1 <= lastIndex) {
                while (true) {
                    s = function2.invoke(s, (Object) tArr[i2]);
                    if (i2 == lastIndex) {
                        break;
                    }
                    i2++;
                }
            }
            return (S) s;
        }
        throw new UnsupportedOperationException("Empty array can't be reduced.");
    }

    public static final <S, T extends S> S reduceIndexed(@NotNull T[] tArr, @NotNull Function3<? super Integer, ? super S, ? super T, ? extends S> function3) {
        int i2 = 1;
        if (!(tArr.length == 0)) {
            S s = (Object) tArr[0];
            int lastIndex = getLastIndex(tArr);
            if (1 <= lastIndex) {
                while (true) {
                    s = function3.invoke(Integer.valueOf(i2), s, (Object) tArr[i2]);
                    if (i2 == lastIndex) {
                        break;
                    }
                    i2++;
                }
            }
            return (S) s;
        }
        throw new UnsupportedOperationException("Empty array can't be reduced.");
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @Nullable
    public static final <S, T extends S> S reduceOrNull(@NotNull T[] tArr, @NotNull Function2<? super S, ? super T, ? extends S> function2) {
        int i2 = 1;
        if (tArr.length == 0) {
            return null;
        }
        S s = (Object) tArr[0];
        int lastIndex = getLastIndex(tArr);
        if (1 <= lastIndex) {
            while (true) {
                s = function2.invoke(s, (Object) tArr[i2]);
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return (S) s;
    }

    public static final <S, T extends S> S reduceRight(@NotNull T[] tArr, @NotNull Function2<? super T, ? super S, ? extends S> function2) {
        int lastIndex = getLastIndex(tArr);
        if (lastIndex >= 0) {
            Object obj = (S) tArr[lastIndex];
            for (int i2 = lastIndex - 1; i2 >= 0; i2--) {
                obj = (S) function2.invoke((Object) tArr[i2], obj);
            }
            return (S) obj;
        }
        throw new UnsupportedOperationException("Empty array can't be reduced.");
    }

    public static final <S, T extends S> S reduceRightIndexed(@NotNull T[] tArr, @NotNull Function3<? super Integer, ? super T, ? super S, ? extends S> function3) {
        int lastIndex = getLastIndex(tArr);
        if (lastIndex >= 0) {
            Object obj = (S) tArr[lastIndex];
            for (int i2 = lastIndex - 1; i2 >= 0; i2--) {
                obj = (S) function3.invoke(Integer.valueOf(i2), (Object) tArr[i2], obj);
            }
            return (S) obj;
        }
        throw new UnsupportedOperationException("Empty array can't be reduced.");
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @Nullable
    public static final <S, T extends S> S reduceRightOrNull(@NotNull T[] tArr, @NotNull Function2<? super T, ? super S, ? extends S> function2) {
        int lastIndex = getLastIndex(tArr);
        if (lastIndex < 0) {
            return null;
        }
        Object obj = (S) tArr[lastIndex];
        for (int i2 = lastIndex - 1; i2 >= 0; i2--) {
            obj = (S) function2.invoke((Object) tArr[i2], obj);
        }
        return (S) obj;
    }

    @NotNull
    public static final <T> T[] requireNoNulls(@NotNull T[] tArr) {
        for (T t : tArr) {
            if (t == null) {
                throw new IllegalArgumentException("null element found in " + tArr + OrderISVUtil.MONEY_DECIMAL_CHAR);
            }
        }
        return tArr;
    }

    public static final <T> void reverse(@NotNull T[] tArr) {
        int length = (tArr.length / 2) - 1;
        if (length < 0) {
            return;
        }
        int lastIndex = getLastIndex(tArr);
        int i2 = 0;
        if (length < 0) {
            return;
        }
        while (true) {
            T t = tArr[i2];
            tArr[i2] = tArr[lastIndex];
            tArr[lastIndex] = t;
            lastIndex--;
            if (i2 == length) {
                return;
            }
            i2++;
        }
    }

    @NotNull
    public static final <T> List<T> reversed(@NotNull T[] tArr) {
        List<T> emptyList;
        if (tArr.length == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        List<T> mutableList = toMutableList(tArr);
        CollectionsKt___CollectionsJvmKt.reverse(mutableList);
        return mutableList;
    }

    @NotNull
    public static final <T> T[] reversedArray(@NotNull T[] tArr) {
        int i2 = 0;
        if (tArr.length == 0) {
            return tArr;
        }
        T[] tArr2 = (T[]) ArraysKt__ArraysJVMKt.arrayOfNulls(tArr, tArr.length);
        int lastIndex = getLastIndex(tArr);
        if (lastIndex >= 0) {
            while (true) {
                tArr2[lastIndex - i2] = tArr[i2];
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return tArr2;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @NotNull
    public static final <T, R> List<R> scan(@NotNull T[] tArr, R r, @NotNull Function2<? super R, ? super T, ? extends R> function2) {
        List<R> listOf;
        if (tArr.length == 0) {
            listOf = CollectionsKt__CollectionsJVMKt.listOf(r);
            return listOf;
        }
        ArrayList arrayList = new ArrayList(tArr.length + 1);
        arrayList.add(r);
        for (ThirdAppInfoNew thirdAppInfoNew : tArr) {
            r = function2.invoke(r, thirdAppInfoNew);
            arrayList.add(r);
        }
        return arrayList;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @NotNull
    public static final <T, R> List<R> scanIndexed(@NotNull T[] tArr, R r, @NotNull Function3<? super Integer, ? super R, ? super T, ? extends R> function3) {
        List<R> listOf;
        if (tArr.length == 0) {
            listOf = CollectionsKt__CollectionsJVMKt.listOf(r);
            return listOf;
        }
        ArrayList arrayList = new ArrayList(tArr.length + 1);
        arrayList.add(r);
        int length = tArr.length;
        for (int i2 = 0; i2 < length; i2++) {
            r = function3.invoke(Integer.valueOf(i2), r, tArr[i2]);
            arrayList.add(r);
        }
        return arrayList;
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @NotNull
    public static final <S, T extends S> List<S> scanReduce(@NotNull T[] tArr, @NotNull Function2<? super S, ? super T, ? extends S> function2) {
        List<S> emptyList;
        if (tArr.length == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        S s = (Object) tArr[0];
        ArrayList arrayList = new ArrayList(tArr.length);
        arrayList.add(s);
        int length = tArr.length;
        for (int i2 = 1; i2 < length; i2++) {
            s = function2.invoke(s, (Object) tArr[i2]);
            arrayList.add(s);
        }
        return arrayList;
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @NotNull
    public static final <S, T extends S> List<S> scanReduceIndexed(@NotNull T[] tArr, @NotNull Function3<? super Integer, ? super S, ? super T, ? extends S> function3) {
        List<S> emptyList;
        if (tArr.length == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        S s = (Object) tArr[0];
        ArrayList arrayList = new ArrayList(tArr.length);
        arrayList.add(s);
        int length = tArr.length;
        for (int i2 = 1; i2 < length; i2++) {
            s = function3.invoke(Integer.valueOf(i2), s, (Object) tArr[i2]);
            arrayList.add(s);
        }
        return arrayList;
    }

    public static final <T> T single(@NotNull T[] tArr) {
        int length = tArr.length;
        if (length != 0) {
            if (length == 1) {
                return tArr[0];
            }
            throw new IllegalArgumentException("Array has more than one element.");
        }
        throw new NoSuchElementException("Array is empty.");
    }

    @Nullable
    public static <T> T singleOrNull(@NotNull T[] tArr) {
        if (tArr.length == 1) {
            return tArr[0];
        }
        return null;
    }

    @NotNull
    public static final <T> List<T> slice(@NotNull T[] tArr, @NotNull  Var) {
        List<T> asList;
        List<T> emptyList;
        if (Var.isEmpty()) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        asList = ArraysKt___ArraysJvmKt.asList(ArraysKt___ArraysJvmKt.copyOfRange(tArr, Var.getStart().intValue(), Var.getEndInclusive().intValue() + 1));
        return asList;
    }

    @NotNull
    public static final <T> T[] sliceArray(@NotNull T[] tArr, @NotNull Collection<Integer> collection) {
        T[] tArr2 = (T[]) ArraysKt__ArraysJVMKt.arrayOfNulls(tArr, collection.size());
        Iterator<Integer> it = collection.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            tArr2[i2] = tArr[it.next().intValue()];
            i2++;
        }
        return tArr2;
    }

    public static final <T, R extends Comparable<? super R>> void sortBy(@NotNull T[] tArr, @NotNull Function1<? super T, ? extends R> function1) {
        if (tArr.length > 1) {
            ArraysKt___ArraysJvmKt.sortWith(tArr, new ComparisonsKt__ComparisonsKt$compareBy$2(function1));
        }
    }

    public static final <T, R extends Comparable<? super R>> void sortByDescending(@NotNull T[] tArr, @NotNull Function1<? super T, ? extends R> function1) {
        if (tArr.length > 1) {
            ArraysKt___ArraysJvmKt.sortWith(tArr, new ComparisonsKt__ComparisonsKt$compareByDescending$1(function1));
        }
    }

    public static final <T extends Comparable<? super T>> void sortDescending(@NotNull T[] tArr) {
        Comparator reverseOrder;
        reverseOrder = ComparisonsKt__ComparisonsKt.reverseOrder();
        ArraysKt___ArraysJvmKt.sortWith(tArr, reverseOrder);
    }

    @NotNull
    public static final <T extends Comparable<? super T>> List<T> sorted(@NotNull T[] tArr) {
        List<T> asList;
        asList = ArraysKt___ArraysJvmKt.asList(sortedArray(tArr));
        return asList;
    }

    @NotNull
    public static final <T extends Comparable<? super T>> T[] sortedArray(@NotNull T[] tArr) {
        if (tArr.length == 0) {
            return tArr;
        }
        Object[] copyOf = Arrays.copyOf(tArr, tArr.length);
        Intrinsics.checkExpressionValueIsNotNull(copyOf, "java.util.Arrays.copyOf(this, size)");
        T[] tArr2 = (T[]) ((Comparable[]) copyOf);
        if (tArr2 != null) {
            ArraysKt___ArraysJvmKt.sort((Object[]) tArr2);
            return tArr2;
        }
        throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<kotlin.Any?>");
    }

    @NotNull
    public static final <T extends Comparable<? super T>> T[] sortedArrayDescending(@NotNull T[] tArr) {
        Comparator reverseOrder;
        if (tArr.length == 0) {
            return tArr;
        }
        Object[] copyOf = Arrays.copyOf(tArr, tArr.length);
        Intrinsics.checkExpressionValueIsNotNull(copyOf, "java.util.Arrays.copyOf(this, size)");
        T[] tArr2 = (T[]) ((Comparable[]) copyOf);
        reverseOrder = ComparisonsKt__ComparisonsKt.reverseOrder();
        ArraysKt___ArraysJvmKt.sortWith(tArr2, reverseOrder);
        return tArr2;
    }

    @NotNull
    public static final <T> T[] sortedArrayWith(@NotNull T[] tArr, @NotNull Comparator<? super T> comparator) {
        if (tArr.length == 0) {
            return tArr;
        }
        T[] tArr2 = (T[]) Arrays.copyOf(tArr, tArr.length);
        Intrinsics.checkExpressionValueIsNotNull(tArr2, "java.util.Arrays.copyOf(this, size)");
        ArraysKt___ArraysJvmKt.sortWith(tArr2, comparator);
        return tArr2;
    }

    @NotNull
    public static final <T, R extends Comparable<? super R>> List<T> sortedBy(@NotNull T[] tArr, @NotNull Function1<? super T, ? extends R> function1) {
        List<T> sortedWith;
        sortedWith = sortedWith(tArr, new ComparisonsKt__ComparisonsKt$compareBy$2(function1));
        return sortedWith;
    }

    @NotNull
    public static final <T, R extends Comparable<? super R>> List<T> sortedByDescending(@NotNull T[] tArr, @NotNull Function1<? super T, ? extends R> function1) {
        List<T> sortedWith;
        sortedWith = sortedWith(tArr, new ComparisonsKt__ComparisonsKt$compareByDescending$1(function1));
        return sortedWith;
    }

    @NotNull
    public static final <T extends Comparable<? super T>> List<T> sortedDescending(@NotNull T[] tArr) {
        Comparator reverseOrder;
        List<T> sortedWith;
        reverseOrder = ComparisonsKt__ComparisonsKt.reverseOrder();
        sortedWith = sortedWith(tArr, reverseOrder);
        return sortedWith;
    }

    @NotNull
    public static <T> List<T> sortedWith(@NotNull T[] tArr, @NotNull Comparator<? super T> comparator) {
        List<T> asList;
        asList = ArraysKt___ArraysJvmKt.asList(sortedArrayWith(tArr, comparator));
        return asList;
    }

    @NotNull
    public static final <T> Set<T> subtract(@NotNull T[] tArr, @NotNull Iterable<? extends T> iterable) {
        Set<T> mutableSet = toMutableSet(tArr);
        CollectionsKt__MutableCollectionsKt.removeAll(mutableSet, iterable);
        return mutableSet;
    }

    public static final int sum(@NotNull byte[] bArr) {
        int i2 = 0;
        for (byte b : bArr) {
            i2 += b;
        }
        return i2;
    }

    public static final <T> int sumBy(@NotNull T[] tArr, @NotNull Function1<? super T, Integer> function1) {
        int i2 = 0;
        for (T t : tArr) {
            i2 += function1.invoke(t).intValue();
        }
        return i2;
    }

    public static final <T> double sumByDouble(@NotNull T[] tArr, @NotNull Function1<? super T, Double> function1) {
        double d = 0.0d;
        for (T t : tArr) {
            d += function1.invoke(t).doubleValue();
        }
        return d;
    }

    @JvmName(name = "sumOfByte")
    public static final int sumOfByte(@NotNull Byte[] bArr) {
        int i2 = 0;
        for (Byte b : bArr) {
            i2 += b.byteValue();
        }
        return i2;
    }

    @JvmName(name = "sumOfDouble")
    public static final double sumOfDouble(@NotNull Double[] dArr) {
        double d = 0.0d;
        for (Double d2 : dArr) {
            d += d2.doubleValue();
        }
        return d;
    }

    @JvmName(name = "sumOfFloat")
    public static final float sumOfFloat(@NotNull Float[] fArr) {
        float f2 = 0.0f;
        for (Float f3 : fArr) {
            f2 += f3.floatValue();
        }
        return f2;
    }

    @JvmName(name = "sumOfInt")
    public static final int sumOfInt(@NotNull Integer[] numArr) {
        int i2 = 0;
        for (Integer num : numArr) {
            i2 += num.intValue();
        }
        return i2;
    }

    @JvmName(name = "sumOfLong")
    public static final long sumOfLong(@NotNull Long[] lArr) {
        long j2 = 0;
        for (Long l2 : lArr) {
            j2 += l2.longValue();
        }
        return j2;
    }

    @JvmName(name = "sumOfShort")
    public static final int sumOfShort(@NotNull Short[] shArr) {
        int i2 = 0;
        for (Short sh : shArr) {
            i2 += sh.shortValue();
        }
        return i2;
    }

    @NotNull
    public static final <T> List<T> take(@NotNull T[] tArr, int i2) {
        List<T> listOf;
        List<T> list;
        List<T> emptyList;
        if (!(i2 >= 0)) {
            throw new IllegalArgumentException(("Requested element count " + i2 + " is less than zero.").toString());
        } else if (i2 == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        } else if (i2 >= tArr.length) {
            list = toList(tArr);
            return list;
        } else if (i2 == 1) {
            listOf = CollectionsKt__CollectionsJVMKt.listOf(tArr[0]);
            return listOf;
        } else {
            ArrayList arrayList = new ArrayList(i2);
            int i3 = 0;
            for (T t : tArr) {
                arrayList.add(t);
                i3++;
                if (i3 == i2) {
                    break;
                }
            }
            return arrayList;
        }
    }

    @NotNull
    public static final <T> List<T> takeLast(@NotNull T[] tArr, int i2) {
        List<T> listOf;
        List<T> list;
        List<T> emptyList;
        if (!(i2 >= 0)) {
            throw new IllegalArgumentException(("Requested element count " + i2 + " is less than zero.").toString());
        } else if (i2 == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        } else {
            int length = tArr.length;
            if (i2 >= length) {
                list = toList(tArr);
                return list;
            } else if (i2 == 1) {
                listOf = CollectionsKt__CollectionsJVMKt.listOf(tArr[length - 1]);
                return listOf;
            } else {
                ArrayList arrayList = new ArrayList(i2);
                for (int i3 = length - i2; i3 < length; i3++) {
                    arrayList.add(tArr[i3]);
                }
                return arrayList;
            }
        }
    }

    @NotNull
    public static final <T> List<T> takeLastWhile(@NotNull T[] tArr, @NotNull Function1<? super T, Boolean> function1) {
        List<T> list;
        for (int lastIndex = getLastIndex(tArr); lastIndex >= 0; lastIndex--) {
            if (!function1.invoke(tArr[lastIndex]).booleanValue()) {
                return drop(tArr, lastIndex + 1);
            }
        }
        list = toList(tArr);
        return list;
    }

    @NotNull
    public static final <T> List<T> takeWhile(@NotNull T[] tArr, @NotNull Function1<? super T, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        for (T t : tArr) {
            if (!function1.invoke(t).booleanValue()) {
                break;
            }
            arrayList.add(t);
        }
        return arrayList;
    }

    @NotNull
    public static final boolean[] toBooleanArray(@NotNull Boolean[] boolArr) {
        int length = boolArr.length;
        boolean[] zArr = new boolean[length];
        for (int i2 = 0; i2 < length; i2++) {
            zArr[i2] = boolArr[i2].booleanValue();
        }
        return zArr;
    }

    @NotNull
    public static final byte[] toByteArray(@NotNull Byte[] bArr) {
        int length = bArr.length;
        byte[] bArr2 = new byte[length];
        for (int i2 = 0; i2 < length; i2++) {
            bArr2[i2] = bArr[i2].byteValue();
        }
        return bArr2;
    }

    @NotNull
    public static final char[] toCharArray(@NotNull Character[] chArr) {
        int length = chArr.length;
        char[] cArr = new char[length];
        for (int i2 = 0; i2 < length; i2++) {
            cArr[i2] = chArr[i2].charValue();
        }
        return cArr;
    }

    @NotNull
    public static final <T, C extends Collection<? super T>> C toCollection(@NotNull T[] tArr, @NotNull C c2) {
        for (T t : tArr) {
            c2.add(t);
        }
        return c2;
    }

    @NotNull
    public static final double[] toDoubleArray(@NotNull Double[] dArr) {
        int length = dArr.length;
        double[] dArr2 = new double[length];
        for (int i2 = 0; i2 < length; i2++) {
            dArr2[i2] = dArr[i2].doubleValue();
        }
        return dArr2;
    }

    @NotNull
    public static final float[] toFloatArray(@NotNull Float[] fArr) {
        int length = fArr.length;
        float[] fArr2 = new float[length];
        for (int i2 = 0; i2 < length; i2++) {
            fArr2[i2] = fArr[i2].floatValue();
        }
        return fArr2;
    }

    @NotNull
    public static <T> HashSet<T> toHashSet(@NotNull T[] tArr) {
        int mapCapacity;
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(tArr.length);
        return (HashSet) toCollection(tArr, new HashSet(mapCapacity));
    }

    @NotNull
    public static final int[] toIntArray(@NotNull Integer[] numArr) {
        int length = numArr.length;
        int[] iArr = new int[length];
        for (int i2 = 0; i2 < length; i2++) {
            iArr[i2] = numArr[i2].intValue();
        }
        return iArr;
    }

    @NotNull
    public static <T> List<T> toList(@NotNull T[] tArr) {
        List<T> emptyList;
        List<T> listOf;
        int length = tArr.length;
        if (length == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        } else if (length != 1) {
            return toMutableList(tArr);
        } else {
            listOf = CollectionsKt__CollectionsJVMKt.listOf(tArr[0]);
            return listOf;
        }
    }

    @NotNull
    public static final long[] toLongArray(@NotNull Long[] lArr) {
        int length = lArr.length;
        long[] jArr = new long[length];
        for (int i2 = 0; i2 < length; i2++) {
            jArr[i2] = lArr[i2].longValue();
        }
        return jArr;
    }

    @NotNull
    public static final <T> List<T> toMutableList(@NotNull T[] tArr) {
        return new ArrayList(CollectionsKt__CollectionsKt.asCollection(tArr));
    }

    @NotNull
    public static final <T> Set<T> toMutableSet(@NotNull T[] tArr) {
        int mapCapacity;
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(tArr.length);
        LinkedHashSet linkedHashSet = new LinkedHashSet(mapCapacity);
        for (T t : tArr) {
            linkedHashSet.add(t);
        }
        return linkedHashSet;
    }

    @NotNull
    public static final <T> Set<T> toSet(@NotNull T[] tArr) {
        Set<T> emptySet;
        Set<T> of;
        int mapCapacity;
        int length = tArr.length;
        if (length == 0) {
            emptySet = SetsKt__SetsKt.emptySet();
            return emptySet;
        } else if (length != 1) {
            mapCapacity = MapsKt__MapsJVMKt.mapCapacity(tArr.length);
            return (Set) toCollection(tArr, new LinkedHashSet(mapCapacity));
        } else {
            of = SetsKt__SetsJVMKt.setOf(tArr[0]);
            return of;
        }
    }

    @NotNull
    public static final short[] toShortArray(@NotNull Short[] shArr) {
        int length = shArr.length;
        short[] sArr = new short[length];
        for (int i2 = 0; i2 < length; i2++) {
            sArr[i2] = shArr[i2].shortValue();
        }
        return sArr;
    }

    @NotNull
    public static final <T> Set<T> union(@NotNull T[] tArr, @NotNull Iterable<? extends T> iterable) {
        Set<T> mutableSet = toMutableSet(tArr);
        CollectionsKt__MutableCollectionsKt.addAll(mutableSet, iterable);
        return mutableSet;
    }

    @NotNull
    public static final <T> Iterable<IndexedValue<T>> withIndex(@NotNull final T[] tArr) {
        return new IndexingIterable(new Function0<Iterator<? extends T>>() { // from class: kotlin.collections.ArraysKt___ArraysKt$withIndex$1
            /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
            {
                super(0);
            }

            @Override // kotlin.jvm.functions.Function0
            @NotNull
            public final Iterator<T> invoke() {
                return ArrayIteratorKt.iterator(tArr);
            }
        });
    }

    @NotNull
    public static final <T, R, V> List<V> zip(@NotNull T[] tArr, @NotNull R[] rArr, @NotNull Function2<? super T, ? super R, ? extends V> function2) {
        int min = Math.min(tArr.length, rArr.length);
        ArrayList arrayList = new ArrayList(min);
        for (int i2 = 0; i2 < min; i2++) {
            arrayList.add(function2.invoke(tArr[i2], rArr[i2]));
        }
        return arrayList;
    }

    public static final boolean all(@NotNull byte[] bArr, @NotNull Function1<? super Byte, Boolean> function1) {
        for (byte b : bArr) {
            if (!function1.invoke(Byte.valueOf(b)).booleanValue()) {
                return false;
            }
        }
        return true;
    }

    public static boolean any(@NotNull byte[] bArr) {
        return !(bArr.length == 0);
    }

    @InlineOnly
    private static final byte component1(@NotNull byte[] bArr) {
        return bArr[0];
    }

    @InlineOnly
    private static final byte component2(@NotNull byte[] bArr) {
        return bArr[1];
    }

    @InlineOnly
    private static final byte component3(@NotNull byte[] bArr) {
        return bArr[2];
    }

    @InlineOnly
    private static final byte component4(@NotNull byte[] bArr) {
        return bArr[3];
    }

    @InlineOnly
    private static final byte component5(@NotNull byte[] bArr) {
        return bArr[4];
    }

    public static boolean contains(@NotNull byte[] bArr, byte b) {
        int indexOf;
        indexOf = indexOf(bArr, b);
        return indexOf >= 0;
    }

    @InlineOnly
    private static final int count(@NotNull byte[] bArr) {
        return bArr.length;
    }

    @NotNull
    public static final List<Byte> distinct(@NotNull byte[] bArr) {
        List<Byte> list;
        list = CollectionsKt___CollectionsKt.toList(toMutableSet(bArr));
        return list;
    }

    @InlineOnly
    private static final byte elementAtOrElse(@NotNull byte[] bArr, int i2, Function1<? super Integer, Byte> function1) {
        int lastIndex;
        if (i2 >= 0) {
            lastIndex = getLastIndex(bArr);
            if (i2 <= lastIndex) {
                return bArr[i2];
            }
        }
        return function1.invoke(Integer.valueOf(i2)).byteValue();
    }

    @InlineOnly
    private static final Byte elementAtOrNull(@NotNull byte[] bArr, int i2) {
        return getOrNull(bArr, i2);
    }

    @NotNull
    public static final <C extends Collection<? super Byte>> C filterNotTo(@NotNull byte[] bArr, @NotNull C c2, @NotNull Function1<? super Byte, Boolean> function1) {
        for (byte b : bArr) {
            if (!function1.invoke(Byte.valueOf(b)).booleanValue()) {
                c2.add(Byte.valueOf(b));
            }
        }
        return c2;
    }

    @NotNull
    public static final <C extends Collection<? super Byte>> C filterTo(@NotNull byte[] bArr, @NotNull C c2, @NotNull Function1<? super Byte, Boolean> function1) {
        for (byte b : bArr) {
            if (function1.invoke(Byte.valueOf(b)).booleanValue()) {
                c2.add(Byte.valueOf(b));
            }
        }
        return c2;
    }

    @InlineOnly
    private static final Byte find(@NotNull byte[] bArr, Function1<? super Byte, Boolean> function1) {
        for (byte b : bArr) {
            if (function1.invoke(Byte.valueOf(b)).booleanValue()) {
                return Byte.valueOf(b);
            }
        }
        return null;
    }

    @Nullable
    public static final Byte firstOrNull(@NotNull byte[] bArr) {
        if (bArr.length == 0) {
            return null;
        }
        return Byte.valueOf(bArr[0]);
    }

    public static final <R> R fold(@NotNull byte[] bArr, R r, @NotNull Function2<? super R, ? super Byte, ? extends R> function2) {
        for (byte b : bArr) {
            r = function2.invoke(r, Byte.valueOf(b));
        }
        return r;
    }

    public static final <R> R foldIndexed(@NotNull byte[] bArr, R r, @NotNull Function3<? super Integer, ? super R, ? super Byte, ? extends R> function3) {
        int i2 = 0;
        for (byte b : bArr) {
            Integer valueOf = Integer.valueOf(i2);
            i2++;
            r = function3.invoke(valueOf, r, Byte.valueOf(b));
        }
        return r;
    }

    public static final void forEach(@NotNull byte[] bArr, @NotNull Function1<? super Byte, Unit> function1) {
        for (byte b : bArr) {
            function1.invoke(Byte.valueOf(b));
        }
    }

    public static final void forEachIndexed(@NotNull byte[] bArr, @NotNull Function2<? super Integer, ? super Byte, Unit> function2) {
        int i2 = 0;
        for (byte b : bArr) {
            Integer valueOf = Integer.valueOf(i2);
            i2++;
            function2.invoke(valueOf, Byte.valueOf(b));
        }
    }

    @NotNull
    public static  getIndices(@NotNull byte[] bArr) {
        int lastIndex;
        lastIndex = getLastIndex(bArr);
        return new (0, lastIndex);
    }

    public static int getLastIndex(@NotNull byte[] bArr) {
        return bArr.length - 1;
    }

    @InlineOnly
    private static final byte getOrElse(@NotNull byte[] bArr, int i2, Function1<? super Integer, Byte> function1) {
        int lastIndex;
        if (i2 >= 0) {
            lastIndex = getLastIndex(bArr);
            if (i2 <= lastIndex) {
                return bArr[i2];
            }
        }
        return function1.invoke(Integer.valueOf(i2)).byteValue();
    }

    @Nullable
    public static final Byte getOrNull(@NotNull byte[] bArr, int i2) {
        int lastIndex;
        if (i2 >= 0) {
            lastIndex = getLastIndex(bArr);
            if (i2 <= lastIndex) {
                return Byte.valueOf(bArr[i2]);
            }
        }
        return null;
    }

    @InlineOnly
    private static final boolean isEmpty(@NotNull byte[] bArr) {
        return bArr.length == 0;
    }

    @InlineOnly
    private static final boolean isNotEmpty(@NotNull byte[] bArr) {
        return !(bArr.length == 0);
    }

    @NotNull
    public static final String joinToString(@NotNull byte[] bArr, @NotNull CharSequence charSequence, @NotNull CharSequence charSequence2, @NotNull CharSequence charSequence3, int i2, @NotNull CharSequence charSequence4, @Nullable Function1<? super Byte, ? extends CharSequence> function1) {
        String sb = ((StringBuilder) joinTo(bArr, new StringBuilder(), charSequence, charSequence2, charSequence3, i2, charSequence4, function1)).toString();
        Intrinsics.checkExpressionValueIsNotNull(sb, "joinTo(StringBuilder(), \u2026ed, transform).toString()");
        return sb;
    }

    public static /* synthetic */ String joinToString$default(byte[] bArr, CharSequence charSequence, CharSequence charSequence2, CharSequence charSequence3, int i2, CharSequence charSequence4, Function1 function1, int i3, Object obj) {
        if ((i3 & 1) != 0) {
            charSequence = ", ";
        }
        CharSequence charSequence5 = (i3 & 2) != 0 ? "" : charSequence2;
        CharSequence charSequence6 = (i3 & 4) == 0 ? charSequence3 : "";
        int i4 = (i3 & 8) != 0 ? -1 : i2;
        if ((i3 & 16) != 0) {
            charSequence4 = "...";
        }
        CharSequence charSequence7 = charSequence4;
        if ((i3 & 32) != 0) {
            function1 = null;
        }
        return joinToString(bArr, charSequence, charSequence5, charSequence6, i4, charSequence7, (Function1<? super Byte, ? extends CharSequence>) function1);
    }

    @Nullable
    public static final Byte lastOrNull(@NotNull byte[] bArr) {
        if (bArr.length == 0) {
            return null;
        }
        return Byte.valueOf(bArr[bArr.length - 1]);
    }

    public static final boolean none(@NotNull byte[] bArr) {
        return bArr.length == 0;
    }

    @SinceKotlin(version = "1.3")
    @InlineOnly
    private static final byte random(@NotNull byte[] bArr) {
        return random(bArr, (Random) Random.INSTANCE);
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @InlineOnly
    private static final Byte randomOrNull(@NotNull byte[] bArr) {
        return randomOrNull(bArr, (Random) Random.INSTANCE);
    }

    @Nullable
    public static final Byte singleOrNull(@NotNull byte[] bArr) {
        if (bArr.length == 1) {
            return Byte.valueOf(bArr[0]);
        }
        return null;
    }

    public static final void sortDescending(@NotNull byte[] bArr) {
        if (bArr.length > 1) {
            ArraysKt___ArraysJvmKt.sort(bArr);
            reverse(bArr);
        }
    }

    @NotNull
    public static final List<Byte> sorted(@NotNull byte[] bArr) {
        List<Byte> asList;
        Byte[] typedArray = ArraysKt___ArraysJvmKt.toTypedArray(bArr);
        if (typedArray != null) {
            ArraysKt___ArraysJvmKt.sort((Object[]) typedArray);
            asList = ArraysKt___ArraysJvmKt.asList(typedArray);
            return asList;
        }
        throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<kotlin.Any?>");
    }

    @NotNull
    public static final <R extends Comparable<? super R>> List<Byte> sortedBy(@NotNull byte[] bArr, @NotNull Function1<? super Byte, ? extends R> function1) {
        return sortedWith(bArr, (Comparator<? super Byte>) new ComparisonsKt__ComparisonsKt$compareBy$2(function1));
    }

    @NotNull
    public static final <R extends Comparable<? super R>> List<Byte> sortedByDescending(@NotNull byte[] bArr, @NotNull Function1<? super Byte, ? extends R> function1) {
        return sortedWith(bArr, (Comparator<? super Byte>) new ComparisonsKt__ComparisonsKt$compareByDescending$1(function1));
    }

    @NotNull
    public static final List<Byte> sortedDescending(@NotNull byte[] bArr) {
        byte[] copyOf = Arrays.copyOf(bArr, bArr.length);
        Intrinsics.checkExpressionValueIsNotNull(copyOf, "java.util.Arrays.copyOf(this, size)");
        ArraysKt___ArraysJvmKt.sort(copyOf);
        return reversed(copyOf);
    }

    @NotNull
    public static final List<Byte> sortedWith(@NotNull byte[] bArr, @NotNull Comparator<? super Byte> comparator) {
        List<Byte> asList;
        Byte[] typedArray = ArraysKt___ArraysJvmKt.toTypedArray(bArr);
        ArraysKt___ArraysJvmKt.sortWith(typedArray, comparator);
        asList = ArraysKt___ArraysJvmKt.asList(typedArray);
        return asList;
    }

    public static final int sum(@NotNull short[] sArr) {
        int i2 = 0;
        for (short s : sArr) {
            i2 += s;
        }
        return i2;
    }

    @NotNull
    public static final HashSet<Byte> toHashSet(@NotNull byte[] bArr) {
        int mapCapacity;
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(bArr.length);
        return (HashSet) toCollection(bArr, new HashSet(mapCapacity));
    }

    @NotNull
    public static final List<Byte> toMutableList(@NotNull byte[] bArr) {
        ArrayList arrayList = new ArrayList(bArr.length);
        for (byte b : bArr) {
            arrayList.add(Byte.valueOf(b));
        }
        return arrayList;
    }

    @NotNull
    public static final Iterable<IndexedValue<Byte>> withIndex(@NotNull final byte[] bArr) {
        return new IndexingIterable(new Function0<ByteIterator>() { // from class: kotlin.collections.ArraysKt___ArraysKt$withIndex$2
            /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
            {
                super(0);
            }

            @Override // kotlin.jvm.functions.Function0
            @NotNull
            public final ByteIterator invoke() {
                return ArrayIteratorsKt.iterator(bArr);
            }
        });
    }

    public static final boolean all(@NotNull short[] sArr, @NotNull Function1<? super Short, Boolean> function1) {
        for (short s : sArr) {
            if (!function1.invoke(Short.valueOf(s)).booleanValue()) {
                return false;
            }
        }
        return true;
    }

    public static boolean any(@NotNull short[] sArr) {
        return !(sArr.length == 0);
    }

    @NotNull
    public static final Iterable<Byte> asIterable(@NotNull byte[] bArr) {
        List emptyList;
        if (bArr.length == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        return new ArraysKt___ArraysKt$asIterable$$inlined$Iterable$2(bArr);
    }

    @NotNull
    public static final Sequence<Byte> asSequence(@NotNull final byte[] bArr) {
        Sequence<Byte> emptySequence;
        if (bArr.length == 0) {
            emptySequence = SequencesKt__SequencesKt.emptySequence();
            return emptySequence;
        }
        return new Sequence<Byte>() { // from class: kotlin.collections.ArraysKt___ArraysKt$asSequence$$inlined$Sequence$2
            @Override // kotlin.sequences.Sequence
            @NotNull
            public Iterator<Byte> iterator() {
                return ArrayIteratorsKt.iterator(bArr);
            }
        };
    }

    @NotNull
    public static final <K, M extends Map<? super K, ? super Byte>> M associateByTo(@NotNull byte[] bArr, @NotNull M m2, @NotNull Function1<? super Byte, ? extends K> function1) {
        for (byte b : bArr) {
            m2.put(function1.invoke(Byte.valueOf(b)), Byte.valueOf(b));
        }
        return m2;
    }

    @NotNull
    public static final <K, V, M extends Map<? super K, ? super V>> M associateTo(@NotNull byte[] bArr, @NotNull M m2, @NotNull Function1<? super Byte, ? extends Pair<? extends K, ? extends V>> function1) {
        for (byte b : bArr) {
            Pair<? extends K, ? extends V> invoke = function1.invoke(Byte.valueOf(b));
            m2.put(invoke.getFirst(), invoke.getSecond());
        }
        return m2;
    }

    @InlineOnly
    private static final short component1(@NotNull short[] sArr) {
        return sArr[0];
    }

    @InlineOnly
    private static final short component2(@NotNull short[] sArr) {
        return sArr[1];
    }

    @InlineOnly
    private static final short component3(@NotNull short[] sArr) {
        return sArr[2];
    }

    @InlineOnly
    private static final short component4(@NotNull short[] sArr) {
        return sArr[3];
    }

    @InlineOnly
    private static final short component5(@NotNull short[] sArr) {
        return sArr[4];
    }

    public static boolean contains(@NotNull short[] sArr, short s) {
        int indexOf;
        indexOf = indexOf(sArr, s);
        return indexOf >= 0;
    }

    @InlineOnly
    private static final int count(@NotNull short[] sArr) {
        return sArr.length;
    }

    @NotNull
    public static final List<Short> distinct(@NotNull short[] sArr) {
        List<Short> list;
        list = CollectionsKt___CollectionsKt.toList(toMutableSet(sArr));
        return list;
    }

    @NotNull
    public static final List<Byte> drop(@NotNull byte[] bArr, int i2) {
        int coerceAtLeast;
        if (i2 >= 0) {
            coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(bArr.length - i2, 0);
            return takeLast(bArr, coerceAtLeast);
        }
        throw new IllegalArgumentException(("Requested element count " + i2 + " is less than zero.").toString());
    }

    @NotNull
    public static final List<Byte> dropLast(@NotNull byte[] bArr, int i2) {
        int coerceAtLeast;
        if (i2 >= 0) {
            coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(bArr.length - i2, 0);
            return take(bArr, coerceAtLeast);
        }
        throw new IllegalArgumentException(("Requested element count " + i2 + " is less than zero.").toString());
    }

    @InlineOnly
    private static final short elementAtOrElse(@NotNull short[] sArr, int i2, Function1<? super Integer, Short> function1) {
        int lastIndex;
        if (i2 >= 0) {
            lastIndex = getLastIndex(sArr);
            if (i2 <= lastIndex) {
                return sArr[i2];
            }
        }
        return function1.invoke(Integer.valueOf(i2)).shortValue();
    }

    @InlineOnly
    private static final Short elementAtOrNull(@NotNull short[] sArr, int i2) {
        return getOrNull(sArr, i2);
    }

    @NotNull
    public static final List<Byte> filter(@NotNull byte[] bArr, @NotNull Function1<? super Byte, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        for (byte b : bArr) {
            if (function1.invoke(Byte.valueOf(b)).booleanValue()) {
                arrayList.add(Byte.valueOf(b));
            }
        }
        return arrayList;
    }

    @NotNull
    public static final <C extends Collection<? super Byte>> C filterIndexedTo(@NotNull byte[] bArr, @NotNull C c2, @NotNull Function2<? super Integer, ? super Byte, Boolean> function2) {
        int length = bArr.length;
        int i2 = 0;
        int i3 = 0;
        while (i2 < length) {
            byte b = bArr[i2];
            int i4 = i3 + 1;
            if (function2.invoke(Integer.valueOf(i3), Byte.valueOf(b)).booleanValue()) {
                c2.add(Byte.valueOf(b));
            }
            i2++;
            i3 = i4;
        }
        return c2;
    }

    @NotNull
    public static final List<Byte> filterNot(@NotNull byte[] bArr, @NotNull Function1<? super Byte, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        for (byte b : bArr) {
            if (!function1.invoke(Byte.valueOf(b)).booleanValue()) {
                arrayList.add(Byte.valueOf(b));
            }
        }
        return arrayList;
    }

    @NotNull
    public static final <C extends Collection<? super Short>> C filterNotTo(@NotNull short[] sArr, @NotNull C c2, @NotNull Function1<? super Short, Boolean> function1) {
        for (short s : sArr) {
            if (!function1.invoke(Short.valueOf(s)).booleanValue()) {
                c2.add(Short.valueOf(s));
            }
        }
        return c2;
    }

    @NotNull
    public static final <C extends Collection<? super Short>> C filterTo(@NotNull short[] sArr, @NotNull C c2, @NotNull Function1<? super Short, Boolean> function1) {
        for (short s : sArr) {
            if (function1.invoke(Short.valueOf(s)).booleanValue()) {
                c2.add(Short.valueOf(s));
            }
        }
        return c2;
    }

    @InlineOnly
    private static final Short find(@NotNull short[] sArr, Function1<? super Short, Boolean> function1) {
        for (short s : sArr) {
            if (function1.invoke(Short.valueOf(s)).booleanValue()) {
                return Short.valueOf(s);
            }
        }
        return null;
    }

    @Nullable
    public static final Short firstOrNull(@NotNull short[] sArr) {
        if (sArr.length == 0) {
            return null;
        }
        return Short.valueOf(sArr[0]);
    }

    public static final <R> R fold(@NotNull short[] sArr, R r, @NotNull Function2<? super R, ? super Short, ? extends R> function2) {
        for (short s : sArr) {
            r = function2.invoke(r, Short.valueOf(s));
        }
        return r;
    }

    public static final <R> R foldIndexed(@NotNull short[] sArr, R r, @NotNull Function3<? super Integer, ? super R, ? super Short, ? extends R> function3) {
        int i2 = 0;
        for (short s : sArr) {
            Integer valueOf = Integer.valueOf(i2);
            i2++;
            r = function3.invoke(valueOf, r, Short.valueOf(s));
        }
        return r;
    }

    public static final <R> R foldRight(@NotNull byte[] bArr, R r, @NotNull Function2<? super Byte, ? super R, ? extends R> function2) {
        int lastIndex;
        for (lastIndex = getLastIndex(bArr); lastIndex >= 0; lastIndex--) {
            r = function2.invoke(Byte.valueOf(bArr[lastIndex]), r);
        }
        return r;
    }

    public static final <R> R foldRightIndexed(@NotNull byte[] bArr, R r, @NotNull Function3<? super Integer, ? super Byte, ? super R, ? extends R> function3) {
        int lastIndex;
        for (lastIndex = getLastIndex(bArr); lastIndex >= 0; lastIndex--) {
            r = function3.invoke(Integer.valueOf(lastIndex), Byte.valueOf(bArr[lastIndex]), r);
        }
        return r;
    }

    public static final void forEach(@NotNull short[] sArr, @NotNull Function1<? super Short, Unit> function1) {
        for (short s : sArr) {
            function1.invoke(Short.valueOf(s));
        }
    }

    public static final void forEachIndexed(@NotNull short[] sArr, @NotNull Function2<? super Integer, ? super Short, Unit> function2) {
        int i2 = 0;
        for (short s : sArr) {
            Integer valueOf = Integer.valueOf(i2);
            i2++;
            function2.invoke(valueOf, Short.valueOf(s));
        }
    }

    @NotNull
    public static  getIndices(@NotNull short[] sArr) {
        int lastIndex;
        lastIndex = getLastIndex(sArr);
        return new (0, lastIndex);
    }

    public static int getLastIndex(@NotNull short[] sArr) {
        return sArr.length - 1;
    }

    @InlineOnly
    private static final short getOrElse(@NotNull short[] sArr, int i2, Function1<? super Integer, Short> function1) {
        int lastIndex;
        if (i2 >= 0) {
            lastIndex = getLastIndex(sArr);
            if (i2 <= lastIndex) {
                return sArr[i2];
            }
        }
        return function1.invoke(Integer.valueOf(i2)).shortValue();
    }

    @Nullable
    public static final Short getOrNull(@NotNull short[] sArr, int i2) {
        int lastIndex;
        if (i2 >= 0) {
            lastIndex = getLastIndex(sArr);
            if (i2 <= lastIndex) {
                return Short.valueOf(sArr[i2]);
            }
        }
        return null;
    }

    public static final int indexOfFirst(@NotNull byte[] bArr, @NotNull Function1<? super Byte, Boolean> function1) {
        int length = bArr.length;
        for (int i2 = 0; i2 < length; i2++) {
            if (function1.invoke(Byte.valueOf(bArr[i2])).booleanValue()) {
                return i2;
            }
        }
        return -1;
    }

    public static final int indexOfLast(@NotNull byte[] bArr, @NotNull Function1<? super Byte, Boolean> function1) {
        for (int length = bArr.length - 1; length >= 0; length--) {
            if (function1.invoke(Byte.valueOf(bArr[length])).booleanValue()) {
                return length;
            }
        }
        return -1;
    }

    @NotNull
    public static final Set<Byte> intersect(@NotNull byte[] bArr, @NotNull Iterable<Byte> iterable) {
        Set<Byte> mutableSet = toMutableSet(bArr);
        CollectionsKt__MutableCollectionsKt.retainAll(mutableSet, iterable);
        return mutableSet;
    }

    @InlineOnly
    private static final boolean isEmpty(@NotNull short[] sArr) {
        return sArr.length == 0;
    }

    @InlineOnly
    private static final boolean isNotEmpty(@NotNull short[] sArr) {
        return !(sArr.length == 0);
    }

    @NotNull
    public static final String joinToString(@NotNull short[] sArr, @NotNull CharSequence charSequence, @NotNull CharSequence charSequence2, @NotNull CharSequence charSequence3, int i2, @NotNull CharSequence charSequence4, @Nullable Function1<? super Short, ? extends CharSequence> function1) {
        String sb = ((StringBuilder) joinTo(sArr, new StringBuilder(), charSequence, charSequence2, charSequence3, i2, charSequence4, function1)).toString();
        Intrinsics.checkExpressionValueIsNotNull(sb, "joinTo(StringBuilder(), \u2026ed, transform).toString()");
        return sb;
    }

    public static /* synthetic */ String joinToString$default(short[] sArr, CharSequence charSequence, CharSequence charSequence2, CharSequence charSequence3, int i2, CharSequence charSequence4, Function1 function1, int i3, Object obj) {
        if ((i3 & 1) != 0) {
            charSequence = ", ";
        }
        CharSequence charSequence5 = (i3 & 2) != 0 ? "" : charSequence2;
        CharSequence charSequence6 = (i3 & 4) == 0 ? charSequence3 : "";
        int i4 = (i3 & 8) != 0 ? -1 : i2;
        if ((i3 & 16) != 0) {
            charSequence4 = "...";
        }
        CharSequence charSequence7 = charSequence4;
        if ((i3 & 32) != 0) {
            function1 = null;
        }
        return joinToString(sArr, charSequence, charSequence5, charSequence6, i4, charSequence7, (Function1<? super Short, ? extends CharSequence>) function1);
    }

    @Nullable
    public static final Short lastOrNull(@NotNull short[] sArr) {
        if (sArr.length == 0) {
            return null;
        }
        return Short.valueOf(sArr[sArr.length - 1]);
    }

    @NotNull
    public static final <R, C extends Collection<? super R>> C mapIndexedTo(@NotNull byte[] bArr, @NotNull C c2, @NotNull Function2<? super Integer, ? super Byte, ? extends R> function2) {
        int i2 = 0;
        for (byte b : bArr) {
            Integer valueOf = Integer.valueOf(i2);
            i2++;
            c2.add(function2.invoke(valueOf, Byte.valueOf(b)));
        }
        return c2;
    }

    @NotNull
    public static final <R, C extends Collection<? super R>> C mapTo(@NotNull byte[] bArr, @NotNull C c2, @NotNull Function1<? super Byte, ? extends R> function1) {
        for (byte b : bArr) {
            c2.add(function1.invoke(Byte.valueOf(b)));
        }
        return c2;
    }

    public static final boolean none(@NotNull short[] sArr) {
        return sArr.length == 0;
    }

    @SinceKotlin(version = "1.3")
    @InlineOnly
    private static final short random(@NotNull short[] sArr) {
        return random(sArr, (Random) Random.INSTANCE);
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @InlineOnly
    private static final Short randomOrNull(@NotNull short[] sArr) {
        return randomOrNull(sArr, (Random) Random.INSTANCE);
    }

    @Nullable
    public static final Short singleOrNull(@NotNull short[] sArr) {
        if (sArr.length == 1) {
            return Short.valueOf(sArr[0]);
        }
        return null;
    }

    @NotNull
    public static final List<Byte> slice(@NotNull byte[] bArr, @NotNull  Var) {
        byte[] copyOfRange;
        List<Byte> emptyList;
        if (Var.isEmpty()) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        copyOfRange = ArraysKt___ArraysJvmKt.copyOfRange(bArr, Var.getStart().intValue(), Var.getEndInclusive().intValue() + 1);
        return ArraysKt___ArraysJvmKt.asList(copyOfRange);
    }

    @NotNull
    public static final List<Short> sorted(@NotNull short[] sArr) {
        List<Short> asList;
        Short[] typedArray = ArraysKt___ArraysJvmKt.toTypedArray(sArr);
        if (typedArray != null) {
            ArraysKt___ArraysJvmKt.sort((Object[]) typedArray);
            asList = ArraysKt___ArraysJvmKt.asList(typedArray);
            return asList;
        }
        throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<kotlin.Any?>");
    }

    @NotNull
    public static final byte[] sortedArray(@NotNull byte[] bArr) {
        if (bArr.length == 0) {
            return bArr;
        }
        byte[] copyOf = Arrays.copyOf(bArr, bArr.length);
        Intrinsics.checkExpressionValueIsNotNull(copyOf, "java.util.Arrays.copyOf(this, size)");
        ArraysKt___ArraysJvmKt.sort(copyOf);
        return copyOf;
    }

    @NotNull
    public static final byte[] sortedArrayDescending(@NotNull byte[] bArr) {
        if (bArr.length == 0) {
            return bArr;
        }
        byte[] copyOf = Arrays.copyOf(bArr, bArr.length);
        Intrinsics.checkExpressionValueIsNotNull(copyOf, "java.util.Arrays.copyOf(this, size)");
        sortDescending(copyOf);
        return copyOf;
    }

    @NotNull
    public static final <R extends Comparable<? super R>> List<Short> sortedBy(@NotNull short[] sArr, @NotNull Function1<? super Short, ? extends R> function1) {
        return sortedWith(sArr, (Comparator<? super Short>) new ComparisonsKt__ComparisonsKt$compareBy$2(function1));
    }

    @NotNull
    public static final <R extends Comparable<? super R>> List<Short> sortedByDescending(@NotNull short[] sArr, @NotNull Function1<? super Short, ? extends R> function1) {
        return sortedWith(sArr, (Comparator<? super Short>) new ComparisonsKt__ComparisonsKt$compareByDescending$1(function1));
    }

    @NotNull
    public static final List<Short> sortedDescending(@NotNull short[] sArr) {
        short[] copyOf = Arrays.copyOf(sArr, sArr.length);
        Intrinsics.checkExpressionValueIsNotNull(copyOf, "java.util.Arrays.copyOf(this, size)");
        ArraysKt___ArraysJvmKt.sort(copyOf);
        return reversed(copyOf);
    }

    @NotNull
    public static final List<Short> sortedWith(@NotNull short[] sArr, @NotNull Comparator<? super Short> comparator) {
        List<Short> asList;
        Short[] typedArray = ArraysKt___ArraysJvmKt.toTypedArray(sArr);
        ArraysKt___ArraysJvmKt.sortWith(typedArray, comparator);
        asList = ArraysKt___ArraysJvmKt.asList(typedArray);
        return asList;
    }

    @NotNull
    public static final Set<Byte> subtract(@NotNull byte[] bArr, @NotNull Iterable<Byte> iterable) {
        Set<Byte> mutableSet = toMutableSet(bArr);
        CollectionsKt__MutableCollectionsKt.removeAll(mutableSet, iterable);
        return mutableSet;
    }

    public static int sum(@NotNull int[] iArr) {
        int i2 = 0;
        for (int i3 : iArr) {
            i2 += i3;
        }
        return i2;
    }

    public static final int sumBy(@NotNull byte[] bArr, @NotNull Function1<? super Byte, Integer> function1) {
        int i2 = 0;
        for (byte b : bArr) {
            i2 += function1.invoke(Byte.valueOf(b)).intValue();
        }
        return i2;
    }

    public static final double sumByDouble(@NotNull byte[] bArr, @NotNull Function1<? super Byte, Double> function1) {
        double d = 0.0d;
        for (byte b : bArr) {
            d += function1.invoke(Byte.valueOf(b)).doubleValue();
        }
        return d;
    }

    @NotNull
    public static final <C extends Collection<? super Byte>> C toCollection(@NotNull byte[] bArr, @NotNull C c2) {
        for (byte b : bArr) {
            c2.add(Byte.valueOf(b));
        }
        return c2;
    }

    @NotNull
    public static final HashSet<Short> toHashSet(@NotNull short[] sArr) {
        int mapCapacity;
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(sArr.length);
        return (HashSet) toCollection(sArr, new HashSet(mapCapacity));
    }

    @NotNull
    public static final Set<Byte> toMutableSet(@NotNull byte[] bArr) {
        int mapCapacity;
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(bArr.length);
        LinkedHashSet linkedHashSet = new LinkedHashSet(mapCapacity);
        for (byte b : bArr) {
            linkedHashSet.add(Byte.valueOf(b));
        }
        return linkedHashSet;
    }

    @NotNull
    public static final Set<Byte> union(@NotNull byte[] bArr, @NotNull Iterable<Byte> iterable) {
        Set<Byte> mutableSet = toMutableSet(bArr);
        CollectionsKt__MutableCollectionsKt.addAll(mutableSet, iterable);
        return mutableSet;
    }

    @NotNull
    public static final Iterable<IndexedValue<Short>> withIndex(@NotNull final short[] sArr) {
        return new IndexingIterable(new Function0<ShortIterator>() { // from class: kotlin.collections.ArraysKt___ArraysKt$withIndex$3
            /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
            {
                super(0);
            }

            @Override // kotlin.jvm.functions.Function0
            @NotNull
            public final ShortIterator invoke() {
                return ArrayIteratorsKt.iterator(sArr);
            }
        });
    }

    public static final boolean all(@NotNull int[] iArr, @NotNull Function1<? super Integer, Boolean> function1) {
        for (int i2 : iArr) {
            if (!function1.invoke(Integer.valueOf(i2)).booleanValue()) {
                return false;
            }
        }
        return true;
    }

    public static boolean any(@NotNull int[] iArr) {
        return !(iArr.length == 0);
    }

    public static final double average(@NotNull short[] sArr) {
        double d = 0.0d;
        int i2 = 0;
        for (double d2 : sArr) {
            Double.isNaN(d2);
            d += d2;
            i2++;
        }
        if (i2 == 0) {
            return DoubleCompanionObject.INSTANCE.getNaN();
        }
        double d3 = i2;
        Double.isNaN(d3);
        return d / d3;
    }

    @InlineOnly
    private static final int component1(@NotNull int[] iArr) {
        return iArr[0];
    }

    @InlineOnly
    private static final int component2(@NotNull int[] iArr) {
        return iArr[1];
    }

    @InlineOnly
    private static final int component3(@NotNull int[] iArr) {
        return iArr[2];
    }

    @InlineOnly
    private static final int component4(@NotNull int[] iArr) {
        return iArr[3];
    }

    @InlineOnly
    private static final int component5(@NotNull int[] iArr) {
        return iArr[4];
    }

    public static boolean contains(@NotNull int[] iArr, int i2) {
        int indexOf;
        indexOf = indexOf(iArr, i2);
        return indexOf >= 0;
    }

    @InlineOnly
    private static final int count(@NotNull int[] iArr) {
        return iArr.length;
    }

    @NotNull
    public static final List<Integer> distinct(@NotNull int[] iArr) {
        List<Integer> list;
        list = CollectionsKt___CollectionsKt.toList(toMutableSet(iArr));
        return list;
    }

    @InlineOnly
    private static final int elementAtOrElse(@NotNull int[] iArr, int i2, Function1<? super Integer, Integer> function1) {
        int lastIndex;
        if (i2 >= 0) {
            lastIndex = getLastIndex(iArr);
            if (i2 <= lastIndex) {
                return iArr[i2];
            }
        }
        return function1.invoke(Integer.valueOf(i2)).intValue();
    }

    @InlineOnly
    private static final Integer elementAtOrNull(@NotNull int[] iArr, int i2) {
        return getOrNull(iArr, i2);
    }

    @NotNull
    public static final List<Byte> filterIndexed(@NotNull byte[] bArr, @NotNull Function2<? super Integer, ? super Byte, Boolean> function2) {
        ArrayList arrayList = new ArrayList();
        int length = bArr.length;
        int i2 = 0;
        int i3 = 0;
        while (i2 < length) {
            byte b = bArr[i2];
            int i4 = i3 + 1;
            if (function2.invoke(Integer.valueOf(i3), Byte.valueOf(b)).booleanValue()) {
                arrayList.add(Byte.valueOf(b));
            }
            i2++;
            i3 = i4;
        }
        return arrayList;
    }

    @NotNull
    public static final <C extends Collection<? super Integer>> C filterNotTo(@NotNull int[] iArr, @NotNull C c2, @NotNull Function1<? super Integer, Boolean> function1) {
        for (int i2 : iArr) {
            if (!function1.invoke(Integer.valueOf(i2)).booleanValue()) {
                c2.add(Integer.valueOf(i2));
            }
        }
        return c2;
    }

    @NotNull
    public static final <C extends Collection<? super Integer>> C filterTo(@NotNull int[] iArr, @NotNull C c2, @NotNull Function1<? super Integer, Boolean> function1) {
        for (int i2 : iArr) {
            if (function1.invoke(Integer.valueOf(i2)).booleanValue()) {
                c2.add(Integer.valueOf(i2));
            }
        }
        return c2;
    }

    @InlineOnly
    private static final Integer find(@NotNull int[] iArr, Function1<? super Integer, Boolean> function1) {
        for (int i2 : iArr) {
            if (function1.invoke(Integer.valueOf(i2)).booleanValue()) {
                return Integer.valueOf(i2);
            }
        }
        return null;
    }

    @InlineOnly
    private static final Byte findLast(@NotNull byte[] bArr, Function1<? super Byte, Boolean> function1) {
        byte b;
        int length = bArr.length;
        do {
            length--;
            if (length < 0) {
                return null;
            }
            b = bArr[length];
        } while (!function1.invoke(Byte.valueOf(b)).booleanValue());
        return Byte.valueOf(b);
    }

    public static byte first(@NotNull byte[] bArr) {
        if (!(bArr.length == 0)) {
            return bArr[0];
        }
        throw new NoSuchElementException("Array is empty.");
    }

    @Nullable
    public static final Integer firstOrNull(@NotNull int[] iArr) {
        if (iArr.length == 0) {
            return null;
        }
        return Integer.valueOf(iArr[0]);
    }

    @NotNull
    public static final <R, C extends Collection<? super R>> C flatMapTo(@NotNull byte[] bArr, @NotNull C c2, @NotNull Function1<? super Byte, ? extends Iterable<? extends R>> function1) {
        for (byte b : bArr) {
            CollectionsKt__MutableCollectionsKt.addAll(c2, function1.invoke(Byte.valueOf(b)));
        }
        return c2;
    }

    public static final <R> R fold(@NotNull int[] iArr, R r, @NotNull Function2<? super R, ? super Integer, ? extends R> function2) {
        for (int i2 : iArr) {
            r = function2.invoke(r, Integer.valueOf(i2));
        }
        return r;
    }

    public static final <R> R foldIndexed(@NotNull int[] iArr, R r, @NotNull Function3<? super Integer, ? super R, ? super Integer, ? extends R> function3) {
        int i2 = 0;
        for (int i3 : iArr) {
            Integer valueOf = Integer.valueOf(i2);
            i2++;
            r = function3.invoke(valueOf, r, Integer.valueOf(i3));
        }
        return r;
    }

    public static final void forEach(@NotNull int[] iArr, @NotNull Function1<? super Integer, Unit> function1) {
        for (int i2 : iArr) {
            function1.invoke(Integer.valueOf(i2));
        }
    }

    public static final void forEachIndexed(@NotNull int[] iArr, @NotNull Function2<? super Integer, ? super Integer, Unit> function2) {
        int i2 = 0;
        for (int i3 : iArr) {
            Integer valueOf = Integer.valueOf(i2);
            i2++;
            function2.invoke(valueOf, Integer.valueOf(i3));
        }
    }

    @NotNull
    public static  getIndices(@NotNull int[] iArr) {
        int lastIndex;
        lastIndex = getLastIndex(iArr);
        return new (0, lastIndex);
    }

    public static int getLastIndex(@NotNull int[] iArr) {
        return iArr.length - 1;
    }

    @InlineOnly
    private static final int getOrElse(@NotNull int[] iArr, int i2, Function1<? super Integer, Integer> function1) {
        int lastIndex;
        if (i2 >= 0) {
            lastIndex = getLastIndex(iArr);
            if (i2 <= lastIndex) {
                return iArr[i2];
            }
        }
        return function1.invoke(Integer.valueOf(i2)).intValue();
    }

    @Nullable
    public static final Integer getOrNull(@NotNull int[] iArr, int i2) {
        int lastIndex;
        if (i2 >= 0) {
            lastIndex = getLastIndex(iArr);
            if (i2 <= lastIndex) {
                return Integer.valueOf(iArr[i2]);
            }
        }
        return null;
    }

    @InlineOnly
    private static final boolean isEmpty(@NotNull int[] iArr) {
        return iArr.length == 0;
    }

    @InlineOnly
    private static final boolean isNotEmpty(@NotNull int[] iArr) {
        return !(iArr.length == 0);
    }

    @NotNull
    public static final String joinToString(@NotNull int[] iArr, @NotNull CharSequence charSequence, @NotNull CharSequence charSequence2, @NotNull CharSequence charSequence3, int i2, @NotNull CharSequence charSequence4, @Nullable Function1<? super Integer, ? extends CharSequence> function1) {
        String sb = ((StringBuilder) joinTo(iArr, new StringBuilder(), charSequence, charSequence2, charSequence3, i2, charSequence4, function1)).toString();
        Intrinsics.checkExpressionValueIsNotNull(sb, "joinTo(StringBuilder(), \u2026ed, transform).toString()");
        return sb;
    }

    public static /* synthetic */ String joinToString$default(int[] iArr, CharSequence charSequence, CharSequence charSequence2, CharSequence charSequence3, int i2, CharSequence charSequence4, Function1 function1, int i3, Object obj) {
        if ((i3 & 1) != 0) {
            charSequence = ", ";
        }
        CharSequence charSequence5 = (i3 & 2) != 0 ? "" : charSequence2;
        CharSequence charSequence6 = (i3 & 4) == 0 ? charSequence3 : "";
        int i4 = (i3 & 8) != 0 ? -1 : i2;
        if ((i3 & 16) != 0) {
            charSequence4 = "...";
        }
        CharSequence charSequence7 = charSequence4;
        if ((i3 & 32) != 0) {
            function1 = null;
        }
        return joinToString(iArr, charSequence, charSequence5, charSequence6, i4, charSequence7, (Function1<? super Integer, ? extends CharSequence>) function1);
    }

    public static byte last(@NotNull byte[] bArr) {
        int lastIndex;
        if (!(bArr.length == 0)) {
            lastIndex = getLastIndex(bArr);
            return bArr[lastIndex];
        }
        throw new NoSuchElementException("Array is empty.");
    }

    @Nullable
    public static final Integer lastOrNull(@NotNull int[] iArr) {
        if (iArr.length == 0) {
            return null;
        }
        return Integer.valueOf(iArr[iArr.length - 1]);
    }

    @NotNull
    public static final <R> List<R> map(@NotNull byte[] bArr, @NotNull Function1<? super Byte, ? extends R> function1) {
        ArrayList arrayList = new ArrayList(bArr.length);
        for (byte b : bArr) {
            arrayList.add(function1.invoke(Byte.valueOf(b)));
        }
        return arrayList;
    }

    @NotNull
    public static final <R> List<R> mapIndexed(@NotNull byte[] bArr, @NotNull Function2<? super Integer, ? super Byte, ? extends R> function2) {
        ArrayList arrayList = new ArrayList(bArr.length);
        int i2 = 0;
        for (byte b : bArr) {
            Integer valueOf = Integer.valueOf(i2);
            i2++;
            arrayList.add(function2.invoke(valueOf, Byte.valueOf(b)));
        }
        return arrayList;
    }

    public static final boolean none(@NotNull int[] iArr) {
        return iArr.length == 0;
    }

    @SinceKotlin(version = "1.3")
    @InlineOnly
    private static final int random(@NotNull int[] iArr) {
        return random(iArr, (Random) Random.INSTANCE);
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @InlineOnly
    private static final Integer randomOrNull(@NotNull int[] iArr) {
        return randomOrNull(iArr, (Random) Random.INSTANCE);
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @Nullable
    public static final Byte reduceRightOrNull(@NotNull byte[] bArr, @NotNull Function2<? super Byte, ? super Byte, Byte> function2) {
        int lastIndex;
        lastIndex = getLastIndex(bArr);
        if (lastIndex < 0) {
            return null;
        }
        byte b = bArr[lastIndex];
        for (int i2 = lastIndex - 1; i2 >= 0; i2--) {
            b = function2.invoke(Byte.valueOf(bArr[i2]), Byte.valueOf(b)).byteValue();
        }
        return Byte.valueOf(b);
    }

    @NotNull
    public static final List<Byte> reversed(@NotNull byte[] bArr) {
        List<Byte> emptyList;
        if (bArr.length == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        List<Byte> mutableList = toMutableList(bArr);
        CollectionsKt___CollectionsJvmKt.reverse(mutableList);
        return mutableList;
    }

    @Nullable
    public static final Integer singleOrNull(@NotNull int[] iArr) {
        if (iArr.length == 1) {
            return Integer.valueOf(iArr[0]);
        }
        return null;
    }

    @NotNull
    public static byte[] sliceArray(@NotNull byte[] bArr, @NotNull Collection<Integer> collection) {
        byte[] bArr2 = new byte[collection.size()];
        Iterator<Integer> it = collection.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            bArr2[i2] = bArr[it.next().intValue()];
            i2++;
        }
        return bArr2;
    }

    @NotNull
    public static final List<Integer> sorted(@NotNull int[] iArr) {
        List<Integer> asList;
        Integer[] typedArray = ArraysKt___ArraysJvmKt.toTypedArray(iArr);
        if (typedArray != null) {
            ArraysKt___ArraysJvmKt.sort((Object[]) typedArray);
            asList = ArraysKt___ArraysJvmKt.asList(typedArray);
            return asList;
        }
        throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<kotlin.Any?>");
    }

    @NotNull
    public static final <R extends Comparable<? super R>> List<Integer> sortedBy(@NotNull int[] iArr, @NotNull Function1<? super Integer, ? extends R> function1) {
        return sortedWith(iArr, (Comparator<? super Integer>) new ComparisonsKt__ComparisonsKt$compareBy$2(function1));
    }

    @NotNull
    public static final <R extends Comparable<? super R>> List<Integer> sortedByDescending(@NotNull int[] iArr, @NotNull Function1<? super Integer, ? extends R> function1) {
        return sortedWith(iArr, (Comparator<? super Integer>) new ComparisonsKt__ComparisonsKt$compareByDescending$1(function1));
    }

    @NotNull
    public static final List<Integer> sortedDescending(@NotNull int[] iArr) {
        int[] copyOf = Arrays.copyOf(iArr, iArr.length);
        Intrinsics.checkExpressionValueIsNotNull(copyOf, "java.util.Arrays.copyOf(this, size)");
        ArraysKt___ArraysJvmKt.sort(copyOf);
        return reversed(copyOf);
    }

    @NotNull
    public static final List<Integer> sortedWith(@NotNull int[] iArr, @NotNull Comparator<? super Integer> comparator) {
        List<Integer> asList;
        Integer[] typedArray = ArraysKt___ArraysJvmKt.toTypedArray(iArr);
        ArraysKt___ArraysJvmKt.sortWith(typedArray, comparator);
        asList = ArraysKt___ArraysJvmKt.asList(typedArray);
        return asList;
    }

    public static long sum(@NotNull long[] jArr) {
        long j2 = 0;
        for (long j3 : jArr) {
            j2 += j3;
        }
        return j2;
    }

    @NotNull
    public static final HashSet<Integer> toHashSet(@NotNull int[] iArr) {
        int mapCapacity;
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(iArr.length);
        return (HashSet) toCollection(iArr, new HashSet(mapCapacity));
    }

    @NotNull
    public static final List<Short> toMutableList(@NotNull short[] sArr) {
        ArrayList arrayList = new ArrayList(sArr.length);
        for (short s : sArr) {
            arrayList.add(Short.valueOf(s));
        }
        return arrayList;
    }

    @NotNull
    public static final Iterable<IndexedValue<Integer>> withIndex(@NotNull final int[] iArr) {
        return new IndexingIterable(new Function0<IntIterator>() { // from class: kotlin.collections.ArraysKt___ArraysKt$withIndex$4
            /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
            {
                super(0);
            }

            @Override // kotlin.jvm.functions.Function0
            @NotNull
            public final IntIterator invoke() {
                return ArrayIteratorsKt.iterator(iArr);
            }
        });
    }

    @NotNull
    public static final <R, V> List<V> zip(@NotNull byte[] bArr, @NotNull R[] rArr, @NotNull Function2<? super Byte, ? super R, ? extends V> function2) {
        int min = Math.min(bArr.length, rArr.length);
        ArrayList arrayList = new ArrayList(min);
        for (int i2 = 0; i2 < min; i2++) {
            arrayList.add(function2.invoke(Byte.valueOf(bArr[i2]), rArr[i2]));
        }
        return arrayList;
    }

    public static final boolean all(@NotNull long[] jArr, @NotNull Function1<? super Long, Boolean> function1) {
        for (long j2 : jArr) {
            if (!function1.invoke(Long.valueOf(j2)).booleanValue()) {
                return false;
            }
        }
        return true;
    }

    public static boolean any(@NotNull long[] jArr) {
        return !(jArr.length == 0);
    }

    @NotNull
    public static final Iterable<Short> asIterable(@NotNull short[] sArr) {
        List emptyList;
        if (sArr.length == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        return new ArraysKt___ArraysKt$asIterable$$inlined$Iterable$3(sArr);
    }

    @NotNull
    public static final Sequence<Short> asSequence(@NotNull final short[] sArr) {
        Sequence<Short> emptySequence;
        if (sArr.length == 0) {
            emptySequence = SequencesKt__SequencesKt.emptySequence();
            return emptySequence;
        }
        return new Sequence<Short>() { // from class: kotlin.collections.ArraysKt___ArraysKt$asSequence$$inlined$Sequence$3
            @Override // kotlin.sequences.Sequence
            @NotNull
            public Iterator<Short> iterator() {
                return ArrayIteratorsKt.iterator(sArr);
            }
        };
    }

    @NotNull
    public static final <K, V> Map<K, V> associate(@NotNull byte[] bArr, @NotNull Function1<? super Byte, ? extends Pair<? extends K, ? extends V>> function1) {
        int mapCapacity;
        int coerceAtLeast;
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(bArr.length);
        coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(mapCapacity, 16);
        LinkedHashMap linkedHashMap = new LinkedHashMap(coerceAtLeast);
        for (byte b : bArr) {
            Pair<? extends K, ? extends V> invoke = function1.invoke(Byte.valueOf(b));
            linkedHashMap.put(invoke.getFirst(), invoke.getSecond());
        }
        return linkedHashMap;
    }

    @NotNull
    public static final <K> Map<K, Byte> associateBy(@NotNull byte[] bArr, @NotNull Function1<? super Byte, ? extends K> function1) {
        int mapCapacity;
        int coerceAtLeast;
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(bArr.length);
        coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(mapCapacity, 16);
        LinkedHashMap linkedHashMap = new LinkedHashMap(coerceAtLeast);
        for (byte b : bArr) {
            linkedHashMap.put(function1.invoke(Byte.valueOf(b)), Byte.valueOf(b));
        }
        return linkedHashMap;
    }

    @NotNull
    public static final <K, M extends Map<? super K, ? super Short>> M associateByTo(@NotNull short[] sArr, @NotNull M m2, @NotNull Function1<? super Short, ? extends K> function1) {
        for (short s : sArr) {
            m2.put(function1.invoke(Short.valueOf(s)), Short.valueOf(s));
        }
        return m2;
    }

    @NotNull
    public static final <K, V, M extends Map<? super K, ? super V>> M associateTo(@NotNull short[] sArr, @NotNull M m2, @NotNull Function1<? super Short, ? extends Pair<? extends K, ? extends V>> function1) {
        for (short s : sArr) {
            Pair<? extends K, ? extends V> invoke = function1.invoke(Short.valueOf(s));
            m2.put(invoke.getFirst(), invoke.getSecond());
        }
        return m2;
    }

    @InlineOnly
    private static final long component1(@NotNull long[] jArr) {
        return jArr[0];
    }

    @InlineOnly
    private static final long component2(@NotNull long[] jArr) {
        return jArr[1];
    }

    @InlineOnly
    private static final long component3(@NotNull long[] jArr) {
        return jArr[2];
    }

    @InlineOnly
    private static final long component4(@NotNull long[] jArr) {
        return jArr[3];
    }

    @InlineOnly
    private static final long component5(@NotNull long[] jArr) {
        return jArr[4];
    }

    public static boolean contains(@NotNull long[] jArr, long j2) {
        int indexOf;
        indexOf = indexOf(jArr, j2);
        return indexOf >= 0;
    }

    @InlineOnly
    private static final int count(@NotNull long[] jArr) {
        return jArr.length;
    }

    @NotNull
    public static final List<Long> distinct(@NotNull long[] jArr) {
        List<Long> list;
        list = CollectionsKt___CollectionsKt.toList(toMutableSet(jArr));
        return list;
    }

    @NotNull
    public static final List<Short> drop(@NotNull short[] sArr, int i2) {
        int coerceAtLeast;
        if (i2 >= 0) {
            coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(sArr.length - i2, 0);
            return takeLast(sArr, coerceAtLeast);
        }
        throw new IllegalArgumentException(("Requested element count " + i2 + " is less than zero.").toString());
    }

    @NotNull
    public static final List<Short> dropLast(@NotNull short[] sArr, int i2) {
        int coerceAtLeast;
        if (i2 >= 0) {
            coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(sArr.length - i2, 0);
            return take(sArr, coerceAtLeast);
        }
        throw new IllegalArgumentException(("Requested element count " + i2 + " is less than zero.").toString());
    }

    @NotNull
    public static final List<Byte> dropLastWhile(@NotNull byte[] bArr, @NotNull Function1<? super Byte, Boolean> function1) {
        int lastIndex;
        List<Byte> emptyList;
        for (lastIndex = getLastIndex(bArr); lastIndex >= 0; lastIndex--) {
            if (!function1.invoke(Byte.valueOf(bArr[lastIndex])).booleanValue()) {
                return take(bArr, lastIndex + 1);
            }
        }
        emptyList = CollectionsKt__CollectionsKt.emptyList();
        return emptyList;
    }

    @InlineOnly
    private static final long elementAtOrElse(@NotNull long[] jArr, int i2, Function1<? super Integer, Long> function1) {
        int lastIndex;
        if (i2 >= 0) {
            lastIndex = getLastIndex(jArr);
            if (i2 <= lastIndex) {
                return jArr[i2];
            }
        }
        return function1.invoke(Integer.valueOf(i2)).longValue();
    }

    @InlineOnly
    private static final Long elementAtOrNull(@NotNull long[] jArr, int i2) {
        return getOrNull(jArr, i2);
    }

    @NotNull
    public static final List<Short> filter(@NotNull short[] sArr, @NotNull Function1<? super Short, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        for (short s : sArr) {
            if (function1.invoke(Short.valueOf(s)).booleanValue()) {
                arrayList.add(Short.valueOf(s));
            }
        }
        return arrayList;
    }

    @NotNull
    public static final <C extends Collection<? super Short>> C filterIndexedTo(@NotNull short[] sArr, @NotNull C c2, @NotNull Function2<? super Integer, ? super Short, Boolean> function2) {
        int length = sArr.length;
        int i2 = 0;
        int i3 = 0;
        while (i2 < length) {
            short s = sArr[i2];
            int i4 = i3 + 1;
            if (function2.invoke(Integer.valueOf(i3), Short.valueOf(s)).booleanValue()) {
                c2.add(Short.valueOf(s));
            }
            i2++;
            i3 = i4;
        }
        return c2;
    }

    @NotNull
    public static final List<Short> filterNot(@NotNull short[] sArr, @NotNull Function1<? super Short, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        for (short s : sArr) {
            if (!function1.invoke(Short.valueOf(s)).booleanValue()) {
                arrayList.add(Short.valueOf(s));
            }
        }
        return arrayList;
    }

    @NotNull
    public static final <C extends Collection<? super Long>> C filterNotTo(@NotNull long[] jArr, @NotNull C c2, @NotNull Function1<? super Long, Boolean> function1) {
        for (long j2 : jArr) {
            if (!function1.invoke(Long.valueOf(j2)).booleanValue()) {
                c2.add(Long.valueOf(j2));
            }
        }
        return c2;
    }

    @NotNull
    public static final <C extends Collection<? super Long>> C filterTo(@NotNull long[] jArr, @NotNull C c2, @NotNull Function1<? super Long, Boolean> function1) {
        for (long j2 : jArr) {
            if (function1.invoke(Long.valueOf(j2)).booleanValue()) {
                c2.add(Long.valueOf(j2));
            }
        }
        return c2;
    }

    @InlineOnly
    private static final Long find(@NotNull long[] jArr, Function1<? super Long, Boolean> function1) {
        for (long j2 : jArr) {
            if (function1.invoke(Long.valueOf(j2)).booleanValue()) {
                return Long.valueOf(j2);
            }
        }
        return null;
    }

    @Nullable
    public static final Long firstOrNull(@NotNull long[] jArr) {
        if (jArr.length == 0) {
            return null;
        }
        return Long.valueOf(jArr[0]);
    }

    @NotNull
    public static final <R> List<R> flatMap(@NotNull byte[] bArr, @NotNull Function1<? super Byte, ? extends Iterable<? extends R>> function1) {
        ArrayList arrayList = new ArrayList();
        for (byte b : bArr) {
            CollectionsKt__MutableCollectionsKt.addAll(arrayList, function1.invoke(Byte.valueOf(b)));
        }
        return arrayList;
    }

    public static final <R> R fold(@NotNull long[] jArr, R r, @NotNull Function2<? super R, ? super Long, ? extends R> function2) {
        for (long j2 : jArr) {
            r = function2.invoke(r, Long.valueOf(j2));
        }
        return r;
    }

    public static final <R> R foldIndexed(@NotNull long[] jArr, R r, @NotNull Function3<? super Integer, ? super R, ? super Long, ? extends R> function3) {
        int i2 = 0;
        for (long j2 : jArr) {
            Integer valueOf = Integer.valueOf(i2);
            i2++;
            r = function3.invoke(valueOf, r, Long.valueOf(j2));
        }
        return r;
    }

    public static final <R> R foldRight(@NotNull short[] sArr, R r, @NotNull Function2<? super Short, ? super R, ? extends R> function2) {
        int lastIndex;
        for (lastIndex = getLastIndex(sArr); lastIndex >= 0; lastIndex--) {
            r = function2.invoke(Short.valueOf(sArr[lastIndex]), r);
        }
        return r;
    }

    public static final <R> R foldRightIndexed(@NotNull short[] sArr, R r, @NotNull Function3<? super Integer, ? super Short, ? super R, ? extends R> function3) {
        int lastIndex;
        for (lastIndex = getLastIndex(sArr); lastIndex >= 0; lastIndex--) {
            r = function3.invoke(Integer.valueOf(lastIndex), Short.valueOf(sArr[lastIndex]), r);
        }
        return r;
    }

    public static final void forEach(@NotNull long[] jArr, @NotNull Function1<? super Long, Unit> function1) {
        for (long j2 : jArr) {
            function1.invoke(Long.valueOf(j2));
        }
    }

    public static final void forEachIndexed(@NotNull long[] jArr, @NotNull Function2<? super Integer, ? super Long, Unit> function2) {
        int i2 = 0;
        for (long j2 : jArr) {
            Integer valueOf = Integer.valueOf(i2);
            i2++;
            function2.invoke(valueOf, Long.valueOf(j2));
        }
    }

    @NotNull
    public static  getIndices(@NotNull long[] jArr) {
        int lastIndex;
        lastIndex = getLastIndex(jArr);
        return new (0, lastIndex);
    }

    public static int getLastIndex(@NotNull long[] jArr) {
        return jArr.length - 1;
    }

    @InlineOnly
    private static final long getOrElse(@NotNull long[] jArr, int i2, Function1<? super Integer, Long> function1) {
        int lastIndex;
        if (i2 >= 0) {
            lastIndex = getLastIndex(jArr);
            if (i2 <= lastIndex) {
                return jArr[i2];
            }
        }
        return function1.invoke(Integer.valueOf(i2)).longValue();
    }

    @Nullable
    public static final Long getOrNull(@NotNull long[] jArr, int i2) {
        int lastIndex;
        if (i2 >= 0) {
            lastIndex = getLastIndex(jArr);
            if (i2 <= lastIndex) {
                return Long.valueOf(jArr[i2]);
            }
        }
        return null;
    }

    public static int indexOf(@NotNull byte[] bArr, byte b) {
        int length = bArr.length;
        for (int i2 = 0; i2 < length; i2++) {
            if (b == bArr[i2]) {
                return i2;
            }
        }
        return -1;
    }

    public static final int indexOfFirst(@NotNull short[] sArr, @NotNull Function1<? super Short, Boolean> function1) {
        int length = sArr.length;
        for (int i2 = 0; i2 < length; i2++) {
            if (function1.invoke(Short.valueOf(sArr[i2])).booleanValue()) {
                return i2;
            }
        }
        return -1;
    }

    public static final int indexOfLast(@NotNull short[] sArr, @NotNull Function1<? super Short, Boolean> function1) {
        for (int length = sArr.length - 1; length >= 0; length--) {
            if (function1.invoke(Short.valueOf(sArr[length])).booleanValue()) {
                return length;
            }
        }
        return -1;
    }

    @NotNull
    public static final Set<Short> intersect(@NotNull short[] sArr, @NotNull Iterable<Short> iterable) {
        Set<Short> mutableSet = toMutableSet(sArr);
        CollectionsKt__MutableCollectionsKt.retainAll(mutableSet, iterable);
        return mutableSet;
    }

    @InlineOnly
    private static final boolean isEmpty(@NotNull long[] jArr) {
        return jArr.length == 0;
    }

    @InlineOnly
    private static final boolean isNotEmpty(@NotNull long[] jArr) {
        return !(jArr.length == 0);
    }

    @NotNull
    public static final String joinToString(@NotNull long[] jArr, @NotNull CharSequence charSequence, @NotNull CharSequence charSequence2, @NotNull CharSequence charSequence3, int i2, @NotNull CharSequence charSequence4, @Nullable Function1<? super Long, ? extends CharSequence> function1) {
        String sb = ((StringBuilder) joinTo(jArr, new StringBuilder(), charSequence, charSequence2, charSequence3, i2, charSequence4, function1)).toString();
        Intrinsics.checkExpressionValueIsNotNull(sb, "joinTo(StringBuilder(), \u2026ed, transform).toString()");
        return sb;
    }

    public static /* synthetic */ String joinToString$default(long[] jArr, CharSequence charSequence, CharSequence charSequence2, CharSequence charSequence3, int i2, CharSequence charSequence4, Function1 function1, int i3, Object obj) {
        if ((i3 & 1) != 0) {
            charSequence = ", ";
        }
        CharSequence charSequence5 = (i3 & 2) != 0 ? "" : charSequence2;
        CharSequence charSequence6 = (i3 & 4) == 0 ? charSequence3 : "";
        int i4 = (i3 & 8) != 0 ? -1 : i2;
        if ((i3 & 16) != 0) {
            charSequence4 = "...";
        }
        CharSequence charSequence7 = charSequence4;
        if ((i3 & 32) != 0) {
            function1 = null;
        }
        return joinToString(jArr, charSequence, charSequence5, charSequence6, i4, charSequence7, (Function1<? super Long, ? extends CharSequence>) function1);
    }

    public static int lastIndexOf(@NotNull byte[] bArr, byte b) {
        for (int length = bArr.length - 1; length >= 0; length--) {
            if (b == bArr[length]) {
                return length;
            }
        }
        return -1;
    }

    @Nullable
    public static final Long lastOrNull(@NotNull long[] jArr) {
        if (jArr.length == 0) {
            return null;
        }
        return Long.valueOf(jArr[jArr.length - 1]);
    }

    @NotNull
    public static final <R, C extends Collection<? super R>> C mapIndexedTo(@NotNull short[] sArr, @NotNull C c2, @NotNull Function2<? super Integer, ? super Short, ? extends R> function2) {
        int i2 = 0;
        for (short s : sArr) {
            Integer valueOf = Integer.valueOf(i2);
            i2++;
            c2.add(function2.invoke(valueOf, Short.valueOf(s)));
        }
        return c2;
    }

    @NotNull
    public static final <R, C extends Collection<? super R>> C mapTo(@NotNull short[] sArr, @NotNull C c2, @NotNull Function1<? super Short, ? extends R> function1) {
        for (short s : sArr) {
            c2.add(function1.invoke(Short.valueOf(s)));
        }
        return c2;
    }

    public static final boolean none(@NotNull long[] jArr) {
        return jArr.length == 0;
    }

    @SinceKotlin(version = "1.3")
    @InlineOnly
    private static final long random(@NotNull long[] jArr) {
        return random(jArr, (Random) Random.INSTANCE);
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @InlineOnly
    private static final Long randomOrNull(@NotNull long[] jArr) {
        return randomOrNull(jArr, (Random) Random.INSTANCE);
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @Nullable
    public static final Byte reduceOrNull(@NotNull byte[] bArr, @NotNull Function2<? super Byte, ? super Byte, Byte> function2) {
        int lastIndex;
        int i2 = 1;
        if (bArr.length == 0) {
            return null;
        }
        byte b = bArr[0];
        lastIndex = getLastIndex(bArr);
        if (1 <= lastIndex) {
            while (true) {
                b = function2.invoke(Byte.valueOf(b), Byte.valueOf(bArr[i2])).byteValue();
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Byte.valueOf(b);
    }

    public static final byte reduceRight(@NotNull byte[] bArr, @NotNull Function2<? super Byte, ? super Byte, Byte> function2) {
        int lastIndex;
        lastIndex = getLastIndex(bArr);
        if (lastIndex >= 0) {
            byte b = bArr[lastIndex];
            for (int i2 = lastIndex - 1; i2 >= 0; i2--) {
                b = function2.invoke(Byte.valueOf(bArr[i2]), Byte.valueOf(b)).byteValue();
            }
            return b;
        }
        throw new UnsupportedOperationException("Empty array can't be reduced.");
    }

    public static final byte reduceRightIndexed(@NotNull byte[] bArr, @NotNull Function3<? super Integer, ? super Byte, ? super Byte, Byte> function3) {
        int lastIndex;
        lastIndex = getLastIndex(bArr);
        if (lastIndex >= 0) {
            byte b = bArr[lastIndex];
            for (int i2 = lastIndex - 1; i2 >= 0; i2--) {
                b = function3.invoke(Integer.valueOf(i2), Byte.valueOf(bArr[i2]), Byte.valueOf(b)).byteValue();
            }
            return b;
        }
        throw new UnsupportedOperationException("Empty array can't be reduced.");
    }

    @NotNull
    public static byte[] reversedArray(@NotNull byte[] bArr) {
        int lastIndex;
        int i2 = 0;
        if (bArr.length == 0) {
            return bArr;
        }
        byte[] bArr2 = new byte[bArr.length];
        lastIndex = getLastIndex(bArr);
        if (lastIndex >= 0) {
            while (true) {
                bArr2[lastIndex - i2] = bArr[i2];
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return bArr2;
    }

    public static byte single(@NotNull byte[] bArr) {
        int length = bArr.length;
        if (length != 0) {
            if (length == 1) {
                return bArr[0];
            }
            throw new IllegalArgumentException("Array has more than one element.");
        }
        throw new NoSuchElementException("Array is empty.");
    }

    @Nullable
    public static final Long singleOrNull(@NotNull long[] jArr) {
        if (jArr.length == 1) {
            return Long.valueOf(jArr[0]);
        }
        return null;
    }

    @NotNull
    public static final List<Short> slice(@NotNull short[] sArr, @NotNull  Var) {
        short[] copyOfRange;
        List<Short> emptyList;
        if (Var.isEmpty()) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        copyOfRange = ArraysKt___ArraysJvmKt.copyOfRange(sArr, Var.getStart().intValue(), Var.getEndInclusive().intValue() + 1);
        return ArraysKt___ArraysJvmKt.asList(copyOfRange);
    }

    public static final void sortDescending(@NotNull short[] sArr) {
        if (sArr.length > 1) {
            ArraysKt___ArraysJvmKt.sort(sArr);
            reverse(sArr);
        }
    }

    @NotNull
    public static final List<Long> sorted(@NotNull long[] jArr) {
        List<Long> asList;
        Long[] typedArray = ArraysKt___ArraysJvmKt.toTypedArray(jArr);
        if (typedArray != null) {
            ArraysKt___ArraysJvmKt.sort((Object[]) typedArray);
            asList = ArraysKt___ArraysJvmKt.asList(typedArray);
            return asList;
        }
        throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<kotlin.Any?>");
    }

    @NotNull
    public static final short[] sortedArray(@NotNull short[] sArr) {
        if (sArr.length == 0) {
            return sArr;
        }
        short[] copyOf = Arrays.copyOf(sArr, sArr.length);
        Intrinsics.checkExpressionValueIsNotNull(copyOf, "java.util.Arrays.copyOf(this, size)");
        ArraysKt___ArraysJvmKt.sort(copyOf);
        return copyOf;
    }

    @NotNull
    public static final short[] sortedArrayDescending(@NotNull short[] sArr) {
        if (sArr.length == 0) {
            return sArr;
        }
        short[] copyOf = Arrays.copyOf(sArr, sArr.length);
        Intrinsics.checkExpressionValueIsNotNull(copyOf, "java.util.Arrays.copyOf(this, size)");
        sortDescending(copyOf);
        return copyOf;
    }

    @NotNull
    public static final <R extends Comparable<? super R>> List<Long> sortedBy(@NotNull long[] jArr, @NotNull Function1<? super Long, ? extends R> function1) {
        return sortedWith(jArr, (Comparator<? super Long>) new ComparisonsKt__ComparisonsKt$compareBy$2(function1));
    }

    @NotNull
    public static final <R extends Comparable<? super R>> List<Long> sortedByDescending(@NotNull long[] jArr, @NotNull Function1<? super Long, ? extends R> function1) {
        return sortedWith(jArr, (Comparator<? super Long>) new ComparisonsKt__ComparisonsKt$compareByDescending$1(function1));
    }

    @NotNull
    public static final List<Long> sortedDescending(@NotNull long[] jArr) {
        long[] copyOf = Arrays.copyOf(jArr, jArr.length);
        Intrinsics.checkExpressionValueIsNotNull(copyOf, "java.util.Arrays.copyOf(this, size)");
        ArraysKt___ArraysJvmKt.sort(copyOf);
        return reversed(copyOf);
    }

    @NotNull
    public static final List<Long> sortedWith(@NotNull long[] jArr, @NotNull Comparator<? super Long> comparator) {
        List<Long> asList;
        Long[] typedArray = ArraysKt___ArraysJvmKt.toTypedArray(jArr);
        ArraysKt___ArraysJvmKt.sortWith(typedArray, comparator);
        asList = ArraysKt___ArraysJvmKt.asList(typedArray);
        return asList;
    }

    @NotNull
    public static final Set<Short> subtract(@NotNull short[] sArr, @NotNull Iterable<Short> iterable) {
        Set<Short> mutableSet = toMutableSet(sArr);
        CollectionsKt__MutableCollectionsKt.removeAll(mutableSet, iterable);
        return mutableSet;
    }

    public static final float sum(@NotNull float[] fArr) {
        float f2 = 0.0f;
        for (float f3 : fArr) {
            f2 += f3;
        }
        return f2;
    }

    public static final int sumBy(@NotNull short[] sArr, @NotNull Function1<? super Short, Integer> function1) {
        int i2 = 0;
        for (short s : sArr) {
            i2 += function1.invoke(Short.valueOf(s)).intValue();
        }
        return i2;
    }

    public static final double sumByDouble(@NotNull short[] sArr, @NotNull Function1<? super Short, Double> function1) {
        double d = 0.0d;
        for (short s : sArr) {
            d += function1.invoke(Short.valueOf(s)).doubleValue();
        }
        return d;
    }

    @NotNull
    public static final List<Byte> takeLastWhile(@NotNull byte[] bArr, @NotNull Function1<? super Byte, Boolean> function1) {
        int lastIndex;
        for (lastIndex = getLastIndex(bArr); lastIndex >= 0; lastIndex--) {
            if (!function1.invoke(Byte.valueOf(bArr[lastIndex])).booleanValue()) {
                return drop(bArr, lastIndex + 1);
            }
        }
        return toList(bArr);
    }

    @NotNull
    public static final List<Byte> takeWhile(@NotNull byte[] bArr, @NotNull Function1<? super Byte, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        for (byte b : bArr) {
            if (!function1.invoke(Byte.valueOf(b)).booleanValue()) {
                break;
            }
            arrayList.add(Byte.valueOf(b));
        }
        return arrayList;
    }

    @NotNull
    public static final <C extends Collection<? super Short>> C toCollection(@NotNull short[] sArr, @NotNull C c2) {
        for (short s : sArr) {
            c2.add(Short.valueOf(s));
        }
        return c2;
    }

    @NotNull
    public static final HashSet<Long> toHashSet(@NotNull long[] jArr) {
        int mapCapacity;
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(jArr.length);
        return (HashSet) toCollection(jArr, new HashSet(mapCapacity));
    }

    @NotNull
    public static final List<Byte> toList(@NotNull byte[] bArr) {
        List<Byte> emptyList;
        List<Byte> listOf;
        int length = bArr.length;
        if (length == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        } else if (length != 1) {
            return toMutableList(bArr);
        } else {
            listOf = CollectionsKt__CollectionsJVMKt.listOf(Byte.valueOf(bArr[0]));
            return listOf;
        }
    }

    @NotNull
    public static final Set<Short> toMutableSet(@NotNull short[] sArr) {
        int mapCapacity;
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(sArr.length);
        LinkedHashSet linkedHashSet = new LinkedHashSet(mapCapacity);
        for (short s : sArr) {
            linkedHashSet.add(Short.valueOf(s));
        }
        return linkedHashSet;
    }

    @NotNull
    public static final Set<Byte> toSet(@NotNull byte[] bArr) {
        Set<Byte> emptySet;
        Set<Byte> of;
        int mapCapacity;
        int length = bArr.length;
        if (length == 0) {
            emptySet = SetsKt__SetsKt.emptySet();
            return emptySet;
        } else if (length != 1) {
            mapCapacity = MapsKt__MapsJVMKt.mapCapacity(bArr.length);
            return (Set) toCollection(bArr, new LinkedHashSet(mapCapacity));
        } else {
            of = SetsKt__SetsJVMKt.setOf(Byte.valueOf(bArr[0]));
            return of;
        }
    }

    @NotNull
    public static final Set<Short> union(@NotNull short[] sArr, @NotNull Iterable<Short> iterable) {
        Set<Short> mutableSet = toMutableSet(sArr);
        CollectionsKt__MutableCollectionsKt.addAll(mutableSet, iterable);
        return mutableSet;
    }

    @NotNull
    public static final Iterable<IndexedValue<Long>> withIndex(@NotNull final long[] jArr) {
        return new IndexingIterable(new Function0<LongIterator>() { // from class: kotlin.collections.ArraysKt___ArraysKt$withIndex$5
            /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
            {
                super(0);
            }

            @Override // kotlin.jvm.functions.Function0
            @NotNull
            public final LongIterator invoke() {
                return ArrayIteratorsKt.iterator(jArr);
            }
        });
    }

    public static final boolean all(@NotNull float[] fArr, @NotNull Function1<? super Float, Boolean> function1) {
        for (float f2 : fArr) {
            if (!function1.invoke(Float.valueOf(f2)).booleanValue()) {
                return false;
            }
        }
        return true;
    }

    public static final boolean any(@NotNull float[] fArr) {
        return !(fArr.length == 0);
    }

    @InlineOnly
    private static final float component1(@NotNull float[] fArr) {
        return fArr[0];
    }

    @InlineOnly
    private static final float component2(@NotNull float[] fArr) {
        return fArr[1];
    }

    @InlineOnly
    private static final float component3(@NotNull float[] fArr) {
        return fArr[2];
    }

    @InlineOnly
    private static final float component4(@NotNull float[] fArr) {
        return fArr[3];
    }

    @InlineOnly
    private static final float component5(@NotNull float[] fArr) {
        return fArr[4];
    }

    public static final boolean contains(@NotNull float[] fArr, float f2) {
        return indexOf(fArr, f2) >= 0;
    }

    @InlineOnly
    private static final int count(@NotNull float[] fArr) {
        return fArr.length;
    }

    @NotNull
    public static final List<Float> distinct(@NotNull float[] fArr) {
        List<Float> list;
        list = CollectionsKt___CollectionsKt.toList(toMutableSet(fArr));
        return list;
    }

    @NotNull
    public static final List<Byte> dropWhile(@NotNull byte[] bArr, @NotNull Function1<? super Byte, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        boolean z = false;
        for (byte b : bArr) {
            if (z) {
                arrayList.add(Byte.valueOf(b));
            } else if (!function1.invoke(Byte.valueOf(b)).booleanValue()) {
                arrayList.add(Byte.valueOf(b));
                z = true;
            }
        }
        return arrayList;
    }

    @InlineOnly
    private static final float elementAtOrElse(@NotNull float[] fArr, int i2, Function1<? super Integer, Float> function1) {
        return (i2 < 0 || i2 > getLastIndex(fArr)) ? function1.invoke(Integer.valueOf(i2)).floatValue() : fArr[i2];
    }

    @InlineOnly
    private static final Float elementAtOrNull(@NotNull float[] fArr, int i2) {
        return getOrNull(fArr, i2);
    }

    @NotNull
    public static final <C extends Collection<? super Float>> C filterNotTo(@NotNull float[] fArr, @NotNull C c2, @NotNull Function1<? super Float, Boolean> function1) {
        for (float f2 : fArr) {
            if (!function1.invoke(Float.valueOf(f2)).booleanValue()) {
                c2.add(Float.valueOf(f2));
            }
        }
        return c2;
    }

    @NotNull
    public static final <C extends Collection<? super Float>> C filterTo(@NotNull float[] fArr, @NotNull C c2, @NotNull Function1<? super Float, Boolean> function1) {
        for (float f2 : fArr) {
            if (function1.invoke(Float.valueOf(f2)).booleanValue()) {
                c2.add(Float.valueOf(f2));
            }
        }
        return c2;
    }

    @InlineOnly
    private static final Float find(@NotNull float[] fArr, Function1<? super Float, Boolean> function1) {
        for (float f2 : fArr) {
            if (function1.invoke(Float.valueOf(f2)).booleanValue()) {
                return Float.valueOf(f2);
            }
        }
        return null;
    }

    @Nullable
    public static final Float firstOrNull(@NotNull float[] fArr) {
        if (fArr.length == 0) {
            return null;
        }
        return Float.valueOf(fArr[0]);
    }

    public static final <R> R fold(@NotNull float[] fArr, R r, @NotNull Function2<? super R, ? super Float, ? extends R> function2) {
        for (float f2 : fArr) {
            r = function2.invoke(r, Float.valueOf(f2));
        }
        return r;
    }

    public static final <R> R foldIndexed(@NotNull float[] fArr, R r, @NotNull Function3<? super Integer, ? super R, ? super Float, ? extends R> function3) {
        int i2 = 0;
        for (float f2 : fArr) {
            Integer valueOf = Integer.valueOf(i2);
            i2++;
            r = function3.invoke(valueOf, r, Float.valueOf(f2));
        }
        return r;
    }

    public static final void forEach(@NotNull float[] fArr, @NotNull Function1<? super Float, Unit> function1) {
        for (float f2 : fArr) {
            function1.invoke(Float.valueOf(f2));
        }
    }

    public static final void forEachIndexed(@NotNull float[] fArr, @NotNull Function2<? super Integer, ? super Float, Unit> function2) {
        int i2 = 0;
        for (float f2 : fArr) {
            Integer valueOf = Integer.valueOf(i2);
            i2++;
            function2.invoke(valueOf, Float.valueOf(f2));
        }
    }

    @NotNull
    public static final  getIndices(@NotNull float[] fArr) {
        return new (0, getLastIndex(fArr));
    }

    public static final int getLastIndex(@NotNull float[] fArr) {
        return fArr.length - 1;
    }

    @InlineOnly
    private static final float getOrElse(@NotNull float[] fArr, int i2, Function1<? super Integer, Float> function1) {
        return (i2 < 0 || i2 > getLastIndex(fArr)) ? function1.invoke(Integer.valueOf(i2)).floatValue() : fArr[i2];
    }

    @Nullable
    public static final Float getOrNull(@NotNull float[] fArr, int i2) {
        if (i2 < 0 || i2 > getLastIndex(fArr)) {
            return null;
        }
        return Float.valueOf(fArr[i2]);
    }

    @InlineOnly
    private static final boolean isEmpty(@NotNull float[] fArr) {
        return fArr.length == 0;
    }

    @InlineOnly
    private static final boolean isNotEmpty(@NotNull float[] fArr) {
        return !(fArr.length == 0);
    }

    @NotNull
    public static final String joinToString(@NotNull float[] fArr, @NotNull CharSequence charSequence, @NotNull CharSequence charSequence2, @NotNull CharSequence charSequence3, int i2, @NotNull CharSequence charSequence4, @Nullable Function1<? super Float, ? extends CharSequence> function1) {
        String sb = ((StringBuilder) joinTo(fArr, new StringBuilder(), charSequence, charSequence2, charSequence3, i2, charSequence4, function1)).toString();
        Intrinsics.checkExpressionValueIsNotNull(sb, "joinTo(StringBuilder(), \u2026ed, transform).toString()");
        return sb;
    }

    public static /* synthetic */ String joinToString$default(float[] fArr, CharSequence charSequence, CharSequence charSequence2, CharSequence charSequence3, int i2, CharSequence charSequence4, Function1 function1, int i3, Object obj) {
        if ((i3 & 1) != 0) {
            charSequence = ", ";
        }
        CharSequence charSequence5 = (i3 & 2) != 0 ? "" : charSequence2;
        CharSequence charSequence6 = (i3 & 4) == 0 ? charSequence3 : "";
        int i4 = (i3 & 8) != 0 ? -1 : i2;
        if ((i3 & 16) != 0) {
            charSequence4 = "...";
        }
        CharSequence charSequence7 = charSequence4;
        if ((i3 & 32) != 0) {
            function1 = null;
        }
        return joinToString(fArr, charSequence, charSequence5, charSequence6, i4, charSequence7, (Function1<? super Float, ? extends CharSequence>) function1);
    }

    @Nullable
    public static final Float lastOrNull(@NotNull float[] fArr) {
        if (fArr.length == 0) {
            return null;
        }
        return Float.valueOf(fArr[fArr.length - 1]);
    }

    @Nullable
    public static final Byte maxWith(@NotNull byte[] bArr, @NotNull Comparator<? super Byte> comparator) {
        int lastIndex;
        int i2 = 1;
        if (bArr.length == 0) {
            return null;
        }
        byte b = bArr[0];
        lastIndex = getLastIndex(bArr);
        if (1 <= lastIndex) {
            while (true) {
                byte b2 = bArr[i2];
                if (comparator.compare(Byte.valueOf(b), Byte.valueOf(b2)) < 0) {
                    b = b2;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Byte.valueOf(b);
    }

    @Nullable
    public static final Byte minWith(@NotNull byte[] bArr, @NotNull Comparator<? super Byte> comparator) {
        int lastIndex;
        int i2 = 1;
        if (bArr.length == 0) {
            return null;
        }
        byte b = bArr[0];
        lastIndex = getLastIndex(bArr);
        if (1 <= lastIndex) {
            while (true) {
                byte b2 = bArr[i2];
                if (comparator.compare(Byte.valueOf(b), Byte.valueOf(b2)) > 0) {
                    b = b2;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Byte.valueOf(b);
    }

    public static final boolean none(@NotNull float[] fArr) {
        return fArr.length == 0;
    }

    @SinceKotlin(version = "1.3")
    @InlineOnly
    private static final float random(@NotNull float[] fArr) {
        return random(fArr, (Random) Random.INSTANCE);
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @InlineOnly
    private static final Float randomOrNull(@NotNull float[] fArr) {
        return randomOrNull(fArr, (Random) Random.INSTANCE);
    }

    public static final byte reduce(@NotNull byte[] bArr, @NotNull Function2<? super Byte, ? super Byte, Byte> function2) {
        int lastIndex;
        int i2 = 1;
        if (!(bArr.length == 0)) {
            byte b = bArr[0];
            lastIndex = getLastIndex(bArr);
            if (1 <= lastIndex) {
                while (true) {
                    b = function2.invoke(Byte.valueOf(b), Byte.valueOf(bArr[i2])).byteValue();
                    if (i2 == lastIndex) {
                        break;
                    }
                    i2++;
                }
            }
            return b;
        }
        throw new UnsupportedOperationException("Empty array can't be reduced.");
    }

    public static final byte reduceIndexed(@NotNull byte[] bArr, @NotNull Function3<? super Integer, ? super Byte, ? super Byte, Byte> function3) {
        int lastIndex;
        int i2 = 1;
        if (!(bArr.length == 0)) {
            byte b = bArr[0];
            lastIndex = getLastIndex(bArr);
            if (1 <= lastIndex) {
                while (true) {
                    b = function3.invoke(Integer.valueOf(i2), Byte.valueOf(b), Byte.valueOf(bArr[i2])).byteValue();
                    if (i2 == lastIndex) {
                        break;
                    }
                    i2++;
                }
            }
            return b;
        }
        throw new UnsupportedOperationException("Empty array can't be reduced.");
    }

    public static void reverse(@NotNull byte[] bArr) {
        int lastIndex;
        int length = (bArr.length / 2) - 1;
        if (length < 0) {
            return;
        }
        lastIndex = getLastIndex(bArr);
        int i2 = 0;
        if (length < 0) {
            return;
        }
        while (true) {
            byte b = bArr[i2];
            bArr[i2] = bArr[lastIndex];
            bArr[lastIndex] = b;
            lastIndex--;
            if (i2 == length) {
                return;
            }
            i2++;
        }
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @InlineOnly
    private static final <R> List<R> scan(@NotNull byte[] bArr, R r, Function2<? super R, ? super Byte, ? extends R> function2) {
        List<R> listOf;
        if (bArr.length == 0) {
            listOf = CollectionsKt__CollectionsJVMKt.listOf(r);
            return listOf;
        }
        ArrayList arrayList = new ArrayList(bArr.length + 1);
        arrayList.add(r);
        for (byte b : bArr) {
            r = function2.invoke(r, Byte.valueOf(b));
            arrayList.add(r);
        }
        return arrayList;
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @InlineOnly
    private static final <R> List<R> scanIndexed(@NotNull byte[] bArr, R r, Function3<? super Integer, ? super R, ? super Byte, ? extends R> function3) {
        List<R> listOf;
        if (bArr.length == 0) {
            listOf = CollectionsKt__CollectionsJVMKt.listOf(r);
            return listOf;
        }
        ArrayList arrayList = new ArrayList(bArr.length + 1);
        arrayList.add(r);
        int length = bArr.length;
        for (int i2 = 0; i2 < length; i2++) {
            r = function3.invoke(Integer.valueOf(i2), r, Byte.valueOf(bArr[i2]));
            arrayList.add(r);
        }
        return arrayList;
    }

    @Nullable
    public static final Float singleOrNull(@NotNull float[] fArr) {
        if (fArr.length == 1) {
            return Float.valueOf(fArr[0]);
        }
        return null;
    }

    @NotNull
    public static final List<Float> sorted(@NotNull float[] fArr) {
        List<Float> asList;
        Float[] typedArray = ArraysKt___ArraysJvmKt.toTypedArray(fArr);
        if (typedArray != null) {
            ArraysKt___ArraysJvmKt.sort((Object[]) typedArray);
            asList = ArraysKt___ArraysJvmKt.asList(typedArray);
            return asList;
        }
        throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<kotlin.Any?>");
    }

    @NotNull
    public static final <R extends Comparable<? super R>> List<Float> sortedBy(@NotNull float[] fArr, @NotNull Function1<? super Float, ? extends R> function1) {
        return sortedWith(fArr, (Comparator<? super Float>) new ComparisonsKt__ComparisonsKt$compareBy$2(function1));
    }

    @NotNull
    public static final <R extends Comparable<? super R>> List<Float> sortedByDescending(@NotNull float[] fArr, @NotNull Function1<? super Float, ? extends R> function1) {
        return sortedWith(fArr, (Comparator<? super Float>) new ComparisonsKt__ComparisonsKt$compareByDescending$1(function1));
    }

    @NotNull
    public static final List<Float> sortedDescending(@NotNull float[] fArr) {
        float[] copyOf = Arrays.copyOf(fArr, fArr.length);
        Intrinsics.checkExpressionValueIsNotNull(copyOf, "java.util.Arrays.copyOf(this, size)");
        ArraysKt___ArraysJvmKt.sort(copyOf);
        return reversed(copyOf);
    }

    @NotNull
    public static final List<Float> sortedWith(@NotNull float[] fArr, @NotNull Comparator<? super Float> comparator) {
        List<Float> asList;
        Float[] typedArray = ArraysKt___ArraysJvmKt.toTypedArray(fArr);
        ArraysKt___ArraysJvmKt.sortWith(typedArray, comparator);
        asList = ArraysKt___ArraysJvmKt.asList(typedArray);
        return asList;
    }

    public static final double sum(@NotNull double[] dArr) {
        double d = 0.0d;
        for (double d2 : dArr) {
            d += d2;
        }
        return d;
    }

    @NotNull
    public static final HashSet<Float> toHashSet(@NotNull float[] fArr) {
        int mapCapacity;
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(fArr.length);
        return (HashSet) toCollection(fArr, new HashSet(mapCapacity));
    }

    @NotNull
    public static final List<Integer> toMutableList(@NotNull int[] iArr) {
        ArrayList arrayList = new ArrayList(iArr.length);
        for (int i2 : iArr) {
            arrayList.add(Integer.valueOf(i2));
        }
        return arrayList;
    }

    @NotNull
    public static final Iterable<IndexedValue<Float>> withIndex(@NotNull final float[] fArr) {
        return new IndexingIterable(new Function0<FloatIterator>() { // from class: kotlin.collections.ArraysKt___ArraysKt$withIndex$6
            /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
            {
                super(0);
            }

            @Override // kotlin.jvm.functions.Function0
            @NotNull
            public final FloatIterator invoke() {
                return ArrayIteratorsKt.iterator(fArr);
            }
        });
    }

    public static final boolean all(@NotNull double[] dArr, @NotNull Function1<? super Double, Boolean> function1) {
        for (double d : dArr) {
            if (!function1.invoke(Double.valueOf(d)).booleanValue()) {
                return false;
            }
        }
        return true;
    }

    public static final boolean any(@NotNull double[] dArr) {
        return !(dArr.length == 0);
    }

    @NotNull
    public static final Iterable<Integer> asIterable(@NotNull int[] iArr) {
        List emptyList;
        if (iArr.length == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        return new ArraysKt___ArraysKt$asIterable$$inlined$Iterable$4(iArr);
    }

    @NotNull
    public static final Sequence<Integer> asSequence(@NotNull final int[] iArr) {
        Sequence<Integer> emptySequence;
        if (iArr.length == 0) {
            emptySequence = SequencesKt__SequencesKt.emptySequence();
            return emptySequence;
        }
        return new Sequence<Integer>() { // from class: kotlin.collections.ArraysKt___ArraysKt$asSequence$$inlined$Sequence$4
            @Override // kotlin.sequences.Sequence
            @NotNull
            public Iterator<Integer> iterator() {
                return ArrayIteratorsKt.iterator(iArr);
            }
        };
    }

    @NotNull
    public static final <K, M extends Map<? super K, ? super Integer>> M associateByTo(@NotNull int[] iArr, @NotNull M m2, @NotNull Function1<? super Integer, ? extends K> function1) {
        for (int i2 : iArr) {
            m2.put(function1.invoke(Integer.valueOf(i2)), Integer.valueOf(i2));
        }
        return m2;
    }

    @NotNull
    public static final <K, V, M extends Map<? super K, ? super V>> M associateTo(@NotNull int[] iArr, @NotNull M m2, @NotNull Function1<? super Integer, ? extends Pair<? extends K, ? extends V>> function1) {
        for (int i2 : iArr) {
            Pair<? extends K, ? extends V> invoke = function1.invoke(Integer.valueOf(i2));
            m2.put(invoke.getFirst(), invoke.getSecond());
        }
        return m2;
    }

    public static final double average(@NotNull int[] iArr) {
        double d = 0.0d;
        int i2 = 0;
        for (double d2 : iArr) {
            Double.isNaN(d2);
            d += d2;
            i2++;
        }
        if (i2 == 0) {
            return DoubleCompanionObject.INSTANCE.getNaN();
        }
        double d3 = i2;
        Double.isNaN(d3);
        return d / d3;
    }

    @InlineOnly
    private static final double component1(@NotNull double[] dArr) {
        return dArr[0];
    }

    @InlineOnly
    private static final double component2(@NotNull double[] dArr) {
        return dArr[1];
    }

    @InlineOnly
    private static final double component3(@NotNull double[] dArr) {
        return dArr[2];
    }

    @InlineOnly
    private static final double component4(@NotNull double[] dArr) {
        return dArr[3];
    }

    @InlineOnly
    private static final double component5(@NotNull double[] dArr) {
        return dArr[4];
    }

    public static final boolean contains(@NotNull double[] dArr, double d) {
        return indexOf(dArr, d) >= 0;
    }

    @InlineOnly
    private static final int count(@NotNull double[] dArr) {
        return dArr.length;
    }

    @NotNull
    public static final List<Double> distinct(@NotNull double[] dArr) {
        List<Double> list;
        list = CollectionsKt___CollectionsKt.toList(toMutableSet(dArr));
        return list;
    }

    @NotNull
    public static final <K> List<Byte> distinctBy(@NotNull byte[] bArr, @NotNull Function1<? super Byte, ? extends K> function1) {
        HashSet hashSet = new HashSet();
        ArrayList arrayList = new ArrayList();
        for (byte b : bArr) {
            if (hashSet.add(function1.invoke(Byte.valueOf(b)))) {
                arrayList.add(Byte.valueOf(b));
            }
        }
        return arrayList;
    }

    @NotNull
    public static final List<Integer> drop(@NotNull int[] iArr, int i2) {
        int coerceAtLeast;
        if (i2 >= 0) {
            coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(iArr.length - i2, 0);
            return takeLast(iArr, coerceAtLeast);
        }
        throw new IllegalArgumentException(("Requested element count " + i2 + " is less than zero.").toString());
    }

    @NotNull
    public static final List<Integer> dropLast(@NotNull int[] iArr, int i2) {
        int coerceAtLeast;
        if (i2 >= 0) {
            coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(iArr.length - i2, 0);
            return take(iArr, coerceAtLeast);
        }
        throw new IllegalArgumentException(("Requested element count " + i2 + " is less than zero.").toString());
    }

    @InlineOnly
    private static final double elementAtOrElse(@NotNull double[] dArr, int i2, Function1<? super Integer, Double> function1) {
        return (i2 < 0 || i2 > getLastIndex(dArr)) ? function1.invoke(Integer.valueOf(i2)).doubleValue() : dArr[i2];
    }

    @InlineOnly
    private static final Double elementAtOrNull(@NotNull double[] dArr, int i2) {
        return getOrNull(dArr, i2);
    }

    @NotNull
    public static final List<Integer> filter(@NotNull int[] iArr, @NotNull Function1<? super Integer, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        for (int i2 : iArr) {
            if (function1.invoke(Integer.valueOf(i2)).booleanValue()) {
                arrayList.add(Integer.valueOf(i2));
            }
        }
        return arrayList;
    }

    @NotNull
    public static final List<Short> filterIndexed(@NotNull short[] sArr, @NotNull Function2<? super Integer, ? super Short, Boolean> function2) {
        ArrayList arrayList = new ArrayList();
        int length = sArr.length;
        int i2 = 0;
        int i3 = 0;
        while (i2 < length) {
            short s = sArr[i2];
            int i4 = i3 + 1;
            if (function2.invoke(Integer.valueOf(i3), Short.valueOf(s)).booleanValue()) {
                arrayList.add(Short.valueOf(s));
            }
            i2++;
            i3 = i4;
        }
        return arrayList;
    }

    @NotNull
    public static final <C extends Collection<? super Integer>> C filterIndexedTo(@NotNull int[] iArr, @NotNull C c2, @NotNull Function2<? super Integer, ? super Integer, Boolean> function2) {
        int length = iArr.length;
        int i2 = 0;
        int i3 = 0;
        while (i2 < length) {
            int i4 = iArr[i2];
            int i5 = i3 + 1;
            if (function2.invoke(Integer.valueOf(i3), Integer.valueOf(i4)).booleanValue()) {
                c2.add(Integer.valueOf(i4));
            }
            i2++;
            i3 = i5;
        }
        return c2;
    }

    @NotNull
    public static final List<Integer> filterNot(@NotNull int[] iArr, @NotNull Function1<? super Integer, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        for (int i2 : iArr) {
            if (!function1.invoke(Integer.valueOf(i2)).booleanValue()) {
                arrayList.add(Integer.valueOf(i2));
            }
        }
        return arrayList;
    }

    @NotNull
    public static final <C extends Collection<? super Double>> C filterNotTo(@NotNull double[] dArr, @NotNull C c2, @NotNull Function1<? super Double, Boolean> function1) {
        for (double d : dArr) {
            if (!function1.invoke(Double.valueOf(d)).booleanValue()) {
                c2.add(Double.valueOf(d));
            }
        }
        return c2;
    }

    @NotNull
    public static final <C extends Collection<? super Double>> C filterTo(@NotNull double[] dArr, @NotNull C c2, @NotNull Function1<? super Double, Boolean> function1) {
        for (double d : dArr) {
            if (function1.invoke(Double.valueOf(d)).booleanValue()) {
                c2.add(Double.valueOf(d));
            }
        }
        return c2;
    }

    @InlineOnly
    private static final Double find(@NotNull double[] dArr, Function1<? super Double, Boolean> function1) {
        for (double d : dArr) {
            if (function1.invoke(Double.valueOf(d)).booleanValue()) {
                return Double.valueOf(d);
            }
        }
        return null;
    }

    @InlineOnly
    private static final Short findLast(@NotNull short[] sArr, Function1<? super Short, Boolean> function1) {
        short s;
        int length = sArr.length;
        do {
            length--;
            if (length < 0) {
                return null;
            }
            s = sArr[length];
        } while (!function1.invoke(Short.valueOf(s)).booleanValue());
        return Short.valueOf(s);
    }

    public static short first(@NotNull short[] sArr) {
        if (!(sArr.length == 0)) {
            return sArr[0];
        }
        throw new NoSuchElementException("Array is empty.");
    }

    @Nullable
    public static final Double firstOrNull(@NotNull double[] dArr) {
        if (dArr.length == 0) {
            return null;
        }
        return Double.valueOf(dArr[0]);
    }

    @NotNull
    public static final <R, C extends Collection<? super R>> C flatMapTo(@NotNull short[] sArr, @NotNull C c2, @NotNull Function1<? super Short, ? extends Iterable<? extends R>> function1) {
        for (short s : sArr) {
            CollectionsKt__MutableCollectionsKt.addAll(c2, function1.invoke(Short.valueOf(s)));
        }
        return c2;
    }

    public static final <R> R fold(@NotNull double[] dArr, R r, @NotNull Function2<? super R, ? super Double, ? extends R> function2) {
        for (double d : dArr) {
            r = function2.invoke(r, Double.valueOf(d));
        }
        return r;
    }

    public static final <R> R foldIndexed(@NotNull double[] dArr, R r, @NotNull Function3<? super Integer, ? super R, ? super Double, ? extends R> function3) {
        int i2 = 0;
        for (double d : dArr) {
            Integer valueOf = Integer.valueOf(i2);
            i2++;
            r = function3.invoke(valueOf, r, Double.valueOf(d));
        }
        return r;
    }

    public static final <R> R foldRight(@NotNull int[] iArr, R r, @NotNull Function2<? super Integer, ? super R, ? extends R> function2) {
        int lastIndex;
        for (lastIndex = getLastIndex(iArr); lastIndex >= 0; lastIndex--) {
            r = function2.invoke(Integer.valueOf(iArr[lastIndex]), r);
        }
        return r;
    }

    public static final <R> R foldRightIndexed(@NotNull int[] iArr, R r, @NotNull Function3<? super Integer, ? super Integer, ? super R, ? extends R> function3) {
        int lastIndex;
        for (lastIndex = getLastIndex(iArr); lastIndex >= 0; lastIndex--) {
            r = function3.invoke(Integer.valueOf(lastIndex), Integer.valueOf(iArr[lastIndex]), r);
        }
        return r;
    }

    public static final void forEach(@NotNull double[] dArr, @NotNull Function1<? super Double, Unit> function1) {
        for (double d : dArr) {
            function1.invoke(Double.valueOf(d));
        }
    }

    public static final void forEachIndexed(@NotNull double[] dArr, @NotNull Function2<? super Integer, ? super Double, Unit> function2) {
        int i2 = 0;
        for (double d : dArr) {
            Integer valueOf = Integer.valueOf(i2);
            i2++;
            function2.invoke(valueOf, Double.valueOf(d));
        }
    }

    @NotNull
    public static final  getIndices(@NotNull double[] dArr) {
        return new (0, getLastIndex(dArr));
    }

    public static final int getLastIndex(@NotNull double[] dArr) {
        return dArr.length - 1;
    }

    @InlineOnly
    private static final double getOrElse(@NotNull double[] dArr, int i2, Function1<? super Integer, Double> function1) {
        return (i2 < 0 || i2 > getLastIndex(dArr)) ? function1.invoke(Integer.valueOf(i2)).doubleValue() : dArr[i2];
    }

    @Nullable
    public static final Double getOrNull(@NotNull double[] dArr, int i2) {
        if (i2 < 0 || i2 > getLastIndex(dArr)) {
            return null;
        }
        return Double.valueOf(dArr[i2]);
    }

    public static int indexOf(@NotNull short[] sArr, short s) {
        int length = sArr.length;
        for (int i2 = 0; i2 < length; i2++) {
            if (s == sArr[i2]) {
                return i2;
            }
        }
        return -1;
    }

    public static final int indexOfFirst(@NotNull int[] iArr, @NotNull Function1<? super Integer, Boolean> function1) {
        int length = iArr.length;
        for (int i2 = 0; i2 < length; i2++) {
            if (function1.invoke(Integer.valueOf(iArr[i2])).booleanValue()) {
                return i2;
            }
        }
        return -1;
    }

    public static final int indexOfLast(@NotNull int[] iArr, @NotNull Function1<? super Integer, Boolean> function1) {
        for (int length = iArr.length - 1; length >= 0; length--) {
            if (function1.invoke(Integer.valueOf(iArr[length])).booleanValue()) {
                return length;
            }
        }
        return -1;
    }

    @NotNull
    public static final Set<Integer> intersect(@NotNull int[] iArr, @NotNull Iterable<Integer> iterable) {
        Set<Integer> mutableSet = toMutableSet(iArr);
        CollectionsKt__MutableCollectionsKt.retainAll(mutableSet, iterable);
        return mutableSet;
    }

    @InlineOnly
    private static final boolean isEmpty(@NotNull double[] dArr) {
        return dArr.length == 0;
    }

    @InlineOnly
    private static final boolean isNotEmpty(@NotNull double[] dArr) {
        return !(dArr.length == 0);
    }

    @NotNull
    public static final <A extends Appendable> A joinTo(@NotNull byte[] bArr, @NotNull A a, @NotNull CharSequence charSequence, @NotNull CharSequence charSequence2, @NotNull CharSequence charSequence3, int i2, @NotNull CharSequence charSequence4, @Nullable Function1<? super Byte, ? extends CharSequence> function1) {
        a.append(charSequence2);
        int i3 = 0;
        for (byte b : bArr) {
            i3++;
            if (i3 > 1) {
                a.append(charSequence);
            }
            if (i2 >= 0 && i3 > i2) {
                break;
            }
            if (function1 != null) {
                a.append(function1.invoke(Byte.valueOf(b)));
            } else {
                a.append(String.valueOf((int) b));
            }
        }
        if (i2 >= 0 && i3 > i2) {
            a.append(charSequence4);
        }
        a.append(charSequence3);
        return a;
    }

    @NotNull
    public static final String joinToString(@NotNull double[] dArr, @NotNull CharSequence charSequence, @NotNull CharSequence charSequence2, @NotNull CharSequence charSequence3, int i2, @NotNull CharSequence charSequence4, @Nullable Function1<? super Double, ? extends CharSequence> function1) {
        String sb = ((StringBuilder) joinTo(dArr, new StringBuilder(), charSequence, charSequence2, charSequence3, i2, charSequence4, function1)).toString();
        Intrinsics.checkExpressionValueIsNotNull(sb, "joinTo(StringBuilder(), \u2026ed, transform).toString()");
        return sb;
    }

    public static /* synthetic */ String joinToString$default(double[] dArr, CharSequence charSequence, CharSequence charSequence2, CharSequence charSequence3, int i2, CharSequence charSequence4, Function1 function1, int i3, Object obj) {
        if ((i3 & 1) != 0) {
            charSequence = ", ";
        }
        CharSequence charSequence5 = (i3 & 2) != 0 ? "" : charSequence2;
        CharSequence charSequence6 = (i3 & 4) == 0 ? charSequence3 : "";
        int i4 = (i3 & 8) != 0 ? -1 : i2;
        if ((i3 & 16) != 0) {
            charSequence4 = "...";
        }
        CharSequence charSequence7 = charSequence4;
        if ((i3 & 32) != 0) {
            function1 = null;
        }
        return joinToString(dArr, charSequence, charSequence5, charSequence6, i4, charSequence7, function1);
    }

    public static short last(@NotNull short[] sArr) {
        int lastIndex;
        if (!(sArr.length == 0)) {
            lastIndex = getLastIndex(sArr);
            return sArr[lastIndex];
        }
        throw new NoSuchElementException("Array is empty.");
    }

    public static int lastIndexOf(@NotNull short[] sArr, short s) {
        for (int length = sArr.length - 1; length >= 0; length--) {
            if (s == sArr[length]) {
                return length;
            }
        }
        return -1;
    }

    @Nullable
    public static final Double lastOrNull(@NotNull double[] dArr) {
        if (dArr.length == 0) {
            return null;
        }
        return Double.valueOf(dArr[dArr.length - 1]);
    }

    @NotNull
    public static final <R> List<R> map(@NotNull short[] sArr, @NotNull Function1<? super Short, ? extends R> function1) {
        ArrayList arrayList = new ArrayList(sArr.length);
        for (short s : sArr) {
            arrayList.add(function1.invoke(Short.valueOf(s)));
        }
        return arrayList;
    }

    @NotNull
    public static final <R> List<R> mapIndexed(@NotNull short[] sArr, @NotNull Function2<? super Integer, ? super Short, ? extends R> function2) {
        ArrayList arrayList = new ArrayList(sArr.length);
        int i2 = 0;
        for (short s : sArr) {
            Integer valueOf = Integer.valueOf(i2);
            i2++;
            arrayList.add(function2.invoke(valueOf, Short.valueOf(s)));
        }
        return arrayList;
    }

    @NotNull
    public static final <R, C extends Collection<? super R>> C mapIndexedTo(@NotNull int[] iArr, @NotNull C c2, @NotNull Function2<? super Integer, ? super Integer, ? extends R> function2) {
        int i2 = 0;
        for (int i3 : iArr) {
            Integer valueOf = Integer.valueOf(i2);
            i2++;
            c2.add(function2.invoke(valueOf, Integer.valueOf(i3)));
        }
        return c2;
    }

    @NotNull
    public static final <R, C extends Collection<? super R>> C mapTo(@NotNull int[] iArr, @NotNull C c2, @NotNull Function1<? super Integer, ? extends R> function1) {
        for (int i2 : iArr) {
            c2.add(function1.invoke(Integer.valueOf(i2)));
        }
        return c2;
    }

    public static final boolean none(@NotNull double[] dArr) {
        return dArr.length == 0;
    }

    @SinceKotlin(version = "1.3")
    @InlineOnly
    private static final double random(@NotNull double[] dArr) {
        return random(dArr, Random.INSTANCE);
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @InlineOnly
    private static final Double randomOrNull(@NotNull double[] dArr) {
        return randomOrNull(dArr, Random.INSTANCE);
    }

    @NotNull
    public static final List<Short> reversed(@NotNull short[] sArr) {
        List<Short> emptyList;
        if (sArr.length == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        List<Short> mutableList = toMutableList(sArr);
        CollectionsKt___CollectionsJvmKt.reverse(mutableList);
        return mutableList;
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @InlineOnly
    private static final List<Byte> scanReduce(@NotNull byte[] bArr, Function2<? super Byte, ? super Byte, Byte> function2) {
        List<Byte> emptyList;
        if (bArr.length == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        byte b = bArr[0];
        ArrayList arrayList = new ArrayList(bArr.length);
        arrayList.add(Byte.valueOf(b));
        int length = bArr.length;
        for (int i2 = 1; i2 < length; i2++) {
            b = function2.invoke(Byte.valueOf(b), Byte.valueOf(bArr[i2])).byteValue();
            arrayList.add(Byte.valueOf(b));
        }
        return arrayList;
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @InlineOnly
    private static final List<Byte> scanReduceIndexed(@NotNull byte[] bArr, Function3<? super Integer, ? super Byte, ? super Byte, Byte> function3) {
        List<Byte> emptyList;
        if (bArr.length == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        byte b = bArr[0];
        ArrayList arrayList = new ArrayList(bArr.length);
        arrayList.add(Byte.valueOf(b));
        int length = bArr.length;
        for (int i2 = 1; i2 < length; i2++) {
            b = function3.invoke(Integer.valueOf(i2), Byte.valueOf(b), Byte.valueOf(bArr[i2])).byteValue();
            arrayList.add(Byte.valueOf(b));
        }
        return arrayList;
    }

    @Nullable
    public static final Double singleOrNull(@NotNull double[] dArr) {
        if (dArr.length == 1) {
            return Double.valueOf(dArr[0]);
        }
        return null;
    }

    @NotNull
    public static final List<Integer> slice(@NotNull int[] iArr, @NotNull  Var) {
        int[] copyOfRange;
        List<Integer> emptyList;
        if (Var.isEmpty()) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        copyOfRange = ArraysKt___ArraysJvmKt.copyOfRange(iArr, Var.getStart().intValue(), Var.getEndInclusive().intValue() + 1);
        return ArraysKt___ArraysJvmKt.asList(copyOfRange);
    }

    @NotNull
    public static short[] sliceArray(@NotNull short[] sArr, @NotNull Collection<Integer> collection) {
        short[] sArr2 = new short[collection.size()];
        Iterator<Integer> it = collection.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            sArr2[i2] = sArr[it.next().intValue()];
            i2++;
        }
        return sArr2;
    }

    @NotNull
    public static final List<Double> sorted(@NotNull double[] dArr) {
        List<Double> asList;
        Double[] typedArray = ArraysKt___ArraysJvmKt.toTypedArray(dArr);
        if (typedArray != null) {
            ArraysKt___ArraysJvmKt.sort((Object[]) typedArray);
            asList = ArraysKt___ArraysJvmKt.asList(typedArray);
            return asList;
        }
        throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<kotlin.Any?>");
    }

    @NotNull
    public static final int[] sortedArray(@NotNull int[] iArr) {
        if (iArr.length == 0) {
            return iArr;
        }
        int[] copyOf = Arrays.copyOf(iArr, iArr.length);
        Intrinsics.checkExpressionValueIsNotNull(copyOf, "java.util.Arrays.copyOf(this, size)");
        ArraysKt___ArraysJvmKt.sort(copyOf);
        return copyOf;
    }

    @NotNull
    public static final int[] sortedArrayDescending(@NotNull int[] iArr) {
        if (iArr.length == 0) {
            return iArr;
        }
        int[] copyOf = Arrays.copyOf(iArr, iArr.length);
        Intrinsics.checkExpressionValueIsNotNull(copyOf, "java.util.Arrays.copyOf(this, size)");
        sortDescending(copyOf);
        return copyOf;
    }

    @NotNull
    public static final <R extends Comparable<? super R>> List<Double> sortedBy(@NotNull double[] dArr, @NotNull Function1<? super Double, ? extends R> function1) {
        return sortedWith(dArr, new ComparisonsKt__ComparisonsKt$compareBy$2(function1));
    }

    @NotNull
    public static final <R extends Comparable<? super R>> List<Double> sortedByDescending(@NotNull double[] dArr, @NotNull Function1<? super Double, ? extends R> function1) {
        return sortedWith(dArr, new ComparisonsKt__ComparisonsKt$compareByDescending$1(function1));
    }

    @NotNull
    public static final List<Double> sortedDescending(@NotNull double[] dArr) {
        double[] copyOf = Arrays.copyOf(dArr, dArr.length);
        Intrinsics.checkExpressionValueIsNotNull(copyOf, "java.util.Arrays.copyOf(this, size)");
        ArraysKt___ArraysJvmKt.sort(copyOf);
        return reversed(copyOf);
    }

    @NotNull
    public static final List<Double> sortedWith(@NotNull double[] dArr, @NotNull Comparator<? super Double> comparator) {
        List<Double> asList;
        Double[] typedArray = ArraysKt___ArraysJvmKt.toTypedArray(dArr);
        ArraysKt___ArraysJvmKt.sortWith(typedArray, comparator);
        asList = ArraysKt___ArraysJvmKt.asList(typedArray);
        return asList;
    }

    @NotNull
    public static final Set<Integer> subtract(@NotNull int[] iArr, @NotNull Iterable<Integer> iterable) {
        Set<Integer> mutableSet = toMutableSet(iArr);
        CollectionsKt__MutableCollectionsKt.removeAll(mutableSet, iterable);
        return mutableSet;
    }

    public static final int sumBy(@NotNull int[] iArr, @NotNull Function1<? super Integer, Integer> function1) {
        int i2 = 0;
        for (int i3 : iArr) {
            i2 += function1.invoke(Integer.valueOf(i3)).intValue();
        }
        return i2;
    }

    public static final double sumByDouble(@NotNull int[] iArr, @NotNull Function1<? super Integer, Double> function1) {
        double d = 0.0d;
        for (int i2 : iArr) {
            d += function1.invoke(Integer.valueOf(i2)).doubleValue();
        }
        return d;
    }

    @NotNull
    public static final <C extends Collection<? super Integer>> C toCollection(@NotNull int[] iArr, @NotNull C c2) {
        for (int i2 : iArr) {
            c2.add(Integer.valueOf(i2));
        }
        return c2;
    }

    @NotNull
    public static final HashSet<Double> toHashSet(@NotNull double[] dArr) {
        int mapCapacity;
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(dArr.length);
        return (HashSet) toCollection(dArr, new HashSet(mapCapacity));
    }

    @NotNull
    public static final Set<Integer> toMutableSet(@NotNull int[] iArr) {
        int mapCapacity;
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(iArr.length);
        LinkedHashSet linkedHashSet = new LinkedHashSet(mapCapacity);
        for (int i2 : iArr) {
            linkedHashSet.add(Integer.valueOf(i2));
        }
        return linkedHashSet;
    }

    @NotNull
    public static final Set<Integer> union(@NotNull int[] iArr, @NotNull Iterable<Integer> iterable) {
        Set<Integer> mutableSet = toMutableSet(iArr);
        CollectionsKt__MutableCollectionsKt.addAll(mutableSet, iterable);
        return mutableSet;
    }

    @NotNull
    public static final Iterable<IndexedValue<Double>> withIndex(@NotNull final double[] dArr) {
        return new IndexingIterable(new Function0<DoubleIterator>() { // from class: kotlin.collections.ArraysKt___ArraysKt$withIndex$7
            /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
            {
                super(0);
            }

            @Override // kotlin.jvm.functions.Function0
            @NotNull
            public final DoubleIterator invoke() {
                return ArrayIteratorsKt.iterator(dArr);
            }
        });
    }

    @NotNull
    public static final <R, V> List<V> zip(@NotNull short[] sArr, @NotNull R[] rArr, @NotNull Function2<? super Short, ? super R, ? extends V> function2) {
        int min = Math.min(sArr.length, rArr.length);
        ArrayList arrayList = new ArrayList(min);
        for (int i2 = 0; i2 < min; i2++) {
            arrayList.add(function2.invoke(Short.valueOf(sArr[i2]), rArr[i2]));
        }
        return arrayList;
    }

    public static final boolean all(@NotNull boolean[] zArr, @NotNull Function1<? super Boolean, Boolean> function1) {
        for (boolean z : zArr) {
            if (!function1.invoke(Boolean.valueOf(z)).booleanValue()) {
                return false;
            }
        }
        return true;
    }

    public static final boolean any(@NotNull boolean[] zArr) {
        return !(zArr.length == 0);
    }

    @InlineOnly
    private static final boolean component1(@NotNull boolean[] zArr) {
        return zArr[0];
    }

    @InlineOnly
    private static final boolean component2(@NotNull boolean[] zArr) {
        return zArr[1];
    }

    @InlineOnly
    private static final boolean component3(@NotNull boolean[] zArr) {
        return zArr[2];
    }

    @InlineOnly
    private static final boolean component4(@NotNull boolean[] zArr) {
        return zArr[3];
    }

    @InlineOnly
    private static final boolean component5(@NotNull boolean[] zArr) {
        return zArr[4];
    }

    public static final boolean contains(@NotNull boolean[] zArr, boolean z) {
        return indexOf(zArr, z) >= 0;
    }

    @InlineOnly
    private static final int count(@NotNull boolean[] zArr) {
        return zArr.length;
    }

    @NotNull
    public static final List<Boolean> distinct(@NotNull boolean[] zArr) {
        List<Boolean> list;
        list = CollectionsKt___CollectionsKt.toList(toMutableSet(zArr));
        return list;
    }

    @InlineOnly
    private static final boolean elementAtOrElse(@NotNull boolean[] zArr, int i2, Function1<? super Integer, Boolean> function1) {
        return (i2 < 0 || i2 > getLastIndex(zArr)) ? function1.invoke(Integer.valueOf(i2)).booleanValue() : zArr[i2];
    }

    @InlineOnly
    private static final Boolean elementAtOrNull(@NotNull boolean[] zArr, int i2) {
        return getOrNull(zArr, i2);
    }

    @NotNull
    public static final <C extends Collection<? super Boolean>> C filterNotTo(@NotNull boolean[] zArr, @NotNull C c2, @NotNull Function1<? super Boolean, Boolean> function1) {
        for (boolean z : zArr) {
            if (!function1.invoke(Boolean.valueOf(z)).booleanValue()) {
                c2.add(Boolean.valueOf(z));
            }
        }
        return c2;
    }

    @NotNull
    public static final <C extends Collection<? super Boolean>> C filterTo(@NotNull boolean[] zArr, @NotNull C c2, @NotNull Function1<? super Boolean, Boolean> function1) {
        for (boolean z : zArr) {
            if (function1.invoke(Boolean.valueOf(z)).booleanValue()) {
                c2.add(Boolean.valueOf(z));
            }
        }
        return c2;
    }

    @InlineOnly
    private static final Boolean find(@NotNull boolean[] zArr, Function1<? super Boolean, Boolean> function1) {
        for (boolean z : zArr) {
            if (function1.invoke(Boolean.valueOf(z)).booleanValue()) {
                return Boolean.valueOf(z);
            }
        }
        return null;
    }

    @Nullable
    public static final Boolean firstOrNull(@NotNull boolean[] zArr) {
        if (zArr.length == 0) {
            return null;
        }
        return Boolean.valueOf(zArr[0]);
    }

    public static final <R> R fold(@NotNull boolean[] zArr, R r, @NotNull Function2<? super R, ? super Boolean, ? extends R> function2) {
        for (boolean z : zArr) {
            r = function2.invoke(r, Boolean.valueOf(z));
        }
        return r;
    }

    public static final <R> R foldIndexed(@NotNull boolean[] zArr, R r, @NotNull Function3<? super Integer, ? super R, ? super Boolean, ? extends R> function3) {
        int i2 = 0;
        for (boolean z : zArr) {
            Integer valueOf = Integer.valueOf(i2);
            i2++;
            r = function3.invoke(valueOf, r, Boolean.valueOf(z));
        }
        return r;
    }

    public static final void forEach(@NotNull boolean[] zArr, @NotNull Function1<? super Boolean, Unit> function1) {
        for (boolean z : zArr) {
            function1.invoke(Boolean.valueOf(z));
        }
    }

    public static final void forEachIndexed(@NotNull boolean[] zArr, @NotNull Function2<? super Integer, ? super Boolean, Unit> function2) {
        int i2 = 0;
        for (boolean z : zArr) {
            Integer valueOf = Integer.valueOf(i2);
            i2++;
            function2.invoke(valueOf, Boolean.valueOf(z));
        }
    }

    @NotNull
    public static final  getIndices(@NotNull boolean[] zArr) {
        return new (0, getLastIndex(zArr));
    }

    public static final int getLastIndex(@NotNull boolean[] zArr) {
        return zArr.length - 1;
    }

    @InlineOnly
    private static final boolean getOrElse(@NotNull boolean[] zArr, int i2, Function1<? super Integer, Boolean> function1) {
        return (i2 < 0 || i2 > getLastIndex(zArr)) ? function1.invoke(Integer.valueOf(i2)).booleanValue() : zArr[i2];
    }

    @Nullable
    public static final Boolean getOrNull(@NotNull boolean[] zArr, int i2) {
        if (i2 < 0 || i2 > getLastIndex(zArr)) {
            return null;
        }
        return Boolean.valueOf(zArr[i2]);
    }

    @NotNull
    public static final <K, M extends Map<? super K, List<Byte>>> M groupByTo(@NotNull byte[] bArr, @NotNull M m2, @NotNull Function1<? super Byte, ? extends K> function1) {
        for (byte b : bArr) {
            K invoke = function1.invoke(Byte.valueOf(b));
            Object obj = m2.get(invoke);
            if (obj == null) {
                obj = new ArrayList();
                m2.put(invoke, obj);
            }
            ((List) obj).add(Byte.valueOf(b));
        }
        return m2;
    }

    @InlineOnly
    private static final boolean isEmpty(@NotNull boolean[] zArr) {
        return zArr.length == 0;
    }

    @InlineOnly
    private static final boolean isNotEmpty(@NotNull boolean[] zArr) {
        return !(zArr.length == 0);
    }

    @NotNull
    public static final String joinToString(@NotNull boolean[] zArr, @NotNull CharSequence charSequence, @NotNull CharSequence charSequence2, @NotNull CharSequence charSequence3, int i2, @NotNull CharSequence charSequence4, @Nullable Function1<? super Boolean, ? extends CharSequence> function1) {
        String sb = ((StringBuilder) joinTo(zArr, new StringBuilder(), charSequence, charSequence2, charSequence3, i2, charSequence4, function1)).toString();
        Intrinsics.checkExpressionValueIsNotNull(sb, "joinTo(StringBuilder(), \u2026ed, transform).toString()");
        return sb;
    }

    public static /* synthetic */ String joinToString$default(boolean[] zArr, CharSequence charSequence, CharSequence charSequence2, CharSequence charSequence3, int i2, CharSequence charSequence4, Function1 function1, int i3, Object obj) {
        if ((i3 & 1) != 0) {
            charSequence = ", ";
        }
        CharSequence charSequence5 = (i3 & 2) != 0 ? "" : charSequence2;
        CharSequence charSequence6 = (i3 & 4) == 0 ? charSequence3 : "";
        int i4 = (i3 & 8) != 0 ? -1 : i2;
        if ((i3 & 16) != 0) {
            charSequence4 = "...";
        }
        CharSequence charSequence7 = charSequence4;
        if ((i3 & 32) != 0) {
            function1 = null;
        }
        return joinToString(zArr, charSequence, charSequence5, charSequence6, i4, charSequence7, function1);
    }

    @Nullable
    public static final Boolean lastOrNull(@NotNull boolean[] zArr) {
        if (zArr.length == 0) {
            return null;
        }
        return Boolean.valueOf(zArr[zArr.length - 1]);
    }

    @SinceKotlin(version = "1.1")
    @Nullable
    public static final Float max(@NotNull Float[] fArr) {
        int i2 = 1;
        if (fArr.length == 0) {
            return null;
        }
        float floatValue = fArr[0].floatValue();
        if (Float.isNaN(floatValue)) {
            return Float.valueOf(floatValue);
        }
        int lastIndex = getLastIndex(fArr);
        if (1 <= lastIndex) {
            while (true) {
                float floatValue2 = fArr[i2].floatValue();
                if (!Float.isNaN(floatValue2)) {
                    if (floatValue < floatValue2) {
                        floatValue = floatValue2;
                    }
                    if (i2 == lastIndex) {
                        break;
                    }
                    i2++;
                } else {
                    return Float.valueOf(floatValue2);
                }
            }
        }
        return Float.valueOf(floatValue);
    }

    @Nullable
    public static final <R extends Comparable<? super R>> Byte maxBy(@NotNull byte[] bArr, @NotNull Function1<? super Byte, ? extends R> function1) {
        int lastIndex;
        int i2 = 1;
        if (bArr.length == 0) {
            return null;
        }
        byte b = bArr[0];
        lastIndex = getLastIndex(bArr);
        if (lastIndex == 0) {
            return Byte.valueOf(b);
        }
        R invoke = function1.invoke(Byte.valueOf(b));
        if (1 <= lastIndex) {
            while (true) {
                byte b2 = bArr[i2];
                R invoke2 = function1.invoke(Byte.valueOf(b2));
                if (invoke.compareTo(invoke2) < 0) {
                    b = b2;
                    invoke = invoke2;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Byte.valueOf(b);
    }

    @SinceKotlin(version = "1.1")
    @Nullable
    public static final Float min(@NotNull Float[] fArr) {
        int i2 = 1;
        if (fArr.length == 0) {
            return null;
        }
        float floatValue = fArr[0].floatValue();
        if (Float.isNaN(floatValue)) {
            return Float.valueOf(floatValue);
        }
        int lastIndex = getLastIndex(fArr);
        if (1 <= lastIndex) {
            while (true) {
                float floatValue2 = fArr[i2].floatValue();
                if (!Float.isNaN(floatValue2)) {
                    if (floatValue > floatValue2) {
                        floatValue = floatValue2;
                    }
                    if (i2 == lastIndex) {
                        break;
                    }
                    i2++;
                } else {
                    return Float.valueOf(floatValue2);
                }
            }
        }
        return Float.valueOf(floatValue);
    }

    @Nullable
    public static final <R extends Comparable<? super R>> Byte minBy(@NotNull byte[] bArr, @NotNull Function1<? super Byte, ? extends R> function1) {
        int lastIndex;
        int i2 = 1;
        if (bArr.length == 0) {
            return null;
        }
        byte b = bArr[0];
        lastIndex = getLastIndex(bArr);
        if (lastIndex == 0) {
            return Byte.valueOf(b);
        }
        R invoke = function1.invoke(Byte.valueOf(b));
        if (1 <= lastIndex) {
            while (true) {
                byte b2 = bArr[i2];
                R invoke2 = function1.invoke(Byte.valueOf(b2));
                if (invoke.compareTo(invoke2) > 0) {
                    b = b2;
                    invoke = invoke2;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Byte.valueOf(b);
    }

    public static final boolean none(@NotNull boolean[] zArr) {
        return zArr.length == 0;
    }

    @NotNull
    public static final Pair<List<Byte>, List<Byte>> partition(@NotNull byte[] bArr, @NotNull Function1<? super Byte, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        ArrayList arrayList2 = new ArrayList();
        for (byte b : bArr) {
            if (function1.invoke(Byte.valueOf(b)).booleanValue()) {
                arrayList.add(Byte.valueOf(b));
            } else {
                arrayList2.add(Byte.valueOf(b));
            }
        }
        return new Pair<>(arrayList, arrayList2);
    }

    @SinceKotlin(version = "1.3")
    @InlineOnly
    private static final boolean random(@NotNull boolean[] zArr) {
        return random(zArr, Random.INSTANCE);
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @InlineOnly
    private static final Boolean randomOrNull(@NotNull boolean[] zArr) {
        return randomOrNull(zArr, Random.INSTANCE);
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @Nullable
    public static final Short reduceRightOrNull(@NotNull short[] sArr, @NotNull Function2<? super Short, ? super Short, Short> function2) {
        int lastIndex;
        lastIndex = getLastIndex(sArr);
        if (lastIndex < 0) {
            return null;
        }
        short s = sArr[lastIndex];
        for (int i2 = lastIndex - 1; i2 >= 0; i2--) {
            s = function2.invoke(Short.valueOf(sArr[i2]), Short.valueOf(s)).shortValue();
        }
        return Short.valueOf(s);
    }

    @Nullable
    public static final Boolean singleOrNull(@NotNull boolean[] zArr) {
        if (zArr.length == 1) {
            return Boolean.valueOf(zArr[0]);
        }
        return null;
    }

    public static final void sortDescending(@NotNull int[] iArr) {
        if (iArr.length > 1) {
            ArraysKt___ArraysJvmKt.sort(iArr);
            reverse(iArr);
        }
    }

    @NotNull
    public static final List<Character> sorted(@NotNull char[] cArr) {
        List<Character> asList;
        Character[] typedArray = ArraysKt___ArraysJvmKt.toTypedArray(cArr);
        if (typedArray != null) {
            ArraysKt___ArraysJvmKt.sort((Object[]) typedArray);
            asList = ArraysKt___ArraysJvmKt.asList(typedArray);
            return asList;
        }
        throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<kotlin.Any?>");
    }

    @NotNull
    public static final <R extends Comparable<? super R>> List<Boolean> sortedBy(@NotNull boolean[] zArr, @NotNull Function1<? super Boolean, ? extends R> function1) {
        return sortedWith(zArr, new ComparisonsKt__ComparisonsKt$compareBy$2(function1));
    }

    @NotNull
    public static final <R extends Comparable<? super R>> List<Boolean> sortedByDescending(@NotNull boolean[] zArr, @NotNull Function1<? super Boolean, ? extends R> function1) {
        return sortedWith(zArr, new ComparisonsKt__ComparisonsKt$compareByDescending$1(function1));
    }

    @NotNull
    public static final List<Character> sortedDescending(@NotNull char[] cArr) {
        char[] copyOf = Arrays.copyOf(cArr, cArr.length);
        Intrinsics.checkExpressionValueIsNotNull(copyOf, "java.util.Arrays.copyOf(this, size)");
        ArraysKt___ArraysJvmKt.sort(copyOf);
        return reversed(copyOf);
    }

    @NotNull
    public static final List<Boolean> sortedWith(@NotNull boolean[] zArr, @NotNull Comparator<? super Boolean> comparator) {
        List<Boolean> asList;
        Boolean[] typedArray = ArraysKt___ArraysJvmKt.toTypedArray(zArr);
        ArraysKt___ArraysJvmKt.sortWith(typedArray, comparator);
        asList = ArraysKt___ArraysJvmKt.asList(typedArray);
        return asList;
    }

    @NotNull
    public static final List<Byte> take(@NotNull byte[] bArr, int i2) {
        List<Byte> listOf;
        List<Byte> emptyList;
        if (!(i2 >= 0)) {
            throw new IllegalArgumentException(("Requested element count " + i2 + " is less than zero.").toString());
        } else if (i2 == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        } else if (i2 >= bArr.length) {
            return toList(bArr);
        } else {
            if (i2 == 1) {
                listOf = CollectionsKt__CollectionsJVMKt.listOf(Byte.valueOf(bArr[0]));
                return listOf;
            }
            ArrayList arrayList = new ArrayList(i2);
            int i3 = 0;
            for (byte b : bArr) {
                arrayList.add(Byte.valueOf(b));
                i3++;
                if (i3 == i2) {
                    break;
                }
            }
            return arrayList;
        }
    }

    @NotNull
    public static final List<Byte> takeLast(@NotNull byte[] bArr, int i2) {
        List<Byte> listOf;
        List<Byte> emptyList;
        if (!(i2 >= 0)) {
            throw new IllegalArgumentException(("Requested element count " + i2 + " is less than zero.").toString());
        } else if (i2 == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        } else {
            int length = bArr.length;
            if (i2 >= length) {
                return toList(bArr);
            }
            if (i2 == 1) {
                listOf = CollectionsKt__CollectionsJVMKt.listOf(Byte.valueOf(bArr[length - 1]));
                return listOf;
            }
            ArrayList arrayList = new ArrayList(i2);
            for (int i3 = length - i2; i3 < length; i3++) {
                arrayList.add(Byte.valueOf(bArr[i3]));
            }
            return arrayList;
        }
    }

    @NotNull
    public static final HashSet<Boolean> toHashSet(@NotNull boolean[] zArr) {
        int mapCapacity;
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(zArr.length);
        return (HashSet) toCollection(zArr, new HashSet(mapCapacity));
    }

    @NotNull
    public static final List<Long> toMutableList(@NotNull long[] jArr) {
        ArrayList arrayList = new ArrayList(jArr.length);
        for (long j2 : jArr) {
            arrayList.add(Long.valueOf(j2));
        }
        return arrayList;
    }

    @NotNull
    public static final Iterable<IndexedValue<Boolean>> withIndex(@NotNull final boolean[] zArr) {
        return new IndexingIterable(new Function0<BooleanIterator>() { // from class: kotlin.collections.ArraysKt___ArraysKt$withIndex$8
            /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
            {
                super(0);
            }

            @Override // kotlin.jvm.functions.Function0
            @NotNull
            public final BooleanIterator invoke() {
                return ArrayIteratorsKt.iterator(zArr);
            }
        });
    }

    public static final boolean all(@NotNull char[] cArr, @NotNull Function1<? super Character, Boolean> function1) {
        for (char c2 : cArr) {
            if (!function1.invoke(Character.valueOf(c2)).booleanValue()) {
                return false;
            }
        }
        return true;
    }

    public static final boolean any(@NotNull char[] cArr) {
        return !(cArr.length == 0);
    }

    @NotNull
    public static final Iterable<Long> asIterable(@NotNull long[] jArr) {
        List emptyList;
        if (jArr.length == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        return new ArraysKt___ArraysKt$asIterable$$inlined$Iterable$5(jArr);
    }

    @NotNull
    public static final Sequence<Long> asSequence(@NotNull final long[] jArr) {
        Sequence<Long> emptySequence;
        if (jArr.length == 0) {
            emptySequence = SequencesKt__SequencesKt.emptySequence();
            return emptySequence;
        }
        return new Sequence<Long>() { // from class: kotlin.collections.ArraysKt___ArraysKt$asSequence$$inlined$Sequence$5
            @Override // kotlin.sequences.Sequence
            @NotNull
            public Iterator<Long> iterator() {
                return ArrayIteratorsKt.iterator(jArr);
            }
        };
    }

    @NotNull
    public static final <K, V> Map<K, V> associate(@NotNull short[] sArr, @NotNull Function1<? super Short, ? extends Pair<? extends K, ? extends V>> function1) {
        int mapCapacity;
        int coerceAtLeast;
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(sArr.length);
        coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(mapCapacity, 16);
        LinkedHashMap linkedHashMap = new LinkedHashMap(coerceAtLeast);
        for (short s : sArr) {
            Pair<? extends K, ? extends V> invoke = function1.invoke(Short.valueOf(s));
            linkedHashMap.put(invoke.getFirst(), invoke.getSecond());
        }
        return linkedHashMap;
    }

    @NotNull
    public static final <K> Map<K, Short> associateBy(@NotNull short[] sArr, @NotNull Function1<? super Short, ? extends K> function1) {
        int mapCapacity;
        int coerceAtLeast;
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(sArr.length);
        coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(mapCapacity, 16);
        LinkedHashMap linkedHashMap = new LinkedHashMap(coerceAtLeast);
        for (short s : sArr) {
            linkedHashMap.put(function1.invoke(Short.valueOf(s)), Short.valueOf(s));
        }
        return linkedHashMap;
    }

    @NotNull
    public static final <K, M extends Map<? super K, ? super Long>> M associateByTo(@NotNull long[] jArr, @NotNull M m2, @NotNull Function1<? super Long, ? extends K> function1) {
        for (long j2 : jArr) {
            m2.put(function1.invoke(Long.valueOf(j2)), Long.valueOf(j2));
        }
        return m2;
    }

    @NotNull
    public static final <K, V, M extends Map<? super K, ? super V>> M associateTo(@NotNull long[] jArr, @NotNull M m2, @NotNull Function1<? super Long, ? extends Pair<? extends K, ? extends V>> function1) {
        for (long j2 : jArr) {
            Pair<? extends K, ? extends V> invoke = function1.invoke(Long.valueOf(j2));
            m2.put(invoke.getFirst(), invoke.getSecond());
        }
        return m2;
    }

    @InlineOnly
    private static final char component1(@NotNull char[] cArr) {
        return cArr[0];
    }

    @InlineOnly
    private static final char component2(@NotNull char[] cArr) {
        return cArr[1];
    }

    @InlineOnly
    private static final char component3(@NotNull char[] cArr) {
        return cArr[2];
    }

    @InlineOnly
    private static final char component4(@NotNull char[] cArr) {
        return cArr[3];
    }

    @InlineOnly
    private static final char component5(@NotNull char[] cArr) {
        return cArr[4];
    }

    public static boolean contains(@NotNull char[] cArr, char c2) {
        return indexOf(cArr, c2) >= 0;
    }

    @InlineOnly
    private static final int count(@NotNull char[] cArr) {
        return cArr.length;
    }

    @NotNull
    public static final List<Character> distinct(@NotNull char[] cArr) {
        List<Character> list;
        list = CollectionsKt___CollectionsKt.toList(toMutableSet(cArr));
        return list;
    }

    @NotNull
    public static final List<Long> drop(@NotNull long[] jArr, int i2) {
        int coerceAtLeast;
        if (i2 >= 0) {
            coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(jArr.length - i2, 0);
            return takeLast(jArr, coerceAtLeast);
        }
        throw new IllegalArgumentException(("Requested element count " + i2 + " is less than zero.").toString());
    }

    @NotNull
    public static final List<Long> dropLast(@NotNull long[] jArr, int i2) {
        int coerceAtLeast;
        if (i2 >= 0) {
            coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(jArr.length - i2, 0);
            return take(jArr, coerceAtLeast);
        }
        throw new IllegalArgumentException(("Requested element count " + i2 + " is less than zero.").toString());
    }

    @NotNull
    public static final List<Short> dropLastWhile(@NotNull short[] sArr, @NotNull Function1<? super Short, Boolean> function1) {
        int lastIndex;
        List<Short> emptyList;
        for (lastIndex = getLastIndex(sArr); lastIndex >= 0; lastIndex--) {
            if (!function1.invoke(Short.valueOf(sArr[lastIndex])).booleanValue()) {
                return take(sArr, lastIndex + 1);
            }
        }
        emptyList = CollectionsKt__CollectionsKt.emptyList();
        return emptyList;
    }

    @InlineOnly
    private static final char elementAtOrElse(@NotNull char[] cArr, int i2, Function1<? super Integer, Character> function1) {
        return (i2 < 0 || i2 > getLastIndex(cArr)) ? function1.invoke(Integer.valueOf(i2)).charValue() : cArr[i2];
    }

    @InlineOnly
    private static final Character elementAtOrNull(@NotNull char[] cArr, int i2) {
        return getOrNull(cArr, i2);
    }

    @NotNull
    public static final List<Long> filter(@NotNull long[] jArr, @NotNull Function1<? super Long, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        for (long j2 : jArr) {
            if (function1.invoke(Long.valueOf(j2)).booleanValue()) {
                arrayList.add(Long.valueOf(j2));
            }
        }
        return arrayList;
    }

    @NotNull
    public static final <C extends Collection<? super Long>> C filterIndexedTo(@NotNull long[] jArr, @NotNull C c2, @NotNull Function2<? super Integer, ? super Long, Boolean> function2) {
        int length = jArr.length;
        int i2 = 0;
        int i3 = 0;
        while (i2 < length) {
            long j2 = jArr[i2];
            int i4 = i3 + 1;
            if (function2.invoke(Integer.valueOf(i3), Long.valueOf(j2)).booleanValue()) {
                c2.add(Long.valueOf(j2));
            }
            i2++;
            i3 = i4;
        }
        return c2;
    }

    @NotNull
    public static final List<Long> filterNot(@NotNull long[] jArr, @NotNull Function1<? super Long, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        for (long j2 : jArr) {
            if (!function1.invoke(Long.valueOf(j2)).booleanValue()) {
                arrayList.add(Long.valueOf(j2));
            }
        }
        return arrayList;
    }

    @NotNull
    public static final <C extends Collection<? super Character>> C filterNotTo(@NotNull char[] cArr, @NotNull C c2, @NotNull Function1<? super Character, Boolean> function1) {
        for (char c3 : cArr) {
            if (!function1.invoke(Character.valueOf(c3)).booleanValue()) {
                c2.add(Character.valueOf(c3));
            }
        }
        return c2;
    }

    @NotNull
    public static final <C extends Collection<? super Character>> C filterTo(@NotNull char[] cArr, @NotNull C c2, @NotNull Function1<? super Character, Boolean> function1) {
        for (char c3 : cArr) {
            if (function1.invoke(Character.valueOf(c3)).booleanValue()) {
                c2.add(Character.valueOf(c3));
            }
        }
        return c2;
    }

    @InlineOnly
    private static final Character find(@NotNull char[] cArr, Function1<? super Character, Boolean> function1) {
        for (char c2 : cArr) {
            if (function1.invoke(Character.valueOf(c2)).booleanValue()) {
                return Character.valueOf(c2);
            }
        }
        return null;
    }

    @Nullable
    public static final Character firstOrNull(@NotNull char[] cArr) {
        if (cArr.length == 0) {
            return null;
        }
        return Character.valueOf(cArr[0]);
    }

    @NotNull
    public static final <R> List<R> flatMap(@NotNull short[] sArr, @NotNull Function1<? super Short, ? extends Iterable<? extends R>> function1) {
        ArrayList arrayList = new ArrayList();
        for (short s : sArr) {
            CollectionsKt__MutableCollectionsKt.addAll(arrayList, function1.invoke(Short.valueOf(s)));
        }
        return arrayList;
    }

    public static final <R> R fold(@NotNull char[] cArr, R r, @NotNull Function2<? super R, ? super Character, ? extends R> function2) {
        for (char c2 : cArr) {
            r = function2.invoke(r, Character.valueOf(c2));
        }
        return r;
    }

    public static final <R> R foldIndexed(@NotNull char[] cArr, R r, @NotNull Function3<? super Integer, ? super R, ? super Character, ? extends R> function3) {
        int i2 = 0;
        for (char c2 : cArr) {
            Integer valueOf = Integer.valueOf(i2);
            i2++;
            r = function3.invoke(valueOf, r, Character.valueOf(c2));
        }
        return r;
    }

    public static final <R> R foldRight(@NotNull long[] jArr, R r, @NotNull Function2<? super Long, ? super R, ? extends R> function2) {
        int lastIndex;
        for (lastIndex = getLastIndex(jArr); lastIndex >= 0; lastIndex--) {
            r = function2.invoke(Long.valueOf(jArr[lastIndex]), r);
        }
        return r;
    }

    public static final <R> R foldRightIndexed(@NotNull long[] jArr, R r, @NotNull Function3<? super Integer, ? super Long, ? super R, ? extends R> function3) {
        int lastIndex;
        for (lastIndex = getLastIndex(jArr); lastIndex >= 0; lastIndex--) {
            r = function3.invoke(Integer.valueOf(lastIndex), Long.valueOf(jArr[lastIndex]), r);
        }
        return r;
    }

    public static final void forEach(@NotNull char[] cArr, @NotNull Function1<? super Character, Unit> function1) {
        for (char c2 : cArr) {
            function1.invoke(Character.valueOf(c2));
        }
    }

    public static final void forEachIndexed(@NotNull char[] cArr, @NotNull Function2<? super Integer, ? super Character, Unit> function2) {
        int i2 = 0;
        for (char c2 : cArr) {
            Integer valueOf = Integer.valueOf(i2);
            i2++;
            function2.invoke(valueOf, Character.valueOf(c2));
        }
    }

    @NotNull
    public static final  getIndices(@NotNull char[] cArr) {
        return new (0, getLastIndex(cArr));
    }

    public static final int getLastIndex(@NotNull char[] cArr) {
        return cArr.length - 1;
    }

    @InlineOnly
    private static final char getOrElse(@NotNull char[] cArr, int i2, Function1<? super Integer, Character> function1) {
        return (i2 < 0 || i2 > getLastIndex(cArr)) ? function1.invoke(Integer.valueOf(i2)).charValue() : cArr[i2];
    }

    @Nullable
    public static final Character getOrNull(@NotNull char[] cArr, int i2) {
        if (i2 < 0 || i2 > getLastIndex(cArr)) {
            return null;
        }
        return Character.valueOf(cArr[i2]);
    }

    @NotNull
    public static final <K> Map<K, List<Byte>> groupBy(@NotNull byte[] bArr, @NotNull Function1<? super Byte, ? extends K> function1) {
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        for (byte b : bArr) {
            K invoke = function1.invoke(Byte.valueOf(b));
            Object obj = linkedHashMap.get(invoke);
            if (obj == null) {
                obj = new ArrayList();
                linkedHashMap.put(invoke, obj);
            }
            ((List) obj).add(Byte.valueOf(b));
        }
        return linkedHashMap;
    }

    public static int indexOf(@NotNull int[] iArr, int i2) {
        int length = iArr.length;
        for (int i3 = 0; i3 < length; i3++) {
            if (i2 == iArr[i3]) {
                return i3;
            }
        }
        return -1;
    }

    public static final int indexOfFirst(@NotNull long[] jArr, @NotNull Function1<? super Long, Boolean> function1) {
        int length = jArr.length;
        for (int i2 = 0; i2 < length; i2++) {
            if (function1.invoke(Long.valueOf(jArr[i2])).booleanValue()) {
                return i2;
            }
        }
        return -1;
    }

    public static final int indexOfLast(@NotNull long[] jArr, @NotNull Function1<? super Long, Boolean> function1) {
        for (int length = jArr.length - 1; length >= 0; length--) {
            if (function1.invoke(Long.valueOf(jArr[length])).booleanValue()) {
                return length;
            }
        }
        return -1;
    }

    @NotNull
    public static final Set<Long> intersect(@NotNull long[] jArr, @NotNull Iterable<Long> iterable) {
        Set<Long> mutableSet = toMutableSet(jArr);
        CollectionsKt__MutableCollectionsKt.retainAll(mutableSet, iterable);
        return mutableSet;
    }

    @InlineOnly
    private static final boolean isEmpty(@NotNull char[] cArr) {
        return cArr.length == 0;
    }

    @InlineOnly
    private static final boolean isNotEmpty(@NotNull char[] cArr) {
        return !(cArr.length == 0);
    }

    @NotNull
    public static final String joinToString(@NotNull char[] cArr, @NotNull CharSequence charSequence, @NotNull CharSequence charSequence2, @NotNull CharSequence charSequence3, int i2, @NotNull CharSequence charSequence4, @Nullable Function1<? super Character, ? extends CharSequence> function1) {
        String sb = ((StringBuilder) joinTo(cArr, new StringBuilder(), charSequence, charSequence2, charSequence3, i2, charSequence4, function1)).toString();
        Intrinsics.checkExpressionValueIsNotNull(sb, "joinTo(StringBuilder(), \u2026ed, transform).toString()");
        return sb;
    }

    public static /* synthetic */ String joinToString$default(char[] cArr, CharSequence charSequence, CharSequence charSequence2, CharSequence charSequence3, int i2, CharSequence charSequence4, Function1 function1, int i3, Object obj) {
        if ((i3 & 1) != 0) {
            charSequence = ", ";
        }
        CharSequence charSequence5 = (i3 & 2) != 0 ? "" : charSequence2;
        CharSequence charSequence6 = (i3 & 4) == 0 ? charSequence3 : "";
        int i4 = (i3 & 8) != 0 ? -1 : i2;
        if ((i3 & 16) != 0) {
            charSequence4 = "...";
        }
        CharSequence charSequence7 = charSequence4;
        if ((i3 & 32) != 0) {
            function1 = null;
        }
        return joinToString(cArr, charSequence, charSequence5, charSequence6, i4, charSequence7, (Function1<? super Character, ? extends CharSequence>) function1);
    }

    public static int lastIndexOf(@NotNull int[] iArr, int i2) {
        for (int length = iArr.length - 1; length >= 0; length--) {
            if (i2 == iArr[length]) {
                return length;
            }
        }
        return -1;
    }

    @Nullable
    public static final Character lastOrNull(@NotNull char[] cArr) {
        if (cArr.length == 0) {
            return null;
        }
        return Character.valueOf(cArr[cArr.length - 1]);
    }

    @NotNull
    public static final <R, C extends Collection<? super R>> C mapIndexedTo(@NotNull long[] jArr, @NotNull C c2, @NotNull Function2<? super Integer, ? super Long, ? extends R> function2) {
        int i2 = 0;
        for (long j2 : jArr) {
            Integer valueOf = Integer.valueOf(i2);
            i2++;
            c2.add(function2.invoke(valueOf, Long.valueOf(j2)));
        }
        return c2;
    }

    @NotNull
    public static final <R, C extends Collection<? super R>> C mapTo(@NotNull long[] jArr, @NotNull C c2, @NotNull Function1<? super Long, ? extends R> function1) {
        for (long j2 : jArr) {
            c2.add(function1.invoke(Long.valueOf(j2)));
        }
        return c2;
    }

    public static final boolean none(@NotNull char[] cArr) {
        return cArr.length == 0;
    }

    @SinceKotlin(version = "1.3")
    @InlineOnly
    private static final char random(@NotNull char[] cArr) {
        return random(cArr, (Random) Random.INSTANCE);
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @InlineOnly
    private static final Character randomOrNull(@NotNull char[] cArr) {
        return randomOrNull(cArr, (Random) Random.INSTANCE);
    }

    public static final short reduceRight(@NotNull short[] sArr, @NotNull Function2<? super Short, ? super Short, Short> function2) {
        int lastIndex;
        lastIndex = getLastIndex(sArr);
        if (lastIndex >= 0) {
            short s = sArr[lastIndex];
            for (int i2 = lastIndex - 1; i2 >= 0; i2--) {
                s = function2.invoke(Short.valueOf(sArr[i2]), Short.valueOf(s)).shortValue();
            }
            return s;
        }
        throw new UnsupportedOperationException("Empty array can't be reduced.");
    }

    public static final short reduceRightIndexed(@NotNull short[] sArr, @NotNull Function3<? super Integer, ? super Short, ? super Short, Short> function3) {
        int lastIndex;
        lastIndex = getLastIndex(sArr);
        if (lastIndex >= 0) {
            short s = sArr[lastIndex];
            for (int i2 = lastIndex - 1; i2 >= 0; i2--) {
                s = function3.invoke(Integer.valueOf(i2), Short.valueOf(sArr[i2]), Short.valueOf(s)).shortValue();
            }
            return s;
        }
        throw new UnsupportedOperationException("Empty array can't be reduced.");
    }

    @NotNull
    public static short[] reversedArray(@NotNull short[] sArr) {
        int lastIndex;
        int i2 = 0;
        if (sArr.length == 0) {
            return sArr;
        }
        short[] sArr2 = new short[sArr.length];
        lastIndex = getLastIndex(sArr);
        if (lastIndex >= 0) {
            while (true) {
                sArr2[lastIndex - i2] = sArr[i2];
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return sArr2;
    }

    public static short single(@NotNull short[] sArr) {
        int length = sArr.length;
        if (length != 0) {
            if (length == 1) {
                return sArr[0];
            }
            throw new IllegalArgumentException("Array has more than one element.");
        }
        throw new NoSuchElementException("Array is empty.");
    }

    @Nullable
    public static final Character singleOrNull(@NotNull char[] cArr) {
        if (cArr.length == 1) {
            return Character.valueOf(cArr[0]);
        }
        return null;
    }

    @NotNull
    public static final List<Long> slice(@NotNull long[] jArr, @NotNull  Var) {
        long[] copyOfRange;
        List<Long> emptyList;
        if (Var.isEmpty()) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        copyOfRange = ArraysKt___ArraysJvmKt.copyOfRange(jArr, Var.getStart().intValue(), Var.getEndInclusive().intValue() + 1);
        return ArraysKt___ArraysJvmKt.asList(copyOfRange);
    }

    @NotNull
    public static final long[] sortedArray(@NotNull long[] jArr) {
        if (jArr.length == 0) {
            return jArr;
        }
        long[] copyOf = Arrays.copyOf(jArr, jArr.length);
        Intrinsics.checkExpressionValueIsNotNull(copyOf, "java.util.Arrays.copyOf(this, size)");
        ArraysKt___ArraysJvmKt.sort(copyOf);
        return copyOf;
    }

    @NotNull
    public static final long[] sortedArrayDescending(@NotNull long[] jArr) {
        if (jArr.length == 0) {
            return jArr;
        }
        long[] copyOf = Arrays.copyOf(jArr, jArr.length);
        Intrinsics.checkExpressionValueIsNotNull(copyOf, "java.util.Arrays.copyOf(this, size)");
        sortDescending(copyOf);
        return copyOf;
    }

    @NotNull
    public static final <R extends Comparable<? super R>> List<Character> sortedBy(@NotNull char[] cArr, @NotNull Function1<? super Character, ? extends R> function1) {
        return sortedWith(cArr, (Comparator<? super Character>) new ComparisonsKt__ComparisonsKt$compareBy$2(function1));
    }

    @NotNull
    public static final <R extends Comparable<? super R>> List<Character> sortedByDescending(@NotNull char[] cArr, @NotNull Function1<? super Character, ? extends R> function1) {
        return sortedWith(cArr, (Comparator<? super Character>) new ComparisonsKt__ComparisonsKt$compareByDescending$1(function1));
    }

    @NotNull
    public static final List<Character> sortedWith(@NotNull char[] cArr, @NotNull Comparator<? super Character> comparator) {
        List<Character> asList;
        Character[] typedArray = ArraysKt___ArraysJvmKt.toTypedArray(cArr);
        ArraysKt___ArraysJvmKt.sortWith(typedArray, comparator);
        asList = ArraysKt___ArraysJvmKt.asList(typedArray);
        return asList;
    }

    @NotNull
    public static final Set<Long> subtract(@NotNull long[] jArr, @NotNull Iterable<Long> iterable) {
        Set<Long> mutableSet = toMutableSet(jArr);
        CollectionsKt__MutableCollectionsKt.removeAll(mutableSet, iterable);
        return mutableSet;
    }

    public static final int sumBy(@NotNull long[] jArr, @NotNull Function1<? super Long, Integer> function1) {
        int i2 = 0;
        for (long j2 : jArr) {
            i2 += function1.invoke(Long.valueOf(j2)).intValue();
        }
        return i2;
    }

    public static final double sumByDouble(@NotNull long[] jArr, @NotNull Function1<? super Long, Double> function1) {
        double d = 0.0d;
        for (long j2 : jArr) {
            d += function1.invoke(Long.valueOf(j2)).doubleValue();
        }
        return d;
    }

    @NotNull
    public static final List<Short> takeLastWhile(@NotNull short[] sArr, @NotNull Function1<? super Short, Boolean> function1) {
        int lastIndex;
        for (lastIndex = getLastIndex(sArr); lastIndex >= 0; lastIndex--) {
            if (!function1.invoke(Short.valueOf(sArr[lastIndex])).booleanValue()) {
                return drop(sArr, lastIndex + 1);
            }
        }
        return toList(sArr);
    }

    @NotNull
    public static final List<Short> takeWhile(@NotNull short[] sArr, @NotNull Function1<? super Short, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        for (short s : sArr) {
            if (!function1.invoke(Short.valueOf(s)).booleanValue()) {
                break;
            }
            arrayList.add(Short.valueOf(s));
        }
        return arrayList;
    }

    @NotNull
    public static final <C extends Collection<? super Long>> C toCollection(@NotNull long[] jArr, @NotNull C c2) {
        for (long j2 : jArr) {
            c2.add(Long.valueOf(j2));
        }
        return c2;
    }

    @NotNull
    public static final HashSet<Character> toHashSet(@NotNull char[] cArr) {
        int mapCapacity;
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(cArr.length);
        return (HashSet) toCollection(cArr, new HashSet(mapCapacity));
    }

    @NotNull
    public static final List<Short> toList(@NotNull short[] sArr) {
        List<Short> emptyList;
        List<Short> listOf;
        int length = sArr.length;
        if (length == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        } else if (length != 1) {
            return toMutableList(sArr);
        } else {
            listOf = CollectionsKt__CollectionsJVMKt.listOf(Short.valueOf(sArr[0]));
            return listOf;
        }
    }

    @NotNull
    public static final Set<Long> toMutableSet(@NotNull long[] jArr) {
        int mapCapacity;
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(jArr.length);
        LinkedHashSet linkedHashSet = new LinkedHashSet(mapCapacity);
        for (long j2 : jArr) {
            linkedHashSet.add(Long.valueOf(j2));
        }
        return linkedHashSet;
    }

    @NotNull
    public static final Set<Short> toSet(@NotNull short[] sArr) {
        Set<Short> emptySet;
        Set<Short> of;
        int mapCapacity;
        int length = sArr.length;
        if (length == 0) {
            emptySet = SetsKt__SetsKt.emptySet();
            return emptySet;
        } else if (length != 1) {
            mapCapacity = MapsKt__MapsJVMKt.mapCapacity(sArr.length);
            return (Set) toCollection(sArr, new LinkedHashSet(mapCapacity));
        } else {
            of = SetsKt__SetsJVMKt.setOf(Short.valueOf(sArr[0]));
            return of;
        }
    }

    @NotNull
    public static final Set<Long> union(@NotNull long[] jArr, @NotNull Iterable<Long> iterable) {
        Set<Long> mutableSet = toMutableSet(jArr);
        CollectionsKt__MutableCollectionsKt.addAll(mutableSet, iterable);
        return mutableSet;
    }

    @NotNull
    public static final Iterable<IndexedValue<Character>> withIndex(@NotNull final char[] cArr) {
        return new IndexingIterable(new Function0<CharIterator>() { // from class: kotlin.collections.ArraysKt___ArraysKt$withIndex$9
            /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
            {
                super(0);
            }

            @Override // kotlin.jvm.functions.Function0
            @NotNull
            public final CharIterator invoke() {
                return ArrayIteratorsKt.iterator(cArr);
            }
        });
    }

    public static final <T> boolean any(@NotNull T[] tArr, @NotNull Function1<? super T, Boolean> function1) {
        for (T t : tArr) {
            if (function1.invoke(t).booleanValue()) {
                return true;
            }
        }
        return false;
    }

    public static final double average(@NotNull long[] jArr) {
        double d = 0.0d;
        int i2 = 0;
        for (double d2 : jArr) {
            Double.isNaN(d2);
            d += d2;
            i2++;
        }
        if (i2 == 0) {
            return DoubleCompanionObject.INSTANCE.getNaN();
        }
        double d3 = i2;
        Double.isNaN(d3);
        return d / d3;
    }

    public static final <T> int count(@NotNull T[] tArr, @NotNull Function1<? super T, Boolean> function1) {
        int i2 = 0;
        for (T t : tArr) {
            if (function1.invoke(t).booleanValue()) {
                i2++;
            }
        }
        return i2;
    }

    @NotNull
    public static final List<Integer> filterIndexed(@NotNull int[] iArr, @NotNull Function2<? super Integer, ? super Integer, Boolean> function2) {
        ArrayList arrayList = new ArrayList();
        int length = iArr.length;
        int i2 = 0;
        int i3 = 0;
        while (i2 < length) {
            int i4 = iArr[i2];
            int i5 = i3 + 1;
            if (function2.invoke(Integer.valueOf(i3), Integer.valueOf(i4)).booleanValue()) {
                arrayList.add(Integer.valueOf(i4));
            }
            i2++;
            i3 = i5;
        }
        return arrayList;
    }

    @InlineOnly
    private static final Integer findLast(@NotNull int[] iArr, Function1<? super Integer, Boolean> function1) {
        int i2;
        int length = iArr.length;
        do {
            length--;
            if (length < 0) {
                return null;
            }
            i2 = iArr[length];
        } while (!function1.invoke(Integer.valueOf(i2)).booleanValue());
        return Integer.valueOf(i2);
    }

    public static int first(@NotNull int[] iArr) {
        if (!(iArr.length == 0)) {
            return iArr[0];
        }
        throw new NoSuchElementException("Array is empty.");
    }

    @Nullable
    public static final <T> T firstOrNull(@NotNull T[] tArr, @NotNull Function1<? super T, Boolean> function1) {
        for (T t : tArr) {
            if (function1.invoke(t).booleanValue()) {
                return t;
            }
        }
        return null;
    }

    @NotNull
    public static final <R, C extends Collection<? super R>> C flatMapTo(@NotNull int[] iArr, @NotNull C c2, @NotNull Function1<? super Integer, ? extends Iterable<? extends R>> function1) {
        for (int i2 : iArr) {
            CollectionsKt__MutableCollectionsKt.addAll(c2, function1.invoke(Integer.valueOf(i2)));
        }
        return c2;
    }

    public static int last(@NotNull int[] iArr) {
        int lastIndex;
        if (!(iArr.length == 0)) {
            lastIndex = getLastIndex(iArr);
            return iArr[lastIndex];
        }
        throw new NoSuchElementException("Array is empty.");
    }

    @Nullable
    public static final <T> T lastOrNull(@NotNull T[] tArr, @NotNull Function1<? super T, Boolean> function1) {
        T t;
        int length = tArr.length;
        do {
            length--;
            if (length < 0) {
                return null;
            }
            t = tArr[length];
        } while (!function1.invoke(t).booleanValue());
        return t;
    }

    @NotNull
    public static final <R> List<R> map(@NotNull int[] iArr, @NotNull Function1<? super Integer, ? extends R> function1) {
        ArrayList arrayList = new ArrayList(iArr.length);
        for (int i2 : iArr) {
            arrayList.add(function1.invoke(Integer.valueOf(i2)));
        }
        return arrayList;
    }

    @NotNull
    public static final <R> List<R> mapIndexed(@NotNull int[] iArr, @NotNull Function2<? super Integer, ? super Integer, ? extends R> function2) {
        ArrayList arrayList = new ArrayList(iArr.length);
        int i2 = 0;
        for (int i3 : iArr) {
            Integer valueOf = Integer.valueOf(i2);
            i2++;
            arrayList.add(function2.invoke(valueOf, Integer.valueOf(i3)));
        }
        return arrayList;
    }

    public static final <T> boolean none(@NotNull T[] tArr, @NotNull Function1<? super T, Boolean> function1) {
        for (T t : tArr) {
            if (function1.invoke(t).booleanValue()) {
                return false;
            }
        }
        return true;
    }

    @SinceKotlin(version = "1.3")
    public static final <T> T random(@NotNull T[] tArr, @NotNull Random random) {
        if (!(tArr.length == 0)) {
            return tArr[random.nextInt(tArr.length)];
        }
        throw new NoSuchElementException("Array is empty.");
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @Nullable
    public static final <T> T randomOrNull(@NotNull T[] tArr, @NotNull Random random) {
        if (tArr.length == 0) {
            return null;
        }
        return tArr[random.nextInt(tArr.length)];
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @Nullable
    public static final Short reduceOrNull(@NotNull short[] sArr, @NotNull Function2<? super Short, ? super Short, Short> function2) {
        int lastIndex;
        int i2 = 1;
        if (sArr.length == 0) {
            return null;
        }
        short s = sArr[0];
        lastIndex = getLastIndex(sArr);
        if (1 <= lastIndex) {
            while (true) {
                s = function2.invoke(Short.valueOf(s), Short.valueOf(sArr[i2])).shortValue();
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Short.valueOf(s);
    }

    @NotNull
    public static final List<Integer> reversed(@NotNull int[] iArr) {
        List<Integer> emptyList;
        if (iArr.length == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        List<Integer> mutableList = toMutableList(iArr);
        CollectionsKt___CollectionsJvmKt.reverse(mutableList);
        return mutableList;
    }

    @Nullable
    public static final <T> T singleOrNull(@NotNull T[] tArr, @NotNull Function1<? super T, Boolean> function1) {
        T t = null;
        boolean z = false;
        for (T t2 : tArr) {
            if (function1.invoke(t2).booleanValue()) {
                if (z) {
                    return null;
                }
                z = true;
                t = t2;
            }
        }
        if (z) {
            return t;
        }
        return null;
    }

    @NotNull
    public static int[] sliceArray(@NotNull int[] iArr, @NotNull Collection<Integer> collection) {
        int[] iArr2 = new int[collection.size()];
        Iterator<Integer> it = collection.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            iArr2[i2] = iArr[it.next().intValue()];
            i2++;
        }
        return iArr2;
    }

    @NotNull
    public static final List<Float> toMutableList(@NotNull float[] fArr) {
        ArrayList arrayList = new ArrayList(fArr.length);
        for (float f2 : fArr) {
            arrayList.add(Float.valueOf(f2));
        }
        return arrayList;
    }

    @NotNull
    public static final <R, V> List<V> zip(@NotNull int[] iArr, @NotNull R[] rArr, @NotNull Function2<? super Integer, ? super R, ? extends V> function2) {
        int min = Math.min(iArr.length, rArr.length);
        ArrayList arrayList = new ArrayList(min);
        for (int i2 = 0; i2 < min; i2++) {
            arrayList.add(function2.invoke(Integer.valueOf(iArr[i2]), rArr[i2]));
        }
        return arrayList;
    }

    public static final boolean any(@NotNull byte[] bArr, @NotNull Function1<? super Byte, Boolean> function1) {
        for (byte b : bArr) {
            if (function1.invoke(Byte.valueOf(b)).booleanValue()) {
                return true;
            }
        }
        return false;
    }

    @NotNull
    public static final Iterable<Float> asIterable(@NotNull float[] fArr) {
        List emptyList;
        if (fArr.length == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        return new ArraysKt___ArraysKt$asIterable$$inlined$Iterable$6(fArr);
    }

    @NotNull
    public static final Sequence<Float> asSequence(@NotNull final float[] fArr) {
        Sequence<Float> emptySequence;
        if (fArr.length == 0) {
            emptySequence = SequencesKt__SequencesKt.emptySequence();
            return emptySequence;
        }
        return new Sequence<Float>() { // from class: kotlin.collections.ArraysKt___ArraysKt$asSequence$$inlined$Sequence$6
            @Override // kotlin.sequences.Sequence
            @NotNull
            public Iterator<Float> iterator() {
                return ArrayIteratorsKt.iterator(fArr);
            }
        };
    }

    @NotNull
    public static final <K, M extends Map<? super K, ? super Float>> M associateByTo(@NotNull float[] fArr, @NotNull M m2, @NotNull Function1<? super Float, ? extends K> function1) {
        for (float f2 : fArr) {
            m2.put(function1.invoke(Float.valueOf(f2)), Float.valueOf(f2));
        }
        return m2;
    }

    @NotNull
    public static final <K, V, M extends Map<? super K, ? super V>> M associateTo(@NotNull float[] fArr, @NotNull M m2, @NotNull Function1<? super Float, ? extends Pair<? extends K, ? extends V>> function1) {
        for (float f2 : fArr) {
            Pair<? extends K, ? extends V> invoke = function1.invoke(Float.valueOf(f2));
            m2.put(invoke.getFirst(), invoke.getSecond());
        }
        return m2;
    }

    public static final int count(@NotNull byte[] bArr, @NotNull Function1<? super Byte, Boolean> function1) {
        int i2 = 0;
        for (byte b : bArr) {
            if (function1.invoke(Byte.valueOf(b)).booleanValue()) {
                i2++;
            }
        }
        return i2;
    }

    @NotNull
    public static final List<Float> drop(@NotNull float[] fArr, int i2) {
        int coerceAtLeast;
        if (i2 >= 0) {
            coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(fArr.length - i2, 0);
            return takeLast(fArr, coerceAtLeast);
        }
        throw new IllegalArgumentException(("Requested element count " + i2 + " is less than zero.").toString());
    }

    @NotNull
    public static final List<Float> dropLast(@NotNull float[] fArr, int i2) {
        int coerceAtLeast;
        if (i2 >= 0) {
            coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(fArr.length - i2, 0);
            return take(fArr, coerceAtLeast);
        }
        throw new IllegalArgumentException(("Requested element count " + i2 + " is less than zero.").toString());
    }

    @NotNull
    public static final List<Short> dropWhile(@NotNull short[] sArr, @NotNull Function1<? super Short, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        boolean z = false;
        for (short s : sArr) {
            if (z) {
                arrayList.add(Short.valueOf(s));
            } else if (!function1.invoke(Short.valueOf(s)).booleanValue()) {
                arrayList.add(Short.valueOf(s));
                z = true;
            }
        }
        return arrayList;
    }

    @NotNull
    public static final List<Float> filter(@NotNull float[] fArr, @NotNull Function1<? super Float, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        for (float f2 : fArr) {
            if (function1.invoke(Float.valueOf(f2)).booleanValue()) {
                arrayList.add(Float.valueOf(f2));
            }
        }
        return arrayList;
    }

    @NotNull
    public static final <C extends Collection<? super Float>> C filterIndexedTo(@NotNull float[] fArr, @NotNull C c2, @NotNull Function2<? super Integer, ? super Float, Boolean> function2) {
        int length = fArr.length;
        int i2 = 0;
        int i3 = 0;
        while (i2 < length) {
            float f2 = fArr[i2];
            int i4 = i3 + 1;
            if (function2.invoke(Integer.valueOf(i3), Float.valueOf(f2)).booleanValue()) {
                c2.add(Float.valueOf(f2));
            }
            i2++;
            i3 = i4;
        }
        return c2;
    }

    @NotNull
    public static final List<Float> filterNot(@NotNull float[] fArr, @NotNull Function1<? super Float, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        for (float f2 : fArr) {
            if (!function1.invoke(Float.valueOf(f2)).booleanValue()) {
                arrayList.add(Float.valueOf(f2));
            }
        }
        return arrayList;
    }

    @Nullable
    public static final Byte firstOrNull(@NotNull byte[] bArr, @NotNull Function1<? super Byte, Boolean> function1) {
        for (byte b : bArr) {
            if (function1.invoke(Byte.valueOf(b)).booleanValue()) {
                return Byte.valueOf(b);
            }
        }
        return null;
    }

    public static final <R> R foldRight(@NotNull float[] fArr, R r, @NotNull Function2<? super Float, ? super R, ? extends R> function2) {
        for (int lastIndex = getLastIndex(fArr); lastIndex >= 0; lastIndex--) {
            r = function2.invoke(Float.valueOf(fArr[lastIndex]), r);
        }
        return r;
    }

    public static final <R> R foldRightIndexed(@NotNull float[] fArr, R r, @NotNull Function3<? super Integer, ? super Float, ? super R, ? extends R> function3) {
        for (int lastIndex = getLastIndex(fArr); lastIndex >= 0; lastIndex--) {
            r = function3.invoke(Integer.valueOf(lastIndex), Float.valueOf(fArr[lastIndex]), r);
        }
        return r;
    }

    public static int indexOf(@NotNull long[] jArr, long j2) {
        int length = jArr.length;
        for (int i2 = 0; i2 < length; i2++) {
            if (j2 == jArr[i2]) {
                return i2;
            }
        }
        return -1;
    }

    public static final int indexOfFirst(@NotNull float[] fArr, @NotNull Function1<? super Float, Boolean> function1) {
        int length = fArr.length;
        for (int i2 = 0; i2 < length; i2++) {
            if (function1.invoke(Float.valueOf(fArr[i2])).booleanValue()) {
                return i2;
            }
        }
        return -1;
    }

    public static final int indexOfLast(@NotNull float[] fArr, @NotNull Function1<? super Float, Boolean> function1) {
        for (int length = fArr.length - 1; length >= 0; length--) {
            if (function1.invoke(Float.valueOf(fArr[length])).booleanValue()) {
                return length;
            }
        }
        return -1;
    }

    @NotNull
    public static final Set<Float> intersect(@NotNull float[] fArr, @NotNull Iterable<Float> iterable) {
        Set<Float> mutableSet = toMutableSet(fArr);
        CollectionsKt__MutableCollectionsKt.retainAll(mutableSet, iterable);
        return mutableSet;
    }

    public static int lastIndexOf(@NotNull long[] jArr, long j2) {
        for (int length = jArr.length - 1; length >= 0; length--) {
            if (j2 == jArr[length]) {
                return length;
            }
        }
        return -1;
    }

    @NotNull
    public static final <R, C extends Collection<? super R>> C mapIndexedTo(@NotNull float[] fArr, @NotNull C c2, @NotNull Function2<? super Integer, ? super Float, ? extends R> function2) {
        int i2 = 0;
        for (float f2 : fArr) {
            Integer valueOf = Integer.valueOf(i2);
            i2++;
            c2.add(function2.invoke(valueOf, Float.valueOf(f2)));
        }
        return c2;
    }

    @NotNull
    public static final <R, C extends Collection<? super R>> C mapTo(@NotNull float[] fArr, @NotNull C c2, @NotNull Function1<? super Float, ? extends R> function1) {
        for (float f2 : fArr) {
            c2.add(function1.invoke(Float.valueOf(f2)));
        }
        return c2;
    }

    public static final boolean none(@NotNull byte[] bArr, @NotNull Function1<? super Byte, Boolean> function1) {
        for (byte b : bArr) {
            if (function1.invoke(Byte.valueOf(b)).booleanValue()) {
                return false;
            }
        }
        return true;
    }

    public static final short reduce(@NotNull short[] sArr, @NotNull Function2<? super Short, ? super Short, Short> function2) {
        int lastIndex;
        int i2 = 1;
        if (!(sArr.length == 0)) {
            short s = sArr[0];
            lastIndex = getLastIndex(sArr);
            if (1 <= lastIndex) {
                while (true) {
                    s = function2.invoke(Short.valueOf(s), Short.valueOf(sArr[i2])).shortValue();
                    if (i2 == lastIndex) {
                        break;
                    }
                    i2++;
                }
            }
            return s;
        }
        throw new UnsupportedOperationException("Empty array can't be reduced.");
    }

    public static final short reduceIndexed(@NotNull short[] sArr, @NotNull Function3<? super Integer, ? super Short, ? super Short, Short> function3) {
        int lastIndex;
        int i2 = 1;
        if (!(sArr.length == 0)) {
            short s = sArr[0];
            lastIndex = getLastIndex(sArr);
            if (1 <= lastIndex) {
                while (true) {
                    s = function3.invoke(Integer.valueOf(i2), Short.valueOf(s), Short.valueOf(sArr[i2])).shortValue();
                    if (i2 == lastIndex) {
                        break;
                    }
                    i2++;
                }
            }
            return s;
        }
        throw new UnsupportedOperationException("Empty array can't be reduced.");
    }

    public static void reverse(@NotNull short[] sArr) {
        int lastIndex;
        int length = (sArr.length / 2) - 1;
        if (length < 0) {
            return;
        }
        lastIndex = getLastIndex(sArr);
        int i2 = 0;
        if (length < 0) {
            return;
        }
        while (true) {
            short s = sArr[i2];
            sArr[i2] = sArr[lastIndex];
            sArr[lastIndex] = s;
            lastIndex--;
            if (i2 == length) {
                return;
            }
            i2++;
        }
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @InlineOnly
    private static final <R> List<R> scan(@NotNull short[] sArr, R r, Function2<? super R, ? super Short, ? extends R> function2) {
        List<R> listOf;
        if (sArr.length == 0) {
            listOf = CollectionsKt__CollectionsJVMKt.listOf(r);
            return listOf;
        }
        ArrayList arrayList = new ArrayList(sArr.length + 1);
        arrayList.add(r);
        for (short s : sArr) {
            r = function2.invoke(r, Short.valueOf(s));
            arrayList.add(r);
        }
        return arrayList;
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @InlineOnly
    private static final <R> List<R> scanIndexed(@NotNull short[] sArr, R r, Function3<? super Integer, ? super R, ? super Short, ? extends R> function3) {
        List<R> listOf;
        if (sArr.length == 0) {
            listOf = CollectionsKt__CollectionsJVMKt.listOf(r);
            return listOf;
        }
        ArrayList arrayList = new ArrayList(sArr.length + 1);
        arrayList.add(r);
        int length = sArr.length;
        for (int i2 = 0; i2 < length; i2++) {
            r = function3.invoke(Integer.valueOf(i2), r, Short.valueOf(sArr[i2]));
            arrayList.add(r);
        }
        return arrayList;
    }

    @NotNull
    public static final List<Float> slice(@NotNull float[] fArr, @NotNull  Var) {
        List<Float> emptyList;
        if (Var.isEmpty()) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        return ArraysKt___ArraysJvmKt.asList(ArraysKt___ArraysJvmKt.copyOfRange(fArr, Var.getStart().intValue(), Var.getEndInclusive().intValue() + 1));
    }

    public static final void sortDescending(@NotNull long[] jArr) {
        if (jArr.length > 1) {
            ArraysKt___ArraysJvmKt.sort(jArr);
            reverse(jArr);
        }
    }

    @NotNull
    public static final float[] sortedArray(@NotNull float[] fArr) {
        if (fArr.length == 0) {
            return fArr;
        }
        float[] copyOf = Arrays.copyOf(fArr, fArr.length);
        Intrinsics.checkExpressionValueIsNotNull(copyOf, "java.util.Arrays.copyOf(this, size)");
        ArraysKt___ArraysJvmKt.sort(copyOf);
        return copyOf;
    }

    @NotNull
    public static final float[] sortedArrayDescending(@NotNull float[] fArr) {
        if (fArr.length == 0) {
            return fArr;
        }
        float[] copyOf = Arrays.copyOf(fArr, fArr.length);
        Intrinsics.checkExpressionValueIsNotNull(copyOf, "java.util.Arrays.copyOf(this, size)");
        sortDescending(copyOf);
        return copyOf;
    }

    @NotNull
    public static final Set<Float> subtract(@NotNull float[] fArr, @NotNull Iterable<Float> iterable) {
        Set<Float> mutableSet = toMutableSet(fArr);
        CollectionsKt__MutableCollectionsKt.removeAll(mutableSet, iterable);
        return mutableSet;
    }

    public static final int sumBy(@NotNull float[] fArr, @NotNull Function1<? super Float, Integer> function1) {
        int i2 = 0;
        for (float f2 : fArr) {
            i2 += function1.invoke(Float.valueOf(f2)).intValue();
        }
        return i2;
    }

    public static final double sumByDouble(@NotNull float[] fArr, @NotNull Function1<? super Float, Double> function1) {
        double d = 0.0d;
        for (float f2 : fArr) {
            d += function1.invoke(Float.valueOf(f2)).doubleValue();
        }
        return d;
    }

    @NotNull
    public static final <C extends Collection<? super Float>> C toCollection(@NotNull float[] fArr, @NotNull C c2) {
        for (float f2 : fArr) {
            c2.add(Float.valueOf(f2));
        }
        return c2;
    }

    @NotNull
    public static final Set<Float> toMutableSet(@NotNull float[] fArr) {
        int mapCapacity;
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(fArr.length);
        LinkedHashSet linkedHashSet = new LinkedHashSet(mapCapacity);
        for (float f2 : fArr) {
            linkedHashSet.add(Float.valueOf(f2));
        }
        return linkedHashSet;
    }

    @NotNull
    public static final Set<Float> union(@NotNull float[] fArr, @NotNull Iterable<Float> iterable) {
        Set<Float> mutableSet = toMutableSet(fArr);
        CollectionsKt__MutableCollectionsKt.addAll(mutableSet, iterable);
        return mutableSet;
    }

    public static final boolean any(@NotNull short[] sArr, @NotNull Function1<? super Short, Boolean> function1) {
        for (short s : sArr) {
            if (function1.invoke(Short.valueOf(s)).booleanValue()) {
                return true;
            }
        }
        return false;
    }

    public static final int count(@NotNull short[] sArr, @NotNull Function1<? super Short, Boolean> function1) {
        int i2 = 0;
        for (short s : sArr) {
            if (function1.invoke(Short.valueOf(s)).booleanValue()) {
                i2++;
            }
        }
        return i2;
    }

    @Nullable
    public static final Short firstOrNull(@NotNull short[] sArr, @NotNull Function1<? super Short, Boolean> function1) {
        for (short s : sArr) {
            if (function1.invoke(Short.valueOf(s)).booleanValue()) {
                return Short.valueOf(s);
            }
        }
        return null;
    }

    @Nullable
    public static final Short maxWith(@NotNull short[] sArr, @NotNull Comparator<? super Short> comparator) {
        int lastIndex;
        int i2 = 1;
        if (sArr.length == 0) {
            return null;
        }
        short s = sArr[0];
        lastIndex = getLastIndex(sArr);
        if (1 <= lastIndex) {
            while (true) {
                short s2 = sArr[i2];
                if (comparator.compare(Short.valueOf(s), Short.valueOf(s2)) < 0) {
                    s = s2;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Short.valueOf(s);
    }

    @Nullable
    public static final Short minWith(@NotNull short[] sArr, @NotNull Comparator<? super Short> comparator) {
        int lastIndex;
        int i2 = 1;
        if (sArr.length == 0) {
            return null;
        }
        short s = sArr[0];
        lastIndex = getLastIndex(sArr);
        if (1 <= lastIndex) {
            while (true) {
                short s2 = sArr[i2];
                if (comparator.compare(Short.valueOf(s), Short.valueOf(s2)) > 0) {
                    s = s2;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Short.valueOf(s);
    }

    public static final boolean none(@NotNull short[] sArr, @NotNull Function1<? super Short, Boolean> function1) {
        for (short s : sArr) {
            if (function1.invoke(Short.valueOf(s)).booleanValue()) {
                return false;
            }
        }
        return true;
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @Nullable
    public static final Byte randomOrNull(@NotNull byte[] bArr, @NotNull Random random) {
        if (bArr.length == 0) {
            return null;
        }
        return Byte.valueOf(bArr[random.nextInt(bArr.length)]);
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @Nullable
    public static final Integer reduceRightOrNull(@NotNull int[] iArr, @NotNull Function2<? super Integer, ? super Integer, Integer> function2) {
        int lastIndex;
        lastIndex = getLastIndex(iArr);
        if (lastIndex < 0) {
            return null;
        }
        int i2 = iArr[lastIndex];
        for (int i3 = lastIndex - 1; i3 >= 0; i3--) {
            i2 = function2.invoke(Integer.valueOf(iArr[i3]), Integer.valueOf(i2)).intValue();
        }
        return Integer.valueOf(i2);
    }

    @Nullable
    public static final Byte singleOrNull(@NotNull byte[] bArr, @NotNull Function1<? super Byte, Boolean> function1) {
        Byte b = null;
        boolean z = false;
        for (byte b2 : bArr) {
            if (function1.invoke(Byte.valueOf(b2)).booleanValue()) {
                if (z) {
                    return null;
                }
                b = Byte.valueOf(b2);
                z = true;
            }
        }
        if (z) {
            return b;
        }
        return null;
    }

    @NotNull
    public static final List<Double> toMutableList(@NotNull double[] dArr) {
        ArrayList arrayList = new ArrayList(dArr.length);
        for (double d : dArr) {
            arrayList.add(Double.valueOf(d));
        }
        return arrayList;
    }

    public static final boolean any(@NotNull int[] iArr, @NotNull Function1<? super Integer, Boolean> function1) {
        for (int i2 : iArr) {
            if (function1.invoke(Integer.valueOf(i2)).booleanValue()) {
                return true;
            }
        }
        return false;
    }

    @NotNull
    public static final Iterable<Double> asIterable(@NotNull double[] dArr) {
        List emptyList;
        if (dArr.length == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        return new ArraysKt___ArraysKt$asIterable$$inlined$Iterable$7(dArr);
    }

    @NotNull
    public static final Sequence<Double> asSequence(@NotNull final double[] dArr) {
        Sequence<Double> emptySequence;
        if (dArr.length == 0) {
            emptySequence = SequencesKt__SequencesKt.emptySequence();
            return emptySequence;
        }
        return new Sequence<Double>() { // from class: kotlin.collections.ArraysKt___ArraysKt$asSequence$$inlined$Sequence$7
            @Override // kotlin.sequences.Sequence
            @NotNull
            public Iterator<Double> iterator() {
                return ArrayIteratorsKt.iterator(dArr);
            }
        };
    }

    @NotNull
    public static final <K, V> Map<K, V> associate(@NotNull int[] iArr, @NotNull Function1<? super Integer, ? extends Pair<? extends K, ? extends V>> function1) {
        int mapCapacity;
        int coerceAtLeast;
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(iArr.length);
        coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(mapCapacity, 16);
        LinkedHashMap linkedHashMap = new LinkedHashMap(coerceAtLeast);
        for (int i2 : iArr) {
            Pair<? extends K, ? extends V> invoke = function1.invoke(Integer.valueOf(i2));
            linkedHashMap.put(invoke.getFirst(), invoke.getSecond());
        }
        return linkedHashMap;
    }

    @NotNull
    public static final <K> Map<K, Integer> associateBy(@NotNull int[] iArr, @NotNull Function1<? super Integer, ? extends K> function1) {
        int mapCapacity;
        int coerceAtLeast;
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(iArr.length);
        coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(mapCapacity, 16);
        LinkedHashMap linkedHashMap = new LinkedHashMap(coerceAtLeast);
        for (int i2 : iArr) {
            linkedHashMap.put(function1.invoke(Integer.valueOf(i2)), Integer.valueOf(i2));
        }
        return linkedHashMap;
    }

    @NotNull
    public static final <K, M extends Map<? super K, ? super Double>> M associateByTo(@NotNull double[] dArr, @NotNull M m2, @NotNull Function1<? super Double, ? extends K> function1) {
        for (double d : dArr) {
            m2.put(function1.invoke(Double.valueOf(d)), Double.valueOf(d));
        }
        return m2;
    }

    @NotNull
    public static final <K, V, M extends Map<? super K, ? super V>> M associateTo(@NotNull double[] dArr, @NotNull M m2, @NotNull Function1<? super Double, ? extends Pair<? extends K, ? extends V>> function1) {
        for (double d : dArr) {
            Pair<? extends K, ? extends V> invoke = function1.invoke(Double.valueOf(d));
            m2.put(invoke.getFirst(), invoke.getSecond());
        }
        return m2;
    }

    public static final double average(@NotNull float[] fArr) {
        double d = 0.0d;
        int i2 = 0;
        for (double d2 : fArr) {
            Double.isNaN(d2);
            d += d2;
            i2++;
        }
        if (i2 == 0) {
            return DoubleCompanionObject.INSTANCE.getNaN();
        }
        double d3 = i2;
        Double.isNaN(d3);
        return d / d3;
    }

    public static final int count(@NotNull int[] iArr, @NotNull Function1<? super Integer, Boolean> function1) {
        int i2 = 0;
        for (int i3 : iArr) {
            if (function1.invoke(Integer.valueOf(i3)).booleanValue()) {
                i2++;
            }
        }
        return i2;
    }

    @NotNull
    public static final <K> List<Short> distinctBy(@NotNull short[] sArr, @NotNull Function1<? super Short, ? extends K> function1) {
        HashSet hashSet = new HashSet();
        ArrayList arrayList = new ArrayList();
        for (short s : sArr) {
            if (hashSet.add(function1.invoke(Short.valueOf(s)))) {
                arrayList.add(Short.valueOf(s));
            }
        }
        return arrayList;
    }

    @NotNull
    public static final List<Double> drop(@NotNull double[] dArr, int i2) {
        int coerceAtLeast;
        if (i2 >= 0) {
            coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(dArr.length - i2, 0);
            return takeLast(dArr, coerceAtLeast);
        }
        throw new IllegalArgumentException(("Requested element count " + i2 + " is less than zero.").toString());
    }

    @NotNull
    public static final List<Double> dropLast(@NotNull double[] dArr, int i2) {
        int coerceAtLeast;
        if (i2 >= 0) {
            coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(dArr.length - i2, 0);
            return take(dArr, coerceAtLeast);
        }
        throw new IllegalArgumentException(("Requested element count " + i2 + " is less than zero.").toString());
    }

    @NotNull
    public static final List<Integer> dropLastWhile(@NotNull int[] iArr, @NotNull Function1<? super Integer, Boolean> function1) {
        int lastIndex;
        List<Integer> emptyList;
        for (lastIndex = getLastIndex(iArr); lastIndex >= 0; lastIndex--) {
            if (!function1.invoke(Integer.valueOf(iArr[lastIndex])).booleanValue()) {
                return take(iArr, lastIndex + 1);
            }
        }
        emptyList = CollectionsKt__CollectionsKt.emptyList();
        return emptyList;
    }

    @NotNull
    public static final List<Double> filter(@NotNull double[] dArr, @NotNull Function1<? super Double, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        for (double d : dArr) {
            if (function1.invoke(Double.valueOf(d)).booleanValue()) {
                arrayList.add(Double.valueOf(d));
            }
        }
        return arrayList;
    }

    @NotNull
    public static final List<Long> filterIndexed(@NotNull long[] jArr, @NotNull Function2<? super Integer, ? super Long, Boolean> function2) {
        ArrayList arrayList = new ArrayList();
        int length = jArr.length;
        int i2 = 0;
        int i3 = 0;
        while (i2 < length) {
            long j2 = jArr[i2];
            int i4 = i3 + 1;
            if (function2.invoke(Integer.valueOf(i3), Long.valueOf(j2)).booleanValue()) {
                arrayList.add(Long.valueOf(j2));
            }
            i2++;
            i3 = i4;
        }
        return arrayList;
    }

    @NotNull
    public static final <C extends Collection<? super Double>> C filterIndexedTo(@NotNull double[] dArr, @NotNull C c2, @NotNull Function2<? super Integer, ? super Double, Boolean> function2) {
        int length = dArr.length;
        int i2 = 0;
        int i3 = 0;
        while (i2 < length) {
            double d = dArr[i2];
            int i4 = i3 + 1;
            if (function2.invoke(Integer.valueOf(i3), Double.valueOf(d)).booleanValue()) {
                c2.add(Double.valueOf(d));
            }
            i2++;
            i3 = i4;
        }
        return c2;
    }

    @NotNull
    public static final List<Double> filterNot(@NotNull double[] dArr, @NotNull Function1<? super Double, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        for (double d : dArr) {
            if (!function1.invoke(Double.valueOf(d)).booleanValue()) {
                arrayList.add(Double.valueOf(d));
            }
        }
        return arrayList;
    }

    @InlineOnly
    private static final Long findLast(@NotNull long[] jArr, Function1<? super Long, Boolean> function1) {
        long j2;
        int length = jArr.length;
        do {
            length--;
            if (length < 0) {
                return null;
            }
            j2 = jArr[length];
        } while (!function1.invoke(Long.valueOf(j2)).booleanValue());
        return Long.valueOf(j2);
    }

    public static long first(@NotNull long[] jArr) {
        if (!(jArr.length == 0)) {
            return jArr[0];
        }
        throw new NoSuchElementException("Array is empty.");
    }

    @Nullable
    public static final Integer firstOrNull(@NotNull int[] iArr, @NotNull Function1<? super Integer, Boolean> function1) {
        for (int i2 : iArr) {
            if (function1.invoke(Integer.valueOf(i2)).booleanValue()) {
                return Integer.valueOf(i2);
            }
        }
        return null;
    }

    @NotNull
    public static final <R> List<R> flatMap(@NotNull int[] iArr, @NotNull Function1<? super Integer, ? extends Iterable<? extends R>> function1) {
        ArrayList arrayList = new ArrayList();
        for (int i2 : iArr) {
            CollectionsKt__MutableCollectionsKt.addAll(arrayList, function1.invoke(Integer.valueOf(i2)));
        }
        return arrayList;
    }

    @NotNull
    public static final <R, C extends Collection<? super R>> C flatMapTo(@NotNull long[] jArr, @NotNull C c2, @NotNull Function1<? super Long, ? extends Iterable<? extends R>> function1) {
        for (long j2 : jArr) {
            CollectionsKt__MutableCollectionsKt.addAll(c2, function1.invoke(Long.valueOf(j2)));
        }
        return c2;
    }

    public static final <R> R foldRight(@NotNull double[] dArr, R r, @NotNull Function2<? super Double, ? super R, ? extends R> function2) {
        for (int lastIndex = getLastIndex(dArr); lastIndex >= 0; lastIndex--) {
            r = function2.invoke(Double.valueOf(dArr[lastIndex]), r);
        }
        return r;
    }

    public static final <R> R foldRightIndexed(@NotNull double[] dArr, R r, @NotNull Function3<? super Integer, ? super Double, ? super R, ? extends R> function3) {
        for (int lastIndex = getLastIndex(dArr); lastIndex >= 0; lastIndex--) {
            r = function3.invoke(Integer.valueOf(lastIndex), Double.valueOf(dArr[lastIndex]), r);
        }
        return r;
    }

    public static final int indexOf(@NotNull float[] fArr, float f2) {
        int length = fArr.length;
        for (int i2 = 0; i2 < length; i2++) {
            if (f2 == fArr[i2]) {
                return i2;
            }
        }
        return -1;
    }

    public static final int indexOfFirst(@NotNull double[] dArr, @NotNull Function1<? super Double, Boolean> function1) {
        int length = dArr.length;
        for (int i2 = 0; i2 < length; i2++) {
            if (function1.invoke(Double.valueOf(dArr[i2])).booleanValue()) {
                return i2;
            }
        }
        return -1;
    }

    public static final int indexOfLast(@NotNull double[] dArr, @NotNull Function1<? super Double, Boolean> function1) {
        for (int length = dArr.length - 1; length >= 0; length--) {
            if (function1.invoke(Double.valueOf(dArr[length])).booleanValue()) {
                return length;
            }
        }
        return -1;
    }

    @NotNull
    public static final Set<Double> intersect(@NotNull double[] dArr, @NotNull Iterable<Double> iterable) {
        Set<Double> mutableSet = toMutableSet(dArr);
        CollectionsKt__MutableCollectionsKt.retainAll(mutableSet, iterable);
        return mutableSet;
    }

    public static long last(@NotNull long[] jArr) {
        int lastIndex;
        if (!(jArr.length == 0)) {
            lastIndex = getLastIndex(jArr);
            return jArr[lastIndex];
        }
        throw new NoSuchElementException("Array is empty.");
    }

    public static final int lastIndexOf(@NotNull float[] fArr, float f2) {
        for (int length = fArr.length - 1; length >= 0; length--) {
            if (f2 == fArr[length]) {
                return length;
            }
        }
        return -1;
    }

    @Nullable
    public static final Byte lastOrNull(@NotNull byte[] bArr, @NotNull Function1<? super Byte, Boolean> function1) {
        byte b;
        int length = bArr.length;
        do {
            length--;
            if (length < 0) {
                return null;
            }
            b = bArr[length];
        } while (!function1.invoke(Byte.valueOf(b)).booleanValue());
        return Byte.valueOf(b);
    }

    @NotNull
    public static final <R> List<R> map(@NotNull long[] jArr, @NotNull Function1<? super Long, ? extends R> function1) {
        ArrayList arrayList = new ArrayList(jArr.length);
        for (long j2 : jArr) {
            arrayList.add(function1.invoke(Long.valueOf(j2)));
        }
        return arrayList;
    }

    @NotNull
    public static final <R> List<R> mapIndexed(@NotNull long[] jArr, @NotNull Function2<? super Integer, ? super Long, ? extends R> function2) {
        ArrayList arrayList = new ArrayList(jArr.length);
        int i2 = 0;
        for (long j2 : jArr) {
            Integer valueOf = Integer.valueOf(i2);
            i2++;
            arrayList.add(function2.invoke(valueOf, Long.valueOf(j2)));
        }
        return arrayList;
    }

    @NotNull
    public static final <R, C extends Collection<? super R>> C mapIndexedTo(@NotNull double[] dArr, @NotNull C c2, @NotNull Function2<? super Integer, ? super Double, ? extends R> function2) {
        int i2 = 0;
        for (double d : dArr) {
            Integer valueOf = Integer.valueOf(i2);
            i2++;
            c2.add(function2.invoke(valueOf, Double.valueOf(d)));
        }
        return c2;
    }

    @NotNull
    public static final <R, C extends Collection<? super R>> C mapTo(@NotNull double[] dArr, @NotNull C c2, @NotNull Function1<? super Double, ? extends R> function1) {
        for (double d : dArr) {
            c2.add(function1.invoke(Double.valueOf(d)));
        }
        return c2;
    }

    public static final boolean none(@NotNull int[] iArr, @NotNull Function1<? super Integer, Boolean> function1) {
        for (int i2 : iArr) {
            if (function1.invoke(Integer.valueOf(i2)).booleanValue()) {
                return false;
            }
        }
        return true;
    }

    @SinceKotlin(version = "1.3")
    public static final byte random(@NotNull byte[] bArr, @NotNull Random random) {
        if (!(bArr.length == 0)) {
            return bArr[random.nextInt(bArr.length)];
        }
        throw new NoSuchElementException("Array is empty.");
    }

    public static final int reduceRight(@NotNull int[] iArr, @NotNull Function2<? super Integer, ? super Integer, Integer> function2) {
        int lastIndex;
        lastIndex = getLastIndex(iArr);
        if (lastIndex >= 0) {
            int i2 = iArr[lastIndex];
            for (int i3 = lastIndex - 1; i3 >= 0; i3--) {
                i2 = function2.invoke(Integer.valueOf(iArr[i3]), Integer.valueOf(i2)).intValue();
            }
            return i2;
        }
        throw new UnsupportedOperationException("Empty array can't be reduced.");
    }

    public static final int reduceRightIndexed(@NotNull int[] iArr, @NotNull Function3<? super Integer, ? super Integer, ? super Integer, Integer> function3) {
        int lastIndex;
        lastIndex = getLastIndex(iArr);
        if (lastIndex >= 0) {
            int i2 = iArr[lastIndex];
            for (int i3 = lastIndex - 1; i3 >= 0; i3--) {
                i2 = function3.invoke(Integer.valueOf(i3), Integer.valueOf(iArr[i3]), Integer.valueOf(i2)).intValue();
            }
            return i2;
        }
        throw new UnsupportedOperationException("Empty array can't be reduced.");
    }

    @NotNull
    public static final List<Long> reversed(@NotNull long[] jArr) {
        List<Long> emptyList;
        if (jArr.length == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        List<Long> mutableList = toMutableList(jArr);
        CollectionsKt___CollectionsJvmKt.reverse(mutableList);
        return mutableList;
    }

    @NotNull
    public static int[] reversedArray(@NotNull int[] iArr) {
        int lastIndex;
        int i2 = 0;
        if (iArr.length == 0) {
            return iArr;
        }
        int[] iArr2 = new int[iArr.length];
        lastIndex = getLastIndex(iArr);
        if (lastIndex >= 0) {
            while (true) {
                iArr2[lastIndex - i2] = iArr[i2];
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return iArr2;
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @InlineOnly
    private static final List<Short> scanReduce(@NotNull short[] sArr, Function2<? super Short, ? super Short, Short> function2) {
        List<Short> emptyList;
        if (sArr.length == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        short s = sArr[0];
        ArrayList arrayList = new ArrayList(sArr.length);
        arrayList.add(Short.valueOf(s));
        int length = sArr.length;
        for (int i2 = 1; i2 < length; i2++) {
            s = function2.invoke(Short.valueOf(s), Short.valueOf(sArr[i2])).shortValue();
            arrayList.add(Short.valueOf(s));
        }
        return arrayList;
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @InlineOnly
    private static final List<Short> scanReduceIndexed(@NotNull short[] sArr, Function3<? super Integer, ? super Short, ? super Short, Short> function3) {
        List<Short> emptyList;
        if (sArr.length == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        short s = sArr[0];
        ArrayList arrayList = new ArrayList(sArr.length);
        arrayList.add(Short.valueOf(s));
        int length = sArr.length;
        for (int i2 = 1; i2 < length; i2++) {
            s = function3.invoke(Integer.valueOf(i2), Short.valueOf(s), Short.valueOf(sArr[i2])).shortValue();
            arrayList.add(Short.valueOf(s));
        }
        return arrayList;
    }

    public static int single(@NotNull int[] iArr) {
        int length = iArr.length;
        if (length != 0) {
            if (length == 1) {
                return iArr[0];
            }
            throw new IllegalArgumentException("Array has more than one element.");
        }
        throw new NoSuchElementException("Array is empty.");
    }

    @NotNull
    public static final List<Double> slice(@NotNull double[] dArr, @NotNull  Var) {
        List<Double> emptyList;
        if (Var.isEmpty()) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        return ArraysKt___ArraysJvmKt.asList(ArraysKt___ArraysJvmKt.copyOfRange(dArr, Var.getStart().intValue(), Var.getEndInclusive().intValue() + 1));
    }

    @NotNull
    public static long[] sliceArray(@NotNull long[] jArr, @NotNull Collection<Integer> collection) {
        long[] jArr2 = new long[collection.size()];
        Iterator<Integer> it = collection.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            jArr2[i2] = jArr[it.next().intValue()];
            i2++;
        }
        return jArr2;
    }

    @NotNull
    public static final double[] sortedArray(@NotNull double[] dArr) {
        if (dArr.length == 0) {
            return dArr;
        }
        double[] copyOf = Arrays.copyOf(dArr, dArr.length);
        Intrinsics.checkExpressionValueIsNotNull(copyOf, "java.util.Arrays.copyOf(this, size)");
        ArraysKt___ArraysJvmKt.sort(copyOf);
        return copyOf;
    }

    @NotNull
    public static final double[] sortedArrayDescending(@NotNull double[] dArr) {
        if (dArr.length == 0) {
            return dArr;
        }
        double[] copyOf = Arrays.copyOf(dArr, dArr.length);
        Intrinsics.checkExpressionValueIsNotNull(copyOf, "java.util.Arrays.copyOf(this, size)");
        sortDescending(copyOf);
        return copyOf;
    }

    @NotNull
    public static final Set<Double> subtract(@NotNull double[] dArr, @NotNull Iterable<Double> iterable) {
        Set<Double> mutableSet = toMutableSet(dArr);
        CollectionsKt__MutableCollectionsKt.removeAll(mutableSet, iterable);
        return mutableSet;
    }

    public static final int sumBy(@NotNull double[] dArr, @NotNull Function1<? super Double, Integer> function1) {
        int i2 = 0;
        for (double d : dArr) {
            i2 += function1.invoke(Double.valueOf(d)).intValue();
        }
        return i2;
    }

    public static final double sumByDouble(@NotNull double[] dArr, @NotNull Function1<? super Double, Double> function1) {
        double d = 0.0d;
        for (double d2 : dArr) {
            d += function1.invoke(Double.valueOf(d2)).doubleValue();
        }
        return d;
    }

    @NotNull
    public static final List<Integer> takeLastWhile(@NotNull int[] iArr, @NotNull Function1<? super Integer, Boolean> function1) {
        int lastIndex;
        for (lastIndex = getLastIndex(iArr); lastIndex >= 0; lastIndex--) {
            if (!function1.invoke(Integer.valueOf(iArr[lastIndex])).booleanValue()) {
                return drop(iArr, lastIndex + 1);
            }
        }
        return toList(iArr);
    }

    @NotNull
    public static final List<Integer> takeWhile(@NotNull int[] iArr, @NotNull Function1<? super Integer, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        for (int i2 : iArr) {
            if (!function1.invoke(Integer.valueOf(i2)).booleanValue()) {
                break;
            }
            arrayList.add(Integer.valueOf(i2));
        }
        return arrayList;
    }

    @NotNull
    public static final <C extends Collection<? super Double>> C toCollection(@NotNull double[] dArr, @NotNull C c2) {
        for (double d : dArr) {
            c2.add(Double.valueOf(d));
        }
        return c2;
    }

    @NotNull
    public static final List<Integer> toList(@NotNull int[] iArr) {
        List<Integer> emptyList;
        List<Integer> listOf;
        int length = iArr.length;
        if (length == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        } else if (length != 1) {
            return toMutableList(iArr);
        } else {
            listOf = CollectionsKt__CollectionsJVMKt.listOf(Integer.valueOf(iArr[0]));
            return listOf;
        }
    }

    @NotNull
    public static final Set<Double> toMutableSet(@NotNull double[] dArr) {
        int mapCapacity;
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(dArr.length);
        LinkedHashSet linkedHashSet = new LinkedHashSet(mapCapacity);
        for (double d : dArr) {
            linkedHashSet.add(Double.valueOf(d));
        }
        return linkedHashSet;
    }

    @NotNull
    public static final Set<Integer> toSet(@NotNull int[] iArr) {
        Set<Integer> emptySet;
        Set<Integer> of;
        int mapCapacity;
        int length = iArr.length;
        if (length == 0) {
            emptySet = SetsKt__SetsKt.emptySet();
            return emptySet;
        } else if (length != 1) {
            mapCapacity = MapsKt__MapsJVMKt.mapCapacity(iArr.length);
            return (Set) toCollection(iArr, new LinkedHashSet(mapCapacity));
        } else {
            of = SetsKt__SetsJVMKt.setOf(Integer.valueOf(iArr[0]));
            return of;
        }
    }

    @NotNull
    public static final Set<Double> union(@NotNull double[] dArr, @NotNull Iterable<Double> iterable) {
        Set<Double> mutableSet = toMutableSet(dArr);
        CollectionsKt__MutableCollectionsKt.addAll(mutableSet, iterable);
        return mutableSet;
    }

    @NotNull
    public static final <R, V> List<V> zip(@NotNull long[] jArr, @NotNull R[] rArr, @NotNull Function2<? super Long, ? super R, ? extends V> function2) {
        int min = Math.min(jArr.length, rArr.length);
        ArrayList arrayList = new ArrayList(min);
        for (int i2 = 0; i2 < min; i2++) {
            arrayList.add(function2.invoke(Long.valueOf(jArr[i2]), rArr[i2]));
        }
        return arrayList;
    }

    public static final boolean any(@NotNull long[] jArr, @NotNull Function1<? super Long, Boolean> function1) {
        for (long j2 : jArr) {
            if (function1.invoke(Long.valueOf(j2)).booleanValue()) {
                return true;
            }
        }
        return false;
    }

    public static final int count(@NotNull long[] jArr, @NotNull Function1<? super Long, Boolean> function1) {
        int i2 = 0;
        for (long j2 : jArr) {
            if (function1.invoke(Long.valueOf(j2)).booleanValue()) {
                i2++;
            }
        }
        return i2;
    }

    @Nullable
    public static final Long firstOrNull(@NotNull long[] jArr, @NotNull Function1<? super Long, Boolean> function1) {
        for (long j2 : jArr) {
            if (function1.invoke(Long.valueOf(j2)).booleanValue()) {
                return Long.valueOf(j2);
            }
        }
        return null;
    }

    @NotNull
    public static final <A extends Appendable> A joinTo(@NotNull short[] sArr, @NotNull A a, @NotNull CharSequence charSequence, @NotNull CharSequence charSequence2, @NotNull CharSequence charSequence3, int i2, @NotNull CharSequence charSequence4, @Nullable Function1<? super Short, ? extends CharSequence> function1) {
        a.append(charSequence2);
        int i3 = 0;
        for (short s : sArr) {
            i3++;
            if (i3 > 1) {
                a.append(charSequence);
            }
            if (i2 >= 0 && i3 > i2) {
                break;
            }
            if (function1 != null) {
                a.append(function1.invoke(Short.valueOf(s)));
            } else {
                a.append(String.valueOf((int) s));
            }
        }
        if (i2 >= 0 && i3 > i2) {
            a.append(charSequence4);
        }
        a.append(charSequence3);
        return a;
    }

    public static final boolean none(@NotNull long[] jArr, @NotNull Function1<? super Long, Boolean> function1) {
        for (long j2 : jArr) {
            if (function1.invoke(Long.valueOf(j2)).booleanValue()) {
                return false;
            }
        }
        return true;
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @Nullable
    public static final Short randomOrNull(@NotNull short[] sArr, @NotNull Random random) {
        if (sArr.length == 0) {
            return null;
        }
        return Short.valueOf(sArr[random.nextInt(sArr.length)]);
    }

    public static final void sortDescending(@NotNull float[] fArr) {
        if (fArr.length > 1) {
            ArraysKt___ArraysJvmKt.sort(fArr);
            reverse(fArr);
        }
    }

    @NotNull
    public static final List<Boolean> toMutableList(@NotNull boolean[] zArr) {
        ArrayList arrayList = new ArrayList(zArr.length);
        for (boolean z : zArr) {
            arrayList.add(Boolean.valueOf(z));
        }
        return arrayList;
    }

    public static final boolean any(@NotNull float[] fArr, @NotNull Function1<? super Float, Boolean> function1) {
        for (float f2 : fArr) {
            if (function1.invoke(Float.valueOf(f2)).booleanValue()) {
                return true;
            }
        }
        return false;
    }

    @NotNull
    public static final Iterable<Boolean> asIterable(@NotNull boolean[] zArr) {
        List emptyList;
        if (zArr.length == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        return new ArraysKt___ArraysKt$asIterable$$inlined$Iterable$8(zArr);
    }

    @NotNull
    public static final Sequence<Boolean> asSequence(@NotNull final boolean[] zArr) {
        Sequence<Boolean> emptySequence;
        if (zArr.length == 0) {
            emptySequence = SequencesKt__SequencesKt.emptySequence();
            return emptySequence;
        }
        return new Sequence<Boolean>() { // from class: kotlin.collections.ArraysKt___ArraysKt$asSequence$$inlined$Sequence$8
            @Override // kotlin.sequences.Sequence
            @NotNull
            public Iterator<Boolean> iterator() {
                return ArrayIteratorsKt.iterator(zArr);
            }
        };
    }

    @NotNull
    public static final <K, M extends Map<? super K, ? super Boolean>> M associateByTo(@NotNull boolean[] zArr, @NotNull M m2, @NotNull Function1<? super Boolean, ? extends K> function1) {
        for (boolean z : zArr) {
            m2.put(function1.invoke(Boolean.valueOf(z)), Boolean.valueOf(z));
        }
        return m2;
    }

    @NotNull
    public static final <K, V, M extends Map<? super K, ? super V>> M associateTo(@NotNull boolean[] zArr, @NotNull M m2, @NotNull Function1<? super Boolean, ? extends Pair<? extends K, ? extends V>> function1) {
        for (boolean z : zArr) {
            Pair<? extends K, ? extends V> invoke = function1.invoke(Boolean.valueOf(z));
            m2.put(invoke.getFirst(), invoke.getSecond());
        }
        return m2;
    }

    public static final int count(@NotNull float[] fArr, @NotNull Function1<? super Float, Boolean> function1) {
        int i2 = 0;
        for (float f2 : fArr) {
            if (function1.invoke(Float.valueOf(f2)).booleanValue()) {
                i2++;
            }
        }
        return i2;
    }

    @NotNull
    public static final List<Boolean> drop(@NotNull boolean[] zArr, int i2) {
        int coerceAtLeast;
        if (i2 >= 0) {
            coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(zArr.length - i2, 0);
            return takeLast(zArr, coerceAtLeast);
        }
        throw new IllegalArgumentException(("Requested element count " + i2 + " is less than zero.").toString());
    }

    @NotNull
    public static final List<Boolean> dropLast(@NotNull boolean[] zArr, int i2) {
        int coerceAtLeast;
        if (i2 >= 0) {
            coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(zArr.length - i2, 0);
            return take(zArr, coerceAtLeast);
        }
        throw new IllegalArgumentException(("Requested element count " + i2 + " is less than zero.").toString());
    }

    @NotNull
    public static final List<Boolean> filter(@NotNull boolean[] zArr, @NotNull Function1<? super Boolean, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        for (boolean z : zArr) {
            if (function1.invoke(Boolean.valueOf(z)).booleanValue()) {
                arrayList.add(Boolean.valueOf(z));
            }
        }
        return arrayList;
    }

    @NotNull
    public static final <C extends Collection<? super Boolean>> C filterIndexedTo(@NotNull boolean[] zArr, @NotNull C c2, @NotNull Function2<? super Integer, ? super Boolean, Boolean> function2) {
        int length = zArr.length;
        int i2 = 0;
        int i3 = 0;
        while (i2 < length) {
            boolean z = zArr[i2];
            int i4 = i3 + 1;
            if (function2.invoke(Integer.valueOf(i3), Boolean.valueOf(z)).booleanValue()) {
                c2.add(Boolean.valueOf(z));
            }
            i2++;
            i3 = i4;
        }
        return c2;
    }

    @NotNull
    public static final List<Boolean> filterNot(@NotNull boolean[] zArr, @NotNull Function1<? super Boolean, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        for (boolean z : zArr) {
            if (!function1.invoke(Boolean.valueOf(z)).booleanValue()) {
                arrayList.add(Boolean.valueOf(z));
            }
        }
        return arrayList;
    }

    @Nullable
    public static final Float firstOrNull(@NotNull float[] fArr, @NotNull Function1<? super Float, Boolean> function1) {
        for (float f2 : fArr) {
            if (function1.invoke(Float.valueOf(f2)).booleanValue()) {
                return Float.valueOf(f2);
            }
        }
        return null;
    }

    public static final <R> R foldRight(@NotNull boolean[] zArr, R r, @NotNull Function2<? super Boolean, ? super R, ? extends R> function2) {
        for (int lastIndex = getLastIndex(zArr); lastIndex >= 0; lastIndex--) {
            r = function2.invoke(Boolean.valueOf(zArr[lastIndex]), r);
        }
        return r;
    }

    public static final <R> R foldRightIndexed(@NotNull boolean[] zArr, R r, @NotNull Function3<? super Integer, ? super Boolean, ? super R, ? extends R> function3) {
        for (int lastIndex = getLastIndex(zArr); lastIndex >= 0; lastIndex--) {
            r = function3.invoke(Integer.valueOf(lastIndex), Boolean.valueOf(zArr[lastIndex]), r);
        }
        return r;
    }

    @NotNull
    public static final <K, M extends Map<? super K, List<Short>>> M groupByTo(@NotNull short[] sArr, @NotNull M m2, @NotNull Function1<? super Short, ? extends K> function1) {
        for (short s : sArr) {
            K invoke = function1.invoke(Short.valueOf(s));
            Object obj = m2.get(invoke);
            if (obj == null) {
                obj = new ArrayList();
                m2.put(invoke, obj);
            }
            ((List) obj).add(Short.valueOf(s));
        }
        return m2;
    }

    public static final int indexOf(@NotNull double[] dArr, double d) {
        int length = dArr.length;
        for (int i2 = 0; i2 < length; i2++) {
            if (d == dArr[i2]) {
                return i2;
            }
        }
        return -1;
    }

    public static final int indexOfFirst(@NotNull boolean[] zArr, @NotNull Function1<? super Boolean, Boolean> function1) {
        int length = zArr.length;
        for (int i2 = 0; i2 < length; i2++) {
            if (function1.invoke(Boolean.valueOf(zArr[i2])).booleanValue()) {
                return i2;
            }
        }
        return -1;
    }

    public static final int indexOfLast(@NotNull boolean[] zArr, @NotNull Function1<? super Boolean, Boolean> function1) {
        for (int length = zArr.length - 1; length >= 0; length--) {
            if (function1.invoke(Boolean.valueOf(zArr[length])).booleanValue()) {
                return length;
            }
        }
        return -1;
    }

    @NotNull
    public static final Set<Boolean> intersect(@NotNull boolean[] zArr, @NotNull Iterable<Boolean> iterable) {
        Set<Boolean> mutableSet = toMutableSet(zArr);
        CollectionsKt__MutableCollectionsKt.retainAll(mutableSet, iterable);
        return mutableSet;
    }

    public static final int lastIndexOf(@NotNull double[] dArr, double d) {
        for (int length = dArr.length - 1; length >= 0; length--) {
            if (d == dArr[length]) {
                return length;
            }
        }
        return -1;
    }

    @NotNull
    public static final <R, C extends Collection<? super R>> C mapIndexedTo(@NotNull boolean[] zArr, @NotNull C c2, @NotNull Function2<? super Integer, ? super Boolean, ? extends R> function2) {
        int i2 = 0;
        for (boolean z : zArr) {
            Integer valueOf = Integer.valueOf(i2);
            i2++;
            c2.add(function2.invoke(valueOf, Boolean.valueOf(z)));
        }
        return c2;
    }

    @NotNull
    public static final <R, C extends Collection<? super R>> C mapTo(@NotNull boolean[] zArr, @NotNull C c2, @NotNull Function1<? super Boolean, ? extends R> function1) {
        for (boolean z : zArr) {
            c2.add(function1.invoke(Boolean.valueOf(z)));
        }
        return c2;
    }

    @Nullable
    public static final <T extends Comparable<? super T>> T max(@NotNull T[] tArr) {
        int i2 = 1;
        if (tArr.length == 0) {
            return null;
        }
        T t = tArr[0];
        int lastIndex = getLastIndex(tArr);
        if (1 <= lastIndex) {
            while (true) {
                T t2 = tArr[i2];
                if (t.compareTo(t2) < 0) {
                    t = t2;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return t;
    }

    @Nullable
    public static final <T extends Comparable<? super T>> T min(@NotNull T[] tArr) {
        int i2 = 1;
        if (tArr.length == 0) {
            return null;
        }
        T t = tArr[0];
        int lastIndex = getLastIndex(tArr);
        if (1 <= lastIndex) {
            while (true) {
                T t2 = tArr[i2];
                if (t.compareTo(t2) > 0) {
                    t = t2;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return t;
    }

    public static final boolean none(@NotNull float[] fArr, @NotNull Function1<? super Float, Boolean> function1) {
        for (float f2 : fArr) {
            if (function1.invoke(Float.valueOf(f2)).booleanValue()) {
                return false;
            }
        }
        return true;
    }

    @NotNull
    public static final Pair<List<Short>, List<Short>> partition(@NotNull short[] sArr, @NotNull Function1<? super Short, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        ArrayList arrayList2 = new ArrayList();
        for (short s : sArr) {
            if (function1.invoke(Short.valueOf(s)).booleanValue()) {
                arrayList.add(Short.valueOf(s));
            } else {
                arrayList2.add(Short.valueOf(s));
            }
        }
        return new Pair<>(arrayList, arrayList2);
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @Nullable
    public static final Integer reduceOrNull(@NotNull int[] iArr, @NotNull Function2<? super Integer, ? super Integer, Integer> function2) {
        int lastIndex;
        int i2 = 1;
        if (iArr.length == 0) {
            return null;
        }
        int i3 = iArr[0];
        lastIndex = getLastIndex(iArr);
        if (1 <= lastIndex) {
            while (true) {
                i3 = function2.invoke(Integer.valueOf(i3), Integer.valueOf(iArr[i2])).intValue();
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Integer.valueOf(i3);
    }

    @Nullable
    public static final Short singleOrNull(@NotNull short[] sArr, @NotNull Function1<? super Short, Boolean> function1) {
        Short sh = null;
        boolean z = false;
        for (short s : sArr) {
            if (function1.invoke(Short.valueOf(s)).booleanValue()) {
                if (z) {
                    return null;
                }
                sh = Short.valueOf(s);
                z = true;
            }
        }
        if (z) {
            return sh;
        }
        return null;
    }

    @NotNull
    public static final List<Boolean> slice(@NotNull boolean[] zArr, @NotNull  Var) {
        List<Boolean> emptyList;
        if (Var.isEmpty()) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        return ArraysKt___ArraysJvmKt.asList(ArraysKt___ArraysJvmKt.copyOfRange(zArr, Var.getStart().intValue(), Var.getEndInclusive().intValue() + 1));
    }

    @NotNull
    public static final char[] sortedArray(@NotNull char[] cArr) {
        if (cArr.length == 0) {
            return cArr;
        }
        char[] copyOf = Arrays.copyOf(cArr, cArr.length);
        Intrinsics.checkExpressionValueIsNotNull(copyOf, "java.util.Arrays.copyOf(this, size)");
        ArraysKt___ArraysJvmKt.sort(copyOf);
        return copyOf;
    }

    @NotNull
    public static final char[] sortedArrayDescending(@NotNull char[] cArr) {
        if (cArr.length == 0) {
            return cArr;
        }
        char[] copyOf = Arrays.copyOf(cArr, cArr.length);
        Intrinsics.checkExpressionValueIsNotNull(copyOf, "java.util.Arrays.copyOf(this, size)");
        sortDescending(copyOf);
        return copyOf;
    }

    @NotNull
    public static final Set<Boolean> subtract(@NotNull boolean[] zArr, @NotNull Iterable<Boolean> iterable) {
        Set<Boolean> mutableSet = toMutableSet(zArr);
        CollectionsKt__MutableCollectionsKt.removeAll(mutableSet, iterable);
        return mutableSet;
    }

    public static final int sumBy(@NotNull boolean[] zArr, @NotNull Function1<? super Boolean, Integer> function1) {
        int i2 = 0;
        for (boolean z : zArr) {
            i2 += function1.invoke(Boolean.valueOf(z)).intValue();
        }
        return i2;
    }

    public static final double sumByDouble(@NotNull boolean[] zArr, @NotNull Function1<? super Boolean, Double> function1) {
        double d = 0.0d;
        for (boolean z : zArr) {
            d += function1.invoke(Boolean.valueOf(z)).doubleValue();
        }
        return d;
    }

    @NotNull
    public static final List<Short> take(@NotNull short[] sArr, int i2) {
        List<Short> listOf;
        List<Short> emptyList;
        if (!(i2 >= 0)) {
            throw new IllegalArgumentException(("Requested element count " + i2 + " is less than zero.").toString());
        } else if (i2 == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        } else if (i2 >= sArr.length) {
            return toList(sArr);
        } else {
            if (i2 == 1) {
                listOf = CollectionsKt__CollectionsJVMKt.listOf(Short.valueOf(sArr[0]));
                return listOf;
            }
            ArrayList arrayList = new ArrayList(i2);
            int i3 = 0;
            for (short s : sArr) {
                arrayList.add(Short.valueOf(s));
                i3++;
                if (i3 == i2) {
                    break;
                }
            }
            return arrayList;
        }
    }

    @NotNull
    public static final List<Short> takeLast(@NotNull short[] sArr, int i2) {
        List<Short> listOf;
        List<Short> emptyList;
        if (!(i2 >= 0)) {
            throw new IllegalArgumentException(("Requested element count " + i2 + " is less than zero.").toString());
        } else if (i2 == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        } else {
            int length = sArr.length;
            if (i2 >= length) {
                return toList(sArr);
            }
            if (i2 == 1) {
                listOf = CollectionsKt__CollectionsJVMKt.listOf(Short.valueOf(sArr[length - 1]));
                return listOf;
            }
            ArrayList arrayList = new ArrayList(i2);
            for (int i3 = length - i2; i3 < length; i3++) {
                arrayList.add(Short.valueOf(sArr[i3]));
            }
            return arrayList;
        }
    }

    @NotNull
    public static final <C extends Collection<? super Boolean>> C toCollection(@NotNull boolean[] zArr, @NotNull C c2) {
        for (boolean z : zArr) {
            c2.add(Boolean.valueOf(z));
        }
        return c2;
    }

    @NotNull
    public static final Set<Boolean> toMutableSet(@NotNull boolean[] zArr) {
        int mapCapacity;
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(zArr.length);
        LinkedHashSet linkedHashSet = new LinkedHashSet(mapCapacity);
        for (boolean z : zArr) {
            linkedHashSet.add(Boolean.valueOf(z));
        }
        return linkedHashSet;
    }

    @NotNull
    public static final Set<Boolean> union(@NotNull boolean[] zArr, @NotNull Iterable<Boolean> iterable) {
        Set<Boolean> mutableSet = toMutableSet(zArr);
        CollectionsKt__MutableCollectionsKt.addAll(mutableSet, iterable);
        return mutableSet;
    }

    public static final boolean any(@NotNull double[] dArr, @NotNull Function1<? super Double, Boolean> function1) {
        for (double d : dArr) {
            if (function1.invoke(Double.valueOf(d)).booleanValue()) {
                return true;
            }
        }
        return false;
    }

    public static final double average(@NotNull double[] dArr) {
        double d = 0.0d;
        int i2 = 0;
        for (double d2 : dArr) {
            d += d2;
            i2++;
        }
        if (i2 == 0) {
            return DoubleCompanionObject.INSTANCE.getNaN();
        }
        double d3 = i2;
        Double.isNaN(d3);
        return d / d3;
    }

    public static final int count(@NotNull double[] dArr, @NotNull Function1<? super Double, Boolean> function1) {
        int i2 = 0;
        for (double d : dArr) {
            if (function1.invoke(Double.valueOf(d)).booleanValue()) {
                i2++;
            }
        }
        return i2;
    }

    @NotNull
    public static final List<Integer> dropWhile(@NotNull int[] iArr, @NotNull Function1<? super Integer, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        boolean z = false;
        for (int i2 : iArr) {
            if (z) {
                arrayList.add(Integer.valueOf(i2));
            } else if (!function1.invoke(Integer.valueOf(i2)).booleanValue()) {
                arrayList.add(Integer.valueOf(i2));
                z = true;
            }
        }
        return arrayList;
    }

    @NotNull
    public static final List<Float> filterIndexed(@NotNull float[] fArr, @NotNull Function2<? super Integer, ? super Float, Boolean> function2) {
        ArrayList arrayList = new ArrayList();
        int length = fArr.length;
        int i2 = 0;
        int i3 = 0;
        while (i2 < length) {
            float f2 = fArr[i2];
            int i4 = i3 + 1;
            if (function2.invoke(Integer.valueOf(i3), Float.valueOf(f2)).booleanValue()) {
                arrayList.add(Float.valueOf(f2));
            }
            i2++;
            i3 = i4;
        }
        return arrayList;
    }

    @InlineOnly
    private static final Float findLast(@NotNull float[] fArr, Function1<? super Float, Boolean> function1) {
        float f2;
        int length = fArr.length;
        do {
            length--;
            if (length < 0) {
                return null;
            }
            f2 = fArr[length];
        } while (!function1.invoke(Float.valueOf(f2)).booleanValue());
        return Float.valueOf(f2);
    }

    public static final float first(@NotNull float[] fArr) {
        if (!(fArr.length == 0)) {
            return fArr[0];
        }
        throw new NoSuchElementException("Array is empty.");
    }

    @Nullable
    public static final Double firstOrNull(@NotNull double[] dArr, @NotNull Function1<? super Double, Boolean> function1) {
        for (double d : dArr) {
            if (function1.invoke(Double.valueOf(d)).booleanValue()) {
                return Double.valueOf(d);
            }
        }
        return null;
    }

    @NotNull
    public static final <R, C extends Collection<? super R>> C flatMapTo(@NotNull float[] fArr, @NotNull C c2, @NotNull Function1<? super Float, ? extends Iterable<? extends R>> function1) {
        for (float f2 : fArr) {
            CollectionsKt__MutableCollectionsKt.addAll(c2, function1.invoke(Float.valueOf(f2)));
        }
        return c2;
    }

    public static final float last(@NotNull float[] fArr) {
        if (!(fArr.length == 0)) {
            return fArr[getLastIndex(fArr)];
        }
        throw new NoSuchElementException("Array is empty.");
    }

    @Nullable
    public static final Short lastOrNull(@NotNull short[] sArr, @NotNull Function1<? super Short, Boolean> function1) {
        short s;
        int length = sArr.length;
        do {
            length--;
            if (length < 0) {
                return null;
            }
            s = sArr[length];
        } while (!function1.invoke(Short.valueOf(s)).booleanValue());
        return Short.valueOf(s);
    }

    @NotNull
    public static final <R> List<R> map(@NotNull float[] fArr, @NotNull Function1<? super Float, ? extends R> function1) {
        ArrayList arrayList = new ArrayList(fArr.length);
        for (float f2 : fArr) {
            arrayList.add(function1.invoke(Float.valueOf(f2)));
        }
        return arrayList;
    }

    @NotNull
    public static final <R> List<R> mapIndexed(@NotNull float[] fArr, @NotNull Function2<? super Integer, ? super Float, ? extends R> function2) {
        ArrayList arrayList = new ArrayList(fArr.length);
        int i2 = 0;
        for (float f2 : fArr) {
            Integer valueOf = Integer.valueOf(i2);
            i2++;
            arrayList.add(function2.invoke(valueOf, Float.valueOf(f2)));
        }
        return arrayList;
    }

    public static final boolean none(@NotNull double[] dArr, @NotNull Function1<? super Double, Boolean> function1) {
        for (double d : dArr) {
            if (function1.invoke(Double.valueOf(d)).booleanValue()) {
                return false;
            }
        }
        return true;
    }

    @SinceKotlin(version = "1.3")
    public static final short random(@NotNull short[] sArr, @NotNull Random random) {
        if (!(sArr.length == 0)) {
            return sArr[random.nextInt(sArr.length)];
        }
        throw new NoSuchElementException("Array is empty.");
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @Nullable
    public static final Integer randomOrNull(@NotNull int[] iArr, @NotNull Random random) {
        if (iArr.length == 0) {
            return null;
        }
        return Integer.valueOf(iArr[random.nextInt(iArr.length)]);
    }

    public static final int reduce(@NotNull int[] iArr, @NotNull Function2<? super Integer, ? super Integer, Integer> function2) {
        int lastIndex;
        int i2 = 1;
        if (!(iArr.length == 0)) {
            int i3 = iArr[0];
            lastIndex = getLastIndex(iArr);
            if (1 <= lastIndex) {
                while (true) {
                    i3 = function2.invoke(Integer.valueOf(i3), Integer.valueOf(iArr[i2])).intValue();
                    if (i2 == lastIndex) {
                        break;
                    }
                    i2++;
                }
            }
            return i3;
        }
        throw new UnsupportedOperationException("Empty array can't be reduced.");
    }

    public static final int reduceIndexed(@NotNull int[] iArr, @NotNull Function3<? super Integer, ? super Integer, ? super Integer, Integer> function3) {
        int lastIndex;
        int i2 = 1;
        if (!(iArr.length == 0)) {
            int i3 = iArr[0];
            lastIndex = getLastIndex(iArr);
            if (1 <= lastIndex) {
                while (true) {
                    i3 = function3.invoke(Integer.valueOf(i2), Integer.valueOf(i3), Integer.valueOf(iArr[i2])).intValue();
                    if (i2 == lastIndex) {
                        break;
                    }
                    i2++;
                }
            }
            return i3;
        }
        throw new UnsupportedOperationException("Empty array can't be reduced.");
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @Nullable
    public static final Long reduceRightOrNull(@NotNull long[] jArr, @NotNull Function2<? super Long, ? super Long, Long> function2) {
        int lastIndex;
        lastIndex = getLastIndex(jArr);
        if (lastIndex < 0) {
            return null;
        }
        long j2 = jArr[lastIndex];
        for (int i2 = lastIndex - 1; i2 >= 0; i2--) {
            j2 = function2.invoke(Long.valueOf(jArr[i2]), Long.valueOf(j2)).longValue();
        }
        return Long.valueOf(j2);
    }

    public static void reverse(@NotNull int[] iArr) {
        int lastIndex;
        int length = (iArr.length / 2) - 1;
        if (length < 0) {
            return;
        }
        lastIndex = getLastIndex(iArr);
        int i2 = 0;
        if (length < 0) {
            return;
        }
        while (true) {
            int i3 = iArr[i2];
            iArr[i2] = iArr[lastIndex];
            iArr[lastIndex] = i3;
            lastIndex--;
            if (i2 == length) {
                return;
            }
            i2++;
        }
    }

    @NotNull
    public static final List<Float> reversed(@NotNull float[] fArr) {
        List<Float> emptyList;
        if (fArr.length == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        List<Float> mutableList = toMutableList(fArr);
        CollectionsKt___CollectionsJvmKt.reverse(mutableList);
        return mutableList;
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @InlineOnly
    private static final <R> List<R> scan(@NotNull int[] iArr, R r, Function2<? super R, ? super Integer, ? extends R> function2) {
        List<R> listOf;
        if (iArr.length == 0) {
            listOf = CollectionsKt__CollectionsJVMKt.listOf(r);
            return listOf;
        }
        ArrayList arrayList = new ArrayList(iArr.length + 1);
        arrayList.add(r);
        for (int i2 : iArr) {
            r = function2.invoke(r, Integer.valueOf(i2));
            arrayList.add(r);
        }
        return arrayList;
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @InlineOnly
    private static final <R> List<R> scanIndexed(@NotNull int[] iArr, R r, Function3<? super Integer, ? super R, ? super Integer, ? extends R> function3) {
        List<R> listOf;
        if (iArr.length == 0) {
            listOf = CollectionsKt__CollectionsJVMKt.listOf(r);
            return listOf;
        }
        ArrayList arrayList = new ArrayList(iArr.length + 1);
        arrayList.add(r);
        int length = iArr.length;
        for (int i2 = 0; i2 < length; i2++) {
            r = function3.invoke(Integer.valueOf(i2), r, Integer.valueOf(iArr[i2]));
            arrayList.add(r);
        }
        return arrayList;
    }

    @NotNull
    public static final float[] sliceArray(@NotNull float[] fArr, @NotNull Collection<Integer> collection) {
        float[] fArr2 = new float[collection.size()];
        Iterator<Integer> it = collection.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            fArr2[i2] = fArr[it.next().intValue()];
            i2++;
        }
        return fArr2;
    }

    @NotNull
    public static final List<Character> toMutableList(@NotNull char[] cArr) {
        ArrayList arrayList = new ArrayList(cArr.length);
        for (char c2 : cArr) {
            arrayList.add(Character.valueOf(c2));
        }
        return arrayList;
    }

    @NotNull
    public static final <R, V> List<V> zip(@NotNull float[] fArr, @NotNull R[] rArr, @NotNull Function2<? super Float, ? super R, ? extends V> function2) {
        int min = Math.min(fArr.length, rArr.length);
        ArrayList arrayList = new ArrayList(min);
        for (int i2 = 0; i2 < min; i2++) {
            arrayList.add(function2.invoke(Float.valueOf(fArr[i2]), rArr[i2]));
        }
        return arrayList;
    }

    public static final boolean any(@NotNull boolean[] zArr, @NotNull Function1<? super Boolean, Boolean> function1) {
        for (boolean z : zArr) {
            if (function1.invoke(Boolean.valueOf(z)).booleanValue()) {
                return true;
            }
        }
        return false;
    }

    @NotNull
    public static final Iterable<Character> asIterable(@NotNull char[] cArr) {
        List emptyList;
        if (cArr.length == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        return new ArraysKt___ArraysKt$asIterable$$inlined$Iterable$9(cArr);
    }

    @NotNull
    public static final Sequence<Character> asSequence(@NotNull final char[] cArr) {
        Sequence<Character> emptySequence;
        if (cArr.length == 0) {
            emptySequence = SequencesKt__SequencesKt.emptySequence();
            return emptySequence;
        }
        return new Sequence<Character>() { // from class: kotlin.collections.ArraysKt___ArraysKt$asSequence$$inlined$Sequence$9
            @Override // kotlin.sequences.Sequence
            @NotNull
            public Iterator<Character> iterator() {
                return ArrayIteratorsKt.iterator(cArr);
            }
        };
    }

    @NotNull
    public static final <K, V> Map<K, V> associate(@NotNull long[] jArr, @NotNull Function1<? super Long, ? extends Pair<? extends K, ? extends V>> function1) {
        int mapCapacity;
        int coerceAtLeast;
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(jArr.length);
        coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(mapCapacity, 16);
        LinkedHashMap linkedHashMap = new LinkedHashMap(coerceAtLeast);
        for (long j2 : jArr) {
            Pair<? extends K, ? extends V> invoke = function1.invoke(Long.valueOf(j2));
            linkedHashMap.put(invoke.getFirst(), invoke.getSecond());
        }
        return linkedHashMap;
    }

    @NotNull
    public static final <K> Map<K, Long> associateBy(@NotNull long[] jArr, @NotNull Function1<? super Long, ? extends K> function1) {
        int mapCapacity;
        int coerceAtLeast;
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(jArr.length);
        coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(mapCapacity, 16);
        LinkedHashMap linkedHashMap = new LinkedHashMap(coerceAtLeast);
        for (long j2 : jArr) {
            linkedHashMap.put(function1.invoke(Long.valueOf(j2)), Long.valueOf(j2));
        }
        return linkedHashMap;
    }

    @NotNull
    public static final <K, M extends Map<? super K, ? super Character>> M associateByTo(@NotNull char[] cArr, @NotNull M m2, @NotNull Function1<? super Character, ? extends K> function1) {
        for (char c2 : cArr) {
            m2.put(function1.invoke(Character.valueOf(c2)), Character.valueOf(c2));
        }
        return m2;
    }

    @NotNull
    public static final <K, V, M extends Map<? super K, ? super V>> M associateTo(@NotNull char[] cArr, @NotNull M m2, @NotNull Function1<? super Character, ? extends Pair<? extends K, ? extends V>> function1) {
        for (char c2 : cArr) {
            Pair<? extends K, ? extends V> invoke = function1.invoke(Character.valueOf(c2));
            m2.put(invoke.getFirst(), invoke.getSecond());
        }
        return m2;
    }

    public static final int count(@NotNull boolean[] zArr, @NotNull Function1<? super Boolean, Boolean> function1) {
        int i2 = 0;
        for (boolean z : zArr) {
            if (function1.invoke(Boolean.valueOf(z)).booleanValue()) {
                i2++;
            }
        }
        return i2;
    }

    @NotNull
    public static final List<Character> drop(@NotNull char[] cArr, int i2) {
        int coerceAtLeast;
        if (i2 >= 0) {
            coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(cArr.length - i2, 0);
            return takeLast(cArr, coerceAtLeast);
        }
        throw new IllegalArgumentException(("Requested element count " + i2 + " is less than zero.").toString());
    }

    @NotNull
    public static final List<Character> dropLast(@NotNull char[] cArr, int i2) {
        int coerceAtLeast;
        if (i2 >= 0) {
            coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(cArr.length - i2, 0);
            return take(cArr, coerceAtLeast);
        }
        throw new IllegalArgumentException(("Requested element count " + i2 + " is less than zero.").toString());
    }

    @NotNull
    public static final List<Long> dropLastWhile(@NotNull long[] jArr, @NotNull Function1<? super Long, Boolean> function1) {
        int lastIndex;
        List<Long> emptyList;
        for (lastIndex = getLastIndex(jArr); lastIndex >= 0; lastIndex--) {
            if (!function1.invoke(Long.valueOf(jArr[lastIndex])).booleanValue()) {
                return take(jArr, lastIndex + 1);
            }
        }
        emptyList = CollectionsKt__CollectionsKt.emptyList();
        return emptyList;
    }

    @NotNull
    public static final List<Character> filter(@NotNull char[] cArr, @NotNull Function1<? super Character, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        for (char c2 : cArr) {
            if (function1.invoke(Character.valueOf(c2)).booleanValue()) {
                arrayList.add(Character.valueOf(c2));
            }
        }
        return arrayList;
    }

    @NotNull
    public static final <C extends Collection<? super Character>> C filterIndexedTo(@NotNull char[] cArr, @NotNull C c2, @NotNull Function2<? super Integer, ? super Character, Boolean> function2) {
        int length = cArr.length;
        int i2 = 0;
        int i3 = 0;
        while (i2 < length) {
            char c3 = cArr[i2];
            int i4 = i3 + 1;
            if (function2.invoke(Integer.valueOf(i3), Character.valueOf(c3)).booleanValue()) {
                c2.add(Character.valueOf(c3));
            }
            i2++;
            i3 = i4;
        }
        return c2;
    }

    @NotNull
    public static final List<Character> filterNot(@NotNull char[] cArr, @NotNull Function1<? super Character, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        for (char c2 : cArr) {
            if (!function1.invoke(Character.valueOf(c2)).booleanValue()) {
                arrayList.add(Character.valueOf(c2));
            }
        }
        return arrayList;
    }

    @Nullable
    public static final Boolean firstOrNull(@NotNull boolean[] zArr, @NotNull Function1<? super Boolean, Boolean> function1) {
        for (boolean z : zArr) {
            if (function1.invoke(Boolean.valueOf(z)).booleanValue()) {
                return Boolean.valueOf(z);
            }
        }
        return null;
    }

    @NotNull
    public static final <R> List<R> flatMap(@NotNull long[] jArr, @NotNull Function1<? super Long, ? extends Iterable<? extends R>> function1) {
        ArrayList arrayList = new ArrayList();
        for (long j2 : jArr) {
            CollectionsKt__MutableCollectionsKt.addAll(arrayList, function1.invoke(Long.valueOf(j2)));
        }
        return arrayList;
    }

    public static final <R> R foldRight(@NotNull char[] cArr, R r, @NotNull Function2<? super Character, ? super R, ? extends R> function2) {
        for (int lastIndex = getLastIndex(cArr); lastIndex >= 0; lastIndex--) {
            r = function2.invoke(Character.valueOf(cArr[lastIndex]), r);
        }
        return r;
    }

    public static final <R> R foldRightIndexed(@NotNull char[] cArr, R r, @NotNull Function3<? super Integer, ? super Character, ? super R, ? extends R> function3) {
        for (int lastIndex = getLastIndex(cArr); lastIndex >= 0; lastIndex--) {
            r = function3.invoke(Integer.valueOf(lastIndex), Character.valueOf(cArr[lastIndex]), r);
        }
        return r;
    }

    @NotNull
    public static final <K> Map<K, List<Short>> groupBy(@NotNull short[] sArr, @NotNull Function1<? super Short, ? extends K> function1) {
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        for (short s : sArr) {
            K invoke = function1.invoke(Short.valueOf(s));
            Object obj = linkedHashMap.get(invoke);
            if (obj == null) {
                obj = new ArrayList();
                linkedHashMap.put(invoke, obj);
            }
            ((List) obj).add(Short.valueOf(s));
        }
        return linkedHashMap;
    }

    public static final int indexOf(@NotNull boolean[] zArr, boolean z) {
        int length = zArr.length;
        for (int i2 = 0; i2 < length; i2++) {
            if (z == zArr[i2]) {
                return i2;
            }
        }
        return -1;
    }

    public static final int indexOfFirst(@NotNull char[] cArr, @NotNull Function1<? super Character, Boolean> function1) {
        int length = cArr.length;
        for (int i2 = 0; i2 < length; i2++) {
            if (function1.invoke(Character.valueOf(cArr[i2])).booleanValue()) {
                return i2;
            }
        }
        return -1;
    }

    public static final int indexOfLast(@NotNull char[] cArr, @NotNull Function1<? super Character, Boolean> function1) {
        for (int length = cArr.length - 1; length >= 0; length--) {
            if (function1.invoke(Character.valueOf(cArr[length])).booleanValue()) {
                return length;
            }
        }
        return -1;
    }

    @NotNull
    public static final Set<Character> intersect(@NotNull char[] cArr, @NotNull Iterable<Character> iterable) {
        Set<Character> mutableSet = toMutableSet(cArr);
        CollectionsKt__MutableCollectionsKt.retainAll(mutableSet, iterable);
        return mutableSet;
    }

    public static final int lastIndexOf(@NotNull boolean[] zArr, boolean z) {
        for (int length = zArr.length - 1; length >= 0; length--) {
            if (z == zArr[length]) {
                return length;
            }
        }
        return -1;
    }

    @NotNull
    public static final <R, C extends Collection<? super R>> C mapIndexedTo(@NotNull char[] cArr, @NotNull C c2, @NotNull Function2<? super Integer, ? super Character, ? extends R> function2) {
        int i2 = 0;
        for (char c3 : cArr) {
            Integer valueOf = Integer.valueOf(i2);
            i2++;
            c2.add(function2.invoke(valueOf, Character.valueOf(c3)));
        }
        return c2;
    }

    @NotNull
    public static final <R, C extends Collection<? super R>> C mapTo(@NotNull char[] cArr, @NotNull C c2, @NotNull Function1<? super Character, ? extends R> function1) {
        for (char c3 : cArr) {
            c2.add(function1.invoke(Character.valueOf(c3)));
        }
        return c2;
    }

    @Nullable
    public static final <R extends Comparable<? super R>> Short maxBy(@NotNull short[] sArr, @NotNull Function1<? super Short, ? extends R> function1) {
        int lastIndex;
        int i2 = 1;
        if (sArr.length == 0) {
            return null;
        }
        short s = sArr[0];
        lastIndex = getLastIndex(sArr);
        if (lastIndex == 0) {
            return Short.valueOf(s);
        }
        R invoke = function1.invoke(Short.valueOf(s));
        if (1 <= lastIndex) {
            while (true) {
                short s2 = sArr[i2];
                R invoke2 = function1.invoke(Short.valueOf(s2));
                if (invoke.compareTo(invoke2) < 0) {
                    s = s2;
                    invoke = invoke2;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Short.valueOf(s);
    }

    @Nullable
    public static final <R extends Comparable<? super R>> Short minBy(@NotNull short[] sArr, @NotNull Function1<? super Short, ? extends R> function1) {
        int lastIndex;
        int i2 = 1;
        if (sArr.length == 0) {
            return null;
        }
        short s = sArr[0];
        lastIndex = getLastIndex(sArr);
        if (lastIndex == 0) {
            return Short.valueOf(s);
        }
        R invoke = function1.invoke(Short.valueOf(s));
        if (1 <= lastIndex) {
            while (true) {
                short s2 = sArr[i2];
                R invoke2 = function1.invoke(Short.valueOf(s2));
                if (invoke.compareTo(invoke2) > 0) {
                    s = s2;
                    invoke = invoke2;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Short.valueOf(s);
    }

    public static final boolean none(@NotNull boolean[] zArr, @NotNull Function1<? super Boolean, Boolean> function1) {
        for (boolean z : zArr) {
            if (function1.invoke(Boolean.valueOf(z)).booleanValue()) {
                return false;
            }
        }
        return true;
    }

    public static final long reduceRight(@NotNull long[] jArr, @NotNull Function2<? super Long, ? super Long, Long> function2) {
        int lastIndex;
        lastIndex = getLastIndex(jArr);
        if (lastIndex >= 0) {
            long j2 = jArr[lastIndex];
            for (int i2 = lastIndex - 1; i2 >= 0; i2--) {
                j2 = function2.invoke(Long.valueOf(jArr[i2]), Long.valueOf(j2)).longValue();
            }
            return j2;
        }
        throw new UnsupportedOperationException("Empty array can't be reduced.");
    }

    public static final long reduceRightIndexed(@NotNull long[] jArr, @NotNull Function3<? super Integer, ? super Long, ? super Long, Long> function3) {
        int lastIndex;
        lastIndex = getLastIndex(jArr);
        if (lastIndex >= 0) {
            long j2 = jArr[lastIndex];
            for (int i2 = lastIndex - 1; i2 >= 0; i2--) {
                j2 = function3.invoke(Integer.valueOf(i2), Long.valueOf(jArr[i2]), Long.valueOf(j2)).longValue();
            }
            return j2;
        }
        throw new UnsupportedOperationException("Empty array can't be reduced.");
    }

    @NotNull
    public static long[] reversedArray(@NotNull long[] jArr) {
        int lastIndex;
        int i2 = 0;
        if (jArr.length == 0) {
            return jArr;
        }
        long[] jArr2 = new long[jArr.length];
        lastIndex = getLastIndex(jArr);
        if (lastIndex >= 0) {
            while (true) {
                jArr2[lastIndex - i2] = jArr[i2];
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return jArr2;
    }

    public static long single(@NotNull long[] jArr) {
        int length = jArr.length;
        if (length != 0) {
            if (length == 1) {
                return jArr[0];
            }
            throw new IllegalArgumentException("Array has more than one element.");
        }
        throw new NoSuchElementException("Array is empty.");
    }

    @NotNull
    public static final List<Character> slice(@NotNull char[] cArr, @NotNull  Var) {
        List<Character> emptyList;
        if (Var.isEmpty()) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        return ArraysKt___ArraysJvmKt.asList(ArraysKt___ArraysJvmKt.copyOfRange(cArr, Var.getStart().intValue(), Var.getEndInclusive().intValue() + 1));
    }

    public static final void sortDescending(@NotNull double[] dArr) {
        if (dArr.length > 1) {
            ArraysKt___ArraysJvmKt.sort(dArr);
            reverse(dArr);
        }
    }

    @NotNull
    public static final Set<Character> subtract(@NotNull char[] cArr, @NotNull Iterable<Character> iterable) {
        Set<Character> mutableSet = toMutableSet(cArr);
        CollectionsKt__MutableCollectionsKt.removeAll(mutableSet, iterable);
        return mutableSet;
    }

    public static final int sumBy(@NotNull char[] cArr, @NotNull Function1<? super Character, Integer> function1) {
        int i2 = 0;
        for (char c2 : cArr) {
            i2 += function1.invoke(Character.valueOf(c2)).intValue();
        }
        return i2;
    }

    public static final double sumByDouble(@NotNull char[] cArr, @NotNull Function1<? super Character, Double> function1) {
        double d = 0.0d;
        for (char c2 : cArr) {
            d += function1.invoke(Character.valueOf(c2)).doubleValue();
        }
        return d;
    }

    @NotNull
    public static final List<Long> takeLastWhile(@NotNull long[] jArr, @NotNull Function1<? super Long, Boolean> function1) {
        int lastIndex;
        for (lastIndex = getLastIndex(jArr); lastIndex >= 0; lastIndex--) {
            if (!function1.invoke(Long.valueOf(jArr[lastIndex])).booleanValue()) {
                return drop(jArr, lastIndex + 1);
            }
        }
        return toList(jArr);
    }

    @NotNull
    public static final List<Long> takeWhile(@NotNull long[] jArr, @NotNull Function1<? super Long, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        for (long j2 : jArr) {
            if (!function1.invoke(Long.valueOf(j2)).booleanValue()) {
                break;
            }
            arrayList.add(Long.valueOf(j2));
        }
        return arrayList;
    }

    @NotNull
    public static final <C extends Collection<? super Character>> C toCollection(@NotNull char[] cArr, @NotNull C c2) {
        for (char c3 : cArr) {
            c2.add(Character.valueOf(c3));
        }
        return c2;
    }

    @NotNull
    public static final List<Long> toList(@NotNull long[] jArr) {
        List<Long> emptyList;
        List<Long> listOf;
        int length = jArr.length;
        if (length == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        } else if (length != 1) {
            return toMutableList(jArr);
        } else {
            listOf = CollectionsKt__CollectionsJVMKt.listOf(Long.valueOf(jArr[0]));
            return listOf;
        }
    }

    @NotNull
    public static final Set<Character> toMutableSet(@NotNull char[] cArr) {
        int mapCapacity;
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(cArr.length);
        LinkedHashSet linkedHashSet = new LinkedHashSet(mapCapacity);
        for (char c2 : cArr) {
            linkedHashSet.add(Character.valueOf(c2));
        }
        return linkedHashSet;
    }

    @NotNull
    public static final Set<Long> toSet(@NotNull long[] jArr) {
        Set<Long> emptySet;
        Set<Long> of;
        int mapCapacity;
        int length = jArr.length;
        if (length == 0) {
            emptySet = SetsKt__SetsKt.emptySet();
            return emptySet;
        } else if (length != 1) {
            mapCapacity = MapsKt__MapsJVMKt.mapCapacity(jArr.length);
            return (Set) toCollection(jArr, new LinkedHashSet(mapCapacity));
        } else {
            of = SetsKt__SetsJVMKt.setOf(Long.valueOf(jArr[0]));
            return of;
        }
    }

    @NotNull
    public static final Set<Character> union(@NotNull char[] cArr, @NotNull Iterable<Character> iterable) {
        Set<Character> mutableSet = toMutableSet(cArr);
        CollectionsKt__MutableCollectionsKt.addAll(mutableSet, iterable);
        return mutableSet;
    }

    public static final boolean any(@NotNull char[] cArr, @NotNull Function1<? super Character, Boolean> function1) {
        for (char c2 : cArr) {
            if (function1.invoke(Character.valueOf(c2)).booleanValue()) {
                return true;
            }
        }
        return false;
    }

    public static final int count(@NotNull char[] cArr, @NotNull Function1<? super Character, Boolean> function1) {
        int i2 = 0;
        for (char c2 : cArr) {
            if (function1.invoke(Character.valueOf(c2)).booleanValue()) {
                i2++;
            }
        }
        return i2;
    }

    @Nullable
    public static final Character firstOrNull(@NotNull char[] cArr, @NotNull Function1<? super Character, Boolean> function1) {
        for (char c2 : cArr) {
            if (function1.invoke(Character.valueOf(c2)).booleanValue()) {
                return Character.valueOf(c2);
            }
        }
        return null;
    }

    @Nullable
    public static final Integer maxWith(@NotNull int[] iArr, @NotNull Comparator<? super Integer> comparator) {
        int lastIndex;
        int i2 = 1;
        if (iArr.length == 0) {
            return null;
        }
        int i3 = iArr[0];
        lastIndex = getLastIndex(iArr);
        if (1 <= lastIndex) {
            while (true) {
                int i4 = iArr[i2];
                if (comparator.compare(Integer.valueOf(i3), Integer.valueOf(i4)) < 0) {
                    i3 = i4;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Integer.valueOf(i3);
    }

    @Nullable
    public static final Integer minWith(@NotNull int[] iArr, @NotNull Comparator<? super Integer> comparator) {
        int lastIndex;
        int i2 = 1;
        if (iArr.length == 0) {
            return null;
        }
        int i3 = iArr[0];
        lastIndex = getLastIndex(iArr);
        if (1 <= lastIndex) {
            while (true) {
                int i4 = iArr[i2];
                if (comparator.compare(Integer.valueOf(i3), Integer.valueOf(i4)) > 0) {
                    i3 = i4;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Integer.valueOf(i3);
    }

    public static final boolean none(@NotNull char[] cArr, @NotNull Function1<? super Character, Boolean> function1) {
        for (char c2 : cArr) {
            if (function1.invoke(Character.valueOf(c2)).booleanValue()) {
                return false;
            }
        }
        return true;
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @Nullable
    public static final Long randomOrNull(@NotNull long[] jArr, @NotNull Random random) {
        if (jArr.length == 0) {
            return null;
        }
        return Long.valueOf(jArr[random.nextInt(jArr.length)]);
    }

    @Nullable
    public static final Integer singleOrNull(@NotNull int[] iArr, @NotNull Function1<? super Integer, Boolean> function1) {
        Integer num = null;
        boolean z = false;
        for (int i2 : iArr) {
            if (function1.invoke(Integer.valueOf(i2)).booleanValue()) {
                if (z) {
                    return null;
                }
                num = Integer.valueOf(i2);
                z = true;
            }
        }
        if (z) {
            return num;
        }
        return null;
    }

    @NotNull
    public static final <T, K, V, M extends Map<? super K, ? super V>> M associateByTo(@NotNull T[] tArr, @NotNull M m2, @NotNull Function1<? super T, ? extends K> function1, @NotNull Function1<? super T, ? extends V> function12) {
        for (T t : tArr) {
            m2.put(function1.invoke(t), function12.invoke(t));
        }
        return m2;
    }

    @NotNull
    public static final <K> List<Integer> distinctBy(@NotNull int[] iArr, @NotNull Function1<? super Integer, ? extends K> function1) {
        HashSet hashSet = new HashSet();
        ArrayList arrayList = new ArrayList();
        for (int i2 : iArr) {
            if (hashSet.add(function1.invoke(Integer.valueOf(i2)))) {
                arrayList.add(Integer.valueOf(i2));
            }
        }
        return arrayList;
    }

    @NotNull
    public static final List<Double> filterIndexed(@NotNull double[] dArr, @NotNull Function2<? super Integer, ? super Double, Boolean> function2) {
        ArrayList arrayList = new ArrayList();
        int length = dArr.length;
        int i2 = 0;
        int i3 = 0;
        while (i2 < length) {
            double d = dArr[i2];
            int i4 = i3 + 1;
            if (function2.invoke(Integer.valueOf(i3), Double.valueOf(d)).booleanValue()) {
                arrayList.add(Double.valueOf(d));
            }
            i2++;
            i3 = i4;
        }
        return arrayList;
    }

    @InlineOnly
    private static final Double findLast(@NotNull double[] dArr, Function1<? super Double, Boolean> function1) {
        double d;
        int length = dArr.length;
        do {
            length--;
            if (length < 0) {
                return null;
            }
            d = dArr[length];
        } while (!function1.invoke(Double.valueOf(d)).booleanValue());
        return Double.valueOf(d);
    }

    public static final double first(@NotNull double[] dArr) {
        if (!(dArr.length == 0)) {
            return dArr[0];
        }
        throw new NoSuchElementException("Array is empty.");
    }

    @NotNull
    public static final <R, C extends Collection<? super R>> C flatMapTo(@NotNull double[] dArr, @NotNull C c2, @NotNull Function1<? super Double, ? extends Iterable<? extends R>> function1) {
        for (double d : dArr) {
            CollectionsKt__MutableCollectionsKt.addAll(c2, function1.invoke(Double.valueOf(d)));
        }
        return c2;
    }

    public static final int indexOf(@NotNull char[] cArr, char c2) {
        int length = cArr.length;
        for (int i2 = 0; i2 < length; i2++) {
            if (c2 == cArr[i2]) {
                return i2;
            }
        }
        return -1;
    }

    public static final double last(@NotNull double[] dArr) {
        if (!(dArr.length == 0)) {
            return dArr[getLastIndex(dArr)];
        }
        throw new NoSuchElementException("Array is empty.");
    }

    public static final int lastIndexOf(@NotNull char[] cArr, char c2) {
        for (int length = cArr.length - 1; length >= 0; length--) {
            if (c2 == cArr[length]) {
                return length;
            }
        }
        return -1;
    }

    @Nullable
    public static final Integer lastOrNull(@NotNull int[] iArr, @NotNull Function1<? super Integer, Boolean> function1) {
        int i2;
        int length = iArr.length;
        do {
            length--;
            if (length < 0) {
                return null;
            }
            i2 = iArr[length];
        } while (!function1.invoke(Integer.valueOf(i2)).booleanValue());
        return Integer.valueOf(i2);
    }

    @NotNull
    public static final <R> List<R> map(@NotNull double[] dArr, @NotNull Function1<? super Double, ? extends R> function1) {
        ArrayList arrayList = new ArrayList(dArr.length);
        for (double d : dArr) {
            arrayList.add(function1.invoke(Double.valueOf(d)));
        }
        return arrayList;
    }

    @NotNull
    public static final <R> List<R> mapIndexed(@NotNull double[] dArr, @NotNull Function2<? super Integer, ? super Double, ? extends R> function2) {
        ArrayList arrayList = new ArrayList(dArr.length);
        int i2 = 0;
        for (double d : dArr) {
            Integer valueOf = Integer.valueOf(i2);
            i2++;
            arrayList.add(function2.invoke(valueOf, Double.valueOf(d)));
        }
        return arrayList;
    }

    @SinceKotlin(version = "1.3")
    public static final int random(@NotNull int[] iArr, @NotNull Random random) {
        if (!(iArr.length == 0)) {
            return iArr[random.nextInt(iArr.length)];
        }
        throw new NoSuchElementException("Array is empty.");
    }

    @NotNull
    public static final List<Double> reversed(@NotNull double[] dArr) {
        List<Double> emptyList;
        if (dArr.length == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        List<Double> mutableList = toMutableList(dArr);
        CollectionsKt___CollectionsJvmKt.reverse(mutableList);
        return mutableList;
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @InlineOnly
    private static final List<Integer> scanReduce(@NotNull int[] iArr, Function2<? super Integer, ? super Integer, Integer> function2) {
        List<Integer> emptyList;
        if (iArr.length == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        int i2 = iArr[0];
        ArrayList arrayList = new ArrayList(iArr.length);
        arrayList.add(Integer.valueOf(i2));
        int length = iArr.length;
        for (int i3 = 1; i3 < length; i3++) {
            i2 = function2.invoke(Integer.valueOf(i2), Integer.valueOf(iArr[i3])).intValue();
            arrayList.add(Integer.valueOf(i2));
        }
        return arrayList;
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @InlineOnly
    private static final List<Integer> scanReduceIndexed(@NotNull int[] iArr, Function3<? super Integer, ? super Integer, ? super Integer, Integer> function3) {
        List<Integer> emptyList;
        if (iArr.length == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        int i2 = iArr[0];
        ArrayList arrayList = new ArrayList(iArr.length);
        arrayList.add(Integer.valueOf(i2));
        int length = iArr.length;
        for (int i3 = 1; i3 < length; i3++) {
            i2 = function3.invoke(Integer.valueOf(i3), Integer.valueOf(i2), Integer.valueOf(iArr[i3])).intValue();
            arrayList.add(Integer.valueOf(i2));
        }
        return arrayList;
    }

    @NotNull
    public static final <T> List<T> slice(@NotNull T[] tArr, @NotNull Iterable<Integer> iterable) {
        int collectionSizeOrDefault;
        List<T> emptyList;
        collectionSizeOrDefault = CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10);
        if (collectionSizeOrDefault == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        ArrayList arrayList = new ArrayList(collectionSizeOrDefault);
        Iterator<Integer> it = iterable.iterator();
        while (it.hasNext()) {
            arrayList.add(tArr[it.next().intValue()]);
        }
        return arrayList;
    }

    @NotNull
    public static final double[] sliceArray(@NotNull double[] dArr, @NotNull Collection<Integer> collection) {
        double[] dArr2 = new double[collection.size()];
        Iterator<Integer> it = collection.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            dArr2[i2] = dArr[it.next().intValue()];
            i2++;
        }
        return dArr2;
    }

    @NotNull
    public static final <R, V> List<V> zip(@NotNull double[] dArr, @NotNull R[] rArr, @NotNull Function2<? super Double, ? super R, ? extends V> function2) {
        int min = Math.min(dArr.length, rArr.length);
        ArrayList arrayList = new ArrayList(min);
        for (int i2 = 0; i2 < min; i2++) {
            arrayList.add(function2.invoke(Double.valueOf(dArr[i2]), rArr[i2]));
        }
        return arrayList;
    }

    @Nullable
    public static final Byte max(@NotNull byte[] bArr) {
        int lastIndex;
        int i2 = 1;
        if (bArr.length == 0) {
            return null;
        }
        byte b = bArr[0];
        lastIndex = getLastIndex(bArr);
        if (1 <= lastIndex) {
            while (true) {
                byte b2 = bArr[i2];
                if (b < b2) {
                    b = b2;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Byte.valueOf(b);
    }

    @Nullable
    public static final Byte min(@NotNull byte[] bArr) {
        int lastIndex;
        int i2 = 1;
        if (bArr.length == 0) {
            return null;
        }
        byte b = bArr[0];
        lastIndex = getLastIndex(bArr);
        if (1 <= lastIndex) {
            while (true) {
                byte b2 = bArr[i2];
                if (b > b2) {
                    b = b2;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Byte.valueOf(b);
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @Nullable
    public static final Float randomOrNull(@NotNull float[] fArr, @NotNull Random random) {
        if (fArr.length == 0) {
            return null;
        }
        return Float.valueOf(fArr[random.nextInt(fArr.length)]);
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @Nullable
    public static final Long reduceOrNull(@NotNull long[] jArr, @NotNull Function2<? super Long, ? super Long, Long> function2) {
        int lastIndex;
        int i2 = 1;
        if (jArr.length == 0) {
            return null;
        }
        long j2 = jArr[0];
        lastIndex = getLastIndex(jArr);
        if (1 <= lastIndex) {
            while (true) {
                j2 = function2.invoke(Long.valueOf(j2), Long.valueOf(jArr[i2])).longValue();
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Long.valueOf(j2);
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @Nullable
    public static final Float reduceRightOrNull(@NotNull float[] fArr, @NotNull Function2<? super Float, ? super Float, Float> function2) {
        int lastIndex = getLastIndex(fArr);
        if (lastIndex < 0) {
            return null;
        }
        float f2 = fArr[lastIndex];
        for (int i2 = lastIndex - 1; i2 >= 0; i2--) {
            f2 = function2.invoke(Float.valueOf(fArr[i2]), Float.valueOf(f2)).floatValue();
        }
        return Float.valueOf(f2);
    }

    public static final void sortDescending(@NotNull char[] cArr) {
        if (cArr.length > 1) {
            ArraysKt___ArraysJvmKt.sort(cArr);
            reverse(cArr);
        }
    }

    @NotNull
    public static final <K, V> Map<K, V> associate(@NotNull float[] fArr, @NotNull Function1<? super Float, ? extends Pair<? extends K, ? extends V>> function1) {
        int mapCapacity;
        int coerceAtLeast;
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(fArr.length);
        coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(mapCapacity, 16);
        LinkedHashMap linkedHashMap = new LinkedHashMap(coerceAtLeast);
        for (float f2 : fArr) {
            Pair<? extends K, ? extends V> invoke = function1.invoke(Float.valueOf(f2));
            linkedHashMap.put(invoke.getFirst(), invoke.getSecond());
        }
        return linkedHashMap;
    }

    @NotNull
    public static final <K> Map<K, Float> associateBy(@NotNull float[] fArr, @NotNull Function1<? super Float, ? extends K> function1) {
        int mapCapacity;
        int coerceAtLeast;
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(fArr.length);
        coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(mapCapacity, 16);
        LinkedHashMap linkedHashMap = new LinkedHashMap(coerceAtLeast);
        for (float f2 : fArr) {
            linkedHashMap.put(function1.invoke(Float.valueOf(f2)), Float.valueOf(f2));
        }
        return linkedHashMap;
    }

    @NotNull
    public static final <K, V, M extends Map<? super K, ? super V>> M associateByTo(@NotNull byte[] bArr, @NotNull M m2, @NotNull Function1<? super Byte, ? extends K> function1, @NotNull Function1<? super Byte, ? extends V> function12) {
        for (byte b : bArr) {
            m2.put(function1.invoke(Byte.valueOf(b)), function12.invoke(Byte.valueOf(b)));
        }
        return m2;
    }

    @NotNull
    public static final List<Float> dropLastWhile(@NotNull float[] fArr, @NotNull Function1<? super Float, Boolean> function1) {
        List<Float> emptyList;
        for (int lastIndex = getLastIndex(fArr); lastIndex >= 0; lastIndex--) {
            if (!function1.invoke(Float.valueOf(fArr[lastIndex])).booleanValue()) {
                return take(fArr, lastIndex + 1);
            }
        }
        emptyList = CollectionsKt__CollectionsKt.emptyList();
        return emptyList;
    }

    @NotNull
    public static final List<Long> dropWhile(@NotNull long[] jArr, @NotNull Function1<? super Long, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        boolean z = false;
        for (long j2 : jArr) {
            if (z) {
                arrayList.add(Long.valueOf(j2));
            } else if (!function1.invoke(Long.valueOf(j2)).booleanValue()) {
                arrayList.add(Long.valueOf(j2));
                z = true;
            }
        }
        return arrayList;
    }

    @NotNull
    public static final <R> List<R> flatMap(@NotNull float[] fArr, @NotNull Function1<? super Float, ? extends Iterable<? extends R>> function1) {
        ArrayList arrayList = new ArrayList();
        for (float f2 : fArr) {
            CollectionsKt__MutableCollectionsKt.addAll(arrayList, function1.invoke(Float.valueOf(f2)));
        }
        return arrayList;
    }

    @NotNull
    public static final <A extends Appendable> A joinTo(@NotNull int[] iArr, @NotNull A a, @NotNull CharSequence charSequence, @NotNull CharSequence charSequence2, @NotNull CharSequence charSequence3, int i2, @NotNull CharSequence charSequence4, @Nullable Function1<? super Integer, ? extends CharSequence> function1) {
        a.append(charSequence2);
        int i3 = 0;
        for (int i4 : iArr) {
            i3++;
            if (i3 > 1) {
                a.append(charSequence);
            }
            if (i2 >= 0 && i3 > i2) {
                break;
            }
            if (function1 != null) {
                a.append(function1.invoke(Integer.valueOf(i4)));
            } else {
                a.append(String.valueOf(i4));
            }
        }
        if (i2 >= 0 && i3 > i2) {
            a.append(charSequence4);
        }
        a.append(charSequence3);
        return a;
    }

    public static final long reduce(@NotNull long[] jArr, @NotNull Function2<? super Long, ? super Long, Long> function2) {
        int lastIndex;
        int i2 = 1;
        if (!(jArr.length == 0)) {
            long j2 = jArr[0];
            lastIndex = getLastIndex(jArr);
            if (1 <= lastIndex) {
                while (true) {
                    j2 = function2.invoke(Long.valueOf(j2), Long.valueOf(jArr[i2])).longValue();
                    if (i2 == lastIndex) {
                        break;
                    }
                    i2++;
                }
            }
            return j2;
        }
        throw new UnsupportedOperationException("Empty array can't be reduced.");
    }

    public static final long reduceIndexed(@NotNull long[] jArr, @NotNull Function3<? super Integer, ? super Long, ? super Long, Long> function3) {
        int lastIndex;
        int i2 = 1;
        if (!(jArr.length == 0)) {
            long j2 = jArr[0];
            lastIndex = getLastIndex(jArr);
            if (1 <= lastIndex) {
                while (true) {
                    j2 = function3.invoke(Integer.valueOf(i2), Long.valueOf(j2), Long.valueOf(jArr[i2])).longValue();
                    if (i2 == lastIndex) {
                        break;
                    }
                    i2++;
                }
            }
            return j2;
        }
        throw new UnsupportedOperationException("Empty array can't be reduced.");
    }

    public static final float reduceRight(@NotNull float[] fArr, @NotNull Function2<? super Float, ? super Float, Float> function2) {
        int lastIndex = getLastIndex(fArr);
        if (lastIndex >= 0) {
            float f2 = fArr[lastIndex];
            for (int i2 = lastIndex - 1; i2 >= 0; i2--) {
                f2 = function2.invoke(Float.valueOf(fArr[i2]), Float.valueOf(f2)).floatValue();
            }
            return f2;
        }
        throw new UnsupportedOperationException("Empty array can't be reduced.");
    }

    public static final float reduceRightIndexed(@NotNull float[] fArr, @NotNull Function3<? super Integer, ? super Float, ? super Float, Float> function3) {
        int lastIndex = getLastIndex(fArr);
        if (lastIndex >= 0) {
            float f2 = fArr[lastIndex];
            for (int i2 = lastIndex - 1; i2 >= 0; i2--) {
                f2 = function3.invoke(Integer.valueOf(i2), Float.valueOf(fArr[i2]), Float.valueOf(f2)).floatValue();
            }
            return f2;
        }
        throw new UnsupportedOperationException("Empty array can't be reduced.");
    }

    public static void reverse(@NotNull long[] jArr) {
        int lastIndex;
        int length = (jArr.length / 2) - 1;
        if (length < 0) {
            return;
        }
        lastIndex = getLastIndex(jArr);
        int i2 = 0;
        if (length < 0) {
            return;
        }
        while (true) {
            long j2 = jArr[i2];
            jArr[i2] = jArr[lastIndex];
            jArr[lastIndex] = j2;
            lastIndex--;
            if (i2 == length) {
                return;
            }
            i2++;
        }
    }

    @NotNull
    public static final float[] reversedArray(@NotNull float[] fArr) {
        int i2 = 0;
        if (fArr.length == 0) {
            return fArr;
        }
        float[] fArr2 = new float[fArr.length];
        int lastIndex = getLastIndex(fArr);
        if (lastIndex >= 0) {
            while (true) {
                fArr2[lastIndex - i2] = fArr[i2];
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return fArr2;
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @InlineOnly
    private static final <R> List<R> scan(@NotNull long[] jArr, R r, Function2<? super R, ? super Long, ? extends R> function2) {
        List<R> listOf;
        if (jArr.length == 0) {
            listOf = CollectionsKt__CollectionsJVMKt.listOf(r);
            return listOf;
        }
        ArrayList arrayList = new ArrayList(jArr.length + 1);
        arrayList.add(r);
        for (long j2 : jArr) {
            r = function2.invoke(r, Long.valueOf(j2));
            arrayList.add(r);
        }
        return arrayList;
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @InlineOnly
    private static final <R> List<R> scanIndexed(@NotNull long[] jArr, R r, Function3<? super Integer, ? super R, ? super Long, ? extends R> function3) {
        List<R> listOf;
        if (jArr.length == 0) {
            listOf = CollectionsKt__CollectionsJVMKt.listOf(r);
            return listOf;
        }
        ArrayList arrayList = new ArrayList(jArr.length + 1);
        arrayList.add(r);
        int length = jArr.length;
        for (int i2 = 0; i2 < length; i2++) {
            r = function3.invoke(Integer.valueOf(i2), r, Long.valueOf(jArr[i2]));
            arrayList.add(r);
        }
        return arrayList;
    }

    public static final float single(@NotNull float[] fArr) {
        int length = fArr.length;
        if (length != 0) {
            if (length == 1) {
                return fArr[0];
            }
            throw new IllegalArgumentException("Array has more than one element.");
        }
        throw new NoSuchElementException("Array is empty.");
    }

    @Nullable
    public static final Long singleOrNull(@NotNull long[] jArr, @NotNull Function1<? super Long, Boolean> function1) {
        Long l2 = null;
        boolean z = false;
        for (long j2 : jArr) {
            if (function1.invoke(Long.valueOf(j2)).booleanValue()) {
                if (z) {
                    return null;
                }
                l2 = Long.valueOf(j2);
                z = true;
            }
        }
        if (z) {
            return l2;
        }
        return null;
    }

    @NotNull
    public static final List<Float> takeLastWhile(@NotNull float[] fArr, @NotNull Function1<? super Float, Boolean> function1) {
        for (int lastIndex = getLastIndex(fArr); lastIndex >= 0; lastIndex--) {
            if (!function1.invoke(Float.valueOf(fArr[lastIndex])).booleanValue()) {
                return drop(fArr, lastIndex + 1);
            }
        }
        return toList(fArr);
    }

    @NotNull
    public static final List<Float> takeWhile(@NotNull float[] fArr, @NotNull Function1<? super Float, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        for (float f2 : fArr) {
            if (!function1.invoke(Float.valueOf(f2)).booleanValue()) {
                break;
            }
            arrayList.add(Float.valueOf(f2));
        }
        return arrayList;
    }

    @NotNull
    public static final List<Float> toList(@NotNull float[] fArr) {
        List<Float> emptyList;
        List<Float> listOf;
        int length = fArr.length;
        if (length == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        } else if (length != 1) {
            return toMutableList(fArr);
        } else {
            listOf = CollectionsKt__CollectionsJVMKt.listOf(Float.valueOf(fArr[0]));
            return listOf;
        }
    }

    @NotNull
    public static final Set<Float> toSet(@NotNull float[] fArr) {
        Set<Float> emptySet;
        Set<Float> of;
        int mapCapacity;
        int length = fArr.length;
        if (length == 0) {
            emptySet = SetsKt__SetsKt.emptySet();
            return emptySet;
        } else if (length != 1) {
            mapCapacity = MapsKt__MapsJVMKt.mapCapacity(fArr.length);
            return (Set) toCollection(fArr, new LinkedHashSet(mapCapacity));
        } else {
            of = SetsKt__SetsJVMKt.setOf(Float.valueOf(fArr[0]));
            return of;
        }
    }

    @NotNull
    public static final List<Boolean> filterIndexed(@NotNull boolean[] zArr, @NotNull Function2<? super Integer, ? super Boolean, Boolean> function2) {
        ArrayList arrayList = new ArrayList();
        int length = zArr.length;
        int i2 = 0;
        int i3 = 0;
        while (i2 < length) {
            boolean z = zArr[i2];
            int i4 = i3 + 1;
            if (function2.invoke(Integer.valueOf(i3), Boolean.valueOf(z)).booleanValue()) {
                arrayList.add(Boolean.valueOf(z));
            }
            i2++;
            i3 = i4;
        }
        return arrayList;
    }

    @InlineOnly
    private static final Boolean findLast(@NotNull boolean[] zArr, Function1<? super Boolean, Boolean> function1) {
        boolean z;
        int length = zArr.length;
        do {
            length--;
            if (length < 0) {
                return null;
            }
            z = zArr[length];
        } while (!function1.invoke(Boolean.valueOf(z)).booleanValue());
        return Boolean.valueOf(z);
    }

    public static final boolean first(@NotNull boolean[] zArr) {
        if (!(zArr.length == 0)) {
            return zArr[0];
        }
        throw new NoSuchElementException("Array is empty.");
    }

    @NotNull
    public static final <R, C extends Collection<? super R>> C flatMapTo(@NotNull boolean[] zArr, @NotNull C c2, @NotNull Function1<? super Boolean, ? extends Iterable<? extends R>> function1) {
        for (boolean z : zArr) {
            CollectionsKt__MutableCollectionsKt.addAll(c2, function1.invoke(Boolean.valueOf(z)));
        }
        return c2;
    }

    @NotNull
    public static final <K, M extends Map<? super K, List<Integer>>> M groupByTo(@NotNull int[] iArr, @NotNull M m2, @NotNull Function1<? super Integer, ? extends K> function1) {
        for (int i2 : iArr) {
            K invoke = function1.invoke(Integer.valueOf(i2));
            Object obj = m2.get(invoke);
            if (obj == null) {
                obj = new ArrayList();
                m2.put(invoke, obj);
            }
            ((List) obj).add(Integer.valueOf(i2));
        }
        return m2;
    }

    public static final boolean last(@NotNull boolean[] zArr) {
        if (!(zArr.length == 0)) {
            return zArr[getLastIndex(zArr)];
        }
        throw new NoSuchElementException("Array is empty.");
    }

    @Nullable
    public static final Long lastOrNull(@NotNull long[] jArr, @NotNull Function1<? super Long, Boolean> function1) {
        long j2;
        int length = jArr.length;
        do {
            length--;
            if (length < 0) {
                return null;
            }
            j2 = jArr[length];
        } while (!function1.invoke(Long.valueOf(j2)).booleanValue());
        return Long.valueOf(j2);
    }

    @NotNull
    public static final <R> List<R> map(@NotNull boolean[] zArr, @NotNull Function1<? super Boolean, ? extends R> function1) {
        ArrayList arrayList = new ArrayList(zArr.length);
        for (boolean z : zArr) {
            arrayList.add(function1.invoke(Boolean.valueOf(z)));
        }
        return arrayList;
    }

    @NotNull
    public static final <R> List<R> mapIndexed(@NotNull boolean[] zArr, @NotNull Function2<? super Integer, ? super Boolean, ? extends R> function2) {
        ArrayList arrayList = new ArrayList(zArr.length);
        int i2 = 0;
        for (boolean z : zArr) {
            Integer valueOf = Integer.valueOf(i2);
            i2++;
            arrayList.add(function2.invoke(valueOf, Boolean.valueOf(z)));
        }
        return arrayList;
    }

    @NotNull
    public static final Pair<List<Integer>, List<Integer>> partition(@NotNull int[] iArr, @NotNull Function1<? super Integer, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        ArrayList arrayList2 = new ArrayList();
        for (int i2 : iArr) {
            if (function1.invoke(Integer.valueOf(i2)).booleanValue()) {
                arrayList.add(Integer.valueOf(i2));
            } else {
                arrayList2.add(Integer.valueOf(i2));
            }
        }
        return new Pair<>(arrayList, arrayList2);
    }

    @SinceKotlin(version = "1.3")
    public static final long random(@NotNull long[] jArr, @NotNull Random random) {
        if (!(jArr.length == 0)) {
            return jArr[random.nextInt(jArr.length)];
        }
        throw new NoSuchElementException("Array is empty.");
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @Nullable
    public static final Double randomOrNull(@NotNull double[] dArr, @NotNull Random random) {
        if (dArr.length == 0) {
            return null;
        }
        return Double.valueOf(dArr[random.nextInt(dArr.length)]);
    }

    @NotNull
    public static final List<Boolean> reversed(@NotNull boolean[] zArr) {
        List<Boolean> emptyList;
        if (zArr.length == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        List<Boolean> mutableList = toMutableList(zArr);
        CollectionsKt___CollectionsJvmKt.reverse(mutableList);
        return mutableList;
    }

    @NotNull
    public static final boolean[] sliceArray(@NotNull boolean[] zArr, @NotNull Collection<Integer> collection) {
        boolean[] zArr2 = new boolean[collection.size()];
        Iterator<Integer> it = collection.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            zArr2[i2] = zArr[it.next().intValue()];
            i2++;
        }
        return zArr2;
    }

    @NotNull
    public static final List<Integer> take(@NotNull int[] iArr, int i2) {
        List<Integer> listOf;
        List<Integer> emptyList;
        if (!(i2 >= 0)) {
            throw new IllegalArgumentException(("Requested element count " + i2 + " is less than zero.").toString());
        } else if (i2 == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        } else if (i2 >= iArr.length) {
            return toList(iArr);
        } else {
            if (i2 == 1) {
                listOf = CollectionsKt__CollectionsJVMKt.listOf(Integer.valueOf(iArr[0]));
                return listOf;
            }
            ArrayList arrayList = new ArrayList(i2);
            int i3 = 0;
            for (int i4 : iArr) {
                arrayList.add(Integer.valueOf(i4));
                i3++;
                if (i3 == i2) {
                    break;
                }
            }
            return arrayList;
        }
    }

    @NotNull
    public static final List<Integer> takeLast(@NotNull int[] iArr, int i2) {
        List<Integer> listOf;
        List<Integer> emptyList;
        if (!(i2 >= 0)) {
            throw new IllegalArgumentException(("Requested element count " + i2 + " is less than zero.").toString());
        } else if (i2 == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        } else {
            int length = iArr.length;
            if (i2 >= length) {
                return toList(iArr);
            }
            if (i2 == 1) {
                listOf = CollectionsKt__CollectionsJVMKt.listOf(Integer.valueOf(iArr[length - 1]));
                return listOf;
            }
            ArrayList arrayList = new ArrayList(i2);
            for (int i3 = length - i2; i3 < length; i3++) {
                arrayList.add(Integer.valueOf(iArr[i3]));
            }
            return arrayList;
        }
    }

    @NotNull
    public static final <R, V> List<V> zip(@NotNull boolean[] zArr, @NotNull R[] rArr, @NotNull Function2<? super Boolean, ? super R, ? extends V> function2) {
        int min = Math.min(zArr.length, rArr.length);
        ArrayList arrayList = new ArrayList(min);
        for (int i2 = 0; i2 < min; i2++) {
            arrayList.add(function2.invoke(Boolean.valueOf(zArr[i2]), rArr[i2]));
        }
        return arrayList;
    }

    @NotNull
    public static final <K, V, M extends Map<? super K, ? super V>> M associateByTo(@NotNull short[] sArr, @NotNull M m2, @NotNull Function1<? super Short, ? extends K> function1, @NotNull Function1<? super Short, ? extends V> function12) {
        for (short s : sArr) {
            m2.put(function1.invoke(Short.valueOf(s)), function12.invoke(Short.valueOf(s)));
        }
        return m2;
    }

    @Nullable
    public static final Long maxWith(@NotNull long[] jArr, @NotNull Comparator<? super Long> comparator) {
        int lastIndex;
        int i2 = 1;
        if (jArr.length == 0) {
            return null;
        }
        long j2 = jArr[0];
        lastIndex = getLastIndex(jArr);
        if (1 <= lastIndex) {
            while (true) {
                long j3 = jArr[i2];
                if (comparator.compare(Long.valueOf(j2), Long.valueOf(j3)) < 0) {
                    j2 = j3;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Long.valueOf(j2);
    }

    @Nullable
    public static final Long minWith(@NotNull long[] jArr, @NotNull Comparator<? super Long> comparator) {
        int lastIndex;
        int i2 = 1;
        if (jArr.length == 0) {
            return null;
        }
        long j2 = jArr[0];
        lastIndex = getLastIndex(jArr);
        if (1 <= lastIndex) {
            while (true) {
                long j3 = jArr[i2];
                if (comparator.compare(Long.valueOf(j2), Long.valueOf(j3)) > 0) {
                    j2 = j3;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Long.valueOf(j2);
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @Nullable
    public static final Boolean randomOrNull(@NotNull boolean[] zArr, @NotNull Random random) {
        if (zArr.length == 0) {
            return null;
        }
        return Boolean.valueOf(zArr[random.nextInt(zArr.length)]);
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @Nullable
    public static final Double reduceRightOrNull(@NotNull double[] dArr, @NotNull Function2<? super Double, ? super Double, Double> function2) {
        int lastIndex = getLastIndex(dArr);
        if (lastIndex < 0) {
            return null;
        }
        double d = dArr[lastIndex];
        for (int i2 = lastIndex - 1; i2 >= 0; i2--) {
            d = function2.invoke(Double.valueOf(dArr[i2]), Double.valueOf(d)).doubleValue();
        }
        return Double.valueOf(d);
    }

    @Nullable
    public static final Float singleOrNull(@NotNull float[] fArr, @NotNull Function1<? super Float, Boolean> function1) {
        Float f2 = null;
        boolean z = false;
        for (float f3 : fArr) {
            if (function1.invoke(Float.valueOf(f3)).booleanValue()) {
                if (z) {
                    return null;
                }
                f2 = Float.valueOf(f3);
                z = true;
            }
        }
        if (z) {
            return f2;
        }
        return null;
    }

    @NotNull
    public static final List<Byte> slice(@NotNull byte[] bArr, @NotNull Iterable<Integer> iterable) {
        int collectionSizeOrDefault;
        List<Byte> emptyList;
        collectionSizeOrDefault = CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10);
        if (collectionSizeOrDefault == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        ArrayList arrayList = new ArrayList(collectionSizeOrDefault);
        Iterator<Integer> it = iterable.iterator();
        while (it.hasNext()) {
            arrayList.add(Byte.valueOf(bArr[it.next().intValue()]));
        }
        return arrayList;
    }

    @NotNull
    public static final <K, V> Map<K, V> associate(@NotNull double[] dArr, @NotNull Function1<? super Double, ? extends Pair<? extends K, ? extends V>> function1) {
        int mapCapacity;
        int coerceAtLeast;
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(dArr.length);
        coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(mapCapacity, 16);
        LinkedHashMap linkedHashMap = new LinkedHashMap(coerceAtLeast);
        for (double d : dArr) {
            Pair<? extends K, ? extends V> invoke = function1.invoke(Double.valueOf(d));
            linkedHashMap.put(invoke.getFirst(), invoke.getSecond());
        }
        return linkedHashMap;
    }

    @NotNull
    public static final <K> Map<K, Double> associateBy(@NotNull double[] dArr, @NotNull Function1<? super Double, ? extends K> function1) {
        int mapCapacity;
        int coerceAtLeast;
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(dArr.length);
        coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(mapCapacity, 16);
        LinkedHashMap linkedHashMap = new LinkedHashMap(coerceAtLeast);
        for (double d : dArr) {
            linkedHashMap.put(function1.invoke(Double.valueOf(d)), Double.valueOf(d));
        }
        return linkedHashMap;
    }

    @NotNull
    public static final <K, V, M extends Map<? super K, ? super V>> M associateByTo(@NotNull int[] iArr, @NotNull M m2, @NotNull Function1<? super Integer, ? extends K> function1, @NotNull Function1<? super Integer, ? extends V> function12) {
        for (int i2 : iArr) {
            m2.put(function1.invoke(Integer.valueOf(i2)), function12.invoke(Integer.valueOf(i2)));
        }
        return m2;
    }

    @NotNull
    public static final <K> List<Long> distinctBy(@NotNull long[] jArr, @NotNull Function1<? super Long, ? extends K> function1) {
        HashSet hashSet = new HashSet();
        ArrayList arrayList = new ArrayList();
        for (long j2 : jArr) {
            if (hashSet.add(function1.invoke(Long.valueOf(j2)))) {
                arrayList.add(Long.valueOf(j2));
            }
        }
        return arrayList;
    }

    @NotNull
    public static final List<Double> dropLastWhile(@NotNull double[] dArr, @NotNull Function1<? super Double, Boolean> function1) {
        List<Double> emptyList;
        for (int lastIndex = getLastIndex(dArr); lastIndex >= 0; lastIndex--) {
            if (!function1.invoke(Double.valueOf(dArr[lastIndex])).booleanValue()) {
                return take(dArr, lastIndex + 1);
            }
        }
        emptyList = CollectionsKt__CollectionsKt.emptyList();
        return emptyList;
    }

    @NotNull
    public static final List<Character> filterIndexed(@NotNull char[] cArr, @NotNull Function2<? super Integer, ? super Character, Boolean> function2) {
        ArrayList arrayList = new ArrayList();
        int length = cArr.length;
        int i2 = 0;
        int i3 = 0;
        while (i2 < length) {
            char c2 = cArr[i2];
            int i4 = i3 + 1;
            if (function2.invoke(Integer.valueOf(i3), Character.valueOf(c2)).booleanValue()) {
                arrayList.add(Character.valueOf(c2));
            }
            i2++;
            i3 = i4;
        }
        return arrayList;
    }

    @InlineOnly
    private static final Character findLast(@NotNull char[] cArr, Function1<? super Character, Boolean> function1) {
        char c2;
        int length = cArr.length;
        do {
            length--;
            if (length < 0) {
                return null;
            }
            c2 = cArr[length];
        } while (!function1.invoke(Character.valueOf(c2)).booleanValue());
        return Character.valueOf(c2);
    }

    public static final char first(@NotNull char[] cArr) {
        if (!(cArr.length == 0)) {
            return cArr[0];
        }
        throw new NoSuchElementException("Array is empty.");
    }

    @NotNull
    public static final <R> List<R> flatMap(@NotNull double[] dArr, @NotNull Function1<? super Double, ? extends Iterable<? extends R>> function1) {
        ArrayList arrayList = new ArrayList();
        for (double d : dArr) {
            CollectionsKt__MutableCollectionsKt.addAll(arrayList, function1.invoke(Double.valueOf(d)));
        }
        return arrayList;
    }

    @NotNull
    public static final <R, C extends Collection<? super R>> C flatMapTo(@NotNull char[] cArr, @NotNull C c2, @NotNull Function1<? super Character, ? extends Iterable<? extends R>> function1) {
        for (char c3 : cArr) {
            CollectionsKt__MutableCollectionsKt.addAll(c2, function1.invoke(Character.valueOf(c3)));
        }
        return c2;
    }

    @NotNull
    public static final <K> Map<K, List<Integer>> groupBy(@NotNull int[] iArr, @NotNull Function1<? super Integer, ? extends K> function1) {
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        for (int i2 : iArr) {
            K invoke = function1.invoke(Integer.valueOf(i2));
            Object obj = linkedHashMap.get(invoke);
            if (obj == null) {
                obj = new ArrayList();
                linkedHashMap.put(invoke, obj);
            }
            ((List) obj).add(Integer.valueOf(i2));
        }
        return linkedHashMap;
    }

    public static final char last(@NotNull char[] cArr) {
        if (!(cArr.length == 0)) {
            return cArr[getLastIndex(cArr)];
        }
        throw new NoSuchElementException("Array is empty.");
    }

    @Nullable
    public static final Float lastOrNull(@NotNull float[] fArr, @NotNull Function1<? super Float, Boolean> function1) {
        float f2;
        int length = fArr.length;
        do {
            length--;
            if (length < 0) {
                return null;
            }
            f2 = fArr[length];
        } while (!function1.invoke(Float.valueOf(f2)).booleanValue());
        return Float.valueOf(f2);
    }

    @NotNull
    public static final <R> List<R> map(@NotNull char[] cArr, @NotNull Function1<? super Character, ? extends R> function1) {
        ArrayList arrayList = new ArrayList(cArr.length);
        for (char c2 : cArr) {
            arrayList.add(function1.invoke(Character.valueOf(c2)));
        }
        return arrayList;
    }

    @NotNull
    public static final <R> List<R> mapIndexed(@NotNull char[] cArr, @NotNull Function2<? super Integer, ? super Character, ? extends R> function2) {
        ArrayList arrayList = new ArrayList(cArr.length);
        int i2 = 0;
        for (char c2 : cArr) {
            Integer valueOf = Integer.valueOf(i2);
            i2++;
            arrayList.add(function2.invoke(valueOf, Character.valueOf(c2)));
        }
        return arrayList;
    }

    @Nullable
    public static final Short max(@NotNull short[] sArr) {
        int lastIndex;
        int i2 = 1;
        if (sArr.length == 0) {
            return null;
        }
        short s = sArr[0];
        lastIndex = getLastIndex(sArr);
        if (1 <= lastIndex) {
            while (true) {
                short s2 = sArr[i2];
                if (s < s2) {
                    s = s2;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Short.valueOf(s);
    }

    @Nullable
    public static final Short min(@NotNull short[] sArr) {
        int lastIndex;
        int i2 = 1;
        if (sArr.length == 0) {
            return null;
        }
        short s = sArr[0];
        lastIndex = getLastIndex(sArr);
        if (1 <= lastIndex) {
            while (true) {
                short s2 = sArr[i2];
                if (s > s2) {
                    s = s2;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Short.valueOf(s);
    }

    @SinceKotlin(version = "1.3")
    public static final float random(@NotNull float[] fArr, @NotNull Random random) {
        if (!(fArr.length == 0)) {
            return fArr[random.nextInt(fArr.length)];
        }
        throw new NoSuchElementException("Array is empty.");
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @Nullable
    public static final Float reduceOrNull(@NotNull float[] fArr, @NotNull Function2<? super Float, ? super Float, Float> function2) {
        int i2 = 1;
        if (fArr.length == 0) {
            return null;
        }
        float f2 = fArr[0];
        int lastIndex = getLastIndex(fArr);
        if (1 <= lastIndex) {
            while (true) {
                f2 = function2.invoke(Float.valueOf(f2), Float.valueOf(fArr[i2])).floatValue();
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Float.valueOf(f2);
    }

    public static final double reduceRight(@NotNull double[] dArr, @NotNull Function2<? super Double, ? super Double, Double> function2) {
        int lastIndex = getLastIndex(dArr);
        if (lastIndex >= 0) {
            double d = dArr[lastIndex];
            for (int i2 = lastIndex - 1; i2 >= 0; i2--) {
                d = function2.invoke(Double.valueOf(dArr[i2]), Double.valueOf(d)).doubleValue();
            }
            return d;
        }
        throw new UnsupportedOperationException("Empty array can't be reduced.");
    }

    public static final double reduceRightIndexed(@NotNull double[] dArr, @NotNull Function3<? super Integer, ? super Double, ? super Double, Double> function3) {
        int lastIndex = getLastIndex(dArr);
        if (lastIndex >= 0) {
            double d = dArr[lastIndex];
            for (int i2 = lastIndex - 1; i2 >= 0; i2--) {
                d = function3.invoke(Integer.valueOf(i2), Double.valueOf(dArr[i2]), Double.valueOf(d)).doubleValue();
            }
            return d;
        }
        throw new UnsupportedOperationException("Empty array can't be reduced.");
    }

    @NotNull
    public static final List<Character> reversed(@NotNull char[] cArr) {
        List<Character> emptyList;
        if (cArr.length == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        List<Character> mutableList = toMutableList(cArr);
        CollectionsKt___CollectionsJvmKt.reverse(mutableList);
        return mutableList;
    }

    @NotNull
    public static final double[] reversedArray(@NotNull double[] dArr) {
        int i2 = 0;
        if (dArr.length == 0) {
            return dArr;
        }
        double[] dArr2 = new double[dArr.length];
        int lastIndex = getLastIndex(dArr);
        if (lastIndex >= 0) {
            while (true) {
                dArr2[lastIndex - i2] = dArr[i2];
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return dArr2;
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @InlineOnly
    private static final List<Long> scanReduce(@NotNull long[] jArr, Function2<? super Long, ? super Long, Long> function2) {
        List<Long> emptyList;
        if (jArr.length == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        long j2 = jArr[0];
        ArrayList arrayList = new ArrayList(jArr.length);
        arrayList.add(Long.valueOf(j2));
        int length = jArr.length;
        for (int i2 = 1; i2 < length; i2++) {
            j2 = function2.invoke(Long.valueOf(j2), Long.valueOf(jArr[i2])).longValue();
            arrayList.add(Long.valueOf(j2));
        }
        return arrayList;
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @InlineOnly
    private static final List<Long> scanReduceIndexed(@NotNull long[] jArr, Function3<? super Integer, ? super Long, ? super Long, Long> function3) {
        List<Long> emptyList;
        if (jArr.length == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        long j2 = jArr[0];
        ArrayList arrayList = new ArrayList(jArr.length);
        arrayList.add(Long.valueOf(j2));
        int length = jArr.length;
        for (int i2 = 1; i2 < length; i2++) {
            j2 = function3.invoke(Integer.valueOf(i2), Long.valueOf(j2), Long.valueOf(jArr[i2])).longValue();
            arrayList.add(Long.valueOf(j2));
        }
        return arrayList;
    }

    public static final double single(@NotNull double[] dArr) {
        int length = dArr.length;
        if (length != 0) {
            if (length == 1) {
                return dArr[0];
            }
            throw new IllegalArgumentException("Array has more than one element.");
        }
        throw new NoSuchElementException("Array is empty.");
    }

    @NotNull
    public static final char[] sliceArray(@NotNull char[] cArr, @NotNull Collection<Integer> collection) {
        char[] cArr2 = new char[collection.size()];
        Iterator<Integer> it = collection.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            cArr2[i2] = cArr[it.next().intValue()];
            i2++;
        }
        return cArr2;
    }

    @NotNull
    public static final List<Double> takeLastWhile(@NotNull double[] dArr, @NotNull Function1<? super Double, Boolean> function1) {
        for (int lastIndex = getLastIndex(dArr); lastIndex >= 0; lastIndex--) {
            if (!function1.invoke(Double.valueOf(dArr[lastIndex])).booleanValue()) {
                return drop(dArr, lastIndex + 1);
            }
        }
        return toList(dArr);
    }

    @NotNull
    public static final List<Double> takeWhile(@NotNull double[] dArr, @NotNull Function1<? super Double, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        for (double d : dArr) {
            if (!function1.invoke(Double.valueOf(d)).booleanValue()) {
                break;
            }
            arrayList.add(Double.valueOf(d));
        }
        return arrayList;
    }

    @NotNull
    public static final List<Double> toList(@NotNull double[] dArr) {
        List<Double> emptyList;
        List<Double> listOf;
        int length = dArr.length;
        if (length == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        } else if (length != 1) {
            return toMutableList(dArr);
        } else {
            listOf = CollectionsKt__CollectionsJVMKt.listOf(Double.valueOf(dArr[0]));
            return listOf;
        }
    }

    @NotNull
    public static final Set<Double> toSet(@NotNull double[] dArr) {
        Set<Double> emptySet;
        Set<Double> of;
        int mapCapacity;
        int length = dArr.length;
        if (length == 0) {
            emptySet = SetsKt__SetsKt.emptySet();
            return emptySet;
        } else if (length != 1) {
            mapCapacity = MapsKt__MapsJVMKt.mapCapacity(dArr.length);
            return (Set) toCollection(dArr, new LinkedHashSet(mapCapacity));
        } else {
            of = SetsKt__SetsJVMKt.setOf(Double.valueOf(dArr[0]));
            return of;
        }
    }

    @NotNull
    public static final <R, V> List<V> zip(@NotNull char[] cArr, @NotNull R[] rArr, @NotNull Function2<? super Character, ? super R, ? extends V> function2) {
        int min = Math.min(cArr.length, rArr.length);
        ArrayList arrayList = new ArrayList(min);
        for (int i2 = 0; i2 < min; i2++) {
            arrayList.add(function2.invoke(Character.valueOf(cArr[i2]), rArr[i2]));
        }
        return arrayList;
    }

    @NotNull
    public static final List<Float> dropWhile(@NotNull float[] fArr, @NotNull Function1<? super Float, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        boolean z = false;
        for (float f2 : fArr) {
            if (z) {
                arrayList.add(Float.valueOf(f2));
            } else if (!function1.invoke(Float.valueOf(f2)).booleanValue()) {
                arrayList.add(Float.valueOf(f2));
                z = true;
            }
        }
        return arrayList;
    }

    @Nullable
    public static final <R extends Comparable<? super R>> Integer maxBy(@NotNull int[] iArr, @NotNull Function1<? super Integer, ? extends R> function1) {
        int lastIndex;
        int i2 = 1;
        if (iArr.length == 0) {
            return null;
        }
        int i3 = iArr[0];
        lastIndex = getLastIndex(iArr);
        if (lastIndex == 0) {
            return Integer.valueOf(i3);
        }
        R invoke = function1.invoke(Integer.valueOf(i3));
        if (1 <= lastIndex) {
            while (true) {
                int i4 = iArr[i2];
                R invoke2 = function1.invoke(Integer.valueOf(i4));
                if (invoke.compareTo(invoke2) < 0) {
                    i3 = i4;
                    invoke = invoke2;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Integer.valueOf(i3);
    }

    @Nullable
    public static final <R extends Comparable<? super R>> Integer minBy(@NotNull int[] iArr, @NotNull Function1<? super Integer, ? extends R> function1) {
        int lastIndex;
        int i2 = 1;
        if (iArr.length == 0) {
            return null;
        }
        int i3 = iArr[0];
        lastIndex = getLastIndex(iArr);
        if (lastIndex == 0) {
            return Integer.valueOf(i3);
        }
        R invoke = function1.invoke(Integer.valueOf(i3));
        if (1 <= lastIndex) {
            while (true) {
                int i4 = iArr[i2];
                R invoke2 = function1.invoke(Integer.valueOf(i4));
                if (invoke.compareTo(invoke2) > 0) {
                    i3 = i4;
                    invoke = invoke2;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Integer.valueOf(i3);
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @Nullable
    public static final Character randomOrNull(@NotNull char[] cArr, @NotNull Random random) {
        if (cArr.length == 0) {
            return null;
        }
        return Character.valueOf(cArr[random.nextInt(cArr.length)]);
    }

    public static final float reduce(@NotNull float[] fArr, @NotNull Function2<? super Float, ? super Float, Float> function2) {
        int i2 = 1;
        if (!(fArr.length == 0)) {
            float f2 = fArr[0];
            int lastIndex = getLastIndex(fArr);
            if (1 <= lastIndex) {
                while (true) {
                    f2 = function2.invoke(Float.valueOf(f2), Float.valueOf(fArr[i2])).floatValue();
                    if (i2 == lastIndex) {
                        break;
                    }
                    i2++;
                }
            }
            return f2;
        }
        throw new UnsupportedOperationException("Empty array can't be reduced.");
    }

    public static final float reduceIndexed(@NotNull float[] fArr, @NotNull Function3<? super Integer, ? super Float, ? super Float, Float> function3) {
        int i2 = 1;
        if (!(fArr.length == 0)) {
            float f2 = fArr[0];
            int lastIndex = getLastIndex(fArr);
            if (1 <= lastIndex) {
                while (true) {
                    f2 = function3.invoke(Integer.valueOf(i2), Float.valueOf(f2), Float.valueOf(fArr[i2])).floatValue();
                    if (i2 == lastIndex) {
                        break;
                    }
                    i2++;
                }
            }
            return f2;
        }
        throw new UnsupportedOperationException("Empty array can't be reduced.");
    }

    public static final void reverse(@NotNull float[] fArr) {
        int length = (fArr.length / 2) - 1;
        if (length < 0) {
            return;
        }
        int lastIndex = getLastIndex(fArr);
        int i2 = 0;
        if (length < 0) {
            return;
        }
        while (true) {
            float f2 = fArr[i2];
            fArr[i2] = fArr[lastIndex];
            fArr[lastIndex] = f2;
            lastIndex--;
            if (i2 == length) {
                return;
            }
            i2++;
        }
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @InlineOnly
    private static final <R> List<R> scan(@NotNull float[] fArr, R r, Function2<? super R, ? super Float, ? extends R> function2) {
        List<R> listOf;
        if (fArr.length == 0) {
            listOf = CollectionsKt__CollectionsJVMKt.listOf(r);
            return listOf;
        }
        ArrayList arrayList = new ArrayList(fArr.length + 1);
        arrayList.add(r);
        for (float f2 : fArr) {
            r = function2.invoke(r, Float.valueOf(f2));
            arrayList.add(r);
        }
        return arrayList;
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @InlineOnly
    private static final <R> List<R> scanIndexed(@NotNull float[] fArr, R r, Function3<? super Integer, ? super R, ? super Float, ? extends R> function3) {
        List<R> listOf;
        if (fArr.length == 0) {
            listOf = CollectionsKt__CollectionsJVMKt.listOf(r);
            return listOf;
        }
        ArrayList arrayList = new ArrayList(fArr.length + 1);
        arrayList.add(r);
        int length = fArr.length;
        for (int i2 = 0; i2 < length; i2++) {
            r = function3.invoke(Integer.valueOf(i2), r, Float.valueOf(fArr[i2]));
            arrayList.add(r);
        }
        return arrayList;
    }

    @NotNull
    public static final <K, V, M extends Map<? super K, ? super V>> M associateByTo(@NotNull long[] jArr, @NotNull M m2, @NotNull Function1<? super Long, ? extends K> function1, @NotNull Function1<? super Long, ? extends V> function12) {
        for (long j2 : jArr) {
            m2.put(function1.invoke(Long.valueOf(j2)), function12.invoke(Long.valueOf(j2)));
        }
        return m2;
    }

    @Nullable
    public static final Double singleOrNull(@NotNull double[] dArr, @NotNull Function1<? super Double, Boolean> function1) {
        Double d = null;
        boolean z = false;
        for (double d2 : dArr) {
            if (function1.invoke(Double.valueOf(d2)).booleanValue()) {
                if (z) {
                    return null;
                }
                d = Double.valueOf(d2);
                z = true;
            }
        }
        if (z) {
            return d;
        }
        return null;
    }

    public static final <T> T first(@NotNull T[] tArr, @NotNull Function1<? super T, Boolean> function1) {
        for (T t : tArr) {
            if (function1.invoke(t).booleanValue()) {
                return t;
            }
        }
        throw new NoSuchElementException("Array contains no element matching the predicate.");
    }

    @NotNull
    public static final <A extends Appendable> A joinTo(@NotNull long[] jArr, @NotNull A a, @NotNull CharSequence charSequence, @NotNull CharSequence charSequence2, @NotNull CharSequence charSequence3, int i2, @NotNull CharSequence charSequence4, @Nullable Function1<? super Long, ? extends CharSequence> function1) {
        a.append(charSequence2);
        int i3 = 0;
        for (long j2 : jArr) {
            i3++;
            if (i3 > 1) {
                a.append(charSequence);
            }
            if (i2 >= 0 && i3 > i2) {
                break;
            }
            if (function1 != null) {
                a.append(function1.invoke(Long.valueOf(j2)));
            } else {
                a.append(String.valueOf(j2));
            }
        }
        if (i2 >= 0 && i3 > i2) {
            a.append(charSequence4);
        }
        a.append(charSequence3);
        return a;
    }

    public static final <T> T last(@NotNull T[] tArr, @NotNull Function1<? super T, Boolean> function1) {
        T t;
        int length = tArr.length;
        do {
            length--;
            if (length >= 0) {
                t = tArr[length];
            } else {
                throw new NoSuchElementException("Array contains no element matching the predicate.");
            }
        } while (!function1.invoke(t).booleanValue());
        return t;
    }

    @Nullable
    public static final Double lastOrNull(@NotNull double[] dArr, @NotNull Function1<? super Double, Boolean> function1) {
        double d;
        int length = dArr.length;
        do {
            length--;
            if (length < 0) {
                return null;
            }
            d = dArr[length];
        } while (!function1.invoke(Double.valueOf(d)).booleanValue());
        return Double.valueOf(d);
    }

    @SinceKotlin(version = "1.3")
    public static final double random(@NotNull double[] dArr, @NotNull Random random) {
        if (!(dArr.length == 0)) {
            return dArr[random.nextInt(dArr.length)];
        }
        throw new NoSuchElementException("Array is empty.");
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @Nullable
    public static final Boolean reduceRightOrNull(@NotNull boolean[] zArr, @NotNull Function2<? super Boolean, ? super Boolean, Boolean> function2) {
        int lastIndex = getLastIndex(zArr);
        if (lastIndex < 0) {
            return null;
        }
        boolean z = zArr[lastIndex];
        for (int i2 = lastIndex - 1; i2 >= 0; i2--) {
            z = function2.invoke(Boolean.valueOf(zArr[i2]), Boolean.valueOf(z)).booleanValue();
        }
        return Boolean.valueOf(z);
    }

    @NotNull
    public static final <T> T[] sliceArray(@NotNull T[] tArr, @NotNull  Var) {
        return Var.isEmpty() ? (T[]) ArraysKt___ArraysJvmKt.copyOfRange(tArr, 0, 0) : (T[]) ArraysKt___ArraysJvmKt.copyOfRange(tArr, Var.getStart().intValue(), Var.getEndInclusive().intValue() + 1);
    }

    /* JADX WARN: Multi-variable type inference failed */
    @NotNull
    public static final <T, R, V> List<V> zip(@NotNull T[] tArr, @NotNull Iterable<? extends R> iterable, @NotNull Function2<? super T, ? super R, ? extends V> function2) {
        int collectionSizeOrDefault;
        int length = tArr.length;
        collectionSizeOrDefault = CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10);
        ArrayList arrayList = new ArrayList(Math.min(collectionSizeOrDefault, length));
        Iterator<? extends R> it = iterable.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            Object obj = (R) it.next();
            if (i2 >= length) {
                break;
            }
            arrayList.add(function2.invoke(tArr[i2], obj));
            i2++;
        }
        return arrayList;
    }

    @NotNull
    public static final <K, V> Map<K, V> associate(@NotNull boolean[] zArr, @NotNull Function1<? super Boolean, ? extends Pair<? extends K, ? extends V>> function1) {
        int mapCapacity;
        int coerceAtLeast;
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(zArr.length);
        coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(mapCapacity, 16);
        LinkedHashMap linkedHashMap = new LinkedHashMap(coerceAtLeast);
        for (boolean z : zArr) {
            Pair<? extends K, ? extends V> invoke = function1.invoke(Boolean.valueOf(z));
            linkedHashMap.put(invoke.getFirst(), invoke.getSecond());
        }
        return linkedHashMap;
    }

    @NotNull
    public static final <K> Map<K, Boolean> associateBy(@NotNull boolean[] zArr, @NotNull Function1<? super Boolean, ? extends K> function1) {
        int mapCapacity;
        int coerceAtLeast;
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(zArr.length);
        coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(mapCapacity, 16);
        LinkedHashMap linkedHashMap = new LinkedHashMap(coerceAtLeast);
        for (boolean z : zArr) {
            linkedHashMap.put(function1.invoke(Boolean.valueOf(z)), Boolean.valueOf(z));
        }
        return linkedHashMap;
    }

    @NotNull
    public static final <K, V, M extends Map<? super K, ? super V>> M associateByTo(@NotNull float[] fArr, @NotNull M m2, @NotNull Function1<? super Float, ? extends K> function1, @NotNull Function1<? super Float, ? extends V> function12) {
        for (float f2 : fArr) {
            m2.put(function1.invoke(Float.valueOf(f2)), function12.invoke(Float.valueOf(f2)));
        }
        return m2;
    }

    @NotNull
    public static final List<Boolean> dropLastWhile(@NotNull boolean[] zArr, @NotNull Function1<? super Boolean, Boolean> function1) {
        List<Boolean> emptyList;
        for (int lastIndex = getLastIndex(zArr); lastIndex >= 0; lastIndex--) {
            if (!function1.invoke(Boolean.valueOf(zArr[lastIndex])).booleanValue()) {
                return take(zArr, lastIndex + 1);
            }
        }
        emptyList = CollectionsKt__CollectionsKt.emptyList();
        return emptyList;
    }

    @NotNull
    public static final <R> List<R> flatMap(@NotNull boolean[] zArr, @NotNull Function1<? super Boolean, ? extends Iterable<? extends R>> function1) {
        ArrayList arrayList = new ArrayList();
        for (boolean z : zArr) {
            CollectionsKt__MutableCollectionsKt.addAll(arrayList, function1.invoke(Boolean.valueOf(z)));
        }
        return arrayList;
    }

    @NotNull
    public static final <K, M extends Map<? super K, List<Long>>> M groupByTo(@NotNull long[] jArr, @NotNull M m2, @NotNull Function1<? super Long, ? extends K> function1) {
        for (long j2 : jArr) {
            K invoke = function1.invoke(Long.valueOf(j2));
            Object obj = m2.get(invoke);
            if (obj == null) {
                obj = new ArrayList();
                m2.put(invoke, obj);
            }
            ((List) obj).add(Long.valueOf(j2));
        }
        return m2;
    }

    @NotNull
    public static final Pair<List<Long>, List<Long>> partition(@NotNull long[] jArr, @NotNull Function1<? super Long, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        ArrayList arrayList2 = new ArrayList();
        for (long j2 : jArr) {
            if (function1.invoke(Long.valueOf(j2)).booleanValue()) {
                arrayList.add(Long.valueOf(j2));
            } else {
                arrayList2.add(Long.valueOf(j2));
            }
        }
        return new Pair<>(arrayList, arrayList2);
    }

    public static final boolean reduceRight(@NotNull boolean[] zArr, @NotNull Function2<? super Boolean, ? super Boolean, Boolean> function2) {
        int lastIndex = getLastIndex(zArr);
        if (lastIndex >= 0) {
            boolean z = zArr[lastIndex];
            for (int i2 = lastIndex - 1; i2 >= 0; i2--) {
                z = function2.invoke(Boolean.valueOf(zArr[i2]), Boolean.valueOf(z)).booleanValue();
            }
            return z;
        }
        throw new UnsupportedOperationException("Empty array can't be reduced.");
    }

    public static final boolean reduceRightIndexed(@NotNull boolean[] zArr, @NotNull Function3<? super Integer, ? super Boolean, ? super Boolean, Boolean> function3) {
        int lastIndex = getLastIndex(zArr);
        if (lastIndex >= 0) {
            boolean z = zArr[lastIndex];
            for (int i2 = lastIndex - 1; i2 >= 0; i2--) {
                z = function3.invoke(Integer.valueOf(i2), Boolean.valueOf(zArr[i2]), Boolean.valueOf(z)).booleanValue();
            }
            return z;
        }
        throw new UnsupportedOperationException("Empty array can't be reduced.");
    }

    @NotNull
    public static final boolean[] reversedArray(@NotNull boolean[] zArr) {
        int i2 = 0;
        if (zArr.length == 0) {
            return zArr;
        }
        boolean[] zArr2 = new boolean[zArr.length];
        int lastIndex = getLastIndex(zArr);
        if (lastIndex >= 0) {
            while (true) {
                zArr2[lastIndex - i2] = zArr[i2];
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return zArr2;
    }

    public static final boolean single(@NotNull boolean[] zArr) {
        int length = zArr.length;
        if (length != 0) {
            if (length == 1) {
                return zArr[0];
            }
            throw new IllegalArgumentException("Array has more than one element.");
        }
        throw new NoSuchElementException("Array is empty.");
    }

    @NotNull
    public static final List<Short> slice(@NotNull short[] sArr, @NotNull Iterable<Integer> iterable) {
        int collectionSizeOrDefault;
        List<Short> emptyList;
        collectionSizeOrDefault = CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10);
        if (collectionSizeOrDefault == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        ArrayList arrayList = new ArrayList(collectionSizeOrDefault);
        Iterator<Integer> it = iterable.iterator();
        while (it.hasNext()) {
            arrayList.add(Short.valueOf(sArr[it.next().intValue()]));
        }
        return arrayList;
    }

    @NotNull
    public static final List<Long> take(@NotNull long[] jArr, int i2) {
        List<Long> listOf;
        List<Long> emptyList;
        if (!(i2 >= 0)) {
            throw new IllegalArgumentException(("Requested element count " + i2 + " is less than zero.").toString());
        } else if (i2 == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        } else if (i2 >= jArr.length) {
            return toList(jArr);
        } else {
            if (i2 == 1) {
                listOf = CollectionsKt__CollectionsJVMKt.listOf(Long.valueOf(jArr[0]));
                return listOf;
            }
            ArrayList arrayList = new ArrayList(i2);
            int i3 = 0;
            for (long j2 : jArr) {
                arrayList.add(Long.valueOf(j2));
                i3++;
                if (i3 == i2) {
                    break;
                }
            }
            return arrayList;
        }
    }

    @NotNull
    public static final List<Long> takeLast(@NotNull long[] jArr, int i2) {
        List<Long> listOf;
        List<Long> emptyList;
        if (!(i2 >= 0)) {
            throw new IllegalArgumentException(("Requested element count " + i2 + " is less than zero.").toString());
        } else if (i2 == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        } else {
            int length = jArr.length;
            if (i2 >= length) {
                return toList(jArr);
            }
            if (i2 == 1) {
                listOf = CollectionsKt__CollectionsJVMKt.listOf(Long.valueOf(jArr[length - 1]));
                return listOf;
            }
            ArrayList arrayList = new ArrayList(i2);
            for (int i3 = length - i2; i3 < length; i3++) {
                arrayList.add(Long.valueOf(jArr[i3]));
            }
            return arrayList;
        }
    }

    @NotNull
    public static final List<Boolean> takeLastWhile(@NotNull boolean[] zArr, @NotNull Function1<? super Boolean, Boolean> function1) {
        for (int lastIndex = getLastIndex(zArr); lastIndex >= 0; lastIndex--) {
            if (!function1.invoke(Boolean.valueOf(zArr[lastIndex])).booleanValue()) {
                return drop(zArr, lastIndex + 1);
            }
        }
        return toList(zArr);
    }

    @NotNull
    public static final List<Boolean> takeWhile(@NotNull boolean[] zArr, @NotNull Function1<? super Boolean, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        for (boolean z : zArr) {
            if (!function1.invoke(Boolean.valueOf(z)).booleanValue()) {
                break;
            }
            arrayList.add(Boolean.valueOf(z));
        }
        return arrayList;
    }

    @NotNull
    public static final List<Boolean> toList(@NotNull boolean[] zArr) {
        List<Boolean> emptyList;
        List<Boolean> listOf;
        int length = zArr.length;
        if (length == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        } else if (length != 1) {
            return toMutableList(zArr);
        } else {
            listOf = CollectionsKt__CollectionsJVMKt.listOf(Boolean.valueOf(zArr[0]));
            return listOf;
        }
    }

    @NotNull
    public static final Set<Boolean> toSet(@NotNull boolean[] zArr) {
        Set<Boolean> emptySet;
        Set<Boolean> of;
        int mapCapacity;
        int length = zArr.length;
        if (length == 0) {
            emptySet = SetsKt__SetsKt.emptySet();
            return emptySet;
        } else if (length != 1) {
            mapCapacity = MapsKt__MapsJVMKt.mapCapacity(zArr.length);
            return (Set) toCollection(zArr, new LinkedHashSet(mapCapacity));
        } else {
            of = SetsKt__SetsJVMKt.setOf(Boolean.valueOf(zArr[0]));
            return of;
        }
    }

    public static final byte first(@NotNull byte[] bArr, @NotNull Function1<? super Byte, Boolean> function1) {
        for (byte b : bArr) {
            if (function1.invoke(Byte.valueOf(b)).booleanValue()) {
                return b;
            }
        }
        throw new NoSuchElementException("Array contains no element matching the predicate.");
    }

    @Nullable
    public static final Integer max(@NotNull int[] iArr) {
        int lastIndex;
        int i2 = 1;
        if (iArr.length == 0) {
            return null;
        }
        int i3 = iArr[0];
        lastIndex = getLastIndex(iArr);
        if (1 <= lastIndex) {
            while (true) {
                int i4 = iArr[i2];
                if (i3 < i4) {
                    i3 = i4;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Integer.valueOf(i3);
    }

    @Nullable
    public static final Float maxWith(@NotNull float[] fArr, @NotNull Comparator<? super Float> comparator) {
        int i2 = 1;
        if (fArr.length == 0) {
            return null;
        }
        float f2 = fArr[0];
        int lastIndex = getLastIndex(fArr);
        if (1 <= lastIndex) {
            while (true) {
                float f3 = fArr[i2];
                if (comparator.compare(Float.valueOf(f2), Float.valueOf(f3)) < 0) {
                    f2 = f3;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Float.valueOf(f2);
    }

    @Nullable
    public static final Integer min(@NotNull int[] iArr) {
        int lastIndex;
        int i2 = 1;
        if (iArr.length == 0) {
            return null;
        }
        int i3 = iArr[0];
        lastIndex = getLastIndex(iArr);
        if (1 <= lastIndex) {
            while (true) {
                int i4 = iArr[i2];
                if (i3 > i4) {
                    i3 = i4;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Integer.valueOf(i3);
    }

    @Nullable
    public static final Float minWith(@NotNull float[] fArr, @NotNull Comparator<? super Float> comparator) {
        int i2 = 1;
        if (fArr.length == 0) {
            return null;
        }
        float f2 = fArr[0];
        int lastIndex = getLastIndex(fArr);
        if (1 <= lastIndex) {
            while (true) {
                float f3 = fArr[i2];
                if (comparator.compare(Float.valueOf(f2), Float.valueOf(f3)) > 0) {
                    f2 = f3;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Float.valueOf(f2);
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @Nullable
    public static final Double reduceOrNull(@NotNull double[] dArr, @NotNull Function2<? super Double, ? super Double, Double> function2) {
        int i2 = 1;
        if (dArr.length == 0) {
            return null;
        }
        double d = dArr[0];
        int lastIndex = getLastIndex(dArr);
        if (1 <= lastIndex) {
            while (true) {
                d = function2.invoke(Double.valueOf(d), Double.valueOf(dArr[i2])).doubleValue();
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Double.valueOf(d);
    }

    @Nullable
    public static final Boolean singleOrNull(@NotNull boolean[] zArr, @NotNull Function1<? super Boolean, Boolean> function1) {
        Boolean bool = null;
        boolean z = false;
        for (boolean z2 : zArr) {
            if (function1.invoke(Boolean.valueOf(z2)).booleanValue()) {
                if (z) {
                    return null;
                }
                bool = Boolean.valueOf(z2);
                z = true;
            }
        }
        if (z) {
            return bool;
        }
        return null;
    }

    @NotNull
    public static byte[] sliceArray(@NotNull byte[] bArr, @NotNull  Var) {
        byte[] copyOfRange;
        if (Var.isEmpty()) {
            return new byte[0];
        }
        copyOfRange = ArraysKt___ArraysJvmKt.copyOfRange(bArr, Var.getStart().intValue(), Var.getEndInclusive().intValue() + 1);
        return copyOfRange;
    }

    @NotNull
    public static final <K, V, M extends Map<? super K, ? super V>> M associateByTo(@NotNull double[] dArr, @NotNull M m2, @NotNull Function1<? super Double, ? extends K> function1, @NotNull Function1<? super Double, ? extends V> function12) {
        for (double d : dArr) {
            m2.put(function1.invoke(Double.valueOf(d)), function12.invoke(Double.valueOf(d)));
        }
        return m2;
    }

    @NotNull
    public static final <K> List<Float> distinctBy(@NotNull float[] fArr, @NotNull Function1<? super Float, ? extends K> function1) {
        HashSet hashSet = new HashSet();
        ArrayList arrayList = new ArrayList();
        for (float f2 : fArr) {
            if (hashSet.add(function1.invoke(Float.valueOf(f2)))) {
                arrayList.add(Float.valueOf(f2));
            }
        }
        return arrayList;
    }

    @NotNull
    public static final List<Double> dropWhile(@NotNull double[] dArr, @NotNull Function1<? super Double, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        boolean z = false;
        for (double d : dArr) {
            if (z) {
                arrayList.add(Double.valueOf(d));
            } else if (!function1.invoke(Double.valueOf(d)).booleanValue()) {
                arrayList.add(Double.valueOf(d));
                z = true;
            }
        }
        return arrayList;
    }

    @Nullable
    public static final Boolean lastOrNull(@NotNull boolean[] zArr, @NotNull Function1<? super Boolean, Boolean> function1) {
        boolean z;
        int length = zArr.length;
        do {
            length--;
            if (length < 0) {
                return null;
            }
            z = zArr[length];
        } while (!function1.invoke(Boolean.valueOf(z)).booleanValue());
        return Boolean.valueOf(z);
    }

    @SinceKotlin(version = "1.3")
    public static final boolean random(@NotNull boolean[] zArr, @NotNull Random random) {
        if (!(zArr.length == 0)) {
            return zArr[random.nextInt(zArr.length)];
        }
        throw new NoSuchElementException("Array is empty.");
    }

    public static final double reduce(@NotNull double[] dArr, @NotNull Function2<? super Double, ? super Double, Double> function2) {
        int i2 = 1;
        if (!(dArr.length == 0)) {
            double d = dArr[0];
            int lastIndex = getLastIndex(dArr);
            if (1 <= lastIndex) {
                while (true) {
                    d = function2.invoke(Double.valueOf(d), Double.valueOf(dArr[i2])).doubleValue();
                    if (i2 == lastIndex) {
                        break;
                    }
                    i2++;
                }
            }
            return d;
        }
        throw new UnsupportedOperationException("Empty array can't be reduced.");
    }

    public static final double reduceIndexed(@NotNull double[] dArr, @NotNull Function3<? super Integer, ? super Double, ? super Double, Double> function3) {
        int i2 = 1;
        if (!(dArr.length == 0)) {
            double d = dArr[0];
            int lastIndex = getLastIndex(dArr);
            if (1 <= lastIndex) {
                while (true) {
                    d = function3.invoke(Integer.valueOf(i2), Double.valueOf(d), Double.valueOf(dArr[i2])).doubleValue();
                    if (i2 == lastIndex) {
                        break;
                    }
                    i2++;
                }
            }
            return d;
        }
        throw new UnsupportedOperationException("Empty array can't be reduced.");
    }

    public static final void reverse(@NotNull double[] dArr) {
        int length = (dArr.length / 2) - 1;
        if (length < 0) {
            return;
        }
        int lastIndex = getLastIndex(dArr);
        int i2 = 0;
        if (length < 0) {
            return;
        }
        while (true) {
            double d = dArr[i2];
            dArr[i2] = dArr[lastIndex];
            dArr[lastIndex] = d;
            lastIndex--;
            if (i2 == length) {
                return;
            }
            i2++;
        }
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @InlineOnly
    private static final <R> List<R> scan(@NotNull double[] dArr, R r, Function2<? super R, ? super Double, ? extends R> function2) {
        List<R> listOf;
        if (dArr.length == 0) {
            listOf = CollectionsKt__CollectionsJVMKt.listOf(r);
            return listOf;
        }
        ArrayList arrayList = new ArrayList(dArr.length + 1);
        arrayList.add(r);
        for (double d : dArr) {
            r = function2.invoke(r, Double.valueOf(d));
            arrayList.add(r);
        }
        return arrayList;
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @InlineOnly
    private static final <R> List<R> scanIndexed(@NotNull double[] dArr, R r, Function3<? super Integer, ? super R, ? super Double, ? extends R> function3) {
        List<R> listOf;
        if (dArr.length == 0) {
            listOf = CollectionsKt__CollectionsJVMKt.listOf(r);
            return listOf;
        }
        ArrayList arrayList = new ArrayList(dArr.length + 1);
        arrayList.add(r);
        int length = dArr.length;
        for (int i2 = 0; i2 < length; i2++) {
            r = function3.invoke(Integer.valueOf(i2), r, Double.valueOf(dArr[i2]));
            arrayList.add(r);
        }
        return arrayList;
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @InlineOnly
    private static final List<Float> scanReduce(@NotNull float[] fArr, Function2<? super Float, ? super Float, Float> function2) {
        List<Float> emptyList;
        if (fArr.length == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        float f2 = fArr[0];
        ArrayList arrayList = new ArrayList(fArr.length);
        arrayList.add(Float.valueOf(f2));
        int length = fArr.length;
        for (int i2 = 1; i2 < length; i2++) {
            f2 = function2.invoke(Float.valueOf(f2), Float.valueOf(fArr[i2])).floatValue();
            arrayList.add(Float.valueOf(f2));
        }
        return arrayList;
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @InlineOnly
    private static final List<Float> scanReduceIndexed(@NotNull float[] fArr, Function3<? super Integer, ? super Float, ? super Float, Float> function3) {
        List<Float> emptyList;
        if (fArr.length == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        float f2 = fArr[0];
        ArrayList arrayList = new ArrayList(fArr.length);
        arrayList.add(Float.valueOf(f2));
        int length = fArr.length;
        for (int i2 = 1; i2 < length; i2++) {
            f2 = function3.invoke(Integer.valueOf(i2), Float.valueOf(f2), Float.valueOf(fArr[i2])).floatValue();
            arrayList.add(Float.valueOf(f2));
        }
        return arrayList;
    }

    public static final short first(@NotNull short[] sArr, @NotNull Function1<? super Short, Boolean> function1) {
        for (short s : sArr) {
            if (function1.invoke(Short.valueOf(s)).booleanValue()) {
                return s;
            }
        }
        throw new NoSuchElementException("Array contains no element matching the predicate.");
    }

    public static final byte last(@NotNull byte[] bArr, @NotNull Function1<? super Byte, Boolean> function1) {
        byte b;
        int length = bArr.length;
        do {
            length--;
            if (length >= 0) {
                b = bArr[length];
            } else {
                throw new NoSuchElementException("Array contains no element matching the predicate.");
            }
        } while (!function1.invoke(Byte.valueOf(b)).booleanValue());
        return b;
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @Nullable
    public static final Character reduceRightOrNull(@NotNull char[] cArr, @NotNull Function2<? super Character, ? super Character, Character> function2) {
        int lastIndex = getLastIndex(cArr);
        if (lastIndex < 0) {
            return null;
        }
        char c2 = cArr[lastIndex];
        for (int i2 = lastIndex - 1; i2 >= 0; i2--) {
            c2 = function2.invoke(Character.valueOf(cArr[i2]), Character.valueOf(c2)).charValue();
        }
        return Character.valueOf(c2);
    }

    @NotNull
    public static short[] sliceArray(@NotNull short[] sArr, @NotNull  Var) {
        short[] copyOfRange;
        if (Var.isEmpty()) {
            return new short[0];
        }
        copyOfRange = ArraysKt___ArraysJvmKt.copyOfRange(sArr, Var.getStart().intValue(), Var.getEndInclusive().intValue() + 1);
        return copyOfRange;
    }

    @NotNull
    public static final <R, V> List<V> zip(@NotNull byte[] bArr, @NotNull Iterable<? extends R> iterable, @NotNull Function2<? super Byte, ? super R, ? extends V> function2) {
        int collectionSizeOrDefault;
        int length = bArr.length;
        collectionSizeOrDefault = CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10);
        ArrayList arrayList = new ArrayList(Math.min(collectionSizeOrDefault, length));
        Iterator<? extends R> it = iterable.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            Object obj = (R) it.next();
            if (i2 >= length) {
                break;
            }
            arrayList.add(function2.invoke(Byte.valueOf(bArr[i2]), obj));
            i2++;
        }
        return arrayList;
    }

    @NotNull
    public static final <K, V> Map<K, V> associate(@NotNull char[] cArr, @NotNull Function1<? super Character, ? extends Pair<? extends K, ? extends V>> function1) {
        int mapCapacity;
        int coerceAtLeast;
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(cArr.length);
        coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(mapCapacity, 16);
        LinkedHashMap linkedHashMap = new LinkedHashMap(coerceAtLeast);
        for (char c2 : cArr) {
            Pair<? extends K, ? extends V> invoke = function1.invoke(Character.valueOf(c2));
            linkedHashMap.put(invoke.getFirst(), invoke.getSecond());
        }
        return linkedHashMap;
    }

    @NotNull
    public static final <K> Map<K, Character> associateBy(@NotNull char[] cArr, @NotNull Function1<? super Character, ? extends K> function1) {
        int mapCapacity;
        int coerceAtLeast;
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(cArr.length);
        coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(mapCapacity, 16);
        LinkedHashMap linkedHashMap = new LinkedHashMap(coerceAtLeast);
        for (char c2 : cArr) {
            linkedHashMap.put(function1.invoke(Character.valueOf(c2)), Character.valueOf(c2));
        }
        return linkedHashMap;
    }

    @NotNull
    public static final <K, V, M extends Map<? super K, ? super V>> M associateByTo(@NotNull boolean[] zArr, @NotNull M m2, @NotNull Function1<? super Boolean, ? extends K> function1, @NotNull Function1<? super Boolean, ? extends V> function12) {
        for (boolean z : zArr) {
            m2.put(function1.invoke(Boolean.valueOf(z)), function12.invoke(Boolean.valueOf(z)));
        }
        return m2;
    }

    @NotNull
    public static final List<Character> dropLastWhile(@NotNull char[] cArr, @NotNull Function1<? super Character, Boolean> function1) {
        List<Character> emptyList;
        for (int lastIndex = getLastIndex(cArr); lastIndex >= 0; lastIndex--) {
            if (!function1.invoke(Character.valueOf(cArr[lastIndex])).booleanValue()) {
                return take(cArr, lastIndex + 1);
            }
        }
        emptyList = CollectionsKt__CollectionsKt.emptyList();
        return emptyList;
    }

    @NotNull
    public static final <R> List<R> flatMap(@NotNull char[] cArr, @NotNull Function1<? super Character, ? extends Iterable<? extends R>> function1) {
        ArrayList arrayList = new ArrayList();
        for (char c2 : cArr) {
            CollectionsKt__MutableCollectionsKt.addAll(arrayList, function1.invoke(Character.valueOf(c2)));
        }
        return arrayList;
    }

    @NotNull
    public static final <K> Map<K, List<Long>> groupBy(@NotNull long[] jArr, @NotNull Function1<? super Long, ? extends K> function1) {
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        for (long j2 : jArr) {
            K invoke = function1.invoke(Long.valueOf(j2));
            Object obj = linkedHashMap.get(invoke);
            if (obj == null) {
                obj = new ArrayList();
                linkedHashMap.put(invoke, obj);
            }
            ((List) obj).add(Long.valueOf(j2));
        }
        return linkedHashMap;
    }

    public static final char reduceRight(@NotNull char[] cArr, @NotNull Function2<? super Character, ? super Character, Character> function2) {
        int lastIndex = getLastIndex(cArr);
        if (lastIndex >= 0) {
            char c2 = cArr[lastIndex];
            for (int i2 = lastIndex - 1; i2 >= 0; i2--) {
                c2 = function2.invoke(Character.valueOf(cArr[i2]), Character.valueOf(c2)).charValue();
            }
            return c2;
        }
        throw new UnsupportedOperationException("Empty array can't be reduced.");
    }

    public static final char reduceRightIndexed(@NotNull char[] cArr, @NotNull Function3<? super Integer, ? super Character, ? super Character, Character> function3) {
        int lastIndex = getLastIndex(cArr);
        if (lastIndex >= 0) {
            char c2 = cArr[lastIndex];
            for (int i2 = lastIndex - 1; i2 >= 0; i2--) {
                c2 = function3.invoke(Integer.valueOf(i2), Character.valueOf(cArr[i2]), Character.valueOf(c2)).charValue();
            }
            return c2;
        }
        throw new UnsupportedOperationException("Empty array can't be reduced.");
    }

    @NotNull
    public static final char[] reversedArray(@NotNull char[] cArr) {
        int i2 = 0;
        if (cArr.length == 0) {
            return cArr;
        }
        char[] cArr2 = new char[cArr.length];
        int lastIndex = getLastIndex(cArr);
        if (lastIndex >= 0) {
            while (true) {
                cArr2[lastIndex - i2] = cArr[i2];
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return cArr2;
    }

    public static char single(@NotNull char[] cArr) {
        int length = cArr.length;
        if (length != 0) {
            if (length == 1) {
                return cArr[0];
            }
            throw new IllegalArgumentException("Array has more than one element.");
        }
        throw new NoSuchElementException("Array is empty.");
    }

    @Nullable
    public static final Character singleOrNull(@NotNull char[] cArr, @NotNull Function1<? super Character, Boolean> function1) {
        Character ch = null;
        boolean z = false;
        for (char c2 : cArr) {
            if (function1.invoke(Character.valueOf(c2)).booleanValue()) {
                if (z) {
                    return null;
                }
                ch = Character.valueOf(c2);
                z = true;
            }
        }
        if (z) {
            return ch;
        }
        return null;
    }

    @NotNull
    public static final List<Character> takeLastWhile(@NotNull char[] cArr, @NotNull Function1<? super Character, Boolean> function1) {
        for (int lastIndex = getLastIndex(cArr); lastIndex >= 0; lastIndex--) {
            if (!function1.invoke(Character.valueOf(cArr[lastIndex])).booleanValue()) {
                return drop(cArr, lastIndex + 1);
            }
        }
        return toList(cArr);
    }

    @NotNull
    public static final List<Character> takeWhile(@NotNull char[] cArr, @NotNull Function1<? super Character, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        for (char c2 : cArr) {
            if (!function1.invoke(Character.valueOf(c2)).booleanValue()) {
                break;
            }
            arrayList.add(Character.valueOf(c2));
        }
        return arrayList;
    }

    @NotNull
    public static final List<Character> toList(@NotNull char[] cArr) {
        List<Character> emptyList;
        List<Character> listOf;
        int length = cArr.length;
        if (length == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        } else if (length != 1) {
            return toMutableList(cArr);
        } else {
            listOf = CollectionsKt__CollectionsJVMKt.listOf(Character.valueOf(cArr[0]));
            return listOf;
        }
    }

    @NotNull
    public static final Set<Character> toSet(@NotNull char[] cArr) {
        Set<Character> emptySet;
        Set<Character> of;
        int mapCapacity;
        int length = cArr.length;
        if (length == 0) {
            emptySet = SetsKt__SetsKt.emptySet();
            return emptySet;
        } else if (length != 1) {
            mapCapacity = MapsKt__MapsJVMKt.mapCapacity(cArr.length);
            return (Set) toCollection(cArr, new LinkedHashSet(mapCapacity));
        } else {
            of = SetsKt__SetsJVMKt.setOf(Character.valueOf(cArr[0]));
            return of;
        }
    }

    public static final int first(@NotNull int[] iArr, @NotNull Function1<? super Integer, Boolean> function1) {
        for (int i2 : iArr) {
            if (function1.invoke(Integer.valueOf(i2)).booleanValue()) {
                return i2;
            }
        }
        throw new NoSuchElementException("Array contains no element matching the predicate.");
    }

    @Nullable
    public static final Character lastOrNull(@NotNull char[] cArr, @NotNull Function1<? super Character, Boolean> function1) {
        char c2;
        int length = cArr.length;
        do {
            length--;
            if (length < 0) {
                return null;
            }
            c2 = cArr[length];
        } while (!function1.invoke(Character.valueOf(c2)).booleanValue());
        return Character.valueOf(c2);
    }

    @SinceKotlin(version = "1.3")
    public static final char random(@NotNull char[] cArr, @NotNull Random random) {
        if (!(cArr.length == 0)) {
            return cArr[random.nextInt(cArr.length)];
        }
        throw new NoSuchElementException("Array is empty.");
    }

    @NotNull
    public static final List<Integer> slice(@NotNull int[] iArr, @NotNull Iterable<Integer> iterable) {
        int collectionSizeOrDefault;
        List<Integer> emptyList;
        collectionSizeOrDefault = CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10);
        if (collectionSizeOrDefault == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        ArrayList arrayList = new ArrayList(collectionSizeOrDefault);
        Iterator<Integer> it = iterable.iterator();
        while (it.hasNext()) {
            arrayList.add(Integer.valueOf(iArr[it.next().intValue()]));
        }
        return arrayList;
    }

    @NotNull
    public static int[] sliceArray(@NotNull int[] iArr, @NotNull  Var) {
        int[] copyOfRange;
        if (Var.isEmpty()) {
            return new int[0];
        }
        copyOfRange = ArraysKt___ArraysJvmKt.copyOfRange(iArr, Var.getStart().intValue(), Var.getEndInclusive().intValue() + 1);
        return copyOfRange;
    }

    @NotNull
    public static final <K, V, M extends Map<? super K, ? super V>> M associateByTo(@NotNull char[] cArr, @NotNull M m2, @NotNull Function1<? super Character, ? extends K> function1, @NotNull Function1<? super Character, ? extends V> function12) {
        for (char c2 : cArr) {
            m2.put(function1.invoke(Character.valueOf(c2)), function12.invoke(Character.valueOf(c2)));
        }
        return m2;
    }

    @NotNull
    public static final <A extends Appendable> A joinTo(@NotNull float[] fArr, @NotNull A a, @NotNull CharSequence charSequence, @NotNull CharSequence charSequence2, @NotNull CharSequence charSequence3, int i2, @NotNull CharSequence charSequence4, @Nullable Function1<? super Float, ? extends CharSequence> function1) {
        a.append(charSequence2);
        int i3 = 0;
        for (float f2 : fArr) {
            i3++;
            if (i3 > 1) {
                a.append(charSequence);
            }
            if (i2 >= 0 && i3 > i2) {
                break;
            }
            if (function1 != null) {
                a.append(function1.invoke(Float.valueOf(f2)));
            } else {
                a.append(String.valueOf(f2));
            }
        }
        if (i2 >= 0 && i3 > i2) {
            a.append(charSequence4);
        }
        a.append(charSequence3);
        return a;
    }

    @Nullable
    public static final Long max(@NotNull long[] jArr) {
        int lastIndex;
        int i2 = 1;
        if (jArr.length == 0) {
            return null;
        }
        long j2 = jArr[0];
        lastIndex = getLastIndex(jArr);
        if (1 <= lastIndex) {
            while (true) {
                long j3 = jArr[i2];
                if (j2 < j3) {
                    j2 = j3;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Long.valueOf(j2);
    }

    @Nullable
    public static final <R extends Comparable<? super R>> Long maxBy(@NotNull long[] jArr, @NotNull Function1<? super Long, ? extends R> function1) {
        int lastIndex;
        int i2 = 1;
        if (jArr.length == 0) {
            return null;
        }
        long j2 = jArr[0];
        lastIndex = getLastIndex(jArr);
        if (lastIndex == 0) {
            return Long.valueOf(j2);
        }
        R invoke = function1.invoke(Long.valueOf(j2));
        if (1 <= lastIndex) {
            while (true) {
                long j3 = jArr[i2];
                R invoke2 = function1.invoke(Long.valueOf(j3));
                if (invoke.compareTo(invoke2) < 0) {
                    j2 = j3;
                    invoke = invoke2;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Long.valueOf(j2);
    }

    @Nullable
    public static final Long min(@NotNull long[] jArr) {
        int lastIndex;
        int i2 = 1;
        if (jArr.length == 0) {
            return null;
        }
        long j2 = jArr[0];
        lastIndex = getLastIndex(jArr);
        if (1 <= lastIndex) {
            while (true) {
                long j3 = jArr[i2];
                if (j2 > j3) {
                    j2 = j3;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Long.valueOf(j2);
    }

    @Nullable
    public static final <R extends Comparable<? super R>> Long minBy(@NotNull long[] jArr, @NotNull Function1<? super Long, ? extends R> function1) {
        int lastIndex;
        int i2 = 1;
        if (jArr.length == 0) {
            return null;
        }
        long j2 = jArr[0];
        lastIndex = getLastIndex(jArr);
        if (lastIndex == 0) {
            return Long.valueOf(j2);
        }
        R invoke = function1.invoke(Long.valueOf(j2));
        if (1 <= lastIndex) {
            while (true) {
                long j3 = jArr[i2];
                R invoke2 = function1.invoke(Long.valueOf(j3));
                if (invoke.compareTo(invoke2) > 0) {
                    j2 = j3;
                    invoke = invoke2;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Long.valueOf(j2);
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @Nullable
    public static final Boolean reduceOrNull(@NotNull boolean[] zArr, @NotNull Function2<? super Boolean, ? super Boolean, Boolean> function2) {
        int i2 = 1;
        if (zArr.length == 0) {
            return null;
        }
        boolean z = zArr[0];
        int lastIndex = getLastIndex(zArr);
        if (1 <= lastIndex) {
            while (true) {
                z = function2.invoke(Boolean.valueOf(z), Boolean.valueOf(zArr[i2])).booleanValue();
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Boolean.valueOf(z);
    }

    @NotNull
    public static final List<Boolean> dropWhile(@NotNull boolean[] zArr, @NotNull Function1<? super Boolean, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        boolean z = false;
        for (boolean z2 : zArr) {
            if (z) {
                arrayList.add(Boolean.valueOf(z2));
            } else if (!function1.invoke(Boolean.valueOf(z2)).booleanValue()) {
                arrayList.add(Boolean.valueOf(z2));
                z = true;
            }
        }
        return arrayList;
    }

    public static final long first(@NotNull long[] jArr, @NotNull Function1<? super Long, Boolean> function1) {
        for (long j2 : jArr) {
            if (function1.invoke(Long.valueOf(j2)).booleanValue()) {
                return j2;
            }
        }
        throw new NoSuchElementException("Array contains no element matching the predicate.");
    }

    @NotNull
    public static final <K, M extends Map<? super K, List<Float>>> M groupByTo(@NotNull float[] fArr, @NotNull M m2, @NotNull Function1<? super Float, ? extends K> function1) {
        for (float f2 : fArr) {
            K invoke = function1.invoke(Float.valueOf(f2));
            Object obj = m2.get(invoke);
            if (obj == null) {
                obj = new ArrayList();
                m2.put(invoke, obj);
            }
            ((List) obj).add(Float.valueOf(f2));
        }
        return m2;
    }

    public static final short last(@NotNull short[] sArr, @NotNull Function1<? super Short, Boolean> function1) {
        short s;
        int length = sArr.length;
        do {
            length--;
            if (length >= 0) {
                s = sArr[length];
            } else {
                throw new NoSuchElementException("Array contains no element matching the predicate.");
            }
        } while (!function1.invoke(Short.valueOf(s)).booleanValue());
        return s;
    }

    @Nullable
    public static final Double maxWith(@NotNull double[] dArr, @NotNull Comparator<? super Double> comparator) {
        int i2 = 1;
        if (dArr.length == 0) {
            return null;
        }
        double d = dArr[0];
        int lastIndex = getLastIndex(dArr);
        if (1 <= lastIndex) {
            while (true) {
                double d2 = dArr[i2];
                if (comparator.compare(Double.valueOf(d), Double.valueOf(d2)) < 0) {
                    d = d2;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Double.valueOf(d);
    }

    @Nullable
    public static final Double minWith(@NotNull double[] dArr, @NotNull Comparator<? super Double> comparator) {
        int i2 = 1;
        if (dArr.length == 0) {
            return null;
        }
        double d = dArr[0];
        int lastIndex = getLastIndex(dArr);
        if (1 <= lastIndex) {
            while (true) {
                double d2 = dArr[i2];
                if (comparator.compare(Double.valueOf(d), Double.valueOf(d2)) > 0) {
                    d = d2;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Double.valueOf(d);
    }

    @NotNull
    public static final Pair<List<Float>, List<Float>> partition(@NotNull float[] fArr, @NotNull Function1<? super Float, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        ArrayList arrayList2 = new ArrayList();
        for (float f2 : fArr) {
            if (function1.invoke(Float.valueOf(f2)).booleanValue()) {
                arrayList.add(Float.valueOf(f2));
            } else {
                arrayList2.add(Float.valueOf(f2));
            }
        }
        return new Pair<>(arrayList, arrayList2);
    }

    public static final boolean reduce(@NotNull boolean[] zArr, @NotNull Function2<? super Boolean, ? super Boolean, Boolean> function2) {
        int i2 = 1;
        if (!(zArr.length == 0)) {
            boolean z = zArr[0];
            int lastIndex = getLastIndex(zArr);
            if (1 <= lastIndex) {
                while (true) {
                    z = function2.invoke(Boolean.valueOf(z), Boolean.valueOf(zArr[i2])).booleanValue();
                    if (i2 == lastIndex) {
                        break;
                    }
                    i2++;
                }
            }
            return z;
        }
        throw new UnsupportedOperationException("Empty array can't be reduced.");
    }

    public static final boolean reduceIndexed(@NotNull boolean[] zArr, @NotNull Function3<? super Integer, ? super Boolean, ? super Boolean, Boolean> function3) {
        int i2 = 1;
        if (!(zArr.length == 0)) {
            boolean z = zArr[0];
            int lastIndex = getLastIndex(zArr);
            if (1 <= lastIndex) {
                while (true) {
                    z = function3.invoke(Integer.valueOf(i2), Boolean.valueOf(z), Boolean.valueOf(zArr[i2])).booleanValue();
                    if (i2 == lastIndex) {
                        break;
                    }
                    i2++;
                }
            }
            return z;
        }
        throw new UnsupportedOperationException("Empty array can't be reduced.");
    }

    public static final void reverse(@NotNull boolean[] zArr) {
        int length = (zArr.length / 2) - 1;
        if (length < 0) {
            return;
        }
        int lastIndex = getLastIndex(zArr);
        int i2 = 0;
        if (length < 0) {
            return;
        }
        while (true) {
            boolean z = zArr[i2];
            zArr[i2] = zArr[lastIndex];
            zArr[lastIndex] = z;
            lastIndex--;
            if (i2 == length) {
                return;
            }
            i2++;
        }
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @InlineOnly
    private static final <R> List<R> scan(@NotNull boolean[] zArr, R r, Function2<? super R, ? super Boolean, ? extends R> function2) {
        List<R> listOf;
        if (zArr.length == 0) {
            listOf = CollectionsKt__CollectionsJVMKt.listOf(r);
            return listOf;
        }
        ArrayList arrayList = new ArrayList(zArr.length + 1);
        arrayList.add(r);
        for (boolean z : zArr) {
            r = function2.invoke(r, Boolean.valueOf(z));
            arrayList.add(r);
        }
        return arrayList;
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @InlineOnly
    private static final <R> List<R> scanIndexed(@NotNull boolean[] zArr, R r, Function3<? super Integer, ? super R, ? super Boolean, ? extends R> function3) {
        List<R> listOf;
        if (zArr.length == 0) {
            listOf = CollectionsKt__CollectionsJVMKt.listOf(r);
            return listOf;
        }
        ArrayList arrayList = new ArrayList(zArr.length + 1);
        arrayList.add(r);
        int length = zArr.length;
        for (int i2 = 0; i2 < length; i2++) {
            r = function3.invoke(Integer.valueOf(i2), r, Boolean.valueOf(zArr[i2]));
            arrayList.add(r);
        }
        return arrayList;
    }

    @NotNull
    public static long[] sliceArray(@NotNull long[] jArr, @NotNull  Var) {
        long[] copyOfRange;
        if (Var.isEmpty()) {
            return new long[0];
        }
        copyOfRange = ArraysKt___ArraysJvmKt.copyOfRange(jArr, Var.getStart().intValue(), Var.getEndInclusive().intValue() + 1);
        return copyOfRange;
    }

    @NotNull
    public static final List<Float> take(@NotNull float[] fArr, int i2) {
        List<Float> listOf;
        List<Float> emptyList;
        if (!(i2 >= 0)) {
            throw new IllegalArgumentException(("Requested element count " + i2 + " is less than zero.").toString());
        } else if (i2 == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        } else if (i2 >= fArr.length) {
            return toList(fArr);
        } else {
            if (i2 == 1) {
                listOf = CollectionsKt__CollectionsJVMKt.listOf(Float.valueOf(fArr[0]));
                return listOf;
            }
            ArrayList arrayList = new ArrayList(i2);
            int i3 = 0;
            for (float f2 : fArr) {
                arrayList.add(Float.valueOf(f2));
                i3++;
                if (i3 == i2) {
                    break;
                }
            }
            return arrayList;
        }
    }

    @NotNull
    public static final List<Float> takeLast(@NotNull float[] fArr, int i2) {
        List<Float> listOf;
        List<Float> emptyList;
        if (!(i2 >= 0)) {
            throw new IllegalArgumentException(("Requested element count " + i2 + " is less than zero.").toString());
        } else if (i2 == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        } else {
            int length = fArr.length;
            if (i2 >= length) {
                return toList(fArr);
            }
            if (i2 == 1) {
                listOf = CollectionsKt__CollectionsJVMKt.listOf(Float.valueOf(fArr[length - 1]));
                return listOf;
            }
            ArrayList arrayList = new ArrayList(i2);
            for (int i3 = length - i2; i3 < length; i3++) {
                arrayList.add(Float.valueOf(fArr[i3]));
            }
            return arrayList;
        }
    }

    @NotNull
    public static final <R, V> List<V> zip(@NotNull short[] sArr, @NotNull Iterable<? extends R> iterable, @NotNull Function2<? super Short, ? super R, ? extends V> function2) {
        int collectionSizeOrDefault;
        int length = sArr.length;
        collectionSizeOrDefault = CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10);
        ArrayList arrayList = new ArrayList(Math.min(collectionSizeOrDefault, length));
        Iterator<? extends R> it = iterable.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            Object obj = (R) it.next();
            if (i2 >= length) {
                break;
            }
            arrayList.add(function2.invoke(Short.valueOf(sArr[i2]), obj));
            i2++;
        }
        return arrayList;
    }

    @NotNull
    public static final <T, K, V> Map<K, V> associateBy(@NotNull T[] tArr, @NotNull Function1<? super T, ? extends K> function1, @NotNull Function1<? super T, ? extends V> function12) {
        int mapCapacity;
        int coerceAtLeast;
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(tArr.length);
        coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(mapCapacity, 16);
        LinkedHashMap linkedHashMap = new LinkedHashMap(coerceAtLeast);
        for (T t : tArr) {
            linkedHashMap.put(function1.invoke(t), function12.invoke(t));
        }
        return linkedHashMap;
    }

    @NotNull
    public static final <K> List<Double> distinctBy(@NotNull double[] dArr, @NotNull Function1<? super Double, ? extends K> function1) {
        HashSet hashSet = new HashSet();
        ArrayList arrayList = new ArrayList();
        for (double d : dArr) {
            if (hashSet.add(function1.invoke(Double.valueOf(d)))) {
                arrayList.add(Double.valueOf(d));
            }
        }
        return arrayList;
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @InlineOnly
    private static final List<Double> scanReduce(@NotNull double[] dArr, Function2<? super Double, ? super Double, Double> function2) {
        List<Double> emptyList;
        if (dArr.length == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        double d = dArr[0];
        ArrayList arrayList = new ArrayList(dArr.length);
        arrayList.add(Double.valueOf(d));
        int length = dArr.length;
        for (int i2 = 1; i2 < length; i2++) {
            d = function2.invoke(Double.valueOf(d), Double.valueOf(dArr[i2])).doubleValue();
            arrayList.add(Double.valueOf(d));
        }
        return arrayList;
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @InlineOnly
    private static final List<Double> scanReduceIndexed(@NotNull double[] dArr, Function3<? super Integer, ? super Double, ? super Double, Double> function3) {
        List<Double> emptyList;
        if (dArr.length == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        double d = dArr[0];
        ArrayList arrayList = new ArrayList(dArr.length);
        arrayList.add(Double.valueOf(d));
        int length = dArr.length;
        for (int i2 = 1; i2 < length; i2++) {
            d = function3.invoke(Integer.valueOf(i2), Double.valueOf(d), Double.valueOf(dArr[i2])).doubleValue();
            arrayList.add(Double.valueOf(d));
        }
        return arrayList;
    }

    public static final <T> T single(@NotNull T[] tArr, @NotNull Function1<? super T, Boolean> function1) {
        T t = null;
        boolean z = false;
        for (T t2 : tArr) {
            if (function1.invoke(t2).booleanValue()) {
                if (z) {
                    throw new IllegalArgumentException("Array contains more than one matching element.");
                }
                z = true;
                t = t2;
            }
        }
        if (z) {
            return t;
        }
        throw new NoSuchElementException("Array contains no element matching the predicate.");
    }

    public static final float first(@NotNull float[] fArr, @NotNull Function1<? super Float, Boolean> function1) {
        for (float f2 : fArr) {
            if (function1.invoke(Float.valueOf(f2)).booleanValue()) {
                return f2;
            }
        }
        throw new NoSuchElementException("Array contains no element matching the predicate.");
    }

    @NotNull
    public static final float[] sliceArray(@NotNull float[] fArr, @NotNull  Var) {
        return Var.isEmpty() ? new float[0] : ArraysKt___ArraysJvmKt.copyOfRange(fArr, Var.getStart().intValue(), Var.getEndInclusive().intValue() + 1);
    }

    @NotNull
    public static final List<Long> slice(@NotNull long[] jArr, @NotNull Iterable<Integer> iterable) {
        int collectionSizeOrDefault;
        List<Long> emptyList;
        collectionSizeOrDefault = CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10);
        if (collectionSizeOrDefault == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        ArrayList arrayList = new ArrayList(collectionSizeOrDefault);
        Iterator<Integer> it = iterable.iterator();
        while (it.hasNext()) {
            arrayList.add(Long.valueOf(jArr[it.next().intValue()]));
        }
        return arrayList;
    }

    public static final double first(@NotNull double[] dArr, @NotNull Function1<? super Double, Boolean> function1) {
        for (double d : dArr) {
            if (function1.invoke(Double.valueOf(d)).booleanValue()) {
                return d;
            }
        }
        throw new NoSuchElementException("Array contains no element matching the predicate.");
    }

    public static final int last(@NotNull int[] iArr, @NotNull Function1<? super Integer, Boolean> function1) {
        int i2;
        int length = iArr.length;
        do {
            length--;
            if (length >= 0) {
                i2 = iArr[length];
            } else {
                throw new NoSuchElementException("Array contains no element matching the predicate.");
            }
        } while (!function1.invoke(Integer.valueOf(i2)).booleanValue());
        return i2;
    }

    @Nullable
    public static final Float max(@NotNull float[] fArr) {
        int i2 = 1;
        if (fArr.length == 0) {
            return null;
        }
        float f2 = fArr[0];
        if (Float.isNaN(f2)) {
            return Float.valueOf(f2);
        }
        int lastIndex = getLastIndex(fArr);
        if (1 <= lastIndex) {
            while (true) {
                float f3 = fArr[i2];
                if (!Float.isNaN(f3)) {
                    if (f2 < f3) {
                        f2 = f3;
                    }
                    if (i2 == lastIndex) {
                        break;
                    }
                    i2++;
                } else {
                    return Float.valueOf(f3);
                }
            }
        }
        return Float.valueOf(f2);
    }

    @Nullable
    public static final Float min(@NotNull float[] fArr) {
        int i2 = 1;
        if (fArr.length == 0) {
            return null;
        }
        float f2 = fArr[0];
        if (Float.isNaN(f2)) {
            return Float.valueOf(f2);
        }
        int lastIndex = getLastIndex(fArr);
        if (1 <= lastIndex) {
            while (true) {
                float f3 = fArr[i2];
                if (!Float.isNaN(f3)) {
                    if (f2 > f3) {
                        f2 = f3;
                    }
                    if (i2 == lastIndex) {
                        break;
                    }
                    i2++;
                } else {
                    return Float.valueOf(f3);
                }
            }
        }
        return Float.valueOf(f2);
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @Nullable
    public static final Character reduceOrNull(@NotNull char[] cArr, @NotNull Function2<? super Character, ? super Character, Character> function2) {
        int i2 = 1;
        if (cArr.length == 0) {
            return null;
        }
        char c2 = cArr[0];
        int lastIndex = getLastIndex(cArr);
        if (1 <= lastIndex) {
            while (true) {
                c2 = function2.invoke(Character.valueOf(c2), Character.valueOf(cArr[i2])).charValue();
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Character.valueOf(c2);
    }

    @NotNull
    public static final double[] sliceArray(@NotNull double[] dArr, @NotNull  Var) {
        return Var.isEmpty() ? new double[0] : ArraysKt___ArraysJvmKt.copyOfRange(dArr, Var.getStart().intValue(), Var.getEndInclusive().intValue() + 1);
    }

    @NotNull
    public static final <R, V> List<V> zip(@NotNull int[] iArr, @NotNull Iterable<? extends R> iterable, @NotNull Function2<? super Integer, ? super R, ? extends V> function2) {
        int collectionSizeOrDefault;
        int length = iArr.length;
        collectionSizeOrDefault = CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10);
        ArrayList arrayList = new ArrayList(Math.min(collectionSizeOrDefault, length));
        Iterator<? extends R> it = iterable.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            Object obj = (R) it.next();
            if (i2 >= length) {
                break;
            }
            arrayList.add(function2.invoke(Integer.valueOf(iArr[i2]), obj));
            i2++;
        }
        return arrayList;
    }

    @NotNull
    public static final <K, V> Map<K, V> associateBy(@NotNull byte[] bArr, @NotNull Function1<? super Byte, ? extends K> function1, @NotNull Function1<? super Byte, ? extends V> function12) {
        int mapCapacity;
        int coerceAtLeast;
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(bArr.length);
        coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(mapCapacity, 16);
        LinkedHashMap linkedHashMap = new LinkedHashMap(coerceAtLeast);
        for (byte b : bArr) {
            linkedHashMap.put(function1.invoke(Byte.valueOf(b)), function12.invoke(Byte.valueOf(b)));
        }
        return linkedHashMap;
    }

    @NotNull
    public static final List<Character> dropWhile(@NotNull char[] cArr, @NotNull Function1<? super Character, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        boolean z = false;
        for (char c2 : cArr) {
            if (z) {
                arrayList.add(Character.valueOf(c2));
            } else if (!function1.invoke(Character.valueOf(c2)).booleanValue()) {
                arrayList.add(Character.valueOf(c2));
                z = true;
            }
        }
        return arrayList;
    }

    @NotNull
    public static final <K> Map<K, List<Float>> groupBy(@NotNull float[] fArr, @NotNull Function1<? super Float, ? extends K> function1) {
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        for (float f2 : fArr) {
            K invoke = function1.invoke(Float.valueOf(f2));
            Object obj = linkedHashMap.get(invoke);
            if (obj == null) {
                obj = new ArrayList();
                linkedHashMap.put(invoke, obj);
            }
            ((List) obj).add(Float.valueOf(f2));
        }
        return linkedHashMap;
    }

    public static final char reduce(@NotNull char[] cArr, @NotNull Function2<? super Character, ? super Character, Character> function2) {
        int i2 = 1;
        if (!(cArr.length == 0)) {
            char c2 = cArr[0];
            int lastIndex = getLastIndex(cArr);
            if (1 <= lastIndex) {
                while (true) {
                    c2 = function2.invoke(Character.valueOf(c2), Character.valueOf(cArr[i2])).charValue();
                    if (i2 == lastIndex) {
                        break;
                    }
                    i2++;
                }
            }
            return c2;
        }
        throw new UnsupportedOperationException("Empty array can't be reduced.");
    }

    public static final char reduceIndexed(@NotNull char[] cArr, @NotNull Function3<? super Integer, ? super Character, ? super Character, Character> function3) {
        int i2 = 1;
        if (!(cArr.length == 0)) {
            char c2 = cArr[0];
            int lastIndex = getLastIndex(cArr);
            if (1 <= lastIndex) {
                while (true) {
                    c2 = function3.invoke(Integer.valueOf(i2), Character.valueOf(c2), Character.valueOf(cArr[i2])).charValue();
                    if (i2 == lastIndex) {
                        break;
                    }
                    i2++;
                }
            }
            return c2;
        }
        throw new UnsupportedOperationException("Empty array can't be reduced.");
    }

    public static void reverse(@NotNull char[] cArr) {
        int length = (cArr.length / 2) - 1;
        if (length < 0) {
            return;
        }
        int lastIndex = getLastIndex(cArr);
        int i2 = 0;
        if (length < 0) {
            return;
        }
        while (true) {
            char c2 = cArr[i2];
            cArr[i2] = cArr[lastIndex];
            cArr[lastIndex] = c2;
            lastIndex--;
            if (i2 == length) {
                return;
            }
            i2++;
        }
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @InlineOnly
    private static final <R> List<R> scan(@NotNull char[] cArr, R r, Function2<? super R, ? super Character, ? extends R> function2) {
        List<R> listOf;
        if (cArr.length == 0) {
            listOf = CollectionsKt__CollectionsJVMKt.listOf(r);
            return listOf;
        }
        ArrayList arrayList = new ArrayList(cArr.length + 1);
        arrayList.add(r);
        for (char c2 : cArr) {
            r = function2.invoke(r, Character.valueOf(c2));
            arrayList.add(r);
        }
        return arrayList;
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @InlineOnly
    private static final <R> List<R> scanIndexed(@NotNull char[] cArr, R r, Function3<? super Integer, ? super R, ? super Character, ? extends R> function3) {
        List<R> listOf;
        if (cArr.length == 0) {
            listOf = CollectionsKt__CollectionsJVMKt.listOf(r);
            return listOf;
        }
        ArrayList arrayList = new ArrayList(cArr.length + 1);
        arrayList.add(r);
        int length = cArr.length;
        for (int i2 = 0; i2 < length; i2++) {
            r = function3.invoke(Integer.valueOf(i2), r, Character.valueOf(cArr[i2]));
            arrayList.add(r);
        }
        return arrayList;
    }

    public static final byte single(@NotNull byte[] bArr, @NotNull Function1<? super Byte, Boolean> function1) {
        Byte b = null;
        boolean z = false;
        for (byte b2 : bArr) {
            if (function1.invoke(Byte.valueOf(b2)).booleanValue()) {
                if (!z) {
                    b = Byte.valueOf(b2);
                    z = true;
                } else {
                    throw new IllegalArgumentException("Array contains more than one matching element.");
                }
            }
        }
        if (z) {
            if (b != null) {
                return b.byteValue();
            }
            throw new TypeCastException("null cannot be cast to non-null type kotlin.Byte");
        }
        throw new NoSuchElementException("Array contains no element matching the predicate.");
    }

    public static final boolean first(@NotNull boolean[] zArr, @NotNull Function1<? super Boolean, Boolean> function1) {
        for (boolean z : zArr) {
            if (function1.invoke(Boolean.valueOf(z)).booleanValue()) {
                return z;
            }
        }
        throw new NoSuchElementException("Array contains no element matching the predicate.");
    }

    @NotNull
    public static final <A extends Appendable> A joinTo(@NotNull double[] dArr, @NotNull A a, @NotNull CharSequence charSequence, @NotNull CharSequence charSequence2, @NotNull CharSequence charSequence3, int i2, @NotNull CharSequence charSequence4, @Nullable Function1<? super Double, ? extends CharSequence> function1) {
        a.append(charSequence2);
        int i3 = 0;
        for (double d : dArr) {
            i3++;
            if (i3 > 1) {
                a.append(charSequence);
            }
            if (i2 >= 0 && i3 > i2) {
                break;
            }
            if (function1 != null) {
                a.append(function1.invoke(Double.valueOf(d)));
            } else {
                a.append(String.valueOf(d));
            }
        }
        if (i2 >= 0 && i3 > i2) {
            a.append(charSequence4);
        }
        a.append(charSequence3);
        return a;
    }

    @Nullable
    public static final Boolean maxWith(@NotNull boolean[] zArr, @NotNull Comparator<? super Boolean> comparator) {
        int i2 = 1;
        if (zArr.length == 0) {
            return null;
        }
        boolean z = zArr[0];
        int lastIndex = getLastIndex(zArr);
        if (1 <= lastIndex) {
            while (true) {
                boolean z2 = zArr[i2];
                if (comparator.compare(Boolean.valueOf(z), Boolean.valueOf(z2)) < 0) {
                    z = z2;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Boolean.valueOf(z);
    }

    @Nullable
    public static final Boolean minWith(@NotNull boolean[] zArr, @NotNull Comparator<? super Boolean> comparator) {
        int i2 = 1;
        if (zArr.length == 0) {
            return null;
        }
        boolean z = zArr[0];
        int lastIndex = getLastIndex(zArr);
        if (1 <= lastIndex) {
            while (true) {
                boolean z2 = zArr[i2];
                if (comparator.compare(Boolean.valueOf(z), Boolean.valueOf(z2)) > 0) {
                    z = z2;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Boolean.valueOf(z);
    }

    @NotNull
    public static final boolean[] sliceArray(@NotNull boolean[] zArr, @NotNull  Var) {
        return Var.isEmpty() ? new boolean[0] : ArraysKt___ArraysJvmKt.copyOfRange(zArr, Var.getStart().intValue(), Var.getEndInclusive().intValue() + 1);
    }

    @NotNull
    public static final <K> List<Boolean> distinctBy(@NotNull boolean[] zArr, @NotNull Function1<? super Boolean, ? extends K> function1) {
        HashSet hashSet = new HashSet();
        ArrayList arrayList = new ArrayList();
        for (boolean z : zArr) {
            if (hashSet.add(function1.invoke(Boolean.valueOf(z)))) {
                arrayList.add(Boolean.valueOf(z));
            }
        }
        return arrayList;
    }

    @NotNull
    public static final <K, M extends Map<? super K, List<Double>>> M groupByTo(@NotNull double[] dArr, @NotNull M m2, @NotNull Function1<? super Double, ? extends K> function1) {
        for (double d : dArr) {
            K invoke = function1.invoke(Double.valueOf(d));
            Object obj = m2.get(invoke);
            if (obj == null) {
                obj = new ArrayList();
                m2.put(invoke, obj);
            }
            ((List) obj).add(Double.valueOf(d));
        }
        return m2;
    }

    @NotNull
    public static final Pair<List<Double>, List<Double>> partition(@NotNull double[] dArr, @NotNull Function1<? super Double, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        ArrayList arrayList2 = new ArrayList();
        for (double d : dArr) {
            if (function1.invoke(Double.valueOf(d)).booleanValue()) {
                arrayList.add(Double.valueOf(d));
            } else {
                arrayList2.add(Double.valueOf(d));
            }
        }
        return new Pair<>(arrayList, arrayList2);
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @InlineOnly
    private static final List<Boolean> scanReduce(@NotNull boolean[] zArr, Function2<? super Boolean, ? super Boolean, Boolean> function2) {
        List<Boolean> emptyList;
        if (zArr.length == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        boolean z = zArr[0];
        ArrayList arrayList = new ArrayList(zArr.length);
        arrayList.add(Boolean.valueOf(z));
        int length = zArr.length;
        for (int i2 = 1; i2 < length; i2++) {
            z = function2.invoke(Boolean.valueOf(z), Boolean.valueOf(zArr[i2])).booleanValue();
            arrayList.add(Boolean.valueOf(z));
        }
        return arrayList;
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @InlineOnly
    private static final List<Boolean> scanReduceIndexed(@NotNull boolean[] zArr, Function3<? super Integer, ? super Boolean, ? super Boolean, Boolean> function3) {
        List<Boolean> emptyList;
        if (zArr.length == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        boolean z = zArr[0];
        ArrayList arrayList = new ArrayList(zArr.length);
        arrayList.add(Boolean.valueOf(z));
        int length = zArr.length;
        for (int i2 = 1; i2 < length; i2++) {
            z = function3.invoke(Integer.valueOf(i2), Boolean.valueOf(z), Boolean.valueOf(zArr[i2])).booleanValue();
            arrayList.add(Boolean.valueOf(z));
        }
        return arrayList;
    }

    @NotNull
    public static final List<Double> take(@NotNull double[] dArr, int i2) {
        List<Double> listOf;
        List<Double> emptyList;
        if (!(i2 >= 0)) {
            throw new IllegalArgumentException(("Requested element count " + i2 + " is less than zero.").toString());
        } else if (i2 == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        } else if (i2 >= dArr.length) {
            return toList(dArr);
        } else {
            if (i2 == 1) {
                listOf = CollectionsKt__CollectionsJVMKt.listOf(Double.valueOf(dArr[0]));
                return listOf;
            }
            ArrayList arrayList = new ArrayList(i2);
            int i3 = 0;
            for (double d : dArr) {
                arrayList.add(Double.valueOf(d));
                i3++;
                if (i3 == i2) {
                    break;
                }
            }
            return arrayList;
        }
    }

    @NotNull
    public static final List<Double> takeLast(@NotNull double[] dArr, int i2) {
        List<Double> listOf;
        List<Double> emptyList;
        if (!(i2 >= 0)) {
            throw new IllegalArgumentException(("Requested element count " + i2 + " is less than zero.").toString());
        } else if (i2 == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        } else {
            int length = dArr.length;
            if (i2 >= length) {
                return toList(dArr);
            }
            if (i2 == 1) {
                listOf = CollectionsKt__CollectionsJVMKt.listOf(Double.valueOf(dArr[length - 1]));
                return listOf;
            }
            ArrayList arrayList = new ArrayList(i2);
            for (int i3 = length - i2; i3 < length; i3++) {
                arrayList.add(Double.valueOf(dArr[i3]));
            }
            return arrayList;
        }
    }

    public static final char first(@NotNull char[] cArr, @NotNull Function1<? super Character, Boolean> function1) {
        for (char c2 : cArr) {
            if (function1.invoke(Character.valueOf(c2)).booleanValue()) {
                return c2;
            }
        }
        throw new NoSuchElementException("Array contains no element matching the predicate.");
    }

    public static final long last(@NotNull long[] jArr, @NotNull Function1<? super Long, Boolean> function1) {
        long j2;
        int length = jArr.length;
        do {
            length--;
            if (length >= 0) {
                j2 = jArr[length];
            } else {
                throw new NoSuchElementException("Array contains no element matching the predicate.");
            }
        } while (!function1.invoke(Long.valueOf(j2)).booleanValue());
        return j2;
    }

    @Nullable
    public static final <R extends Comparable<? super R>> Float maxBy(@NotNull float[] fArr, @NotNull Function1<? super Float, ? extends R> function1) {
        int i2 = 1;
        if (fArr.length == 0) {
            return null;
        }
        float f2 = fArr[0];
        int lastIndex = getLastIndex(fArr);
        if (lastIndex == 0) {
            return Float.valueOf(f2);
        }
        R invoke = function1.invoke(Float.valueOf(f2));
        if (1 <= lastIndex) {
            while (true) {
                float f3 = fArr[i2];
                R invoke2 = function1.invoke(Float.valueOf(f3));
                if (invoke.compareTo(invoke2) < 0) {
                    f2 = f3;
                    invoke = invoke2;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Float.valueOf(f2);
    }

    @Nullable
    public static final <R extends Comparable<? super R>> Float minBy(@NotNull float[] fArr, @NotNull Function1<? super Float, ? extends R> function1) {
        int i2 = 1;
        if (fArr.length == 0) {
            return null;
        }
        float f2 = fArr[0];
        int lastIndex = getLastIndex(fArr);
        if (lastIndex == 0) {
            return Float.valueOf(f2);
        }
        R invoke = function1.invoke(Float.valueOf(f2));
        if (1 <= lastIndex) {
            while (true) {
                float f3 = fArr[i2];
                R invoke2 = function1.invoke(Float.valueOf(f3));
                if (invoke.compareTo(invoke2) > 0) {
                    f2 = f3;
                    invoke = invoke2;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Float.valueOf(f2);
    }

    @NotNull
    public static final List<Float> slice(@NotNull float[] fArr, @NotNull Iterable<Integer> iterable) {
        int collectionSizeOrDefault;
        List<Float> emptyList;
        collectionSizeOrDefault = CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10);
        if (collectionSizeOrDefault == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        ArrayList arrayList = new ArrayList(collectionSizeOrDefault);
        Iterator<Integer> it = iterable.iterator();
        while (it.hasNext()) {
            arrayList.add(Float.valueOf(fArr[it.next().intValue()]));
        }
        return arrayList;
    }

    @NotNull
    public static final char[] sliceArray(@NotNull char[] cArr, @NotNull  Var) {
        return Var.isEmpty() ? new char[0] : ArraysKt___ArraysJvmKt.copyOfRange(cArr, Var.getStart().intValue(), Var.getEndInclusive().intValue() + 1);
    }

    @NotNull
    public static final <R, V> List<V> zip(@NotNull long[] jArr, @NotNull Iterable<? extends R> iterable, @NotNull Function2<? super Long, ? super R, ? extends V> function2) {
        int collectionSizeOrDefault;
        int length = jArr.length;
        collectionSizeOrDefault = CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10);
        ArrayList arrayList = new ArrayList(Math.min(collectionSizeOrDefault, length));
        Iterator<? extends R> it = iterable.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            Object obj = (R) it.next();
            if (i2 >= length) {
                break;
            }
            arrayList.add(function2.invoke(Long.valueOf(jArr[i2]), obj));
            i2++;
        }
        return arrayList;
    }

    @NotNull
    public static final <K, V> Map<K, V> associateBy(@NotNull short[] sArr, @NotNull Function1<? super Short, ? extends K> function1, @NotNull Function1<? super Short, ? extends V> function12) {
        int mapCapacity;
        int coerceAtLeast;
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(sArr.length);
        coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(mapCapacity, 16);
        LinkedHashMap linkedHashMap = new LinkedHashMap(coerceAtLeast);
        for (short s : sArr) {
            linkedHashMap.put(function1.invoke(Short.valueOf(s)), function12.invoke(Short.valueOf(s)));
        }
        return linkedHashMap;
    }

    @Nullable
    public static final Double max(@NotNull double[] dArr) {
        int i2 = 1;
        if (dArr.length == 0) {
            return null;
        }
        double d = dArr[0];
        if (Double.isNaN(d)) {
            return Double.valueOf(d);
        }
        int lastIndex = getLastIndex(dArr);
        if (1 <= lastIndex) {
            while (true) {
                double d2 = dArr[i2];
                if (!Double.isNaN(d2)) {
                    if (d < d2) {
                        d = d2;
                    }
                    if (i2 == lastIndex) {
                        break;
                    }
                    i2++;
                } else {
                    return Double.valueOf(d2);
                }
            }
        }
        return Double.valueOf(d);
    }

    @Nullable
    public static final Double min(@NotNull double[] dArr) {
        int i2 = 1;
        if (dArr.length == 0) {
            return null;
        }
        double d = dArr[0];
        if (Double.isNaN(d)) {
            return Double.valueOf(d);
        }
        int lastIndex = getLastIndex(dArr);
        if (1 <= lastIndex) {
            while (true) {
                double d2 = dArr[i2];
                if (!Double.isNaN(d2)) {
                    if (d > d2) {
                        d = d2;
                    }
                    if (i2 == lastIndex) {
                        break;
                    }
                    i2++;
                } else {
                    return Double.valueOf(d2);
                }
            }
        }
        return Double.valueOf(d);
    }

    public static final short single(@NotNull short[] sArr, @NotNull Function1<? super Short, Boolean> function1) {
        Short sh = null;
        boolean z = false;
        for (short s : sArr) {
            if (function1.invoke(Short.valueOf(s)).booleanValue()) {
                if (!z) {
                    sh = Short.valueOf(s);
                    z = true;
                } else {
                    throw new IllegalArgumentException("Array contains more than one matching element.");
                }
            }
        }
        if (z) {
            if (sh != null) {
                return sh.shortValue();
            }
            throw new TypeCastException("null cannot be cast to non-null type kotlin.Short");
        }
        throw new NoSuchElementException("Array contains no element matching the predicate.");
    }

    public static final float last(@NotNull float[] fArr, @NotNull Function1<? super Float, Boolean> function1) {
        float f2;
        int length = fArr.length;
        do {
            length--;
            if (length >= 0) {
                f2 = fArr[length];
            } else {
                throw new NoSuchElementException("Array contains no element matching the predicate.");
            }
        } while (!function1.invoke(Float.valueOf(f2)).booleanValue());
        return f2;
    }

    @Nullable
    public static final Character maxWith(@NotNull char[] cArr, @NotNull Comparator<? super Character> comparator) {
        int i2 = 1;
        if (cArr.length == 0) {
            return null;
        }
        char c2 = cArr[0];
        int lastIndex = getLastIndex(cArr);
        if (1 <= lastIndex) {
            while (true) {
                char c3 = cArr[i2];
                if (comparator.compare(Character.valueOf(c2), Character.valueOf(c3)) < 0) {
                    c2 = c3;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Character.valueOf(c2);
    }

    @Nullable
    public static final Character minWith(@NotNull char[] cArr, @NotNull Comparator<? super Character> comparator) {
        int i2 = 1;
        if (cArr.length == 0) {
            return null;
        }
        char c2 = cArr[0];
        int lastIndex = getLastIndex(cArr);
        if (1 <= lastIndex) {
            while (true) {
                char c3 = cArr[i2];
                if (comparator.compare(Character.valueOf(c2), Character.valueOf(c3)) > 0) {
                    c2 = c3;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Character.valueOf(c2);
    }

    @NotNull
    public static final <R, V> List<V> zip(@NotNull float[] fArr, @NotNull Iterable<? extends R> iterable, @NotNull Function2<? super Float, ? super R, ? extends V> function2) {
        int collectionSizeOrDefault;
        int length = fArr.length;
        collectionSizeOrDefault = CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10);
        ArrayList arrayList = new ArrayList(Math.min(collectionSizeOrDefault, length));
        Iterator<? extends R> it = iterable.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            Object obj = (R) it.next();
            if (i2 >= length) {
                break;
            }
            arrayList.add(function2.invoke(Float.valueOf(fArr[i2]), obj));
            i2++;
        }
        return arrayList;
    }

    @NotNull
    public static final <K, V> Map<K, V> associateBy(@NotNull int[] iArr, @NotNull Function1<? super Integer, ? extends K> function1, @NotNull Function1<? super Integer, ? extends V> function12) {
        int mapCapacity;
        int coerceAtLeast;
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(iArr.length);
        coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(mapCapacity, 16);
        LinkedHashMap linkedHashMap = new LinkedHashMap(coerceAtLeast);
        for (int i2 : iArr) {
            linkedHashMap.put(function1.invoke(Integer.valueOf(i2)), function12.invoke(Integer.valueOf(i2)));
        }
        return linkedHashMap;
    }

    @NotNull
    public static final <K> List<Character> distinctBy(@NotNull char[] cArr, @NotNull Function1<? super Character, ? extends K> function1) {
        HashSet hashSet = new HashSet();
        ArrayList arrayList = new ArrayList();
        for (char c2 : cArr) {
            if (hashSet.add(function1.invoke(Character.valueOf(c2)))) {
                arrayList.add(Character.valueOf(c2));
            }
        }
        return arrayList;
    }

    @NotNull
    public static final <K> Map<K, List<Double>> groupBy(@NotNull double[] dArr, @NotNull Function1<? super Double, ? extends K> function1) {
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        for (double d : dArr) {
            K invoke = function1.invoke(Double.valueOf(d));
            Object obj = linkedHashMap.get(invoke);
            if (obj == null) {
                obj = new ArrayList();
                linkedHashMap.put(invoke, obj);
            }
            ((List) obj).add(Double.valueOf(d));
        }
        return linkedHashMap;
    }

    @NotNull
    public static final <A extends Appendable> A joinTo(@NotNull boolean[] zArr, @NotNull A a, @NotNull CharSequence charSequence, @NotNull CharSequence charSequence2, @NotNull CharSequence charSequence3, int i2, @NotNull CharSequence charSequence4, @Nullable Function1<? super Boolean, ? extends CharSequence> function1) {
        a.append(charSequence2);
        int i3 = 0;
        for (boolean z : zArr) {
            i3++;
            if (i3 > 1) {
                a.append(charSequence);
            }
            if (i2 >= 0 && i3 > i2) {
                break;
            }
            if (function1 != null) {
                a.append(function1.invoke(Boolean.valueOf(z)));
            } else {
                a.append(String.valueOf(z));
            }
        }
        if (i2 >= 0 && i3 > i2) {
            a.append(charSequence4);
        }
        a.append(charSequence3);
        return a;
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @InlineOnly
    private static final List<Character> scanReduce(@NotNull char[] cArr, Function2<? super Character, ? super Character, Character> function2) {
        List<Character> emptyList;
        if (cArr.length == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        char c2 = cArr[0];
        ArrayList arrayList = new ArrayList(cArr.length);
        arrayList.add(Character.valueOf(c2));
        int length = cArr.length;
        for (int i2 = 1; i2 < length; i2++) {
            c2 = function2.invoke(Character.valueOf(c2), Character.valueOf(cArr[i2])).charValue();
            arrayList.add(Character.valueOf(c2));
        }
        return arrayList;
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @InlineOnly
    private static final List<Character> scanReduceIndexed(@NotNull char[] cArr, Function3<? super Integer, ? super Character, ? super Character, Character> function3) {
        List<Character> emptyList;
        if (cArr.length == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        char c2 = cArr[0];
        ArrayList arrayList = new ArrayList(cArr.length);
        arrayList.add(Character.valueOf(c2));
        int length = cArr.length;
        for (int i2 = 1; i2 < length; i2++) {
            c2 = function3.invoke(Integer.valueOf(i2), Character.valueOf(c2), Character.valueOf(cArr[i2])).charValue();
            arrayList.add(Character.valueOf(c2));
        }
        return arrayList;
    }

    @NotNull
    public static final List<Double> slice(@NotNull double[] dArr, @NotNull Iterable<Integer> iterable) {
        int collectionSizeOrDefault;
        List<Double> emptyList;
        collectionSizeOrDefault = CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10);
        if (collectionSizeOrDefault == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        ArrayList arrayList = new ArrayList(collectionSizeOrDefault);
        Iterator<Integer> it = iterable.iterator();
        while (it.hasNext()) {
            arrayList.add(Double.valueOf(dArr[it.next().intValue()]));
        }
        return arrayList;
    }

    @NotNull
    public static final <K, M extends Map<? super K, List<Boolean>>> M groupByTo(@NotNull boolean[] zArr, @NotNull M m2, @NotNull Function1<? super Boolean, ? extends K> function1) {
        for (boolean z : zArr) {
            K invoke = function1.invoke(Boolean.valueOf(z));
            Object obj = m2.get(invoke);
            if (obj == null) {
                obj = new ArrayList();
                m2.put(invoke, obj);
            }
            ((List) obj).add(Boolean.valueOf(z));
        }
        return m2;
    }

    @NotNull
    public static final Pair<List<Boolean>, List<Boolean>> partition(@NotNull boolean[] zArr, @NotNull Function1<? super Boolean, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        ArrayList arrayList2 = new ArrayList();
        for (boolean z : zArr) {
            if (function1.invoke(Boolean.valueOf(z)).booleanValue()) {
                arrayList.add(Boolean.valueOf(z));
            } else {
                arrayList2.add(Boolean.valueOf(z));
            }
        }
        return new Pair<>(arrayList, arrayList2);
    }

    @NotNull
    public static final List<Boolean> take(@NotNull boolean[] zArr, int i2) {
        List<Boolean> listOf;
        List<Boolean> emptyList;
        if (!(i2 >= 0)) {
            throw new IllegalArgumentException(("Requested element count " + i2 + " is less than zero.").toString());
        } else if (i2 == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        } else if (i2 >= zArr.length) {
            return toList(zArr);
        } else {
            if (i2 == 1) {
                listOf = CollectionsKt__CollectionsJVMKt.listOf(Boolean.valueOf(zArr[0]));
                return listOf;
            }
            ArrayList arrayList = new ArrayList(i2);
            int i3 = 0;
            for (boolean z : zArr) {
                arrayList.add(Boolean.valueOf(z));
                i3++;
                if (i3 == i2) {
                    break;
                }
            }
            return arrayList;
        }
    }

    @NotNull
    public static final List<Boolean> takeLast(@NotNull boolean[] zArr, int i2) {
        List<Boolean> listOf;
        List<Boolean> emptyList;
        if (!(i2 >= 0)) {
            throw new IllegalArgumentException(("Requested element count " + i2 + " is less than zero.").toString());
        } else if (i2 == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        } else {
            int length = zArr.length;
            if (i2 >= length) {
                return toList(zArr);
            }
            if (i2 == 1) {
                listOf = CollectionsKt__CollectionsJVMKt.listOf(Boolean.valueOf(zArr[length - 1]));
                return listOf;
            }
            ArrayList arrayList = new ArrayList(i2);
            for (int i3 = length - i2; i3 < length; i3++) {
                arrayList.add(Boolean.valueOf(zArr[i3]));
            }
            return arrayList;
        }
    }

    public static final double last(@NotNull double[] dArr, @NotNull Function1<? super Double, Boolean> function1) {
        double d;
        int length = dArr.length;
        do {
            length--;
            if (length >= 0) {
                d = dArr[length];
            } else {
                throw new NoSuchElementException("Array contains no element matching the predicate.");
            }
        } while (!function1.invoke(Double.valueOf(d)).booleanValue());
        return d;
    }

    @NotNull
    public static final <R, V> List<V> zip(@NotNull double[] dArr, @NotNull Iterable<? extends R> iterable, @NotNull Function2<? super Double, ? super R, ? extends V> function2) {
        int collectionSizeOrDefault;
        int length = dArr.length;
        collectionSizeOrDefault = CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10);
        ArrayList arrayList = new ArrayList(Math.min(collectionSizeOrDefault, length));
        Iterator<? extends R> it = iterable.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            Object obj = (R) it.next();
            if (i2 >= length) {
                break;
            }
            arrayList.add(function2.invoke(Double.valueOf(dArr[i2]), obj));
            i2++;
        }
        return arrayList;
    }

    @NotNull
    public static final <K, V> Map<K, V> associateBy(@NotNull long[] jArr, @NotNull Function1<? super Long, ? extends K> function1, @NotNull Function1<? super Long, ? extends V> function12) {
        int mapCapacity;
        int coerceAtLeast;
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(jArr.length);
        coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(mapCapacity, 16);
        LinkedHashMap linkedHashMap = new LinkedHashMap(coerceAtLeast);
        for (long j2 : jArr) {
            linkedHashMap.put(function1.invoke(Long.valueOf(j2)), function12.invoke(Long.valueOf(j2)));
        }
        return linkedHashMap;
    }

    @Nullable
    public static final <R extends Comparable<? super R>> Double maxBy(@NotNull double[] dArr, @NotNull Function1<? super Double, ? extends R> function1) {
        int i2 = 1;
        if (dArr.length == 0) {
            return null;
        }
        double d = dArr[0];
        int lastIndex = getLastIndex(dArr);
        if (lastIndex == 0) {
            return Double.valueOf(d);
        }
        R invoke = function1.invoke(Double.valueOf(d));
        if (1 <= lastIndex) {
            while (true) {
                double d2 = dArr[i2];
                R invoke2 = function1.invoke(Double.valueOf(d2));
                if (invoke.compareTo(invoke2) < 0) {
                    d = d2;
                    invoke = invoke2;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Double.valueOf(d);
    }

    @Nullable
    public static final <R extends Comparable<? super R>> Double minBy(@NotNull double[] dArr, @NotNull Function1<? super Double, ? extends R> function1) {
        int i2 = 1;
        if (dArr.length == 0) {
            return null;
        }
        double d = dArr[0];
        int lastIndex = getLastIndex(dArr);
        if (lastIndex == 0) {
            return Double.valueOf(d);
        }
        R invoke = function1.invoke(Double.valueOf(d));
        if (1 <= lastIndex) {
            while (true) {
                double d2 = dArr[i2];
                R invoke2 = function1.invoke(Double.valueOf(d2));
                if (invoke.compareTo(invoke2) > 0) {
                    d = d2;
                    invoke = invoke2;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Double.valueOf(d);
    }

    public static final int single(@NotNull int[] iArr, @NotNull Function1<? super Integer, Boolean> function1) {
        Integer num = null;
        boolean z = false;
        for (int i2 : iArr) {
            if (function1.invoke(Integer.valueOf(i2)).booleanValue()) {
                if (!z) {
                    num = Integer.valueOf(i2);
                    z = true;
                } else {
                    throw new IllegalArgumentException("Array contains more than one matching element.");
                }
            }
        }
        if (z) {
            if (num != null) {
                return num.intValue();
            }
            throw new TypeCastException("null cannot be cast to non-null type kotlin.Int");
        }
        throw new NoSuchElementException("Array contains no element matching the predicate.");
    }

    @Nullable
    public static final Character max(@NotNull char[] cArr) {
        int i2 = 1;
        if (cArr.length == 0) {
            return null;
        }
        char c2 = cArr[0];
        int lastIndex = getLastIndex(cArr);
        if (1 <= lastIndex) {
            while (true) {
                char c3 = cArr[i2];
                if (c2 < c3) {
                    c2 = c3;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Character.valueOf(c2);
    }

    @Nullable
    public static final Character min(@NotNull char[] cArr) {
        int i2 = 1;
        if (cArr.length == 0) {
            return null;
        }
        char c2 = cArr[0];
        int lastIndex = getLastIndex(cArr);
        if (1 <= lastIndex) {
            while (true) {
                char c3 = cArr[i2];
                if (c2 > c3) {
                    c2 = c3;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Character.valueOf(c2);
    }

    @NotNull
    public static final List<Boolean> slice(@NotNull boolean[] zArr, @NotNull Iterable<Integer> iterable) {
        int collectionSizeOrDefault;
        List<Boolean> emptyList;
        collectionSizeOrDefault = CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10);
        if (collectionSizeOrDefault == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        ArrayList arrayList = new ArrayList(collectionSizeOrDefault);
        Iterator<Integer> it = iterable.iterator();
        while (it.hasNext()) {
            arrayList.add(Boolean.valueOf(zArr[it.next().intValue()]));
        }
        return arrayList;
    }

    @NotNull
    public static final <A extends Appendable> A joinTo(@NotNull char[] cArr, @NotNull A a, @NotNull CharSequence charSequence, @NotNull CharSequence charSequence2, @NotNull CharSequence charSequence3, int i2, @NotNull CharSequence charSequence4, @Nullable Function1<? super Character, ? extends CharSequence> function1) {
        a.append(charSequence2);
        int i3 = 0;
        for (char c2 : cArr) {
            i3++;
            if (i3 > 1) {
                a.append(charSequence);
            }
            if (i2 >= 0 && i3 > i2) {
                break;
            }
            if (function1 != null) {
                a.append(function1.invoke(Character.valueOf(c2)));
            } else {
                a.append(c2);
            }
        }
        if (i2 >= 0 && i3 > i2) {
            a.append(charSequence4);
        }
        a.append(charSequence3);
        return a;
    }

    public static final boolean last(@NotNull boolean[] zArr, @NotNull Function1<? super Boolean, Boolean> function1) {
        boolean z;
        int length = zArr.length;
        do {
            length--;
            if (length >= 0) {
                z = zArr[length];
            } else {
                throw new NoSuchElementException("Array contains no element matching the predicate.");
            }
        } while (!function1.invoke(Boolean.valueOf(z)).booleanValue());
        return z;
    }

    @NotNull
    public static final <R, V> List<V> zip(@NotNull boolean[] zArr, @NotNull Iterable<? extends R> iterable, @NotNull Function2<? super Boolean, ? super R, ? extends V> function2) {
        int collectionSizeOrDefault;
        int length = zArr.length;
        collectionSizeOrDefault = CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10);
        ArrayList arrayList = new ArrayList(Math.min(collectionSizeOrDefault, length));
        Iterator<? extends R> it = iterable.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            Object obj = (R) it.next();
            if (i2 >= length) {
                break;
            }
            arrayList.add(function2.invoke(Boolean.valueOf(zArr[i2]), obj));
            i2++;
        }
        return arrayList;
    }

    @NotNull
    public static final <K, V> Map<K, V> associateBy(@NotNull float[] fArr, @NotNull Function1<? super Float, ? extends K> function1, @NotNull Function1<? super Float, ? extends V> function12) {
        int mapCapacity;
        int coerceAtLeast;
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(fArr.length);
        coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(mapCapacity, 16);
        LinkedHashMap linkedHashMap = new LinkedHashMap(coerceAtLeast);
        for (float f2 : fArr) {
            linkedHashMap.put(function1.invoke(Float.valueOf(f2)), function12.invoke(Float.valueOf(f2)));
        }
        return linkedHashMap;
    }

    @NotNull
    public static final <K> Map<K, List<Boolean>> groupBy(@NotNull boolean[] zArr, @NotNull Function1<? super Boolean, ? extends K> function1) {
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        for (boolean z : zArr) {
            K invoke = function1.invoke(Boolean.valueOf(z));
            Object obj = linkedHashMap.get(invoke);
            if (obj == null) {
                obj = new ArrayList();
                linkedHashMap.put(invoke, obj);
            }
            ((List) obj).add(Boolean.valueOf(z));
        }
        return linkedHashMap;
    }

    @NotNull
    public static final <K, M extends Map<? super K, List<Character>>> M groupByTo(@NotNull char[] cArr, @NotNull M m2, @NotNull Function1<? super Character, ? extends K> function1) {
        for (char c2 : cArr) {
            K invoke = function1.invoke(Character.valueOf(c2));
            Object obj = m2.get(invoke);
            if (obj == null) {
                obj = new ArrayList();
                m2.put(invoke, obj);
            }
            ((List) obj).add(Character.valueOf(c2));
        }
        return m2;
    }

    @NotNull
    public static final Pair<List<Character>, List<Character>> partition(@NotNull char[] cArr, @NotNull Function1<? super Character, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        ArrayList arrayList2 = new ArrayList();
        for (char c2 : cArr) {
            if (function1.invoke(Character.valueOf(c2)).booleanValue()) {
                arrayList.add(Character.valueOf(c2));
            } else {
                arrayList2.add(Character.valueOf(c2));
            }
        }
        return new Pair<>(arrayList, arrayList2);
    }

    @NotNull
    public static final List<Character> take(@NotNull char[] cArr, int i2) {
        List<Character> listOf;
        List<Character> emptyList;
        if (!(i2 >= 0)) {
            throw new IllegalArgumentException(("Requested element count " + i2 + " is less than zero.").toString());
        } else if (i2 == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        } else if (i2 >= cArr.length) {
            return toList(cArr);
        } else {
            if (i2 == 1) {
                listOf = CollectionsKt__CollectionsJVMKt.listOf(Character.valueOf(cArr[0]));
                return listOf;
            }
            ArrayList arrayList = new ArrayList(i2);
            int i3 = 0;
            for (char c2 : cArr) {
                arrayList.add(Character.valueOf(c2));
                i3++;
                if (i3 == i2) {
                    break;
                }
            }
            return arrayList;
        }
    }

    @NotNull
    public static final List<Character> takeLast(@NotNull char[] cArr, int i2) {
        List<Character> listOf;
        List<Character> emptyList;
        if (!(i2 >= 0)) {
            throw new IllegalArgumentException(("Requested element count " + i2 + " is less than zero.").toString());
        } else if (i2 == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        } else {
            int length = cArr.length;
            if (i2 >= length) {
                return toList(cArr);
            }
            if (i2 == 1) {
                listOf = CollectionsKt__CollectionsJVMKt.listOf(Character.valueOf(cArr[length - 1]));
                return listOf;
            }
            ArrayList arrayList = new ArrayList(i2);
            for (int i3 = length - i2; i3 < length; i3++) {
                arrayList.add(Character.valueOf(cArr[i3]));
            }
            return arrayList;
        }
    }

    public static final long single(@NotNull long[] jArr, @NotNull Function1<? super Long, Boolean> function1) {
        Long l2 = null;
        boolean z = false;
        for (long j2 : jArr) {
            if (function1.invoke(Long.valueOf(j2)).booleanValue()) {
                if (!z) {
                    l2 = Long.valueOf(j2);
                    z = true;
                } else {
                    throw new IllegalArgumentException("Array contains more than one matching element.");
                }
            }
        }
        if (z) {
            if (l2 != null) {
                return l2.longValue();
            }
            throw new TypeCastException("null cannot be cast to non-null type kotlin.Long");
        }
        throw new NoSuchElementException("Array contains no element matching the predicate.");
    }

    @NotNull
    public static final List<Character> slice(@NotNull char[] cArr, @NotNull Iterable<Integer> iterable) {
        int collectionSizeOrDefault;
        List<Character> emptyList;
        collectionSizeOrDefault = CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10);
        if (collectionSizeOrDefault == 0) {
            emptyList = CollectionsKt__CollectionsKt.emptyList();
            return emptyList;
        }
        ArrayList arrayList = new ArrayList(collectionSizeOrDefault);
        Iterator<Integer> it = iterable.iterator();
        while (it.hasNext()) {
            arrayList.add(Character.valueOf(cArr[it.next().intValue()]));
        }
        return arrayList;
    }

    public static final char last(@NotNull char[] cArr, @NotNull Function1<? super Character, Boolean> function1) {
        char c2;
        int length = cArr.length;
        do {
            length--;
            if (length >= 0) {
                c2 = cArr[length];
            } else {
                throw new NoSuchElementException("Array contains no element matching the predicate.");
            }
        } while (!function1.invoke(Character.valueOf(c2)).booleanValue());
        return c2;
    }

    @NotNull
    public static final <R, V> List<V> zip(@NotNull char[] cArr, @NotNull Iterable<? extends R> iterable, @NotNull Function2<? super Character, ? super R, ? extends V> function2) {
        int collectionSizeOrDefault;
        int length = cArr.length;
        collectionSizeOrDefault = CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10);
        ArrayList arrayList = new ArrayList(Math.min(collectionSizeOrDefault, length));
        Iterator<? extends R> it = iterable.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            Object obj = (R) it.next();
            if (i2 >= length) {
                break;
            }
            arrayList.add(function2.invoke(Character.valueOf(cArr[i2]), obj));
            i2++;
        }
        return arrayList;
    }

    @NotNull
    public static final <K, V> Map<K, V> associateBy(@NotNull double[] dArr, @NotNull Function1<? super Double, ? extends K> function1, @NotNull Function1<? super Double, ? extends V> function12) {
        int mapCapacity;
        int coerceAtLeast;
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(dArr.length);
        coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(mapCapacity, 16);
        LinkedHashMap linkedHashMap = new LinkedHashMap(coerceAtLeast);
        for (double d : dArr) {
            linkedHashMap.put(function1.invoke(Double.valueOf(d)), function12.invoke(Double.valueOf(d)));
        }
        return linkedHashMap;
    }

    @Nullable
    public static final <R extends Comparable<? super R>> Boolean maxBy(@NotNull boolean[] zArr, @NotNull Function1<? super Boolean, ? extends R> function1) {
        int i2 = 1;
        if (zArr.length == 0) {
            return null;
        }
        boolean z = zArr[0];
        int lastIndex = getLastIndex(zArr);
        if (lastIndex == 0) {
            return Boolean.valueOf(z);
        }
        R invoke = function1.invoke(Boolean.valueOf(z));
        if (1 <= lastIndex) {
            while (true) {
                boolean z2 = zArr[i2];
                R invoke2 = function1.invoke(Boolean.valueOf(z2));
                if (invoke.compareTo(invoke2) < 0) {
                    z = z2;
                    invoke = invoke2;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Boolean.valueOf(z);
    }

    @Nullable
    public static final <R extends Comparable<? super R>> Boolean minBy(@NotNull boolean[] zArr, @NotNull Function1<? super Boolean, ? extends R> function1) {
        int i2 = 1;
        if (zArr.length == 0) {
            return null;
        }
        boolean z = zArr[0];
        int lastIndex = getLastIndex(zArr);
        if (lastIndex == 0) {
            return Boolean.valueOf(z);
        }
        R invoke = function1.invoke(Boolean.valueOf(z));
        if (1 <= lastIndex) {
            while (true) {
                boolean z2 = zArr[i2];
                R invoke2 = function1.invoke(Boolean.valueOf(z2));
                if (invoke.compareTo(invoke2) > 0) {
                    z = z2;
                    invoke = invoke2;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Boolean.valueOf(z);
    }

    /* JADX WARN: Multi-variable type inference failed */
    @NotNull
    public static final <T, K, V, M extends Map<? super K, List<V>>> M groupByTo(@NotNull T[] tArr, @NotNull M m2, @NotNull Function1<? super T, ? extends K> function1, @NotNull Function1<? super T, ? extends V> function12) {
        for (T t : tArr) {
            K invoke = function1.invoke(t);
            Object obj = m2.get(invoke);
            if (obj == null) {
                obj = new ArrayList();
                m2.put(invoke, obj);
            }
            ((List) obj).add(function12.invoke(t));
        }
        return m2;
    }

    @NotNull
    public static final <V> List<V> zip(@NotNull byte[] bArr, @NotNull byte[] bArr2, @NotNull Function2<? super Byte, ? super Byte, ? extends V> function2) {
        int min = Math.min(bArr.length, bArr2.length);
        ArrayList arrayList = new ArrayList(min);
        for (int i2 = 0; i2 < min; i2++) {
            arrayList.add(function2.invoke(Byte.valueOf(bArr[i2]), Byte.valueOf(bArr2[i2])));
        }
        return arrayList;
    }

    @NotNull
    public static final <K, V> Map<K, V> associateBy(@NotNull boolean[] zArr, @NotNull Function1<? super Boolean, ? extends K> function1, @NotNull Function1<? super Boolean, ? extends V> function12) {
        int mapCapacity;
        int coerceAtLeast;
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(zArr.length);
        coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(mapCapacity, 16);
        LinkedHashMap linkedHashMap = new LinkedHashMap(coerceAtLeast);
        for (boolean z : zArr) {
            linkedHashMap.put(function1.invoke(Boolean.valueOf(z)), function12.invoke(Boolean.valueOf(z)));
        }
        return linkedHashMap;
    }

    @NotNull
    public static final <K> Map<K, List<Character>> groupBy(@NotNull char[] cArr, @NotNull Function1<? super Character, ? extends K> function1) {
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        for (char c2 : cArr) {
            K invoke = function1.invoke(Character.valueOf(c2));
            Object obj = linkedHashMap.get(invoke);
            if (obj == null) {
                obj = new ArrayList();
                linkedHashMap.put(invoke, obj);
            }
            ((List) obj).add(Character.valueOf(c2));
        }
        return linkedHashMap;
    }

    public static final float single(@NotNull float[] fArr, @NotNull Function1<? super Float, Boolean> function1) {
        Float f2 = null;
        boolean z = false;
        for (float f3 : fArr) {
            if (function1.invoke(Float.valueOf(f3)).booleanValue()) {
                if (!z) {
                    f2 = Float.valueOf(f3);
                    z = true;
                } else {
                    throw new IllegalArgumentException("Array contains more than one matching element.");
                }
            }
        }
        if (z) {
            if (f2 != null) {
                return f2.floatValue();
            }
            throw new TypeCastException("null cannot be cast to non-null type kotlin.Float");
        }
        throw new NoSuchElementException("Array contains no element matching the predicate.");
    }

    @NotNull
    public static final <V> List<V> zip(@NotNull short[] sArr, @NotNull short[] sArr2, @NotNull Function2<? super Short, ? super Short, ? extends V> function2) {
        int min = Math.min(sArr.length, sArr2.length);
        ArrayList arrayList = new ArrayList(min);
        for (int i2 = 0; i2 < min; i2++) {
            arrayList.add(function2.invoke(Short.valueOf(sArr[i2]), Short.valueOf(sArr2[i2])));
        }
        return arrayList;
    }

    @NotNull
    public static final <K, V> Map<K, V> associateBy(@NotNull char[] cArr, @NotNull Function1<? super Character, ? extends K> function1, @NotNull Function1<? super Character, ? extends V> function12) {
        int mapCapacity;
        int coerceAtLeast;
        mapCapacity = MapsKt__MapsJVMKt.mapCapacity(cArr.length);
        coerceAtLeast = RangesKt___RangesKt.coerceAtLeast(mapCapacity, 16);
        LinkedHashMap linkedHashMap = new LinkedHashMap(coerceAtLeast);
        for (char c2 : cArr) {
            linkedHashMap.put(function1.invoke(Character.valueOf(c2)), function12.invoke(Character.valueOf(c2)));
        }
        return linkedHashMap;
    }

    @NotNull
    public static final <V> List<V> zip(@NotNull int[] iArr, @NotNull int[] iArr2, @NotNull Function2<? super Integer, ? super Integer, ? extends V> function2) {
        int min = Math.min(iArr.length, iArr2.length);
        ArrayList arrayList = new ArrayList(min);
        for (int i2 = 0; i2 < min; i2++) {
            arrayList.add(function2.invoke(Integer.valueOf(iArr[i2]), Integer.valueOf(iArr2[i2])));
        }
        return arrayList;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @NotNull
    public static final <K, V, M extends Map<? super K, List<V>>> M groupByTo(@NotNull byte[] bArr, @NotNull M m2, @NotNull Function1<? super Byte, ? extends K> function1, @NotNull Function1<? super Byte, ? extends V> function12) {
        for (byte b : bArr) {
            K invoke = function1.invoke(Byte.valueOf(b));
            Object obj = m2.get(invoke);
            if (obj == null) {
                obj = new ArrayList();
                m2.put(invoke, obj);
            }
            ((List) obj).add(function12.invoke(Byte.valueOf(b)));
        }
        return m2;
    }

    @Nullable
    public static final <R extends Comparable<? super R>> Character maxBy(@NotNull char[] cArr, @NotNull Function1<? super Character, ? extends R> function1) {
        int i2 = 1;
        if (cArr.length == 0) {
            return null;
        }
        char c2 = cArr[0];
        int lastIndex = getLastIndex(cArr);
        if (lastIndex == 0) {
            return Character.valueOf(c2);
        }
        R invoke = function1.invoke(Character.valueOf(c2));
        if (1 <= lastIndex) {
            while (true) {
                char c3 = cArr[i2];
                R invoke2 = function1.invoke(Character.valueOf(c3));
                if (invoke.compareTo(invoke2) < 0) {
                    c2 = c3;
                    invoke = invoke2;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Character.valueOf(c2);
    }

    @Nullable
    public static final <R extends Comparable<? super R>> Character minBy(@NotNull char[] cArr, @NotNull Function1<? super Character, ? extends R> function1) {
        int i2 = 1;
        if (cArr.length == 0) {
            return null;
        }
        char c2 = cArr[0];
        int lastIndex = getLastIndex(cArr);
        if (lastIndex == 0) {
            return Character.valueOf(c2);
        }
        R invoke = function1.invoke(Character.valueOf(c2));
        if (1 <= lastIndex) {
            while (true) {
                char c3 = cArr[i2];
                R invoke2 = function1.invoke(Character.valueOf(c3));
                if (invoke.compareTo(invoke2) > 0) {
                    c2 = c3;
                    invoke = invoke2;
                }
                if (i2 == lastIndex) {
                    break;
                }
                i2++;
            }
        }
        return Character.valueOf(c2);
    }

    public static final double single(@NotNull double[] dArr, @NotNull Function1<? super Double, Boolean> function1) {
        Double d = null;
        boolean z = false;
        for (double d2 : dArr) {
            if (function1.invoke(Double.valueOf(d2)).booleanValue()) {
                if (!z) {
                    d = Double.valueOf(d2);
                    z = true;
                } else {
                    throw new IllegalArgumentException("Array contains more than one matching element.");
                }
            }
        }
        if (z) {
            if (d != null) {
                return d.doubleValue();
            }
            throw new TypeCastException("null cannot be cast to non-null type kotlin.Double");
        }
        throw new NoSuchElementException("Array contains no element matching the predicate.");
    }

    /* JADX WARN: Multi-variable type inference failed */
    @NotNull
    public static final <T, K, V> Map<K, List<V>> groupBy(@NotNull T[] tArr, @NotNull Function1<? super T, ? extends K> function1, @NotNull Function1<? super T, ? extends V> function12) {
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        for (ThirdAppInfoNew thirdAppInfoNew : tArr) {
            K invoke = function1.invoke(thirdAppInfoNew);
            List<V> list = linkedHashMap.get(invoke);
            if (list == null) {
                list = new ArrayList<>();
                linkedHashMap.put(invoke, list);
            }
            list.add(function12.invoke(thirdAppInfoNew));
        }
        return linkedHashMap;
    }

    @NotNull
    public static final <V> List<V> zip(@NotNull long[] jArr, @NotNull long[] jArr2, @NotNull Function2<? super Long, ? super Long, ? extends V> function2) {
        int min = Math.min(jArr.length, jArr2.length);
        ArrayList arrayList = new ArrayList(min);
        for (int i2 = 0; i2 < min; i2++) {
            arrayList.add(function2.invoke(Long.valueOf(jArr[i2]), Long.valueOf(jArr2[i2])));
        }
        return arrayList;
    }

    @NotNull
    public static final <V> List<V> zip(@NotNull float[] fArr, @NotNull float[] fArr2, @NotNull Function2<? super Float, ? super Float, ? extends V> function2) {
        int min = Math.min(fArr.length, fArr2.length);
        ArrayList arrayList = new ArrayList(min);
        for (int i2 = 0; i2 < min; i2++) {
            arrayList.add(function2.invoke(Float.valueOf(fArr[i2]), Float.valueOf(fArr2[i2])));
        }
        return arrayList;
    }

    public static final boolean single(@NotNull boolean[] zArr, @NotNull Function1<? super Boolean, Boolean> function1) {
        Boolean bool = null;
        boolean z = false;
        for (boolean z2 : zArr) {
            if (function1.invoke(Boolean.valueOf(z2)).booleanValue()) {
                if (!z) {
                    bool = Boolean.valueOf(z2);
                    z = true;
                } else {
                    throw new IllegalArgumentException("Array contains more than one matching element.");
                }
            }
        }
        if (z) {
            if (bool != null) {
                return bool.booleanValue();
            }
            throw new TypeCastException("null cannot be cast to non-null type kotlin.Boolean");
        }
        throw new NoSuchElementException("Array contains no element matching the predicate.");
    }

    /* JADX WARN: Multi-variable type inference failed */
    @NotNull
    public static final <K, V, M extends Map<? super K, List<V>>> M groupByTo(@NotNull short[] sArr, @NotNull M m2, @NotNull Function1<? super Short, ? extends K> function1, @NotNull Function1<? super Short, ? extends V> function12) {
        for (short s : sArr) {
            K invoke = function1.invoke(Short.valueOf(s));
            Object obj = m2.get(invoke);
            if (obj == null) {
                obj = new ArrayList();
                m2.put(invoke, obj);
            }
            ((List) obj).add(function12.invoke(Short.valueOf(s)));
        }
        return m2;
    }

    @NotNull
    public static final <V> List<V> zip(@NotNull double[] dArr, @NotNull double[] dArr2, @NotNull Function2<? super Double, ? super Double, ? extends V> function2) {
        int min = Math.min(dArr.length, dArr2.length);
        ArrayList arrayList = new ArrayList(min);
        for (int i2 = 0; i2 < min; i2++) {
            arrayList.add(function2.invoke(Double.valueOf(dArr[i2]), Double.valueOf(dArr2[i2])));
        }
        return arrayList;
    }

    @NotNull
    public static final <K, V> Map<K, List<V>> groupBy(@NotNull byte[] bArr, @NotNull Function1<? super Byte, ? extends K> function1, @NotNull Function1<? super Byte, ? extends V> function12) {
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        for (byte b : bArr) {
            K invoke = function1.invoke(Byte.valueOf(b));
            List<V> list = linkedHashMap.get(invoke);
            if (list == null) {
                list = new ArrayList<>();
                linkedHashMap.put(invoke, list);
            }
            list.add(function12.invoke(Byte.valueOf(b)));
        }
        return linkedHashMap;
    }

    @NotNull
    public static final <V> List<V> zip(@NotNull boolean[] zArr, @NotNull boolean[] zArr2, @NotNull Function2<? super Boolean, ? super Boolean, ? extends V> function2) {
        int min = Math.min(zArr.length, zArr2.length);
        ArrayList arrayList = new ArrayList(min);
        for (int i2 = 0; i2 < min; i2++) {
            arrayList.add(function2.invoke(Boolean.valueOf(zArr[i2]), Boolean.valueOf(zArr2[i2])));
        }
        return arrayList;
    }

    public static final char single(@NotNull char[] cArr, @NotNull Function1<? super Character, Boolean> function1) {
        Character ch = null;
        boolean z = false;
        for (char c2 : cArr) {
            if (function1.invoke(Character.valueOf(c2)).booleanValue()) {
                if (!z) {
                    ch = Character.valueOf(c2);
                    z = true;
                } else {
                    throw new IllegalArgumentException("Array contains more than one matching element.");
                }
            }
        }
        if (z) {
            if (ch != null) {
                return ch.charValue();
            }
            throw new TypeCastException("null cannot be cast to non-null type kotlin.Char");
        }
        throw new NoSuchElementException("Array contains no element matching the predicate.");
    }

    /* JADX WARN: Multi-variable type inference failed */
    @NotNull
    public static final <K, V, M extends Map<? super K, List<V>>> M groupByTo(@NotNull int[] iArr, @NotNull M m2, @NotNull Function1<? super Integer, ? extends K> function1, @NotNull Function1<? super Integer, ? extends V> function12) {
        for (int i2 : iArr) {
            K invoke = function1.invoke(Integer.valueOf(i2));
            Object obj = m2.get(invoke);
            if (obj == null) {
                obj = new ArrayList();
                m2.put(invoke, obj);
            }
            ((List) obj).add(function12.invoke(Integer.valueOf(i2)));
        }
        return m2;
    }

    @NotNull
    public static final <V> List<V> zip(@NotNull char[] cArr, @NotNull char[] cArr2, @NotNull Function2<? super Character, ? super Character, ? extends V> function2) {
        int min = Math.min(cArr.length, cArr2.length);
        ArrayList arrayList = new ArrayList(min);
        for (int i2 = 0; i2 < min; i2++) {
            arrayList.add(function2.invoke(Character.valueOf(cArr[i2]), Character.valueOf(cArr2[i2])));
        }
        return arrayList;
    }

    @NotNull
    public static final <T, R> List<Pair<T, R>> zip(@NotNull T[] tArr, @NotNull R[] rArr) {
        int min = Math.min(tArr.length, rArr.length);
        ArrayList arrayList = new ArrayList(min);
        for (int i2 = 0; i2 < min; i2++) {
            arrayList.add(TuplesKt.to(tArr[i2], rArr[i2]));
        }
        return arrayList;
    }

    @NotNull
    public static final <K, V> Map<K, List<V>> groupBy(@NotNull short[] sArr, @NotNull Function1<? super Short, ? extends K> function1, @NotNull Function1<? super Short, ? extends V> function12) {
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        for (short s : sArr) {
            K invoke = function1.invoke(Short.valueOf(s));
            List<V> list = linkedHashMap.get(invoke);
            if (list == null) {
                list = new ArrayList<>();
                linkedHashMap.put(invoke, list);
            }
            list.add(function12.invoke(Short.valueOf(s)));
        }
        return linkedHashMap;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @NotNull
    public static final <K, V, M extends Map<? super K, List<V>>> M groupByTo(@NotNull long[] jArr, @NotNull M m2, @NotNull Function1<? super Long, ? extends K> function1, @NotNull Function1<? super Long, ? extends V> function12) {
        for (long j2 : jArr) {
            K invoke = function1.invoke(Long.valueOf(j2));
            Object obj = m2.get(invoke);
            if (obj == null) {
                obj = new ArrayList();
                m2.put(invoke, obj);
            }
            ((List) obj).add(function12.invoke(Long.valueOf(j2)));
        }
        return m2;
    }

    @NotNull
    public static final <R> List<Pair<Byte, R>> zip(@NotNull byte[] bArr, @NotNull R[] rArr) {
        int min = Math.min(bArr.length, rArr.length);
        ArrayList arrayList = new ArrayList(min);
        for (int i2 = 0; i2 < min; i2++) {
            byte b = bArr[i2];
            arrayList.add(TuplesKt.to(Byte.valueOf(b), rArr[i2]));
        }
        return arrayList;
    }

    @NotNull
    public static final <R> List<Pair<Short, R>> zip(@NotNull short[] sArr, @NotNull R[] rArr) {
        int min = Math.min(sArr.length, rArr.length);
        ArrayList arrayList = new ArrayList(min);
        for (int i2 = 0; i2 < min; i2++) {
            short s = sArr[i2];
            arrayList.add(TuplesKt.to(Short.valueOf(s), rArr[i2]));
        }
        return arrayList;
    }

    @NotNull
    public static final <K, V> Map<K, List<V>> groupBy(@NotNull int[] iArr, @NotNull Function1<? super Integer, ? extends K> function1, @NotNull Function1<? super Integer, ? extends V> function12) {
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        for (int i2 : iArr) {
            K invoke = function1.invoke(Integer.valueOf(i2));
            List<V> list = linkedHashMap.get(invoke);
            if (list == null) {
                list = new ArrayList<>();
                linkedHashMap.put(invoke, list);
            }
            list.add(function12.invoke(Integer.valueOf(i2)));
        }
        return linkedHashMap;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @NotNull
    public static final <K, V, M extends Map<? super K, List<V>>> M groupByTo(@NotNull float[] fArr, @NotNull M m2, @NotNull Function1<? super Float, ? extends K> function1, @NotNull Function1<? super Float, ? extends V> function12) {
        for (float f2 : fArr) {
            K invoke = function1.invoke(Float.valueOf(f2));
            Object obj = m2.get(invoke);
            if (obj == null) {
                obj = new ArrayList();
                m2.put(invoke, obj);
            }
            ((List) obj).add(function12.invoke(Float.valueOf(f2)));
        }
        return m2;
    }

    @NotNull
    public static final <R> List<Pair<Integer, R>> zip(@NotNull int[] iArr, @NotNull R[] rArr) {
        int min = Math.min(iArr.length, rArr.length);
        ArrayList arrayList = new ArrayList(min);
        for (int i2 = 0; i2 < min; i2++) {
            int i3 = iArr[i2];
            arrayList.add(TuplesKt.to(Integer.valueOf(i3), rArr[i2]));
        }
        return arrayList;
    }

    @NotNull
    public static final <R> List<Pair<Long, R>> zip(@NotNull long[] jArr, @NotNull R[] rArr) {
        int min = Math.min(jArr.length, rArr.length);
        ArrayList arrayList = new ArrayList(min);
        for (int i2 = 0; i2 < min; i2++) {
            long j2 = jArr[i2];
            arrayList.add(TuplesKt.to(Long.valueOf(j2), rArr[i2]));
        }
        return arrayList;
    }

    @NotNull
    public static final <K, V> Map<K, List<V>> groupBy(@NotNull long[] jArr, @NotNull Function1<? super Long, ? extends K> function1, @NotNull Function1<? super Long, ? extends V> function12) {
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        for (long j2 : jArr) {
            K invoke = function1.invoke(Long.valueOf(j2));
            List<V> list = linkedHashMap.get(invoke);
            if (list == null) {
                list = new ArrayList<>();
                linkedHashMap.put(invoke, list);
            }
            list.add(function12.invoke(Long.valueOf(j2)));
        }
        return linkedHashMap;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @NotNull
    public static final <K, V, M extends Map<? super K, List<V>>> M groupByTo(@NotNull double[] dArr, @NotNull M m2, @NotNull Function1<? super Double, ? extends K> function1, @NotNull Function1<? super Double, ? extends V> function12) {
        for (double d : dArr) {
            K invoke = function1.invoke(Double.valueOf(d));
            Object obj = m2.get(invoke);
            if (obj == null) {
                obj = new ArrayList();
                m2.put(invoke, obj);
            }
            ((List) obj).add(function12.invoke(Double.valueOf(d)));
        }
        return m2;
    }

    @NotNull
    public static final <R> List<Pair<Float, R>> zip(@NotNull float[] fArr, @NotNull R[] rArr) {
        int min = Math.min(fArr.length, rArr.length);
        ArrayList arrayList = new ArrayList(min);
        for (int i2 = 0; i2 < min; i2++) {
            float f2 = fArr[i2];
            arrayList.add(TuplesKt.to(Float.valueOf(f2), rArr[i2]));
        }
        return arrayList;
    }

    @NotNull
    public static final <R> List<Pair<Double, R>> zip(@NotNull double[] dArr, @NotNull R[] rArr) {
        int min = Math.min(dArr.length, rArr.length);
        ArrayList arrayList = new ArrayList(min);
        for (int i2 = 0; i2 < min; i2++) {
            double d = dArr[i2];
            arrayList.add(TuplesKt.to(Double.valueOf(d), rArr[i2]));
        }
        return arrayList;
    }

    @NotNull
    public static final <K, V> Map<K, List<V>> groupBy(@NotNull float[] fArr, @NotNull Function1<? super Float, ? extends K> function1, @NotNull Function1<? super Float, ? extends V> function12) {
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        for (float f2 : fArr) {
            K invoke = function1.invoke(Float.valueOf(f2));
            List<V> list = linkedHashMap.get(invoke);
            if (list == null) {
                list = new ArrayList<>();
                linkedHashMap.put(invoke, list);
            }
            list.add(function12.invoke(Float.valueOf(f2)));
        }
        return linkedHashMap;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @NotNull
    public static final <K, V, M extends Map<? super K, List<V>>> M groupByTo(@NotNull boolean[] zArr, @NotNull M m2, @NotNull Function1<? super Boolean, ? extends K> function1, @NotNull Function1<? super Boolean, ? extends V> function12) {
        for (boolean z : zArr) {
            K invoke = function1.invoke(Boolean.valueOf(z));
            Object obj = m2.get(invoke);
            if (obj == null) {
                obj = new ArrayList();
                m2.put(invoke, obj);
            }
            ((List) obj).add(function12.invoke(Boolean.valueOf(z)));
        }
        return m2;
    }

    @NotNull
    public static final <R> List<Pair<Boolean, R>> zip(@NotNull boolean[] zArr, @NotNull R[] rArr) {
        int min = Math.min(zArr.length, rArr.length);
        ArrayList arrayList = new ArrayList(min);
        for (int i2 = 0; i2 < min; i2++) {
            boolean z = zArr[i2];
            arrayList.add(TuplesKt.to(Boolean.valueOf(z), rArr[i2]));
        }
        return arrayList;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @NotNull
    public static final <K, V, M extends Map<? super K, List<V>>> M groupByTo(@NotNull char[] cArr, @NotNull M m2, @NotNull Function1<? super Character, ? extends K> function1, @NotNull Function1<? super Character, ? extends V> function12) {
        for (char c2 : cArr) {
            K invoke = function1.invoke(Character.valueOf(c2));
            Object obj = m2.get(invoke);
            if (obj == null) {
                obj = new ArrayList();
                m2.put(invoke, obj);
            }
            ((List) obj).add(function12.invoke(Character.valueOf(c2)));
        }
        return m2;
    }

    @NotNull
    public static final <R> List<Pair<Character, R>> zip(@NotNull char[] cArr, @NotNull R[] rArr) {
        int min = Math.min(cArr.length, rArr.length);
        ArrayList arrayList = new ArrayList(min);
        for (int i2 = 0; i2 < min; i2++) {
            char c2 = cArr[i2];
            arrayList.add(TuplesKt.to(Character.valueOf(c2), rArr[i2]));
        }
        return arrayList;
    }

    @NotNull
    public static final <K, V> Map<K, List<V>> groupBy(@NotNull double[] dArr, @NotNull Function1<? super Double, ? extends K> function1, @NotNull Function1<? super Double, ? extends V> function12) {
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        for (double d : dArr) {
            K invoke = function1.invoke(Double.valueOf(d));
            List<V> list = linkedHashMap.get(invoke);
            if (list == null) {
                list = new ArrayList<>();
                linkedHashMap.put(invoke, list);
            }
            list.add(function12.invoke(Double.valueOf(d)));
        }
        return linkedHashMap;
    }

    @NotNull
    public static final <T, R> List<Pair<T, R>> zip(@NotNull T[] tArr, @NotNull Iterable<? extends R> iterable) {
        int collectionSizeOrDefault;
        int length = tArr.length;
        collectionSizeOrDefault = CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10);
        ArrayList arrayList = new ArrayList(Math.min(collectionSizeOrDefault, length));
        int i2 = 0;
        for (R r : iterable) {
            if (i2 >= length) {
                break;
            }
            arrayList.add(TuplesKt.to(tArr[i2], r));
            i2++;
        }
        return arrayList;
    }

    @NotNull
    public static final <K, V> Map<K, List<V>> groupBy(@NotNull boolean[] zArr, @NotNull Function1<? super Boolean, ? extends K> function1, @NotNull Function1<? super Boolean, ? extends V> function12) {
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        for (boolean z : zArr) {
            K invoke = function1.invoke(Boolean.valueOf(z));
            List<V> list = linkedHashMap.get(invoke);
            if (list == null) {
                list = new ArrayList<>();
                linkedHashMap.put(invoke, list);
            }
            list.add(function12.invoke(Boolean.valueOf(z)));
        }
        return linkedHashMap;
    }

    @NotNull
    public static final <R> List<Pair<Byte, R>> zip(@NotNull byte[] bArr, @NotNull Iterable<? extends R> iterable) {
        int collectionSizeOrDefault;
        int length = bArr.length;
        collectionSizeOrDefault = CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10);
        ArrayList arrayList = new ArrayList(Math.min(collectionSizeOrDefault, length));
        int i2 = 0;
        for (R r : iterable) {
            if (i2 >= length) {
                break;
            }
            arrayList.add(TuplesKt.to(Byte.valueOf(bArr[i2]), r));
            i2++;
        }
        return arrayList;
    }

    @NotNull
    public static final <R> List<Pair<Short, R>> zip(@NotNull short[] sArr, @NotNull Iterable<? extends R> iterable) {
        int collectionSizeOrDefault;
        int length = sArr.length;
        collectionSizeOrDefault = CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10);
        ArrayList arrayList = new ArrayList(Math.min(collectionSizeOrDefault, length));
        int i2 = 0;
        for (R r : iterable) {
            if (i2 >= length) {
                break;
            }
            arrayList.add(TuplesKt.to(Short.valueOf(sArr[i2]), r));
            i2++;
        }
        return arrayList;
    }

    @NotNull
    public static final <K, V> Map<K, List<V>> groupBy(@NotNull char[] cArr, @NotNull Function1<? super Character, ? extends K> function1, @NotNull Function1<? super Character, ? extends V> function12) {
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        for (char c2 : cArr) {
            K invoke = function1.invoke(Character.valueOf(c2));
            List<V> list = linkedHashMap.get(invoke);
            if (list == null) {
                list = new ArrayList<>();
                linkedHashMap.put(invoke, list);
            }
            list.add(function12.invoke(Character.valueOf(c2)));
        }
        return linkedHashMap;
    }

    @NotNull
    public static final <R> List<Pair<Integer, R>> zip(@NotNull int[] iArr, @NotNull Iterable<? extends R> iterable) {
        int collectionSizeOrDefault;
        int length = iArr.length;
        collectionSizeOrDefault = CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10);
        ArrayList arrayList = new ArrayList(Math.min(collectionSizeOrDefault, length));
        int i2 = 0;
        for (R r : iterable) {
            if (i2 >= length) {
                break;
            }
            arrayList.add(TuplesKt.to(Integer.valueOf(iArr[i2]), r));
            i2++;
        }
        return arrayList;
    }

    @NotNull
    public static final <R> List<Pair<Long, R>> zip(@NotNull long[] jArr, @NotNull Iterable<? extends R> iterable) {
        int collectionSizeOrDefault;
        int length = jArr.length;
        collectionSizeOrDefault = CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10);
        ArrayList arrayList = new ArrayList(Math.min(collectionSizeOrDefault, length));
        int i2 = 0;
        for (R r : iterable) {
            if (i2 >= length) {
                break;
            }
            arrayList.add(TuplesKt.to(Long.valueOf(jArr[i2]), r));
            i2++;
        }
        return arrayList;
    }

    @NotNull
    public static final <R> List<Pair<Float, R>> zip(@NotNull float[] fArr, @NotNull Iterable<? extends R> iterable) {
        int collectionSizeOrDefault;
        int length = fArr.length;
        collectionSizeOrDefault = CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10);
        ArrayList arrayList = new ArrayList(Math.min(collectionSizeOrDefault, length));
        int i2 = 0;
        for (R r : iterable) {
            if (i2 >= length) {
                break;
            }
            arrayList.add(TuplesKt.to(Float.valueOf(fArr[i2]), r));
            i2++;
        }
        return arrayList;
    }

    @NotNull
    public static final <R> List<Pair<Double, R>> zip(@NotNull double[] dArr, @NotNull Iterable<? extends R> iterable) {
        int collectionSizeOrDefault;
        int length = dArr.length;
        collectionSizeOrDefault = CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10);
        ArrayList arrayList = new ArrayList(Math.min(collectionSizeOrDefault, length));
        int i2 = 0;
        for (R r : iterable) {
            if (i2 >= length) {
                break;
            }
            arrayList.add(TuplesKt.to(Double.valueOf(dArr[i2]), r));
            i2++;
        }
        return arrayList;
    }

    @NotNull
    public static final <R> List<Pair<Boolean, R>> zip(@NotNull boolean[] zArr, @NotNull Iterable<? extends R> iterable) {
        int collectionSizeOrDefault;
        int length = zArr.length;
        collectionSizeOrDefault = CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10);
        ArrayList arrayList = new ArrayList(Math.min(collectionSizeOrDefault, length));
        int i2 = 0;
        for (R r : iterable) {
            if (i2 >= length) {
                break;
            }
            arrayList.add(TuplesKt.to(Boolean.valueOf(zArr[i2]), r));
            i2++;
        }
        return arrayList;
    }

    @NotNull
    public static final <R> List<Pair<Character, R>> zip(@NotNull char[] cArr, @NotNull Iterable<? extends R> iterable) {
        int collectionSizeOrDefault;
        int length = cArr.length;
        collectionSizeOrDefault = CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10);
        ArrayList arrayList = new ArrayList(Math.min(collectionSizeOrDefault, length));
        int i2 = 0;
        for (R r : iterable) {
            if (i2 >= length) {
                break;
            }
            arrayList.add(TuplesKt.to(Character.valueOf(cArr[i2]), r));
            i2++;
        }
        return arrayList;
    }

    @NotNull
    public static final List<Pair<Byte, Byte>> zip(@NotNull byte[] bArr, @NotNull byte[] bArr2) {
        int min = Math.min(bArr.length, bArr2.length);
        ArrayList arrayList = new ArrayList(min);
        for (int i2 = 0; i2 < min; i2++) {
            arrayList.add(TuplesKt.to(Byte.valueOf(bArr[i2]), Byte.valueOf(bArr2[i2])));
        }
        return arrayList;
    }

    @NotNull
    public static final List<Pair<Short, Short>> zip(@NotNull short[] sArr, @NotNull short[] sArr2) {
        int min = Math.min(sArr.length, sArr2.length);
        ArrayList arrayList = new ArrayList(min);
        for (int i2 = 0; i2 < min; i2++) {
            arrayList.add(TuplesKt.to(Short.valueOf(sArr[i2]), Short.valueOf(sArr2[i2])));
        }
        return arrayList;
    }

    @NotNull
    public static final List<Pair<Integer, Integer>> zip(@NotNull int[] iArr, @NotNull int[] iArr2) {
        int min = Math.min(iArr.length, iArr2.length);
        ArrayList arrayList = new ArrayList(min);
        for (int i2 = 0; i2 < min; i2++) {
            arrayList.add(TuplesKt.to(Integer.valueOf(iArr[i2]), Integer.valueOf(iArr2[i2])));
        }
        return arrayList;
    }

    @NotNull
    public static final List<Pair<Long, Long>> zip(@NotNull long[] jArr, @NotNull long[] jArr2) {
        int min = Math.min(jArr.length, jArr2.length);
        ArrayList arrayList = new ArrayList(min);
        for (int i2 = 0; i2 < min; i2++) {
            arrayList.add(TuplesKt.to(Long.valueOf(jArr[i2]), Long.valueOf(jArr2[i2])));
        }
        return arrayList;
    }

    @NotNull
    public static final List<Pair<Float, Float>> zip(@NotNull float[] fArr, @NotNull float[] fArr2) {
        int min = Math.min(fArr.length, fArr2.length);
        ArrayList arrayList = new ArrayList(min);
        for (int i2 = 0; i2 < min; i2++) {
            arrayList.add(TuplesKt.to(Float.valueOf(fArr[i2]), Float.valueOf(fArr2[i2])));
        }
        return arrayList;
    }

    @NotNull
    public static final List<Pair<Double, Double>> zip(@NotNull double[] dArr, @NotNull double[] dArr2) {
        int min = Math.min(dArr.length, dArr2.length);
        ArrayList arrayList = new ArrayList(min);
        for (int i2 = 0; i2 < min; i2++) {
            arrayList.add(TuplesKt.to(Double.valueOf(dArr[i2]), Double.valueOf(dArr2[i2])));
        }
        return arrayList;
    }

    @NotNull
    public static final List<Pair<Boolean, Boolean>> zip(@NotNull boolean[] zArr, @NotNull boolean[] zArr2) {
        int min = Math.min(zArr.length, zArr2.length);
        ArrayList arrayList = new ArrayList(min);
        for (int i2 = 0; i2 < min; i2++) {
            arrayList.add(TuplesKt.to(Boolean.valueOf(zArr[i2]), Boolean.valueOf(zArr2[i2])));
        }
        return arrayList;
    }

    @NotNull
    public static final List<Pair<Character, Character>> zip(@NotNull char[] cArr, @NotNull char[] cArr2) {
        int min = Math.min(cArr.length, cArr2.length);
        ArrayList arrayList = new ArrayList(min);
        for (int i2 = 0; i2 < min; i2++) {
            arrayList.add(TuplesKt.to(Character.valueOf(cArr[i2]), Character.valueOf(cArr2[i2])));
        }
        return arrayList;
    }
}
