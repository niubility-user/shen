package kotlin.sequences;

import com.jingdong.app.mall.bundle.order_center_isv_core.util.OrderISVUtil;
import com.jingdong.common.apkcenter.ApkDownloadTable;
import com.jingdong.common.entity.personal.PersonalConstants;
import com.jingdong.common.unification.navigationbar.db.NavigationDbConstants;
import com.jingdong.jdsdk.a.a;
import com.jingdong.jdsdk.constant.CartConstant;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import kotlin.ExperimentalStdlibApi;
import kotlin.Metadata;
import kotlin.Pair;
import kotlin.SinceKotlin;
import kotlin.TuplesKt;
import kotlin.TypeCastException;
import kotlin.Unit;
import kotlin.collections.ArraysKt___ArraysJvmKt;
import kotlin.collections.CollectionsKt__CollectionsKt;
import kotlin.collections.CollectionsKt__IterablesKt;
import kotlin.collections.CollectionsKt__MutableCollectionsJVMKt;
import kotlin.collections.CollectionsKt__MutableCollectionsKt;
import kotlin.collections.CollectionsKt___CollectionsKt;
import kotlin.collections.Grouping;
import kotlin.collections.IndexedValue;
import kotlin.collections.SetsKt__SetsKt;
import kotlin.collections.SlidingWindowKt;
import kotlin.comparisons.ComparisonsKt__ComparisonsKt;
import kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareBy$2;
import kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareByDescending$1;
import kotlin.internal.InlineOnly;
import kotlin.internal.PlatformImplementationsKt;
import kotlin.jvm.JvmName;
import kotlin.jvm.functions.Function1;
import kotlin.jvm.functions.Function2;
import kotlin.jvm.functions.Function3;
import kotlin.jvm.internal.DoubleCompanionObject;
import kotlin.jvm.internal.Intrinsics;
import kotlin.text.StringsKt__AppendableKt;
import org.apache.commons.codec.language.bm.Languages;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

@Metadata(bv = {1, 0, 3}, d1 = {"\u0000\u0090\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u001b\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010\u001f\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u0000\n\u0002\b\u0007\n\u0002\u0010\u000f\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\b\u0006\n\u0002\u0010%\n\u0002\b\t\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010 \n\u0002\b\u0002\n\u0002\u0010!\n\u0000\n\u0002\u0010\"\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0002\b\n\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010#\n\u0002\b\f\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u0002\n\u0002\b\u0005\n\u0002\u0010\u0006\n\u0002\b\u0002\n\u0002\u0010\u0007\n\u0002\b \n\u0002\u0010\u0011\n\u0002\b\u0002\n\u0002\u0010\u001c\n\u0002\b\u0012\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\r\n\u0002\b\u0007\n\u0002\u0010\u000e\n\u0002\b\u0005\n\u0002\u0010\u0005\n\u0002\b\u0003\n\u0002\u0010\n\n\u0002\b\u0002\n\u0002\u0010\t\n\u0002\b\r\u001a-\u0010\u0005\u001a\u00020\u0004\"\t\b\u0000\u0010\u0001\u00a2\u0006\u0002\b\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010\u0003\u001a\u00028\u0000H\u0086\u0002\u00a2\u0006\u0004\b\u0005\u0010\u0006\u001a%\u0010\t\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010\b\u001a\u00020\u0007\u00a2\u0006\u0004\b\t\u0010\n\u001a9\u0010\r\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010\b\u001a\u00020\u00072\u0012\u0010\f\u001a\u000e\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00028\u00000\u000b\u00a2\u0006\u0004\b\r\u0010\u000e\u001a'\u0010\u000f\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010\b\u001a\u00020\u0007\u00a2\u0006\u0004\b\u000f\u0010\n\u001a6\u0010\u0011\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0010\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0087\b\u00a2\u0006\u0004\b\u0011\u0010\u0012\u001a6\u0010\u0013\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0010\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0087\b\u00a2\u0006\u0004\b\u0013\u0010\u0012\u001a\u001d\u0010\u0014\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002\u00a2\u0006\u0004\b\u0014\u0010\u0015\u001a4\u0010\u0014\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0010\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\b\u00a2\u0006\u0004\b\u0014\u0010\u0012\u001a\u001f\u0010\u0016\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002\u00a2\u0006\u0004\b\u0016\u0010\u0015\u001a6\u0010\u0016\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0010\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\b\u00a2\u0006\u0004\b\u0016\u0010\u0012\u001a*\u0010\u0017\u001a\u00020\u0007\"\t\b\u0000\u0010\u0001\u00a2\u0006\u0002\b\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010\u0003\u001a\u00028\u0000\u00a2\u0006\u0004\b\u0017\u0010\u0018\u001a4\u0010\u0019\u001a\u00020\u0007\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0010\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\b\u00a2\u0006\u0004\b\u0019\u0010\u001a\u001a4\u0010\u001b\u001a\u00020\u0007\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0010\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\b\u00a2\u0006\u0004\b\u001b\u0010\u001a\u001a\u001d\u0010\u001c\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002\u00a2\u0006\u0004\b\u001c\u0010\u0015\u001a4\u0010\u001c\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0010\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\b\u00a2\u0006\u0004\b\u001c\u0010\u0012\u001a*\u0010\u001d\u001a\u00020\u0007\"\t\b\u0000\u0010\u0001\u00a2\u0006\u0002\b\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010\u0003\u001a\u00028\u0000\u00a2\u0006\u0004\b\u001d\u0010\u0018\u001a\u001f\u0010\u001e\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002\u00a2\u0006\u0004\b\u001e\u0010\u0015\u001a6\u0010\u001e\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0010\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\b\u00a2\u0006\u0004\b\u001e\u0010\u0012\u001a\u001d\u0010\u001f\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002\u00a2\u0006\u0004\b\u001f\u0010\u0015\u001a4\u0010\u001f\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0010\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\b\u00a2\u0006\u0004\b\u001f\u0010\u0012\u001a\u001f\u0010 \u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002\u00a2\u0006\u0004\b \u0010\u0015\u001a6\u0010 \u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0010\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\b\u00a2\u0006\u0004\b \u0010\u0012\u001a+\u0010\"\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010!\u001a\u00020\u0007\u00a2\u0006\u0004\b\"\u0010#\u001a7\u0010$\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0010\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000b\u00a2\u0006\u0004\b$\u0010%\u001a7\u0010&\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0010\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000b\u00a2\u0006\u0004\b&\u0010%\u001aL\u0010*\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022'\u0010\u0010\u001a#\u0012\u0013\u0012\u00110\u0007\u00a2\u0006\f\b(\u0012\b\b)\u0012\u0004\b\b(\b\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040'\u00a2\u0006\u0004\b*\u0010+\u001ac\u0010/\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0001\"\u0010\b\u0001\u0010-*\n\u0012\u0006\b\u0000\u0012\u00028\u00000,*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010.\u001a\u00028\u00012'\u0010\u0010\u001a#\u0012\u0013\u0012\u00110\u0007\u00a2\u0006\f\b(\u0012\b\b)\u0012\u0004\b\b(\b\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040'H\u0086\b\u00a2\u0006\u0004\b/\u00100\u001a+\u00103\u001a\r\u0012\t\u0012\u00078\u0000\u00a2\u0006\u0002\b20\u0002\"\u0006\b\u0000\u00101\u0018\u0001*\u0006\u0012\u0002\b\u00030\u0002H\u0086\b\u00a2\u0006\u0004\b3\u00104\u001a:\u00105\u001a\u00028\u0001\"\u0006\b\u0000\u00101\u0018\u0001\"\u0010\b\u0001\u0010-*\n\u0012\u0006\b\u0000\u0012\u00028\u00000,*\u0006\u0012\u0002\b\u00030\u00022\u0006\u0010.\u001a\u00028\u0001H\u0086\b\u00a2\u0006\u0004\b5\u00106\u001a7\u00107\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0010\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000b\u00a2\u0006\u0004\b7\u0010%\u001a)\u00109\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\b\b\u0000\u0010\u0001*\u000208*\n\u0012\u0006\u0012\u0004\u0018\u00018\u00000\u0002\u00a2\u0006\u0004\b9\u00104\u001a=\u0010:\u001a\u00028\u0000\"\u0010\b\u0000\u0010-*\n\u0012\u0006\b\u0000\u0012\u00028\u00010,\"\b\b\u0001\u0010\u0001*\u000208*\n\u0012\u0006\u0012\u0004\u0018\u00018\u00010\u00022\u0006\u0010.\u001a\u00028\u0000\u00a2\u0006\u0004\b:\u00106\u001aN\u0010;\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0001\"\u0010\b\u0001\u0010-*\n\u0012\u0006\b\u0000\u0012\u00028\u00000,*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010.\u001a\u00028\u00012\u0012\u0010\u0010\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\b\u00a2\u0006\u0004\b;\u0010<\u001aN\u0010=\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0001\"\u0010\b\u0001\u0010-*\n\u0012\u0006\b\u0000\u0012\u00028\u00000,*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010.\u001a\u00028\u00012\u0012\u0010\u0010\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\b\u00a2\u0006\u0004\b=\u0010<\u001a+\u0010>\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010!\u001a\u00020\u0007\u00a2\u0006\u0004\b>\u0010#\u001a7\u0010?\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0010\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000b\u00a2\u0006\u0004\b?\u0010%\u001a-\u0010A\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u000e\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000@*\b\u0012\u0004\u0012\u00028\u00000\u0002\u00a2\u0006\u0004\bA\u00104\u001aN\u0010C\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u0004\b\u0000\u0010\u0001\"\u000e\b\u0001\u00101*\b\u0012\u0004\u0012\u00028\u00010@*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0016\b\u0004\u0010B\u001a\u0010\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010\u000bH\u0086\b\u00a2\u0006\u0004\bC\u0010%\u001aN\u0010D\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u0004\b\u0000\u0010\u0001\"\u000e\b\u0001\u00101*\b\u0012\u0004\u0012\u00028\u00010@*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0016\b\u0004\u0010B\u001a\u0010\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010\u000bH\u0086\b\u00a2\u0006\u0004\bD\u0010%\u001a-\u0010E\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u000e\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000@*\b\u0012\u0004\u0012\u00028\u00000\u0002\u00a2\u0006\u0004\bE\u00104\u001a?\u0010I\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u001a\u0010H\u001a\u0016\u0012\u0006\b\u0000\u0012\u00028\u00000Fj\n\u0012\u0006\b\u0000\u0012\u00028\u0000`G\u00a2\u0006\u0004\bI\u0010J\u001aX\u0010P\u001a\u000e\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00020O\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010K\"\u0004\b\u0002\u0010L*\b\u0012\u0004\u0012\u00028\u00000\u00022\u001e\u0010N\u001a\u001a\u0012\u0004\u0012\u00028\u0000\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00020M0\u000bH\u0086\b\u00a2\u0006\u0004\bP\u0010Q\u001aF\u0010S\u001a\u000e\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00000O\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010K*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010R\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000bH\u0086\b\u00a2\u0006\u0004\bS\u0010Q\u001a`\u0010S\u001a\u000e\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00020O\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010K\"\u0004\b\u0002\u0010L*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010R\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000b2\u0012\u0010T\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00020\u000bH\u0086\b\u00a2\u0006\u0004\bS\u0010U\u001a\\\u0010X\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010K\"\u0018\b\u0002\u0010W*\u0012\u0012\u0006\b\u0000\u0012\u00028\u0001\u0012\u0006\b\u0000\u0012\u00028\u00000V*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010.\u001a\u00028\u00022\u0012\u0010R\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000bH\u0086\b\u00a2\u0006\u0004\bX\u0010Y\u001av\u0010X\u001a\u00028\u0003\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010K\"\u0004\b\u0002\u0010L\"\u0018\b\u0003\u0010W*\u0012\u0012\u0006\b\u0000\u0012\u00028\u0001\u0012\u0006\b\u0000\u0012\u00028\u00020V*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010.\u001a\u00028\u00032\u0012\u0010R\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000b2\u0012\u0010T\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00020\u000bH\u0086\b\u00a2\u0006\u0004\bX\u0010Z\u001an\u0010[\u001a\u00028\u0003\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010K\"\u0004\b\u0002\u0010L\"\u0018\b\u0003\u0010W*\u0012\u0012\u0006\b\u0000\u0012\u00028\u0001\u0012\u0006\b\u0000\u0012\u00028\u00020V*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010.\u001a\u00028\u00032\u001e\u0010N\u001a\u001a\u0012\u0004\u0012\u00028\u0000\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00020M0\u000bH\u0086\b\u00a2\u0006\u0004\b[\u0010Y\u001aF\u0010]\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010O\"\u0004\b\u0000\u0010K\"\u0004\b\u0001\u0010L*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\\\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000bH\u0087\b\u00a2\u0006\u0004\b]\u0010Q\u001a\\\u0010^\u001a\u00028\u0002\"\u0004\b\u0000\u0010K\"\u0004\b\u0001\u0010L\"\u0018\b\u0002\u0010W*\u0012\u0012\u0006\b\u0000\u0012\u00028\u0000\u0012\u0006\b\u0000\u0012\u00028\u00010V*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010.\u001a\u00028\u00022\u0012\u0010\\\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000bH\u0087\b\u00a2\u0006\u0004\b^\u0010Y\u001a7\u0010_\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0001\"\u0010\b\u0001\u0010-*\n\u0012\u0006\b\u0000\u0012\u00028\u00000,*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010.\u001a\u00028\u0001\u00a2\u0006\u0004\b_\u00106\u001a-\u0010b\u001a\u0012\u0012\u0004\u0012\u00028\u00000`j\b\u0012\u0004\u0012\u00028\u0000`a\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002\u00a2\u0006\u0004\bb\u0010c\u001a#\u0010e\u001a\b\u0012\u0004\u0012\u00028\u00000d\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002\u00a2\u0006\u0004\be\u0010f\u001a#\u0010h\u001a\b\u0012\u0004\u0012\u00028\u00000g\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002\u00a2\u0006\u0004\bh\u0010f\u001a#\u0010j\u001a\b\u0012\u0004\u0012\u00028\u00000i\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002\u00a2\u0006\u0004\bj\u0010k\u001aC\u0010l\u001a\b\u0012\u0004\u0012\u00028\u00010\u0002\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u00101*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0018\u0010N\u001a\u0014\u0012\u0004\u0012\u00028\u0000\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00010\u00020\u000b\u00a2\u0006\u0004\bl\u0010%\u001aZ\u0010m\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u00101\"\u0010\b\u0002\u0010-*\n\u0012\u0006\b\u0000\u0012\u00028\u00010,*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010.\u001a\u00028\u00022\u0018\u0010N\u001a\u0014\u0012\u0004\u0012\u00028\u0000\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00010\u00020\u000bH\u0086\b\u00a2\u0006\u0004\bm\u0010<\u001aL\u0010n\u001a\u0014\u0012\u0004\u0012\u00028\u0001\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00000d0O\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010K*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010R\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000bH\u0086\b\u00a2\u0006\u0004\bn\u0010Q\u001af\u0010n\u001a\u0014\u0012\u0004\u0012\u00028\u0001\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00020d0O\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010K\"\u0004\b\u0002\u0010L*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010R\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000b2\u0012\u0010T\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00020\u000bH\u0086\b\u00a2\u0006\u0004\bn\u0010U\u001a`\u0010o\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010K\"\u001c\b\u0002\u0010W*\u0016\u0012\u0006\b\u0000\u0012\u00028\u0001\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00000g0V*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010.\u001a\u00028\u00022\u0012\u0010R\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000bH\u0086\b\u00a2\u0006\u0004\bo\u0010Y\u001az\u0010o\u001a\u00028\u0003\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010K\"\u0004\b\u0002\u0010L\"\u001c\b\u0003\u0010W*\u0016\u0012\u0006\b\u0000\u0012\u00028\u0001\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00020g0V*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010.\u001a\u00028\u00032\u0012\u0010R\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000b2\u0012\u0010T\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00020\u000bH\u0086\b\u00a2\u0006\u0004\bo\u0010Z\u001aH\u0010q\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010p\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010K*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0014\b\u0004\u0010R\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000bH\u0087\b\u00a2\u0006\u0004\bq\u0010r\u001a=\u0010s\u001a\b\u0012\u0004\u0012\u00028\u00010\u0002\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u00101*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010N\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000b\u00a2\u0006\u0004\bs\u0010%\u001aR\u0010t\u001a\b\u0012\u0004\u0012\u00028\u00010\u0002\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u00101*\b\u0012\u0004\u0012\u00028\u00000\u00022'\u0010N\u001a#\u0012\u0013\u0012\u00110\u0007\u00a2\u0006\f\b(\u0012\b\b)\u0012\u0004\b\b(\b\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010'\u00a2\u0006\u0004\bt\u0010+\u001aX\u0010u\u001a\b\u0012\u0004\u0012\u00028\u00010\u0002\"\u0004\b\u0000\u0010\u0001\"\b\b\u0001\u00101*\u000208*\b\u0012\u0004\u0012\u00028\u00000\u00022)\u0010N\u001a%\u0012\u0013\u0012\u00110\u0007\u00a2\u0006\f\b(\u0012\b\b)\u0012\u0004\b\b(\b\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010'\u00a2\u0006\u0004\bu\u0010+\u001ao\u0010v\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u0001\"\b\b\u0001\u00101*\u000208\"\u0010\b\u0002\u0010-*\n\u0012\u0006\b\u0000\u0012\u00028\u00010,*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010.\u001a\u00028\u00022)\u0010N\u001a%\u0012\u0013\u0012\u00110\u0007\u00a2\u0006\f\b(\u0012\b\b)\u0012\u0004\b\b(\b\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010'H\u0086\b\u00a2\u0006\u0004\bv\u00100\u001ai\u0010w\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u00101\"\u0010\b\u0002\u0010-*\n\u0012\u0006\b\u0000\u0012\u00028\u00010,*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010.\u001a\u00028\u00022'\u0010N\u001a#\u0012\u0013\u0012\u00110\u0007\u00a2\u0006\f\b(\u0012\b\b)\u0012\u0004\b\b(\b\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010'H\u0086\b\u00a2\u0006\u0004\bw\u00100\u001aC\u0010x\u001a\b\u0012\u0004\u0012\u00028\u00010\u0002\"\u0004\b\u0000\u0010\u0001\"\b\b\u0001\u00101*\u000208*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0014\u0010N\u001a\u0010\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010\u000b\u00a2\u0006\u0004\bx\u0010%\u001aZ\u0010y\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u0001\"\b\b\u0001\u00101*\u000208\"\u0010\b\u0002\u0010-*\n\u0012\u0006\b\u0000\u0012\u00028\u00010,*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010.\u001a\u00028\u00022\u0014\u0010N\u001a\u0010\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010\u000bH\u0086\b\u00a2\u0006\u0004\by\u0010<\u001aT\u0010z\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u00101\"\u0010\b\u0002\u0010-*\n\u0012\u0006\b\u0000\u0012\u00028\u00010,*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010.\u001a\u00028\u00022\u0012\u0010N\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000bH\u0086\b\u00a2\u0006\u0004\bz\u0010<\u001a)\u0010|\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00000{0\u0002\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002\u00a2\u0006\u0004\b|\u00104\u001a#\u0010}\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002\u00a2\u0006\u0004\b}\u00104\u001a=\u0010~\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010K*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010B\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000b\u00a2\u0006\u0004\b~\u0010%\u001a%\u0010\u0080\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u007f\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002\u00a2\u0006\u0005\b\u0080\u0001\u0010k\u001a7\u0010\u0081\u0001\u001a\u00020\u0004\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0010\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\b\u00a2\u0006\u0006\b\u0081\u0001\u0010\u0082\u0001\u001a \u0010\u0083\u0001\u001a\u00020\u0004\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002\u00a2\u0006\u0006\b\u0083\u0001\u0010\u0084\u0001\u001a7\u0010\u0083\u0001\u001a\u00020\u0004\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0010\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\b\u00a2\u0006\u0006\b\u0083\u0001\u0010\u0082\u0001\u001a \u0010\u0085\u0001\u001a\u00020\u0007\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002\u00a2\u0006\u0006\b\u0085\u0001\u0010\u0086\u0001\u001a6\u0010\u0085\u0001\u001a\u00020\u0007\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0010\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\b\u00a2\u0006\u0005\b\u0085\u0001\u0010\u001a\u001a]\u0010\u008a\u0001\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u00101*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0007\u0010\u0087\u0001\u001a\u00028\u00012)\u0010\u0089\u0001\u001a$\u0012\u0014\u0012\u00128\u0001\u00a2\u0006\r\b(\u0012\t\b)\u0012\u0005\b\b(\u0088\u0001\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010'H\u0086\b\u00a2\u0006\u0006\b\u008a\u0001\u0010\u008b\u0001\u001as\u0010\u008d\u0001\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u00101*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0007\u0010\u0087\u0001\u001a\u00028\u00012?\u0010\u0089\u0001\u001a:\u0012\u0013\u0012\u00110\u0007\u00a2\u0006\f\b(\u0012\b\b)\u0012\u0004\b\b(\b\u0012\u0014\u0012\u00128\u0001\u00a2\u0006\r\b(\u0012\t\b)\u0012\u0005\b\b(\u0088\u0001\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u008c\u0001H\u0086\b\u00a2\u0006\u0006\b\u008d\u0001\u0010\u008e\u0001\u001a:\u0010\u0091\u0001\u001a\u00030\u008f\u0001\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0014\u0010\u0090\u0001\u001a\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0005\u0012\u00030\u008f\u00010\u000bH\u0086\b\u00a2\u0006\u0006\b\u0091\u0001\u0010\u0092\u0001\u001aO\u0010\u0093\u0001\u001a\u00030\u008f\u0001\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022)\u0010\u0090\u0001\u001a$\u0012\u0013\u0012\u00110\u0007\u00a2\u0006\f\b(\u0012\b\b)\u0012\u0004\b\b(\b\u0012\u0004\u0012\u00028\u0000\u0012\u0005\u0012\u00030\u008f\u00010'H\u0086\b\u00a2\u0006\u0006\b\u0093\u0001\u0010\u0094\u0001\u001a \u0010\u0096\u0001\u001a\u0005\u0018\u00010\u0095\u0001*\t\u0012\u0005\u0012\u00030\u0095\u00010\u0002H\u0007\u00a2\u0006\u0006\b\u0096\u0001\u0010\u0097\u0001\u001a \u0010\u0096\u0001\u001a\u0005\u0018\u00010\u0098\u0001*\t\u0012\u0005\u0012\u00030\u0098\u00010\u0002H\u0007\u00a2\u0006\u0006\b\u0096\u0001\u0010\u0099\u0001\u001a,\u0010\u0096\u0001\u001a\u0004\u0018\u00018\u0000\"\u000e\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000@*\b\u0012\u0004\u0012\u00028\u00000\u0002\u00a2\u0006\u0006\b\u0096\u0001\u0010\u009a\u0001\u001aH\u0010\u009b\u0001\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0001\"\u000e\b\u0001\u00101*\b\u0012\u0004\u0012\u00028\u00010@*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010B\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000bH\u0086\b\u00a2\u0006\u0005\b\u009b\u0001\u0010\u0012\u001a>\u0010\u009c\u0001\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u001a\u0010H\u001a\u0016\u0012\u0006\b\u0000\u0012\u00028\u00000Fj\n\u0012\u0006\b\u0000\u0012\u00028\u0000`G\u00a2\u0006\u0006\b\u009c\u0001\u0010\u009d\u0001\u001a \u0010\u009e\u0001\u001a\u0005\u0018\u00010\u0095\u0001*\t\u0012\u0005\u0012\u00030\u0095\u00010\u0002H\u0007\u00a2\u0006\u0006\b\u009e\u0001\u0010\u0097\u0001\u001a \u0010\u009e\u0001\u001a\u0005\u0018\u00010\u0098\u0001*\t\u0012\u0005\u0012\u00030\u0098\u00010\u0002H\u0007\u00a2\u0006\u0006\b\u009e\u0001\u0010\u0099\u0001\u001a,\u0010\u009e\u0001\u001a\u0004\u0018\u00018\u0000\"\u000e\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000@*\b\u0012\u0004\u0012\u00028\u00000\u0002\u00a2\u0006\u0006\b\u009e\u0001\u0010\u009a\u0001\u001aH\u0010\u009f\u0001\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0001\"\u000e\b\u0001\u00101*\b\u0012\u0004\u0012\u00028\u00010@*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010B\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000bH\u0086\b\u00a2\u0006\u0005\b\u009f\u0001\u0010\u0012\u001a>\u0010\u00a0\u0001\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u001a\u0010H\u001a\u0016\u0012\u0006\b\u0000\u0012\u00028\u00000Fj\n\u0012\u0006\b\u0000\u0012\u00028\u0000`G\u00a2\u0006\u0006\b\u00a0\u0001\u0010\u009d\u0001\u001a \u0010\u00a1\u0001\u001a\u00020\u0004\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002\u00a2\u0006\u0006\b\u00a1\u0001\u0010\u0084\u0001\u001a7\u0010\u00a1\u0001\u001a\u00020\u0004\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0010\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\b\u00a2\u0006\u0006\b\u00a1\u0001\u0010\u0082\u0001\u001a=\u0010\u00a2\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0014\u0010\u0090\u0001\u001a\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0005\u0012\u00030\u008f\u00010\u000bH\u0007\u00a2\u0006\u0005\b\u00a2\u0001\u0010%\u001aY\u0010\u00a4\u0001\u001a\u00028\u0000\"\u0005\b\u0000\u0010\u00a3\u0001\"\b\b\u0001\u0010\u0001*\u00028\u0000*\b\u0012\u0004\u0012\u00028\u00010\u00022)\u0010\u0089\u0001\u001a$\u0012\u0014\u0012\u00128\u0000\u00a2\u0006\r\b(\u0012\t\b)\u0012\u0005\b\b(\u0088\u0001\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00000'H\u0086\b\u00a2\u0006\u0006\b\u00a4\u0001\u0010\u00a5\u0001\u001ao\u0010\u00a6\u0001\u001a\u00028\u0000\"\u0005\b\u0000\u0010\u00a3\u0001\"\b\b\u0001\u0010\u0001*\u00028\u0000*\b\u0012\u0004\u0012\u00028\u00010\u00022?\u0010\u0089\u0001\u001a:\u0012\u0013\u0012\u00110\u0007\u00a2\u0006\f\b(\u0012\b\b)\u0012\u0004\b\b(\b\u0012\u0014\u0012\u00128\u0000\u00a2\u0006\r\b(\u0012\t\b)\u0012\u0005\b\b(\u0088\u0001\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00000\u008c\u0001H\u0086\b\u00a2\u0006\u0006\b\u00a6\u0001\u0010\u00a7\u0001\u001a[\u0010\u00a8\u0001\u001a\u0004\u0018\u00018\u0000\"\u0005\b\u0000\u0010\u00a3\u0001\"\b\b\u0001\u0010\u0001*\u00028\u0000*\b\u0012\u0004\u0012\u00028\u00010\u00022)\u0010\u0089\u0001\u001a$\u0012\u0014\u0012\u00128\u0000\u00a2\u0006\r\b(\u0012\t\b)\u0012\u0005\b\b(\u0088\u0001\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00000'H\u0087\b\u00a2\u0006\u0006\b\u00a8\u0001\u0010\u00a5\u0001\u001ab\u0010\u00a9\u0001\u001a\b\u0012\u0004\u0012\u00028\u00010\u0002\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u00101*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0007\u0010\u0087\u0001\u001a\u00028\u00012)\u0010\u0089\u0001\u001a$\u0012\u0014\u0012\u00128\u0001\u00a2\u0006\r\b(\u0012\t\b)\u0012\u0005\b\b(\u0088\u0001\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010'H\u0007\u00a2\u0006\u0006\b\u00a9\u0001\u0010\u00aa\u0001\u001ax\u0010\u00ab\u0001\u001a\b\u0012\u0004\u0012\u00028\u00010\u0002\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u00101*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0007\u0010\u0087\u0001\u001a\u00028\u00012?\u0010\u0089\u0001\u001a:\u0012\u0013\u0012\u00110\u0007\u00a2\u0006\f\b(\u0012\b\b)\u0012\u0004\b\b(\b\u0012\u0014\u0012\u00128\u0001\u00a2\u0006\r\b(\u0012\t\b)\u0012\u0005\b\b(\u0088\u0001\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u008c\u0001H\u0007\u00a2\u0006\u0006\b\u00ab\u0001\u0010\u00ac\u0001\u001a]\u0010\u00ad\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u0005\b\u0000\u0010\u00a3\u0001\"\b\b\u0001\u0010\u0001*\u00028\u0000*\b\u0012\u0004\u0012\u00028\u00010\u00022)\u0010\u0089\u0001\u001a$\u0012\u0014\u0012\u00128\u0000\u00a2\u0006\r\b(\u0012\t\b)\u0012\u0005\b\b(\u0088\u0001\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00000'H\u0007\u00a2\u0006\u0005\b\u00ad\u0001\u0010+\u001at\u0010\u00ae\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u0005\b\u0000\u0010\u00a3\u0001\"\b\b\u0001\u0010\u0001*\u00028\u0000*\b\u0012\u0004\u0012\u00028\u00010\u00022?\u0010\u0089\u0001\u001a:\u0012\u0013\u0012\u00110\u0007\u00a2\u0006\f\b(\u0012\b\b)\u0012\u0004\b\b(\b\u0012\u0014\u0012\u00128\u0000\u00a2\u0006\r\b(\u0012\t\b)\u0012\u0005\b\b(\u0088\u0001\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00000\u008c\u0001H\u0007\u00a2\u0006\u0006\b\u00ae\u0001\u0010\u00af\u0001\u001a6\u0010\u00b0\u0001\u001a\u00020\u0007\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010B\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00070\u000bH\u0086\b\u00a2\u0006\u0005\b\u00b0\u0001\u0010\u001a\u001a9\u0010\u00b1\u0001\u001a\u00030\u0095\u0001\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0013\u0010B\u001a\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0005\u0012\u00030\u0095\u00010\u000bH\u0086\b\u00a2\u0006\u0006\b\u00b1\u0001\u0010\u00b2\u0001\u001a+\u0010\u00b3\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\b\b\u0000\u0010\u0001*\u000208*\n\u0012\u0006\u0012\u0004\u0018\u00018\u00000\u0002\u00a2\u0006\u0005\b\u00b3\u0001\u00104\u001a6\u0010\u00b5\u0001\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00000d0\u0002\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0007\u0010\u00b4\u0001\u001a\u00020\u0007H\u0007\u00a2\u0006\u0005\b\u00b5\u0001\u0010#\u001aQ\u0010\u00b5\u0001\u001a\b\u0012\u0004\u0012\u00028\u00010\u0002\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u00101*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0007\u0010\u00b4\u0001\u001a\u00020\u00072\u0018\u0010N\u001a\u0014\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00000d\u0012\u0004\u0012\u00028\u00010\u000bH\u0007\u00a2\u0006\u0006\b\u00b5\u0001\u0010\u00b6\u0001\u001a1\u0010\u00b7\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010\u0003\u001a\u00028\u0000H\u0086\u0002\u00a2\u0006\u0006\b\u00b7\u0001\u0010\u00b8\u0001\u001a;\u0010\u00b7\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0010\u0010\u00ba\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u00028\u00000\u00b9\u0001H\u0086\u0002\u00a2\u0006\u0006\b\u00b7\u0001\u0010\u00bb\u0001\u001a9\u0010\u00b7\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u000e\u0010\u00ba\u0001\u001a\t\u0012\u0004\u0012\u00028\u00000\u00bc\u0001H\u0086\u0002\u00a2\u0006\u0006\b\u00b7\u0001\u0010\u00bd\u0001\u001a8\u0010\u00b7\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\r\u0010\u00ba\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002H\u0086\u0002\u00a2\u0006\u0006\b\u00b7\u0001\u0010\u00be\u0001\u001a1\u0010\u00bf\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010\u0003\u001a\u00028\u0000H\u0087\b\u00a2\u0006\u0006\b\u00bf\u0001\u0010\u00b8\u0001\u001aO\u0010\u00c0\u0001\u001a\u001a\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00000d\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00000d0M\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0010\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\b\u00a2\u0006\u0006\b\u00c0\u0001\u0010\u00c1\u0001\u001a1\u0010\u00c2\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010\u0003\u001a\u00028\u0000H\u0086\u0002\u00a2\u0006\u0006\b\u00c2\u0001\u0010\u00b8\u0001\u001a;\u0010\u00c2\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0010\u0010\u00ba\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u00028\u00000\u00b9\u0001H\u0086\u0002\u00a2\u0006\u0006\b\u00c2\u0001\u0010\u00bb\u0001\u001a9\u0010\u00c2\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u000e\u0010\u00ba\u0001\u001a\t\u0012\u0004\u0012\u00028\u00000\u00bc\u0001H\u0086\u0002\u00a2\u0006\u0006\b\u00c2\u0001\u0010\u00bd\u0001\u001a8\u0010\u00c2\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\r\u0010\u00ba\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002H\u0086\u0002\u00a2\u0006\u0006\b\u00c2\u0001\u0010\u00be\u0001\u001a1\u0010\u00c3\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010\u0003\u001a\u00028\u0000H\u0087\b\u00a2\u0006\u0006\b\u00c3\u0001\u0010\u00b8\u0001\u001aM\u0010\u00c6\u0001\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00000d0\u0002\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0007\u0010\u00b4\u0001\u001a\u00020\u00072\t\b\u0002\u0010\u00c4\u0001\u001a\u00020\u00072\t\b\u0002\u0010\u00c5\u0001\u001a\u00020\u0004H\u0007\u00a2\u0006\u0006\b\u00c6\u0001\u0010\u00c7\u0001\u001ag\u0010\u00c6\u0001\u001a\b\u0012\u0004\u0012\u00028\u00010\u0002\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u00101*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0007\u0010\u00b4\u0001\u001a\u00020\u00072\t\b\u0002\u0010\u00c4\u0001\u001a\u00020\u00072\t\b\u0002\u0010\u00c5\u0001\u001a\u00020\u00042\u0018\u0010N\u001a\u0014\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00000d\u0012\u0004\u0012\u00028\u00010\u000bH\u0007\u00a2\u0006\u0006\b\u00c6\u0001\u0010\u00c8\u0001\u001aJ\u0010\u00ca\u0001\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010M0\u0002\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u00101*\b\u0012\u0004\u0012\u00028\u00000\u00022\r\u0010\u00c9\u0001\u001a\b\u0012\u0004\u0012\u00028\u00010\u0002H\u0086\u0004\u00a2\u0006\u0006\b\u00ca\u0001\u0010\u00be\u0001\u001a{\u0010\u00ca\u0001\u001a\b\u0012\u0004\u0012\u00028\u00020\u0002\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u00101\"\u0004\b\u0002\u0010L*\b\u0012\u0004\u0012\u00028\u00000\u00022\r\u0010\u00c9\u0001\u001a\b\u0012\u0004\u0012\u00028\u00010\u000228\u0010N\u001a4\u0012\u0014\u0012\u00128\u0000\u00a2\u0006\r\b(\u0012\t\b)\u0012\u0005\b\b(\u00cb\u0001\u0012\u0014\u0012\u00128\u0001\u00a2\u0006\r\b(\u0012\t\b)\u0012\u0005\b\b(\u00cc\u0001\u0012\u0004\u0012\u00028\u00020'\u00a2\u0006\u0006\b\u00ca\u0001\u0010\u00cd\u0001\u001a3\u0010\u00ce\u0001\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00000M0\u0002\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002H\u0007\u00a2\u0006\u0005\b\u00ce\u0001\u00104\u001ag\u0010\u00ce\u0001\u001a\b\u0012\u0004\u0012\u00028\u00010\u0002\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u00101*\b\u0012\u0004\u0012\u00028\u00000\u000228\u0010N\u001a4\u0012\u0014\u0012\u00128\u0000\u00a2\u0006\r\b(\u0012\t\b)\u0012\u0005\b\b(\u00cb\u0001\u0012\u0014\u0012\u00128\u0000\u00a2\u0006\r\b(\u0012\t\b)\u0012\u0005\b\b(\u00cc\u0001\u0012\u0004\u0012\u00028\u00010'H\u0007\u00a2\u0006\u0005\b\u00ce\u0001\u0010+\u001a\u008e\u0001\u0010\u00d9\u0001\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0001\"\u000f\b\u0001\u0010\u00d1\u0001*\b0\u00cf\u0001j\u0003`\u00d0\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0007\u0010\u00d2\u0001\u001a\u00028\u00012\n\b\u0002\u0010\u00d4\u0001\u001a\u00030\u00d3\u00012\n\b\u0002\u0010\u00d5\u0001\u001a\u00030\u00d3\u00012\n\b\u0002\u0010\u00d6\u0001\u001a\u00030\u00d3\u00012\t\b\u0002\u0010\u00d7\u0001\u001a\u00020\u00072\n\b\u0002\u0010\u00d8\u0001\u001a\u00030\u00d3\u00012\u0017\b\u0002\u0010N\u001a\u0011\u0012\u0004\u0012\u00028\u0000\u0012\u0005\u0012\u00030\u00d3\u0001\u0018\u00010\u000b\u00a2\u0006\u0006\b\u00d9\u0001\u0010\u00da\u0001\u001au\u0010\u00dc\u0001\u001a\u00030\u00db\u0001\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\n\b\u0002\u0010\u00d4\u0001\u001a\u00030\u00d3\u00012\n\b\u0002\u0010\u00d5\u0001\u001a\u00030\u00d3\u00012\n\b\u0002\u0010\u00d6\u0001\u001a\u00030\u00d3\u00012\t\b\u0002\u0010\u00d7\u0001\u001a\u00020\u00072\n\b\u0002\u0010\u00d8\u0001\u001a\u00030\u00d3\u00012\u0017\b\u0002\u0010N\u001a\u0011\u0012\u0004\u0012\u00028\u0000\u0012\u0005\u0012\u00030\u00d3\u0001\u0018\u00010\u000b\u00a2\u0006\u0006\b\u00dc\u0001\u0010\u00dd\u0001\u001a'\u0010\u00de\u0001\u001a\t\u0012\u0004\u0012\u00028\u00000\u00bc\u0001\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002\u00a2\u0006\u0006\b\u00de\u0001\u0010\u00df\u0001\u001a(\u0010\u00e0\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002H\u0087\b\u00a2\u0006\u0005\b\u00e0\u0001\u00104\u001a\u001e\u0010\u00e4\u0001\u001a\u00030\u0095\u0001*\t\u0012\u0005\u0012\u00030\u00e1\u00010\u0002H\u0007\u00a2\u0006\u0006\b\u00e2\u0001\u0010\u00e3\u0001\u001a\u001e\u0010\u00e4\u0001\u001a\u00030\u0095\u0001*\t\u0012\u0005\u0012\u00030\u00e5\u00010\u0002H\u0007\u00a2\u0006\u0006\b\u00e6\u0001\u0010\u00e3\u0001\u001a\u001d\u0010\u00e4\u0001\u001a\u00030\u0095\u0001*\b\u0012\u0004\u0012\u00020\u00070\u0002H\u0007\u00a2\u0006\u0006\b\u00e7\u0001\u0010\u00e3\u0001\u001a\u001e\u0010\u00e4\u0001\u001a\u00030\u0095\u0001*\t\u0012\u0005\u0012\u00030\u00e8\u00010\u0002H\u0007\u00a2\u0006\u0006\b\u00e9\u0001\u0010\u00e3\u0001\u001a\u001e\u0010\u00e4\u0001\u001a\u00030\u0095\u0001*\t\u0012\u0005\u0012\u00030\u0098\u00010\u0002H\u0007\u00a2\u0006\u0006\b\u00ea\u0001\u0010\u00e3\u0001\u001a\u001e\u0010\u00e4\u0001\u001a\u00030\u0095\u0001*\t\u0012\u0005\u0012\u00030\u0095\u00010\u0002H\u0007\u00a2\u0006\u0006\b\u00eb\u0001\u0010\u00e3\u0001\u001a\u001d\u0010\u00ed\u0001\u001a\u00020\u0007*\t\u0012\u0005\u0012\u00030\u00e1\u00010\u0002H\u0007\u00a2\u0006\u0006\b\u00ec\u0001\u0010\u0086\u0001\u001a\u001d\u0010\u00ed\u0001\u001a\u00020\u0007*\t\u0012\u0005\u0012\u00030\u00e5\u00010\u0002H\u0007\u00a2\u0006\u0006\b\u00ee\u0001\u0010\u0086\u0001\u001a\u001c\u0010\u00ed\u0001\u001a\u00020\u0007*\b\u0012\u0004\u0012\u00020\u00070\u0002H\u0007\u00a2\u0006\u0006\b\u00ef\u0001\u0010\u0086\u0001\u001a\u001e\u0010\u00ed\u0001\u001a\u00030\u00e8\u0001*\t\u0012\u0005\u0012\u00030\u00e8\u00010\u0002H\u0007\u00a2\u0006\u0006\b\u00f0\u0001\u0010\u00f1\u0001\u001a\u001e\u0010\u00ed\u0001\u001a\u00030\u0098\u0001*\t\u0012\u0005\u0012\u00030\u0098\u00010\u0002H\u0007\u00a2\u0006\u0006\b\u00f2\u0001\u0010\u00f3\u0001\u001a\u001e\u0010\u00ed\u0001\u001a\u00030\u0095\u0001*\t\u0012\u0005\u0012\u00030\u0095\u00010\u0002H\u0007\u00a2\u0006\u0006\b\u00f4\u0001\u0010\u00e3\u0001\u00a8\u0006\u00f5\u0001"}, d2 = {"Lkotlin/internal/OnlyInputTypes;", "T", "Lkotlin/sequences/Sequence;", "element", "", "contains", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;)Z", "", "index", "elementAt", "(Lkotlin/sequences/Sequence;I)Ljava/lang/Object;", "Lkotlin/Function1;", "defaultValue", "elementAtOrElse", "(Lkotlin/sequences/Sequence;ILkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "elementAtOrNull", "predicate", "find", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "findLast", "first", "(Lkotlin/sequences/Sequence;)Ljava/lang/Object;", "firstOrNull", "indexOf", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;)I", "indexOfFirst", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)I", "indexOfLast", "last", "lastIndexOf", "lastOrNull", "single", "singleOrNull", PersonalConstants.ICON_STYLE_N, "drop", "(Lkotlin/sequences/Sequence;I)Lkotlin/sequences/Sequence;", "dropWhile", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;", "filter", "Lkotlin/Function2;", "Lkotlin/ParameterName;", "name", "filterIndexed", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)Lkotlin/sequences/Sequence;", "", "C", "destination", "filterIndexedTo", "(Lkotlin/sequences/Sequence;Ljava/util/Collection;Lkotlin/jvm/functions/Function2;)Ljava/util/Collection;", "R", "Lkotlin/internal/NoInfer;", "filterIsInstance", "(Lkotlin/sequences/Sequence;)Lkotlin/sequences/Sequence;", "filterIsInstanceTo", "(Lkotlin/sequences/Sequence;Ljava/util/Collection;)Ljava/util/Collection;", "filterNot", "", "filterNotNull", "filterNotNullTo", "filterNotTo", "(Lkotlin/sequences/Sequence;Ljava/util/Collection;Lkotlin/jvm/functions/Function1;)Ljava/util/Collection;", "filterTo", "take", "takeWhile", "", CartConstant.KEY_VENDOR_SORTED, "selector", "sortedBy", "sortedByDescending", "sortedDescending", "Ljava/util/Comparator;", "Lkotlin/Comparator;", "comparator", "sortedWith", "(Lkotlin/sequences/Sequence;Ljava/util/Comparator;)Lkotlin/sequences/Sequence;", "K", "V", "Lkotlin/Pair;", "transform", "", "associate", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "keySelector", "associateBy", "valueTransform", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "", "M", "associateByTo", "(Lkotlin/sequences/Sequence;Ljava/util/Map;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "(Lkotlin/sequences/Sequence;Ljava/util/Map;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "associateTo", "valueSelector", "associateWith", "associateWithTo", "toCollection", "Ljava/util/HashSet;", "Lkotlin/collections/HashSet;", "toHashSet", "(Lkotlin/sequences/Sequence;)Ljava/util/HashSet;", "", "toList", "(Lkotlin/sequences/Sequence;)Ljava/util/List;", "", "toMutableList", "", "toSet", "(Lkotlin/sequences/Sequence;)Ljava/util/Set;", "flatMap", "flatMapTo", "groupBy", "groupByTo", "Lkotlin/collections/Grouping;", "groupingBy", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Lkotlin/collections/Grouping;", "map", "mapIndexed", "mapIndexedNotNull", "mapIndexedNotNullTo", "mapIndexedTo", "mapNotNull", "mapNotNullTo", "mapTo", "Lkotlin/collections/IndexedValue;", "withIndex", "distinct", "distinctBy", "", "toMutableSet", NavigationDbConstants.TB_COLUMN_FREQUENCY_RULE_POSITION_ALL, "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Z", Languages.ANY, "(Lkotlin/sequences/Sequence;)Z", "count", "(Lkotlin/sequences/Sequence;)I", "initial", "acc", "operation", "fold", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "Lkotlin/Function3;", "foldIndexed", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "", "action", "forEach", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)V", "forEachIndexed", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)V", "", "max", "(Lkotlin/sequences/Sequence;)Ljava/lang/Double;", "", "(Lkotlin/sequences/Sequence;)Ljava/lang/Float;", "(Lkotlin/sequences/Sequence;)Ljava/lang/Comparable;", "maxBy", "maxWith", "(Lkotlin/sequences/Sequence;Ljava/util/Comparator;)Ljava/lang/Object;", "min", "minBy", "minWith", "none", "onEach", "S", "reduce", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "reduceIndexed", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "reduceOrNull", "scan", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Lkotlin/sequences/Sequence;", "scanIndexed", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Lkotlin/sequences/Sequence;", "scanReduce", "scanReduceIndexed", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function3;)Lkotlin/sequences/Sequence;", "sumBy", "sumByDouble", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)D", "requireNoNulls", ApkDownloadTable.FIELD_SIZE, "chunked", "(Lkotlin/sequences/Sequence;ILkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;", "minus", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;)Lkotlin/sequences/Sequence;", "", "elements", "(Lkotlin/sequences/Sequence;[Ljava/lang/Object;)Lkotlin/sequences/Sequence;", "", "(Lkotlin/sequences/Sequence;Ljava/lang/Iterable;)Lkotlin/sequences/Sequence;", "(Lkotlin/sequences/Sequence;Lkotlin/sequences/Sequence;)Lkotlin/sequences/Sequence;", "minusElement", "partition", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Lkotlin/Pair;", "plus", "plusElement", "step", "partialWindows", "windowed", "(Lkotlin/sequences/Sequence;IIZ)Lkotlin/sequences/Sequence;", "(Lkotlin/sequences/Sequence;IIZLkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;", "other", "zip", a.a, "b", "(Lkotlin/sequences/Sequence;Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)Lkotlin/sequences/Sequence;", "zipWithNext", "Ljava/lang/Appendable;", "Lkotlin/text/Appendable;", "A", "buffer", "", "separator", "prefix", "postfix", "limit", "truncated", "joinTo", "(Lkotlin/sequences/Sequence;Ljava/lang/Appendable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Appendable;", "", "joinToString", "(Lkotlin/sequences/Sequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/String;", "asIterable", "(Lkotlin/sequences/Sequence;)Ljava/lang/Iterable;", "asSequence", "", "averageOfByte", "(Lkotlin/sequences/Sequence;)D", "average", "", "averageOfShort", "averageOfInt", "", "averageOfLong", "averageOfFloat", "averageOfDouble", "sumOfByte", "sum", "sumOfShort", "sumOfInt", "sumOfLong", "(Lkotlin/sequences/Sequence;)J", "sumOfFloat", "(Lkotlin/sequences/Sequence;)F", "sumOfDouble", "kotlin-stdlib"}, k = 5, mv = {1, 4, 0}, xs = "kotlin/sequences/SequencesKt")
/* loaded from: classes11.dex */
public class SequencesKt___SequencesKt extends SequencesKt___SequencesJvmKt {
    public static final <T> boolean all(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, Boolean> function1) {
        Iterator<? extends T> it = sequence.iterator();
        while (it.hasNext()) {
            if (!function1.invoke((T) it.next()).booleanValue()) {
                return false;
            }
        }
        return true;
    }

    public static final <T> boolean any(@NotNull Sequence<? extends T> sequence) {
        return sequence.iterator().hasNext();
    }

    @NotNull
    public static <T> Iterable<T> asIterable(@NotNull Sequence<? extends T> sequence) {
        return new SequencesKt___SequencesKt$asIterable$$inlined$Iterable$1(sequence);
    }

    /* JADX WARN: Multi-variable type inference failed */
    @InlineOnly
    private static final <T> Sequence<T> asSequence(@NotNull Sequence<? extends T> sequence) {
        return sequence;
    }

    @NotNull
    public static final <T, K, V> Map<K, V> associate(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, ? extends Pair<? extends K, ? extends V>> function1) {
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        Iterator<? extends T> it = sequence.iterator();
        while (it.hasNext()) {
            Pair<? extends K, ? extends V> invoke = function1.invoke((T) it.next());
            linkedHashMap.put(invoke.getFirst(), invoke.getSecond());
        }
        return linkedHashMap;
    }

    @NotNull
    public static final <T, K> Map<K, T> associateBy(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, ? extends K> function1) {
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        Iterator<? extends T> it = sequence.iterator();
        while (it.hasNext()) {
            Object obj = (T) it.next();
            linkedHashMap.put(function1.invoke(obj), obj);
        }
        return linkedHashMap;
    }

    @NotNull
    public static final <T, K, M extends Map<? super K, ? super T>> M associateByTo(@NotNull Sequence<? extends T> sequence, @NotNull M m2, @NotNull Function1<? super T, ? extends K> function1) {
        Iterator<? extends T> it = sequence.iterator();
        while (it.hasNext()) {
            Object obj = (T) it.next();
            m2.put(function1.invoke(obj), obj);
        }
        return m2;
    }

    @NotNull
    public static final <T, K, V, M extends Map<? super K, ? super V>> M associateTo(@NotNull Sequence<? extends T> sequence, @NotNull M m2, @NotNull Function1<? super T, ? extends Pair<? extends K, ? extends V>> function1) {
        Iterator<? extends T> it = sequence.iterator();
        while (it.hasNext()) {
            Pair<? extends K, ? extends V> invoke = function1.invoke((T) it.next());
            m2.put(invoke.getFirst(), invoke.getSecond());
        }
        return m2;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @SinceKotlin(version = "1.3")
    @NotNull
    public static final <K, V> Map<K, V> associateWith(@NotNull Sequence<? extends K> sequence, @NotNull Function1<? super K, ? extends V> function1) {
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        Iterator<? extends K> it = sequence.iterator();
        while (it.hasNext()) {
            Object obj = (K) it.next();
            linkedHashMap.put(obj, function1.invoke(obj));
        }
        return linkedHashMap;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @SinceKotlin(version = "1.3")
    @NotNull
    public static final <K, V, M extends Map<? super K, ? super V>> M associateWithTo(@NotNull Sequence<? extends K> sequence, @NotNull M m2, @NotNull Function1<? super K, ? extends V> function1) {
        Iterator<? extends K> it = sequence.iterator();
        while (it.hasNext()) {
            Object obj = (K) it.next();
            m2.put(obj, function1.invoke(obj));
        }
        return m2;
    }

    @JvmName(name = "averageOfByte")
    public static final double averageOfByte(@NotNull Sequence<Byte> sequence) {
        Iterator<Byte> it = sequence.iterator();
        double d = 0.0d;
        int i2 = 0;
        while (it.hasNext()) {
            double byteValue = it.next().byteValue();
            Double.isNaN(byteValue);
            d += byteValue;
            i2++;
            if (i2 < 0) {
                CollectionsKt__CollectionsKt.throwCountOverflow();
            }
        }
        if (i2 == 0) {
            return DoubleCompanionObject.INSTANCE.getNaN();
        }
        double d2 = i2;
        Double.isNaN(d2);
        return d / d2;
    }

    @JvmName(name = "averageOfDouble")
    public static final double averageOfDouble(@NotNull Sequence<Double> sequence) {
        Iterator<Double> it = sequence.iterator();
        double d = 0.0d;
        int i2 = 0;
        while (it.hasNext()) {
            d += it.next().doubleValue();
            i2++;
            if (i2 < 0) {
                CollectionsKt__CollectionsKt.throwCountOverflow();
            }
        }
        if (i2 == 0) {
            return DoubleCompanionObject.INSTANCE.getNaN();
        }
        double d2 = i2;
        Double.isNaN(d2);
        return d / d2;
    }

    @JvmName(name = "averageOfFloat")
    public static final double averageOfFloat(@NotNull Sequence<Float> sequence) {
        Iterator<Float> it = sequence.iterator();
        double d = 0.0d;
        int i2 = 0;
        while (it.hasNext()) {
            double floatValue = it.next().floatValue();
            Double.isNaN(floatValue);
            d += floatValue;
            i2++;
            if (i2 < 0) {
                CollectionsKt__CollectionsKt.throwCountOverflow();
            }
        }
        if (i2 == 0) {
            return DoubleCompanionObject.INSTANCE.getNaN();
        }
        double d2 = i2;
        Double.isNaN(d2);
        return d / d2;
    }

    @JvmName(name = "averageOfInt")
    public static final double averageOfInt(@NotNull Sequence<Integer> sequence) {
        Iterator<Integer> it = sequence.iterator();
        double d = 0.0d;
        int i2 = 0;
        while (it.hasNext()) {
            double intValue = it.next().intValue();
            Double.isNaN(intValue);
            d += intValue;
            i2++;
            if (i2 < 0) {
                CollectionsKt__CollectionsKt.throwCountOverflow();
            }
        }
        if (i2 == 0) {
            return DoubleCompanionObject.INSTANCE.getNaN();
        }
        double d2 = i2;
        Double.isNaN(d2);
        return d / d2;
    }

    @JvmName(name = "averageOfLong")
    public static final double averageOfLong(@NotNull Sequence<Long> sequence) {
        Iterator<Long> it = sequence.iterator();
        double d = 0.0d;
        int i2 = 0;
        while (it.hasNext()) {
            double longValue = it.next().longValue();
            Double.isNaN(longValue);
            d += longValue;
            i2++;
            if (i2 < 0) {
                CollectionsKt__CollectionsKt.throwCountOverflow();
            }
        }
        if (i2 == 0) {
            return DoubleCompanionObject.INSTANCE.getNaN();
        }
        double d2 = i2;
        Double.isNaN(d2);
        return d / d2;
    }

    @JvmName(name = "averageOfShort")
    public static final double averageOfShort(@NotNull Sequence<Short> sequence) {
        Iterator<Short> it = sequence.iterator();
        double d = 0.0d;
        int i2 = 0;
        while (it.hasNext()) {
            double shortValue = it.next().shortValue();
            Double.isNaN(shortValue);
            d += shortValue;
            i2++;
            if (i2 < 0) {
                CollectionsKt__CollectionsKt.throwCountOverflow();
            }
        }
        if (i2 == 0) {
            return DoubleCompanionObject.INSTANCE.getNaN();
        }
        double d2 = i2;
        Double.isNaN(d2);
        return d / d2;
    }

    @SinceKotlin(version = "1.2")
    @NotNull
    public static final <T> Sequence<List<T>> chunked(@NotNull Sequence<? extends T> sequence, int i2) {
        return windowed(sequence, i2, i2, true);
    }

    public static final <T> boolean contains(@NotNull Sequence<? extends T> sequence, T t) {
        return indexOf(sequence, t) >= 0;
    }

    public static final <T> int count(@NotNull Sequence<? extends T> sequence) {
        Iterator<? extends T> it = sequence.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            it.next();
            i2++;
            if (i2 < 0) {
                CollectionsKt__CollectionsKt.throwCountOverflow();
            }
        }
        return i2;
    }

    @NotNull
    public static final <T> Sequence<T> distinct(@NotNull Sequence<? extends T> sequence) {
        return distinctBy(sequence, new Function1<T, T>() { // from class: kotlin.sequences.SequencesKt___SequencesKt$distinct$1
            @Override // kotlin.jvm.functions.Function1
            public final T invoke(T t) {
                return t;
            }
        });
    }

    @NotNull
    public static final <T, K> Sequence<T> distinctBy(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, ? extends K> function1) {
        return new DistinctSequence(sequence, function1);
    }

    /* JADX WARN: Multi-variable type inference failed */
    @NotNull
    public static final <T> Sequence<T> drop(@NotNull Sequence<? extends T> sequence, int i2) {
        if (i2 >= 0) {
            return i2 == 0 ? sequence : sequence instanceof DropTakeSequence ? ((DropTakeSequence) sequence).drop(i2) : new DropSequence(sequence, i2);
        }
        throw new IllegalArgumentException(("Requested element count " + i2 + " is less than zero.").toString());
    }

    @NotNull
    public static final <T> Sequence<T> dropWhile(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, Boolean> function1) {
        return new DropWhileSequence(sequence, function1);
    }

    public static final <T> T elementAt(@NotNull Sequence<? extends T> sequence, final int i2) {
        return (T) elementAtOrElse(sequence, i2, new Function1() { // from class: kotlin.sequences.SequencesKt___SequencesKt$elementAt$1
            /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
            {
                super(1);
            }

            @Override // kotlin.jvm.functions.Function1
            public /* bridge */ /* synthetic */ Object invoke(Object obj) {
                return invoke(((Number) obj).intValue());
            }

            @NotNull
            public final Void invoke(int i3) {
                throw new IndexOutOfBoundsException("Sequence doesn't contain element at index " + i2 + OrderISVUtil.MONEY_DECIMAL_CHAR);
            }
        });
    }

    public static final <T> T elementAtOrElse(@NotNull Sequence<? extends T> sequence, int i2, @NotNull Function1<? super Integer, ? extends T> function1) {
        if (i2 < 0) {
            return function1.invoke(Integer.valueOf(i2));
        }
        int i3 = 0;
        for (T t : sequence) {
            int i4 = i3 + 1;
            if (i2 == i3) {
                return t;
            }
            i3 = i4;
        }
        return function1.invoke(Integer.valueOf(i2));
    }

    @Nullable
    public static final <T> T elementAtOrNull(@NotNull Sequence<? extends T> sequence, int i2) {
        if (i2 < 0) {
            return null;
        }
        int i3 = 0;
        for (T t : sequence) {
            int i4 = i3 + 1;
            if (i2 == i3) {
                return t;
            }
            i3 = i4;
        }
        return null;
    }

    @NotNull
    public static final <T> Sequence<T> filter(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, Boolean> function1) {
        return new FilteringSequence(sequence, true, function1);
    }

    @NotNull
    public static final <T> Sequence<T> filterIndexed(@NotNull Sequence<? extends T> sequence, @NotNull final Function2<? super Integer, ? super T, Boolean> function2) {
        return new TransformingSequence(new FilteringSequence(new IndexingSequence(sequence), true, new Function1<IndexedValue<? extends T>, Boolean>() { // from class: kotlin.sequences.SequencesKt___SequencesKt$filterIndexed$1
            /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
            {
                super(1);
            }

            @Override // kotlin.jvm.functions.Function1
            public /* bridge */ /* synthetic */ Boolean invoke(Object obj) {
                return Boolean.valueOf(invoke((IndexedValue) ((IndexedValue) obj)));
            }

            public final boolean invoke(@NotNull IndexedValue<? extends T> indexedValue) {
                return ((Boolean) function2.invoke(Integer.valueOf(indexedValue.getIndex()), indexedValue.getValue())).booleanValue();
            }
        }), new Function1<IndexedValue<? extends T>, T>() { // from class: kotlin.sequences.SequencesKt___SequencesKt$filterIndexed$2
            @Override // kotlin.jvm.functions.Function1
            public /* bridge */ /* synthetic */ Object invoke(Object obj) {
                return invoke((IndexedValue) ((IndexedValue) obj));
            }

            public final T invoke(@NotNull IndexedValue<? extends T> indexedValue) {
                return indexedValue.getValue();
            }
        });
    }

    @NotNull
    public static final <T, C extends Collection<? super T>> C filterIndexedTo(@NotNull Sequence<? extends T> sequence, @NotNull C c2, @NotNull Function2<? super Integer, ? super T, Boolean> function2) {
        Iterator<? extends T> it = sequence.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            Object obj = (T) it.next();
            int i3 = i2 + 1;
            if (i2 < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            if (function2.invoke(Integer.valueOf(i2), obj).booleanValue()) {
                c2.add(obj);
            }
            i2 = i3;
        }
        return c2;
    }

    @NotNull
    public static final /* synthetic */ <R> Sequence<R> filterIsInstance(@NotNull Sequence<?> sequence) {
        Intrinsics.needClassReification();
        Sequence<R> filter = filter(sequence, new Function1<Object, Boolean>() { // from class: kotlin.sequences.SequencesKt___SequencesKt$filterIsInstance$1
            @Override // kotlin.jvm.functions.Function1
            public /* bridge */ /* synthetic */ Boolean invoke(Object obj) {
                return Boolean.valueOf(invoke2(obj));
            }

            /* renamed from: invoke */
            public final boolean invoke2(@Nullable Object obj) {
                Intrinsics.reifiedOperationMarker(3, "R");
                return obj instanceof Object;
            }
        });
        if (filter != null) {
            return filter;
        }
        throw new TypeCastException("null cannot be cast to non-null type kotlin.sequences.Sequence<R>");
    }

    @NotNull
    public static final /* synthetic */ <R, C extends Collection<? super R>> C filterIsInstanceTo(@NotNull Sequence<?> sequence, @NotNull C c2) {
        for (Object obj : sequence) {
            Intrinsics.reifiedOperationMarker(3, "R");
            if (obj instanceof Object) {
                c2.add(obj);
            }
        }
        return c2;
    }

    @NotNull
    public static final <T> Sequence<T> filterNot(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, Boolean> function1) {
        return new FilteringSequence(sequence, false, function1);
    }

    @NotNull
    public static final <T> Sequence<T> filterNotNull(@NotNull Sequence<? extends T> sequence) {
        Sequence<T> filterNot = filterNot(sequence, new Function1<T, Boolean>() { // from class: kotlin.sequences.SequencesKt___SequencesKt$filterNotNull$1
            /* JADX WARN: Multi-variable type inference failed */
            @Override // kotlin.jvm.functions.Function1
            public /* bridge */ /* synthetic */ Boolean invoke(Object obj) {
                return Boolean.valueOf(invoke2((SequencesKt___SequencesKt$filterNotNull$1<T>) obj));
            }

            /* renamed from: invoke */
            public final boolean invoke2(@Nullable T t) {
                return t == null;
            }
        });
        if (filterNot != null) {
            return filterNot;
        }
        throw new TypeCastException("null cannot be cast to non-null type kotlin.sequences.Sequence<T>");
    }

    @NotNull
    public static final <C extends Collection<? super T>, T> C filterNotNullTo(@NotNull Sequence<? extends T> sequence, @NotNull C c2) {
        for (T t : sequence) {
            if (t != null) {
                c2.add(t);
            }
        }
        return c2;
    }

    @NotNull
    public static final <T, C extends Collection<? super T>> C filterNotTo(@NotNull Sequence<? extends T> sequence, @NotNull C c2, @NotNull Function1<? super T, Boolean> function1) {
        Iterator<? extends T> it = sequence.iterator();
        while (it.hasNext()) {
            Object obj = (T) it.next();
            if (!function1.invoke(obj).booleanValue()) {
                c2.add(obj);
            }
        }
        return c2;
    }

    @NotNull
    public static final <T, C extends Collection<? super T>> C filterTo(@NotNull Sequence<? extends T> sequence, @NotNull C c2, @NotNull Function1<? super T, Boolean> function1) {
        Iterator<? extends T> it = sequence.iterator();
        while (it.hasNext()) {
            Object obj = (T) it.next();
            if (function1.invoke(obj).booleanValue()) {
                c2.add(obj);
            }
        }
        return c2;
    }

    /* JADX WARN: Type inference failed for: r0v2, types: [T, java.lang.Object] */
    @InlineOnly
    private static final <T> T find(@NotNull Sequence<? extends T> sequence, Function1<? super T, Boolean> function1) {
        for (T t : sequence) {
            if (function1.invoke(t).booleanValue()) {
                return t;
            }
        }
        return null;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @InlineOnly
    private static final <T> T findLast(@NotNull Sequence<? extends T> sequence, Function1<? super T, Boolean> function1) {
        T t = null;
        for (T t2 : sequence) {
            if (function1.invoke(t2).booleanValue()) {
                t = t2;
            }
        }
        return t;
    }

    public static final <T> T first(@NotNull Sequence<? extends T> sequence) {
        Iterator<? extends T> it = sequence.iterator();
        if (it.hasNext()) {
            return it.next();
        }
        throw new NoSuchElementException("Sequence is empty.");
    }

    @Nullable
    public static final <T> T firstOrNull(@NotNull Sequence<? extends T> sequence) {
        Iterator<? extends T> it = sequence.iterator();
        if (it.hasNext()) {
            return it.next();
        }
        return null;
    }

    @NotNull
    public static final <T, R> Sequence<R> flatMap(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, ? extends Sequence<? extends R>> function1) {
        return new FlatteningSequence(sequence, function1, new Function1<Sequence<? extends R>, Iterator<? extends R>>() { // from class: kotlin.sequences.SequencesKt___SequencesKt$flatMap$1
            @Override // kotlin.jvm.functions.Function1
            public /* bridge */ /* synthetic */ Object invoke(Object obj) {
                return invoke((Sequence) ((Sequence) obj));
            }

            @NotNull
            public final Iterator<R> invoke(@NotNull Sequence<? extends R> sequence2) {
                return (Iterator<? extends R>) sequence2.iterator();
            }
        });
    }

    @NotNull
    public static final <T, R, C extends Collection<? super R>> C flatMapTo(@NotNull Sequence<? extends T> sequence, @NotNull C c2, @NotNull Function1<? super T, ? extends Sequence<? extends R>> function1) {
        Iterator<? extends T> it = sequence.iterator();
        while (it.hasNext()) {
            CollectionsKt__MutableCollectionsKt.addAll(c2, function1.invoke((T) it.next()));
        }
        return c2;
    }

    public static final <T, R> R fold(@NotNull Sequence<? extends T> sequence, R r, @NotNull Function2<? super R, ? super T, ? extends R> function2) {
        Iterator<? extends T> it = sequence.iterator();
        while (it.hasNext()) {
            r = function2.invoke(r, (T) it.next());
        }
        return r;
    }

    public static final <T, R> R foldIndexed(@NotNull Sequence<? extends T> sequence, R r, @NotNull Function3<? super Integer, ? super R, ? super T, ? extends R> function3) {
        Iterator<? extends T> it = sequence.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            Object obj = (T) it.next();
            int i3 = i2 + 1;
            if (i2 < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            r = function3.invoke(Integer.valueOf(i2), r, obj);
            i2 = i3;
        }
        return r;
    }

    public static final <T> void forEach(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, Unit> function1) {
        Iterator<? extends T> it = sequence.iterator();
        while (it.hasNext()) {
            function1.invoke((T) it.next());
        }
    }

    public static final <T> void forEachIndexed(@NotNull Sequence<? extends T> sequence, @NotNull Function2<? super Integer, ? super T, Unit> function2) {
        Iterator<? extends T> it = sequence.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            Object obj = (T) it.next();
            int i3 = i2 + 1;
            if (i2 < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            function2.invoke(Integer.valueOf(i2), obj);
            i2 = i3;
        }
    }

    @NotNull
    public static final <T, K> Map<K, List<T>> groupBy(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, ? extends K> function1) {
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        Iterator<? extends T> it = sequence.iterator();
        while (it.hasNext()) {
            Object obj = (T) it.next();
            K invoke = function1.invoke(obj);
            Object obj2 = linkedHashMap.get(invoke);
            if (obj2 == null) {
                obj2 = new ArrayList();
                linkedHashMap.put(invoke, obj2);
            }
            ((List) obj2).add(obj);
        }
        return linkedHashMap;
    }

    @NotNull
    public static final <T, K, M extends Map<? super K, List<T>>> M groupByTo(@NotNull Sequence<? extends T> sequence, @NotNull M m2, @NotNull Function1<? super T, ? extends K> function1) {
        Iterator<? extends T> it = sequence.iterator();
        while (it.hasNext()) {
            Object obj = (T) it.next();
            K invoke = function1.invoke(obj);
            Object obj2 = m2.get(invoke);
            if (obj2 == null) {
                obj2 = new ArrayList();
                m2.put(invoke, obj2);
            }
            ((List) obj2).add(obj);
        }
        return m2;
    }

    @SinceKotlin(version = "1.1")
    @NotNull
    public static final <T, K> Grouping<T, K> groupingBy(@NotNull final Sequence<? extends T> sequence, @NotNull final Function1<? super T, ? extends K> function1) {
        return new Grouping<T, K>() { // from class: kotlin.sequences.SequencesKt___SequencesKt$groupingBy$1
            @Override // kotlin.collections.Grouping
            public K keyOf(T element) {
                return (K) function1.invoke(element);
            }

            @Override // kotlin.collections.Grouping
            @NotNull
            public Iterator<T> sourceIterator() {
                return sequence.iterator();
            }
        };
    }

    public static final <T> int indexOf(@NotNull Sequence<? extends T> sequence, T t) {
        int i2 = 0;
        for (T t2 : sequence) {
            if (i2 < 0) {
                CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            if (Intrinsics.areEqual(t, t2)) {
                return i2;
            }
            i2++;
        }
        return -1;
    }

    public static final <T> int indexOfFirst(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, Boolean> function1) {
        Iterator<? extends T> it = sequence.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            Object obj = (T) it.next();
            if (i2 < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            if (function1.invoke(obj).booleanValue()) {
                return i2;
            }
            i2++;
        }
        return -1;
    }

    public static final <T> int indexOfLast(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, Boolean> function1) {
        Iterator<? extends T> it = sequence.iterator();
        int i2 = -1;
        int i3 = 0;
        while (it.hasNext()) {
            Object obj = (T) it.next();
            if (i3 < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            if (function1.invoke(obj).booleanValue()) {
                i2 = i3;
            }
            i3++;
        }
        return i2;
    }

    @NotNull
    public static final <T, A extends Appendable> A joinTo(@NotNull Sequence<? extends T> sequence, @NotNull A a, @NotNull CharSequence charSequence, @NotNull CharSequence charSequence2, @NotNull CharSequence charSequence3, int i2, @NotNull CharSequence charSequence4, @Nullable Function1<? super T, ? extends CharSequence> function1) {
        a.append(charSequence2);
        int i3 = 0;
        for (T t : sequence) {
            i3++;
            if (i3 > 1) {
                a.append(charSequence);
            }
            if (i2 >= 0 && i3 > i2) {
                break;
            }
            StringsKt__AppendableKt.appendElement(a, t, function1);
        }
        if (i2 >= 0 && i3 > i2) {
            a.append(charSequence4);
        }
        a.append(charSequence3);
        return a;
    }

    @NotNull
    public static final <T> String joinToString(@NotNull Sequence<? extends T> sequence, @NotNull CharSequence charSequence, @NotNull CharSequence charSequence2, @NotNull CharSequence charSequence3, int i2, @NotNull CharSequence charSequence4, @Nullable Function1<? super T, ? extends CharSequence> function1) {
        String sb = ((StringBuilder) joinTo(sequence, new StringBuilder(), charSequence, charSequence2, charSequence3, i2, charSequence4, function1)).toString();
        Intrinsics.checkExpressionValueIsNotNull(sb, "joinTo(StringBuilder(), \u2026ed, transform).toString()");
        return sb;
    }

    public static /* synthetic */ String joinToString$default(Sequence sequence, CharSequence charSequence, CharSequence charSequence2, CharSequence charSequence3, int i2, CharSequence charSequence4, Function1 function1, int i3, Object obj) {
        if ((i3 & 1) != 0) {
            charSequence = ", ";
        }
        CharSequence charSequence5 = (i3 & 2) != 0 ? "" : charSequence2;
        CharSequence charSequence6 = (i3 & 4) == 0 ? charSequence3 : "";
        int i4 = (i3 & 8) != 0 ? -1 : i2;
        if ((i3 & 16) != 0) {
            charSequence4 = "...";
        }
        CharSequence charSequence7 = charSequence4;
        if ((i3 & 32) != 0) {
            function1 = null;
        }
        return joinToString(sequence, charSequence, charSequence5, charSequence6, i4, charSequence7, function1);
    }

    public static final <T> T last(@NotNull Sequence<? extends T> sequence) {
        Iterator<? extends T> it = sequence.iterator();
        if (it.hasNext()) {
            T next = it.next();
            while (it.hasNext()) {
                next = it.next();
            }
            return next;
        }
        throw new NoSuchElementException("Sequence is empty.");
    }

    public static final <T> int lastIndexOf(@NotNull Sequence<? extends T> sequence, T t) {
        int i2 = -1;
        int i3 = 0;
        for (T t2 : sequence) {
            if (i3 < 0) {
                CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            if (Intrinsics.areEqual(t, t2)) {
                i2 = i3;
            }
            i3++;
        }
        return i2;
    }

    @Nullable
    public static final <T> T lastOrNull(@NotNull Sequence<? extends T> sequence) {
        Iterator<? extends T> it = sequence.iterator();
        if (it.hasNext()) {
            T next = it.next();
            while (it.hasNext()) {
                next = it.next();
            }
            return next;
        }
        return null;
    }

    @NotNull
    public static <T, R> Sequence<R> map(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, ? extends R> function1) {
        return new TransformingSequence(sequence, function1);
    }

    @NotNull
    public static final <T, R> Sequence<R> mapIndexed(@NotNull Sequence<? extends T> sequence, @NotNull Function2<? super Integer, ? super T, ? extends R> function2) {
        return new TransformingIndexedSequence(sequence, function2);
    }

    @NotNull
    public static final <T, R> Sequence<R> mapIndexedNotNull(@NotNull Sequence<? extends T> sequence, @NotNull Function2<? super Integer, ? super T, ? extends R> function2) {
        return filterNotNull(new TransformingIndexedSequence(sequence, function2));
    }

    @NotNull
    public static final <T, R, C extends Collection<? super R>> C mapIndexedNotNullTo(@NotNull Sequence<? extends T> sequence, @NotNull C c2, @NotNull Function2<? super Integer, ? super T, ? extends R> function2) {
        Iterator<? extends T> it = sequence.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            Object obj = (T) it.next();
            int i3 = i2 + 1;
            if (i2 < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            R invoke = function2.invoke(Integer.valueOf(i2), obj);
            if (invoke != null) {
                c2.add(invoke);
            }
            i2 = i3;
        }
        return c2;
    }

    @NotNull
    public static final <T, R, C extends Collection<? super R>> C mapIndexedTo(@NotNull Sequence<? extends T> sequence, @NotNull C c2, @NotNull Function2<? super Integer, ? super T, ? extends R> function2) {
        Iterator<? extends T> it = sequence.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            Object obj = (T) it.next();
            int i3 = i2 + 1;
            if (i2 < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Index overflow has happened.");
                }
                CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            c2.add(function2.invoke(Integer.valueOf(i2), obj));
            i2 = i3;
        }
        return c2;
    }

    @NotNull
    public static final <T, R> Sequence<R> mapNotNull(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, ? extends R> function1) {
        return filterNotNull(new TransformingSequence(sequence, function1));
    }

    @NotNull
    public static final <T, R, C extends Collection<? super R>> C mapNotNullTo(@NotNull Sequence<? extends T> sequence, @NotNull C c2, @NotNull Function1<? super T, ? extends R> function1) {
        Iterator<? extends T> it = sequence.iterator();
        while (it.hasNext()) {
            R invoke = function1.invoke((T) it.next());
            if (invoke != null) {
                c2.add(invoke);
            }
        }
        return c2;
    }

    @NotNull
    public static final <T, R, C extends Collection<? super R>> C mapTo(@NotNull Sequence<? extends T> sequence, @NotNull C c2, @NotNull Function1<? super T, ? extends R> function1) {
        Iterator<? extends T> it = sequence.iterator();
        while (it.hasNext()) {
            c2.add(function1.invoke((T) it.next()));
        }
        return c2;
    }

    @SinceKotlin(version = "1.1")
    @Nullable
    /* renamed from: max */
    public static final Double m1154max(@NotNull Sequence<Double> sequence) {
        Iterator<Double> it = sequence.iterator();
        if (it.hasNext()) {
            double doubleValue = it.next().doubleValue();
            if (Double.isNaN(doubleValue)) {
                return Double.valueOf(doubleValue);
            }
            while (it.hasNext()) {
                double doubleValue2 = it.next().doubleValue();
                if (Double.isNaN(doubleValue2)) {
                    return Double.valueOf(doubleValue2);
                }
                if (doubleValue < doubleValue2) {
                    doubleValue = doubleValue2;
                }
            }
            return Double.valueOf(doubleValue);
        }
        return null;
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r0v1, types: [T, java.lang.Object] */
    /* JADX WARN: Type inference failed for: r0v2 */
    /* JADX WARN: Type inference failed for: r0v3, types: [T] */
    /* JADX WARN: Type inference failed for: r0v8 */
    /* JADX WARN: Type inference failed for: r0v9 */
    @Nullable
    public static final <T, R extends Comparable<? super R>> T maxBy(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, ? extends R> function1) {
        Iterator<? extends T> it = sequence.iterator();
        if (it.hasNext()) {
            T next = it.next();
            if (it.hasNext()) {
                R invoke = function1.invoke(next);
                do {
                    T next2 = it.next();
                    R invoke2 = function1.invoke(next2);
                    next = next;
                    if (invoke.compareTo(invoke2) < 0) {
                        invoke = invoke2;
                        next = next2;
                    }
                } while (it.hasNext());
                return (T) next;
            }
            return next;
        }
        return null;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @Nullable
    public static final <T> T maxWith(@NotNull Sequence<? extends T> sequence, @NotNull Comparator<? super T> comparator) {
        Iterator<? extends T> it = sequence.iterator();
        if (it.hasNext()) {
            Object obj = (T) it.next();
            while (it.hasNext()) {
                T next = it.next();
                if (comparator.compare(obj, next) < 0) {
                    obj = next;
                }
            }
            return (T) obj;
        }
        return null;
    }

    @SinceKotlin(version = "1.1")
    @Nullable
    /* renamed from: min */
    public static final Double m1156min(@NotNull Sequence<Double> sequence) {
        Iterator<Double> it = sequence.iterator();
        if (it.hasNext()) {
            double doubleValue = it.next().doubleValue();
            if (Double.isNaN(doubleValue)) {
                return Double.valueOf(doubleValue);
            }
            while (it.hasNext()) {
                double doubleValue2 = it.next().doubleValue();
                if (Double.isNaN(doubleValue2)) {
                    return Double.valueOf(doubleValue2);
                }
                if (doubleValue > doubleValue2) {
                    doubleValue = doubleValue2;
                }
            }
            return Double.valueOf(doubleValue);
        }
        return null;
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r0v1, types: [T, java.lang.Object] */
    /* JADX WARN: Type inference failed for: r0v2 */
    /* JADX WARN: Type inference failed for: r0v3, types: [T] */
    /* JADX WARN: Type inference failed for: r0v8 */
    /* JADX WARN: Type inference failed for: r0v9 */
    @Nullable
    public static final <T, R extends Comparable<? super R>> T minBy(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, ? extends R> function1) {
        Iterator<? extends T> it = sequence.iterator();
        if (it.hasNext()) {
            T next = it.next();
            if (it.hasNext()) {
                R invoke = function1.invoke(next);
                do {
                    T next2 = it.next();
                    R invoke2 = function1.invoke(next2);
                    next = next;
                    if (invoke.compareTo(invoke2) > 0) {
                        invoke = invoke2;
                        next = next2;
                    }
                } while (it.hasNext());
                return (T) next;
            }
            return next;
        }
        return null;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @Nullable
    public static final <T> T minWith(@NotNull Sequence<? extends T> sequence, @NotNull Comparator<? super T> comparator) {
        Iterator<? extends T> it = sequence.iterator();
        if (it.hasNext()) {
            Object obj = (T) it.next();
            while (it.hasNext()) {
                T next = it.next();
                if (comparator.compare(obj, next) > 0) {
                    obj = next;
                }
            }
            return (T) obj;
        }
        return null;
    }

    @NotNull
    public static final <T> Sequence<T> minus(@NotNull Sequence<? extends T> sequence, T t) {
        return new SequencesKt___SequencesKt$minus$1(sequence, t);
    }

    @InlineOnly
    private static final <T> Sequence<T> minusElement(@NotNull Sequence<? extends T> sequence, T t) {
        return minus(sequence, t);
    }

    public static final <T> boolean none(@NotNull Sequence<? extends T> sequence) {
        return !sequence.iterator().hasNext();
    }

    @SinceKotlin(version = "1.1")
    @NotNull
    public static final <T> Sequence<T> onEach(@NotNull Sequence<? extends T> sequence, @NotNull final Function1<? super T, Unit> function1) {
        Sequence<T> map;
        map = map(sequence, new Function1<T, T>() { // from class: kotlin.sequences.SequencesKt___SequencesKt$onEach$1
            /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
            {
                super(1);
            }

            @Override // kotlin.jvm.functions.Function1
            public final T invoke(T t) {
                function1.invoke(t);
                return t;
            }
        });
        return map;
    }

    @NotNull
    public static final <T> Pair<List<T>, List<T>> partition(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, Boolean> function1) {
        ArrayList arrayList = new ArrayList();
        ArrayList arrayList2 = new ArrayList();
        Iterator<? extends T> it = sequence.iterator();
        while (it.hasNext()) {
            Object obj = (T) it.next();
            if (function1.invoke(obj).booleanValue()) {
                arrayList.add(obj);
            } else {
                arrayList2.add(obj);
            }
        }
        return new Pair<>(arrayList, arrayList2);
    }

    @NotNull
    public static final <T> Sequence<T> plus(@NotNull Sequence<? extends T> sequence, T t) {
        return SequencesKt__SequencesKt.flatten(SequencesKt__SequencesKt.sequenceOf(sequence, SequencesKt__SequencesKt.sequenceOf(t)));
    }

    @InlineOnly
    private static final <T> Sequence<T> plusElement(@NotNull Sequence<? extends T> sequence, T t) {
        return plus(sequence, t);
    }

    public static final <S, T extends S> S reduce(@NotNull Sequence<? extends T> sequence, @NotNull Function2<? super S, ? super T, ? extends S> function2) {
        Iterator<? extends T> it = sequence.iterator();
        if (it.hasNext()) {
            S next = it.next();
            while (it.hasNext()) {
                next = function2.invoke(next, (T) it.next());
            }
            return (S) next;
        }
        throw new UnsupportedOperationException("Empty sequence can't be reduced.");
    }

    public static final <S, T extends S> S reduceIndexed(@NotNull Sequence<? extends T> sequence, @NotNull Function3<? super Integer, ? super S, ? super T, ? extends S> function3) {
        Iterator<? extends T> it = sequence.iterator();
        if (it.hasNext()) {
            S next = it.next();
            int i2 = 1;
            while (it.hasNext()) {
                int i3 = i2 + 1;
                if (i2 < 0) {
                    if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                        throw new ArithmeticException("Index overflow has happened.");
                    }
                    CollectionsKt__CollectionsKt.throwIndexOverflow();
                }
                next = function3.invoke(Integer.valueOf(i2), next, (T) it.next());
                i2 = i3;
            }
            return (S) next;
        }
        throw new UnsupportedOperationException("Empty sequence can't be reduced.");
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @Nullable
    public static final <S, T extends S> S reduceOrNull(@NotNull Sequence<? extends T> sequence, @NotNull Function2<? super S, ? super T, ? extends S> function2) {
        Iterator<? extends T> it = sequence.iterator();
        if (it.hasNext()) {
            S next = it.next();
            while (it.hasNext()) {
                next = function2.invoke(next, (T) it.next());
            }
            return (S) next;
        }
        return null;
    }

    @NotNull
    public static final <T> Sequence<T> requireNoNulls(@NotNull final Sequence<? extends T> sequence) {
        Sequence<T> map;
        map = map(sequence, new Function1<T, T>() { // from class: kotlin.sequences.SequencesKt___SequencesKt$requireNoNulls$1
            /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
            {
                super(1);
            }

            @Override // kotlin.jvm.functions.Function1
            @NotNull
            public final T invoke(@Nullable T t) {
                if (t != null) {
                    return t;
                }
                throw new IllegalArgumentException("null element found in " + sequence + OrderISVUtil.MONEY_DECIMAL_CHAR);
            }
        });
        return map;
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @NotNull
    public static final <T, R> Sequence<R> scan(@NotNull Sequence<? extends T> sequence, R r, @NotNull Function2<? super R, ? super T, ? extends R> function2) {
        Sequence<R> sequence2;
        sequence2 = SequencesKt__SequenceBuilderKt.sequence(new SequencesKt___SequencesKt$scan$1(sequence, r, function2, null));
        return sequence2;
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @NotNull
    public static final <T, R> Sequence<R> scanIndexed(@NotNull Sequence<? extends T> sequence, R r, @NotNull Function3<? super Integer, ? super R, ? super T, ? extends R> function3) {
        Sequence<R> sequence2;
        sequence2 = SequencesKt__SequenceBuilderKt.sequence(new SequencesKt___SequencesKt$scanIndexed$1(sequence, r, function3, null));
        return sequence2;
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @NotNull
    public static final <S, T extends S> Sequence<S> scanReduce(@NotNull Sequence<? extends T> sequence, @NotNull Function2<? super S, ? super T, ? extends S> function2) {
        Sequence<S> sequence2;
        sequence2 = SequencesKt__SequenceBuilderKt.sequence(new SequencesKt___SequencesKt$scanReduce$1(sequence, function2, null));
        return sequence2;
    }

    @SinceKotlin(version = "1.3")
    @ExperimentalStdlibApi
    @NotNull
    public static final <S, T extends S> Sequence<S> scanReduceIndexed(@NotNull Sequence<? extends T> sequence, @NotNull Function3<? super Integer, ? super S, ? super T, ? extends S> function3) {
        Sequence<S> sequence2;
        sequence2 = SequencesKt__SequenceBuilderKt.sequence(new SequencesKt___SequencesKt$scanReduceIndexed$1(sequence, function3, null));
        return sequence2;
    }

    public static final <T> T single(@NotNull Sequence<? extends T> sequence) {
        Iterator<? extends T> it = sequence.iterator();
        if (it.hasNext()) {
            T next = it.next();
            if (it.hasNext()) {
                throw new IllegalArgumentException("Sequence has more than one element.");
            }
            return next;
        }
        throw new NoSuchElementException("Sequence is empty.");
    }

    @Nullable
    public static final <T> T singleOrNull(@NotNull Sequence<? extends T> sequence) {
        Iterator<? extends T> it = sequence.iterator();
        if (it.hasNext()) {
            T next = it.next();
            if (it.hasNext()) {
                return null;
            }
            return next;
        }
        return null;
    }

    @NotNull
    public static final <T extends Comparable<? super T>> Sequence<T> sorted(@NotNull final Sequence<? extends T> sequence) {
        return (Sequence<T>) new Sequence<T>() { // from class: kotlin.sequences.SequencesKt___SequencesKt$sorted$1
            @Override // kotlin.sequences.Sequence
            @NotNull
            public Iterator<T> iterator() {
                List mutableList = SequencesKt___SequencesKt.toMutableList(sequence);
                CollectionsKt__MutableCollectionsJVMKt.sort(mutableList);
                return mutableList.iterator();
            }
        };
    }

    @NotNull
    public static final <T, R extends Comparable<? super R>> Sequence<T> sortedBy(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, ? extends R> function1) {
        return sortedWith(sequence, new ComparisonsKt__ComparisonsKt$compareBy$2(function1));
    }

    @NotNull
    public static final <T, R extends Comparable<? super R>> Sequence<T> sortedByDescending(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, ? extends R> function1) {
        return sortedWith(sequence, new ComparisonsKt__ComparisonsKt$compareByDescending$1(function1));
    }

    @NotNull
    public static final <T extends Comparable<? super T>> Sequence<T> sortedDescending(@NotNull Sequence<? extends T> sequence) {
        Comparator reverseOrder;
        reverseOrder = ComparisonsKt__ComparisonsKt.reverseOrder();
        return sortedWith(sequence, reverseOrder);
    }

    @NotNull
    public static final <T> Sequence<T> sortedWith(@NotNull final Sequence<? extends T> sequence, @NotNull final Comparator<? super T> comparator) {
        return new Sequence<T>() { // from class: kotlin.sequences.SequencesKt___SequencesKt$sortedWith$1
            @Override // kotlin.sequences.Sequence
            @NotNull
            public Iterator<T> iterator() {
                List mutableList = SequencesKt___SequencesKt.toMutableList(sequence);
                CollectionsKt__MutableCollectionsJVMKt.sortWith(mutableList, comparator);
                return mutableList.iterator();
            }
        };
    }

    public static final <T> int sumBy(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, Integer> function1) {
        Iterator<? extends T> it = sequence.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            i2 += function1.invoke((T) it.next()).intValue();
        }
        return i2;
    }

    public static final <T> double sumByDouble(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, Double> function1) {
        Iterator<? extends T> it = sequence.iterator();
        double d = 0.0d;
        while (it.hasNext()) {
            d += function1.invoke((T) it.next()).doubleValue();
        }
        return d;
    }

    @JvmName(name = "sumOfByte")
    public static final int sumOfByte(@NotNull Sequence<Byte> sequence) {
        Iterator<Byte> it = sequence.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            i2 += it.next().byteValue();
        }
        return i2;
    }

    @JvmName(name = "sumOfDouble")
    public static final double sumOfDouble(@NotNull Sequence<Double> sequence) {
        Iterator<Double> it = sequence.iterator();
        double d = 0.0d;
        while (it.hasNext()) {
            d += it.next().doubleValue();
        }
        return d;
    }

    @JvmName(name = "sumOfFloat")
    public static final float sumOfFloat(@NotNull Sequence<Float> sequence) {
        Iterator<Float> it = sequence.iterator();
        float f2 = 0.0f;
        while (it.hasNext()) {
            f2 += it.next().floatValue();
        }
        return f2;
    }

    @JvmName(name = "sumOfInt")
    public static final int sumOfInt(@NotNull Sequence<Integer> sequence) {
        Iterator<Integer> it = sequence.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            i2 += it.next().intValue();
        }
        return i2;
    }

    @JvmName(name = "sumOfLong")
    public static final long sumOfLong(@NotNull Sequence<Long> sequence) {
        Iterator<Long> it = sequence.iterator();
        long j2 = 0;
        while (it.hasNext()) {
            j2 += it.next().longValue();
        }
        return j2;
    }

    @JvmName(name = "sumOfShort")
    public static final int sumOfShort(@NotNull Sequence<Short> sequence) {
        Iterator<Short> it = sequence.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            i2 += it.next().shortValue();
        }
        return i2;
    }

    @NotNull
    public static final <T> Sequence<T> take(@NotNull Sequence<? extends T> sequence, int i2) {
        Sequence<T> emptySequence;
        if (i2 >= 0) {
            if (i2 != 0) {
                return sequence instanceof DropTakeSequence ? ((DropTakeSequence) sequence).take(i2) : new TakeSequence(sequence, i2);
            }
            emptySequence = SequencesKt__SequencesKt.emptySequence();
            return emptySequence;
        }
        throw new IllegalArgumentException(("Requested element count " + i2 + " is less than zero.").toString());
    }

    @NotNull
    public static final <T> Sequence<T> takeWhile(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, Boolean> function1) {
        return new TakeWhileSequence(sequence, function1);
    }

    @NotNull
    public static final <T, C extends Collection<? super T>> C toCollection(@NotNull Sequence<? extends T> sequence, @NotNull C c2) {
        Iterator<? extends T> it = sequence.iterator();
        while (it.hasNext()) {
            c2.add(it.next());
        }
        return c2;
    }

    @NotNull
    public static <T> HashSet<T> toHashSet(@NotNull Sequence<? extends T> sequence) {
        return (HashSet) toCollection(sequence, new HashSet());
    }

    @NotNull
    public static <T> List<T> toList(@NotNull Sequence<? extends T> sequence) {
        List<T> optimizeReadOnlyList;
        optimizeReadOnlyList = CollectionsKt__CollectionsKt.optimizeReadOnlyList(toMutableList(sequence));
        return optimizeReadOnlyList;
    }

    @NotNull
    public static final <T> List<T> toMutableList(@NotNull Sequence<? extends T> sequence) {
        return (List) toCollection(sequence, new ArrayList());
    }

    @NotNull
    public static final <T> Set<T> toMutableSet(@NotNull Sequence<? extends T> sequence) {
        LinkedHashSet linkedHashSet = new LinkedHashSet();
        Iterator<? extends T> it = sequence.iterator();
        while (it.hasNext()) {
            linkedHashSet.add(it.next());
        }
        return linkedHashSet;
    }

    @NotNull
    public static final <T> Set<T> toSet(@NotNull Sequence<? extends T> sequence) {
        Set<T> optimizeReadOnlySet;
        optimizeReadOnlySet = SetsKt__SetsKt.optimizeReadOnlySet((Set) toCollection(sequence, new LinkedHashSet()));
        return optimizeReadOnlySet;
    }

    @SinceKotlin(version = "1.2")
    @NotNull
    public static final <T> Sequence<List<T>> windowed(@NotNull Sequence<? extends T> sequence, int i2, int i3, boolean z) {
        return SlidingWindowKt.windowedSequence(sequence, i2, i3, z, false);
    }

    public static /* synthetic */ Sequence windowed$default(Sequence sequence, int i2, int i3, boolean z, int i4, Object obj) {
        if ((i4 & 2) != 0) {
            i3 = 1;
        }
        if ((i4 & 4) != 0) {
            z = false;
        }
        return windowed(sequence, i2, i3, z);
    }

    @NotNull
    public static final <T> Sequence<IndexedValue<T>> withIndex(@NotNull Sequence<? extends T> sequence) {
        return new IndexingSequence(sequence);
    }

    @NotNull
    public static final <T, R> Sequence<Pair<T, R>> zip(@NotNull Sequence<? extends T> sequence, @NotNull Sequence<? extends R> sequence2) {
        return new MergingSequence(sequence, sequence2, new Function2<T, R, Pair<? extends T, ? extends R>>() { // from class: kotlin.sequences.SequencesKt___SequencesKt$zip$1
            /* JADX WARN: Multi-variable type inference failed */
            @Override // kotlin.jvm.functions.Function2
            public /* bridge */ /* synthetic */ Object invoke(Object obj, Object obj2) {
                return invoke((SequencesKt___SequencesKt$zip$1<R, T>) obj, obj2);
            }

            @Override // kotlin.jvm.functions.Function2
            @NotNull
            public final Pair<T, R> invoke(T t, R r) {
                return TuplesKt.to(t, r);
            }
        });
    }

    @SinceKotlin(version = "1.2")
    @NotNull
    public static final <T> Sequence<Pair<T, T>> zipWithNext(@NotNull Sequence<? extends T> sequence) {
        return zipWithNext(sequence, new Function2<T, T, Pair<? extends T, ? extends T>>() { // from class: kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$1
            @Override // kotlin.jvm.functions.Function2
            @NotNull
            public final Pair<T, T> invoke(T t, T t2) {
                return TuplesKt.to(t, t2);
            }
        });
    }

    public static final <T> boolean any(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, Boolean> function1) {
        Iterator<? extends T> it = sequence.iterator();
        while (it.hasNext()) {
            if (function1.invoke((T) it.next()).booleanValue()) {
                return true;
            }
        }
        return false;
    }

    @SinceKotlin(version = "1.2")
    @NotNull
    public static final <T, R> Sequence<R> chunked(@NotNull Sequence<? extends T> sequence, int i2, @NotNull Function1<? super List<? extends T>, ? extends R> function1) {
        return windowed(sequence, i2, i2, true, function1);
    }

    public static final <T> int count(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, Boolean> function1) {
        Iterator<? extends T> it = sequence.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            if (function1.invoke((T) it.next()).booleanValue() && (i2 = i2 + 1) < 0) {
                if (!PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0)) {
                    throw new ArithmeticException("Count overflow has happened.");
                }
                CollectionsKt__CollectionsKt.throwCountOverflow();
            }
        }
        return i2;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @NotNull
    public static final <T> Sequence<T> minus(@NotNull final Sequence<? extends T> sequence, @NotNull final T[] tArr) {
        return tArr.length == 0 ? sequence : new Sequence<T>() { // from class: kotlin.sequences.SequencesKt___SequencesKt$minus$2
            /*  JADX ERROR: Method code generation error
                jadx.core.utils.exceptions.CodegenException: Error generate insn: 0x0015: RETURN 
                  (wrap: java.util.Iterator<T> : 0x0011: INVOKE 
                  (wrap: kotlin.sequences.Sequence : 0x000d: INVOKE 
                  (wrap: kotlin.sequences.Sequence : 0x0006: IGET (r3v0 'this' kotlin.sequences.SequencesKt___SequencesKt$minus$2<T> A[IMMUTABLE_TYPE, THIS]) A[WRAPPED] (LINE:2) kotlin.sequences.SequencesKt___SequencesKt$minus$2.$this_minus kotlin.sequences.Sequence)
                  (wrap: kotlin.jvm.functions.Function1<T, java.lang.Boolean> : 0x000a: CONSTRUCTOR (r0 I:java.util.HashSet A[DONT_GENERATE, DONT_INLINE, REMOVE]) A[GenericInfoAttr{[T, java.lang.Boolean], explicit=false}, MD:(java.util.HashSet):void (m), WRAPPED] call: kotlin.sequences.SequencesKt___SequencesKt$minus$2$iterator$1.<init>(java.util.HashSet):void type: CONSTRUCTOR)
                 type: STATIC call: kotlin.sequences.SequencesKt___SequencesKt.filterNot(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1):kotlin.sequences.Sequence A[MD:<T>:(kotlin.sequences.Sequence<? extends T>, kotlin.jvm.functions.Function1<? super T, java.lang.Boolean>):kotlin.sequences.Sequence<T> (m), WRAPPED] (LINE:2))
                 type: INTERFACE call: kotlin.sequences.Sequence.iterator():java.util.Iterator A[MD:():java.util.Iterator<T> (m), WRAPPED] (LINE:2))
                 (LINE:2) in method: kotlin.sequences.SequencesKt___SequencesKt$minus$2.iterator():java.util.Iterator<T>, file: classes11.dex
                	at jadx.core.codegen.InsnGen.makeInsn(InsnGen.java:309)
                	at jadx.core.codegen.InsnGen.makeInsn(InsnGen.java:272)
                	at jadx.core.codegen.RegionGen.makeSimpleBlock(RegionGen.java:91)
                	at jadx.core.dex.nodes.IBlock.generate(IBlock.java:15)
                	at jadx.core.codegen.RegionGen.makeRegion(RegionGen.java:63)
                	at jadx.core.dex.regions.Region.generate(Region.java:35)
                	at jadx.core.codegen.RegionGen.makeRegion(RegionGen.java:63)
                	at jadx.core.codegen.MethodGen.addRegionInsns(MethodGen.java:297)
                	at jadx.core.codegen.MethodGen.addInstructions(MethodGen.java:276)
                	at jadx.core.codegen.ClassGen.addMethodCode(ClassGen.java:382)
                	at jadx.core.codegen.ClassGen.addMethod(ClassGen.java:311)
                Caused by: java.lang.NullPointerException
                	at jadx.core.codegen.InsnGen.inlineAnonymousConstructor(InsnGen.java:798)
                	at jadx.core.codegen.InsnGen.makeConstructor(InsnGen.java:718)
                	at jadx.core.codegen.InsnGen.makeInsnBody(InsnGen.java:417)
                	at jadx.core.codegen.InsnGen.addWrappedArg(InsnGen.java:144)
                	at jadx.core.codegen.InsnGen.addArg(InsnGen.java:120)
                	at jadx.core.codegen.InsnGen.addArg(InsnGen.java:107)
                	at jadx.core.codegen.InsnGen.generateMethodArguments(InsnGen.java:1105)
                	at jadx.core.codegen.InsnGen.makeInvoke(InsnGen.java:872)
                	at jadx.core.codegen.InsnGen.makeInsnBody(InsnGen.java:421)
                	at jadx.core.codegen.InsnGen.addWrappedArg(InsnGen.java:144)
                	at jadx.core.codegen.InsnGen.addArg(InsnGen.java:120)
                	at jadx.core.codegen.InsnGen.addArg(InsnGen.java:107)
                	at jadx.core.codegen.InsnGen.addArgDot(InsnGen.java:96)
                	at jadx.core.codegen.InsnGen.makeInvoke(InsnGen.java:840)
                	at jadx.core.codegen.InsnGen.makeInsnBody(InsnGen.java:421)
                	at jadx.core.codegen.InsnGen.addWrappedArg(InsnGen.java:144)
                	at jadx.core.codegen.InsnGen.addArg(InsnGen.java:120)
                	at jadx.core.codegen.InsnGen.addArg(InsnGen.java:107)
                	at jadx.core.codegen.InsnGen.makeInsnBody(InsnGen.java:367)
                	at jadx.core.codegen.InsnGen.makeInsn(InsnGen.java:302)
                	... 10 more
                */
            @Override // kotlin.sequences.Sequence
            @org.jetbrains.annotations.NotNull
            public java.util.Iterator<T> iterator() {
                /*
                    r3 = this;
                    java.lang.Object[] r0 = r2
                    java.util.HashSet r0 = kotlin.collections.ArraysKt.toHashSet(r0)
                    kotlin.sequences.Sequence r1 = r1
                    kotlin.sequences.SequencesKt___SequencesKt$minus$2$iterator$1 r2 = new kotlin.sequences.SequencesKt___SequencesKt$minus$2$iterator$1
                    r2.<init>()
                    kotlin.sequences.Sequence r0 = kotlin.sequences.SequencesKt___SequencesKt.filterNot(r1, r2)
                    java.util.Iterator r0 = r0.iterator()
                    return r0
                */
                throw new UnsupportedOperationException("Method not decompiled: kotlin.sequences.SequencesKt___SequencesKt$minus$2.iterator():java.util.Iterator");
            }
        };
    }

    public static final <T> boolean none(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, Boolean> function1) {
        Iterator<? extends T> it = sequence.iterator();
        while (it.hasNext()) {
            if (function1.invoke((T) it.next()).booleanValue()) {
                return false;
            }
        }
        return true;
    }

    @NotNull
    public static final <T> Sequence<T> plus(@NotNull Sequence<? extends T> sequence, @NotNull T[] tArr) {
        List asList;
        asList = ArraysKt___ArraysJvmKt.asList(tArr);
        return plus((Sequence) sequence, (Iterable) asList);
    }

    @SinceKotlin(version = "1.2")
    @NotNull
    public static final <T, R> Sequence<R> windowed(@NotNull Sequence<? extends T> sequence, int i2, int i3, boolean z, @NotNull Function1<? super List<? extends T>, ? extends R> function1) {
        Sequence<R> map;
        map = map(SlidingWindowKt.windowedSequence(sequence, i2, i3, z, true), function1);
        return map;
    }

    public static /* synthetic */ Sequence windowed$default(Sequence sequence, int i2, int i3, boolean z, Function1 function1, int i4, Object obj) {
        if ((i4 & 2) != 0) {
            i3 = 1;
        }
        if ((i4 & 4) != 0) {
            z = false;
        }
        return windowed(sequence, i2, i3, z, function1);
    }

    @NotNull
    public static final <T, R, V> Sequence<V> zip(@NotNull Sequence<? extends T> sequence, @NotNull Sequence<? extends R> sequence2, @NotNull Function2<? super T, ? super R, ? extends V> function2) {
        return new MergingSequence(sequence, sequence2, function2);
    }

    @SinceKotlin(version = "1.2")
    @NotNull
    public static final <T, R> Sequence<R> zipWithNext(@NotNull Sequence<? extends T> sequence, @NotNull Function2<? super T, ? super T, ? extends R> function2) {
        Sequence<R> sequence2;
        sequence2 = SequencesKt__SequenceBuilderKt.sequence(new SequencesKt___SequencesKt$zipWithNext$2(sequence, function2, null));
        return sequence2;
    }

    @NotNull
    public static final <T, K, V, M extends Map<? super K, ? super V>> M associateByTo(@NotNull Sequence<? extends T> sequence, @NotNull M m2, @NotNull Function1<? super T, ? extends K> function1, @NotNull Function1<? super T, ? extends V> function12) {
        Iterator<? extends T> it = sequence.iterator();
        while (it.hasNext()) {
            Object obj = (T) it.next();
            m2.put(function1.invoke(obj), function12.invoke(obj));
        }
        return m2;
    }

    @NotNull
    public static final <T> Sequence<T> plus(@NotNull Sequence<? extends T> sequence, @NotNull Iterable<? extends T> iterable) {
        Sequence asSequence;
        asSequence = CollectionsKt___CollectionsKt.asSequence(iterable);
        return SequencesKt__SequencesKt.flatten(SequencesKt__SequencesKt.sequenceOf(sequence, asSequence));
    }

    @NotNull
    public static final <T, K, V> Map<K, V> associateBy(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, ? extends K> function1, @NotNull Function1<? super T, ? extends V> function12) {
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        Iterator<? extends T> it = sequence.iterator();
        while (it.hasNext()) {
            Object obj = (T) it.next();
            linkedHashMap.put(function1.invoke(obj), function12.invoke(obj));
        }
        return linkedHashMap;
    }

    /* JADX WARN: Type inference failed for: r0v1, types: [T, java.lang.Object] */
    @Nullable
    public static final <T> T firstOrNull(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, Boolean> function1) {
        for (T t : sequence) {
            if (function1.invoke(t).booleanValue()) {
                return t;
            }
        }
        return null;
    }

    @NotNull
    public static final <T> Sequence<T> minus(@NotNull final Sequence<? extends T> sequence, @NotNull final Iterable<? extends T> iterable) {
        return new Sequence<T>() { // from class: kotlin.sequences.SequencesKt___SequencesKt$minus$3
            @Override // kotlin.sequences.Sequence
            @NotNull
            public Iterator<T> iterator() {
                final Collection convertToSetForSetOperation;
                convertToSetForSetOperation = CollectionsKt__IterablesKt.convertToSetForSetOperation(iterable);
                if (convertToSetForSetOperation.isEmpty()) {
                    return sequence.iterator();
                }
                return SequencesKt___SequencesKt.filterNot(sequence, new Function1<T, Boolean>() { // from class: kotlin.sequences.SequencesKt___SequencesKt$minus$3$iterator$1
                    /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
                    {
                        super(1);
                    }

                    /* JADX WARN: Multi-variable type inference failed */
                    @Override // kotlin.jvm.functions.Function1
                    public /* bridge */ /* synthetic */ Boolean invoke(Object obj) {
                        return Boolean.valueOf(invoke2((SequencesKt___SequencesKt$minus$3$iterator$1<T>) obj));
                    }

                    /* renamed from: invoke */
                    public final boolean invoke2(T t) {
                        return convertToSetForSetOperation.contains(t);
                    }
                }).iterator();
            }
        };
    }

    @NotNull
    public static final <T> Sequence<T> plus(@NotNull Sequence<? extends T> sequence, @NotNull Sequence<? extends T> sequence2) {
        return SequencesKt__SequencesKt.flatten(SequencesKt__SequencesKt.sequenceOf(sequence, sequence2));
    }

    /* JADX WARN: Type inference failed for: r0v1, types: [T, java.lang.Object] */
    public static final <T> T first(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, Boolean> function1) {
        for (T t : sequence) {
            if (function1.invoke(t).booleanValue()) {
                return t;
            }
        }
        throw new NoSuchElementException("Sequence contains no element matching the predicate.");
    }

    @NotNull
    public static final <T> Sequence<T> minus(@NotNull final Sequence<? extends T> sequence, @NotNull final Sequence<? extends T> sequence2) {
        return new Sequence<T>() { // from class: kotlin.sequences.SequencesKt___SequencesKt$minus$4
            @Override // kotlin.sequences.Sequence
            @NotNull
            public Iterator<T> iterator() {
                final HashSet hashSet;
                hashSet = SequencesKt___SequencesKt.toHashSet(sequence2);
                if (hashSet.isEmpty()) {
                    return sequence.iterator();
                }
                return SequencesKt___SequencesKt.filterNot(sequence, new Function1<T, Boolean>() { // from class: kotlin.sequences.SequencesKt___SequencesKt$minus$4$iterator$1
                    /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
                    {
                        super(1);
                    }

                    /* JADX WARN: Multi-variable type inference failed */
                    @Override // kotlin.jvm.functions.Function1
                    public /* bridge */ /* synthetic */ Boolean invoke(Object obj) {
                        return Boolean.valueOf(invoke2((SequencesKt___SequencesKt$minus$4$iterator$1<T>) obj));
                    }

                    /* renamed from: invoke */
                    public final boolean invoke2(T t) {
                        return hashSet.contains(t);
                    }
                }).iterator();
            }
        };
    }

    /* JADX WARN: Multi-variable type inference failed */
    @Nullable
    public static final <T> T singleOrNull(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, Boolean> function1) {
        boolean z = false;
        T t = null;
        for (T t2 : sequence) {
            if (function1.invoke(t2).booleanValue()) {
                if (z) {
                    return null;
                }
                z = true;
                t = t2;
            }
        }
        if (z) {
            return t;
        }
        return null;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @Nullable
    public static final <T> T lastOrNull(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, Boolean> function1) {
        T t = null;
        for (T t2 : sequence) {
            if (function1.invoke(t2).booleanValue()) {
                t = t2;
            }
        }
        return t;
    }

    /* JADX WARN: Multi-variable type inference failed */
    public static final <T> T last(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, Boolean> function1) {
        T t = null;
        boolean z = false;
        for (T t2 : sequence) {
            if (function1.invoke(t2).booleanValue()) {
                t = t2;
                z = true;
            }
        }
        if (z) {
            return t;
        }
        throw new NoSuchElementException("Sequence contains no element matching the predicate.");
    }

    /* JADX WARN: Multi-variable type inference failed */
    public static final <T> T single(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, Boolean> function1) {
        T t = null;
        boolean z = false;
        for (T t2 : sequence) {
            if (function1.invoke(t2).booleanValue()) {
                if (z) {
                    throw new IllegalArgumentException("Sequence contains more than one matching element.");
                }
                t = t2;
                z = true;
            }
        }
        if (z) {
            return t;
        }
        throw new NoSuchElementException("Sequence contains no element matching the predicate.");
    }

    /* JADX WARN: Multi-variable type inference failed */
    @NotNull
    public static final <T, K, V, M extends Map<? super K, List<V>>> M groupByTo(@NotNull Sequence<? extends T> sequence, @NotNull M m2, @NotNull Function1<? super T, ? extends K> function1, @NotNull Function1<? super T, ? extends V> function12) {
        Iterator<? extends T> it = sequence.iterator();
        while (it.hasNext()) {
            Object obj = (T) it.next();
            K invoke = function1.invoke(obj);
            Object obj2 = m2.get(invoke);
            if (obj2 == null) {
                obj2 = new ArrayList();
                m2.put(invoke, obj2);
            }
            ((List) obj2).add(function12.invoke(obj));
        }
        return m2;
    }

    @NotNull
    public static final <T, K, V> Map<K, List<V>> groupBy(@NotNull Sequence<? extends T> sequence, @NotNull Function1<? super T, ? extends K> function1, @NotNull Function1<? super T, ? extends V> function12) {
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        Iterator<? extends T> it = sequence.iterator();
        while (it.hasNext()) {
            Object obj = (T) it.next();
            K invoke = function1.invoke(obj);
            List<V> list = linkedHashMap.get(invoke);
            if (list == null) {
                list = new ArrayList<>();
                linkedHashMap.put(invoke, list);
            }
            list.add(function12.invoke(obj));
        }
        return linkedHashMap;
    }

    @SinceKotlin(version = "1.1")
    @Nullable
    /* renamed from: max */
    public static final Float m1155max(@NotNull Sequence<Float> sequence) {
        Iterator<Float> it = sequence.iterator();
        if (it.hasNext()) {
            float floatValue = it.next().floatValue();
            if (Float.isNaN(floatValue)) {
                return Float.valueOf(floatValue);
            }
            while (it.hasNext()) {
                float floatValue2 = it.next().floatValue();
                if (Float.isNaN(floatValue2)) {
                    return Float.valueOf(floatValue2);
                }
                if (floatValue < floatValue2) {
                    floatValue = floatValue2;
                }
            }
            return Float.valueOf(floatValue);
        }
        return null;
    }

    @SinceKotlin(version = "1.1")
    @Nullable
    /* renamed from: min */
    public static final Float m1157min(@NotNull Sequence<Float> sequence) {
        Iterator<Float> it = sequence.iterator();
        if (it.hasNext()) {
            float floatValue = it.next().floatValue();
            if (Float.isNaN(floatValue)) {
                return Float.valueOf(floatValue);
            }
            while (it.hasNext()) {
                float floatValue2 = it.next().floatValue();
                if (Float.isNaN(floatValue2)) {
                    return Float.valueOf(floatValue2);
                }
                if (floatValue > floatValue2) {
                    floatValue = floatValue2;
                }
            }
            return Float.valueOf(floatValue);
        }
        return null;
    }

    @Nullable
    public static final <T extends Comparable<? super T>> T max(@NotNull Sequence<? extends T> sequence) {
        Iterator<? extends T> it = sequence.iterator();
        if (it.hasNext()) {
            T next = it.next();
            while (it.hasNext()) {
                T next2 = it.next();
                if (next.compareTo(next2) < 0) {
                    next = next2;
                }
            }
            return next;
        }
        return null;
    }

    @Nullable
    public static final <T extends Comparable<? super T>> T min(@NotNull Sequence<? extends T> sequence) {
        Iterator<? extends T> it = sequence.iterator();
        if (it.hasNext()) {
            T next = it.next();
            while (it.hasNext()) {
                T next2 = it.next();
                if (next.compareTo(next2) > 0) {
                    next = next2;
                }
            }
            return next;
        }
        return null;
    }
}
